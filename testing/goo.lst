     1                                  ;;; prologue-1.asm
     2                                  ;;; The first part of the standard prologue for compiled programs
     3                                  ;;;
     4                                  ;;; Programmer: Mayer Goldberg, 2023
     5                                  
     6                                  %define T_void 				0
     7                                  %define T_nil 				1
     8                                  %define T_char 				2
     9                                  %define T_string 			3
    10                                  %define T_closure 			4
    11                                  %define T_undefined			5
    12                                  %define T_boolean 			8
    13                                  %define T_boolean_false 		(T_boolean | 1)
    14                                  %define T_boolean_true 			(T_boolean | 2)
    15                                  %define T_number 			16
    16                                  %define T_integer			(T_number | 1)
    17                                  %define T_fraction 			(T_number | 2)
    18                                  %define T_real 				(T_number | 3)
    19                                  %define T_collection 			32
    20                                  %define T_pair 				(T_collection | 1)
    21                                  %define T_vector 			(T_collection | 2)
    22                                  %define T_symbol 			64
    23                                  %define T_interned_symbol		(T_symbol | 1)
    24                                  %define T_uninterned_symbol		(T_symbol | 2)
    25                                  
    26                                  %define SOB_CHAR_VALUE(reg) 		byte [reg + 1]
    27                                  %define SOB_PAIR_CAR(reg)		qword [reg + 1]
    28                                  %define SOB_PAIR_CDR(reg)		qword [reg + 1 + 8]
    29                                  %define SOB_STRING_LENGTH(reg)		qword [reg + 1]
    30                                  %define SOB_VECTOR_LENGTH(reg)		qword [reg + 1]
    31                                  %define SOB_CLOSURE_ENV(reg)		qword [reg + 1]
    32                                  %define SOB_CLOSURE_CODE(reg)		qword [reg + 1 + 8]
    33                                  
    34                                  %define OLD_RBP 			qword [rbp]
    35                                  %define RET_ADDR 			qword [rbp + 8 * 1]
    36                                  %define ENV 				qword [rbp + 8 * 2]
    37                                  %define COUNT 				qword [rbp + 8 * 3]
    38                                  %define PARAM(n) 			qword [rbp + 8 * (4 + n)]
    39                                  %define AND_KILL_FRAME(n)		(8 * (2 + n))
    40                                  
    41                                  %define MAGIC				496351
    42                                  
    43                                  %macro ENTER 0
    44                                  	enter 0, 0
    45                                  	and rsp, ~15
    46                                  %endmacro
    47                                  
    48                                  %macro LEAVE 0
    49                                  	leave
    50                                  %endmacro
    51                                  
    52                                  %macro assert_type 2
    53                                          cmp byte [%1], %2
    54                                          jne L_error_incorrect_type
    55                                  %endmacro
    56                                  
    57                                  %define assert_void(reg)		assert_type reg, T_void
    58                                  %define assert_nil(reg)			assert_type reg, T_nil
    59                                  %define assert_char(reg)		assert_type reg, T_char
    60                                  %define assert_string(reg)		assert_type reg, T_string
    61                                  %define assert_symbol(reg)		assert_type reg, T_symbol
    62                                  %define assert_interned_symbol(reg)	assert_type reg, T_interned_symbol
    63                                  %define assert_uninterned_symbol(reg)	assert_type reg, T_uninterned_symbol
    64                                  %define assert_closure(reg)		assert_type reg, T_closure
    65                                  %define assert_boolean(reg)		assert_type reg, T_boolean
    66                                  %define assert_integer(reg)		assert_type reg, T_integer
    67                                  %define assert_fraction(reg)		assert_type reg, T_fraction
    68                                  %define assert_real(reg)		assert_type reg, T_real
    69                                  %define assert_pair(reg)		assert_type reg, T_pair
    70                                  %define assert_vector(reg)		assert_type reg, T_vector
    71                                  
    72                                  %define sob_void			(L_constants + 0)
    73                                  %define sob_nil				(L_constants + 1)
    74                                  %define sob_boolean_false		(L_constants + 2)
    75                                  %define sob_boolean_true		(L_constants + 3)
    76                                  %define sob_char_nul			(L_constants + 4)
    77                                  
    78                                  %define bytes(n)			(n)
    79                                  %define kbytes(n) 			(bytes(n) << 10)
    80                                  %define mbytes(n) 			(kbytes(n) << 10)
    81                                  %define gbytes(n) 			(mbytes(n) << 10)
    82                                  
    83                                  section .data
    84                                  L_constants:
    85                                  	; L_constants + 0:
    86 00000000 00                      	db T_void
    87                                  	; L_constants + 1:
    88 00000001 01                      	db T_nil
    89                                  	; L_constants + 2:
    90 00000002 09                      	db T_boolean_false
    91                                  	; L_constants + 3:
    92 00000003 0A                      	db T_boolean_true
    93                                  	; L_constants + 4:
    94 00000004 0200                    	db T_char, 0x00	; #\nul
    95                                  	; L_constants + 6:
    96 00000006 03                      	db T_string	; "null?"
    97 00000007 0500000000000000        	dq 5
    98 0000000F 6E756C6C3F              	db 0x6E, 0x75, 0x6C, 0x6C, 0x3F
    99                                  	; L_constants + 20:
   100 00000014 03                      	db T_string	; "pair?"
   101 00000015 0500000000000000        	dq 5
   102 0000001D 706169723F              	db 0x70, 0x61, 0x69, 0x72, 0x3F
   103                                  	; L_constants + 34:
   104 00000022 03                      	db T_string	; "void?"
   105 00000023 0500000000000000        	dq 5
   106 0000002B 766F69643F              	db 0x76, 0x6F, 0x69, 0x64, 0x3F
   107                                  	; L_constants + 48:
   108 00000030 03                      	db T_string	; "char?"
   109 00000031 0500000000000000        	dq 5
   110 00000039 636861723F              	db 0x63, 0x68, 0x61, 0x72, 0x3F
   111                                  	; L_constants + 62:
   112 0000003E 03                      	db T_string	; "string?"
   113 0000003F 0700000000000000        	dq 7
   114 00000047 737472696E673F          	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x3F
   115                                  	; L_constants + 78:
   116 0000004E 03                      	db T_string	; "interned-symbol?"
   117 0000004F 1000000000000000        	dq 16
   118 00000057 696E7465726E6564        	db 0x69, 0x6E, 0x74, 0x65, 0x72, 0x6E, 0x65, 0x64
   119 0000005F 2D73796D626F6C3F        	db 0x2D, 0x73, 0x79, 0x6D, 0x62, 0x6F, 0x6C, 0x3F
   120                                  	; L_constants + 103:
   121 00000067 03                      	db T_string	; "vector?"
   122 00000068 0700000000000000        	dq 7
   123 00000070 766563746F723F          	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x3F
   124                                  	; L_constants + 119:
   125 00000077 03                      	db T_string	; "procedure?"
   126 00000078 0A00000000000000        	dq 10
   127 00000080 70726F6365647572        	db 0x70, 0x72, 0x6F, 0x63, 0x65, 0x64, 0x75, 0x72
   128 00000088 653F                    	db 0x65, 0x3F
   129                                  	; L_constants + 138:
   130 0000008A 03                      	db T_string	; "real?"
   131 0000008B 0500000000000000        	dq 5
   132 00000093 7265616C3F              	db 0x72, 0x65, 0x61, 0x6C, 0x3F
   133                                  	; L_constants + 152:
   134 00000098 03                      	db T_string	; "fraction?"
   135 00000099 0900000000000000        	dq 9
   136 000000A1 6672616374696F6E        	db 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E
   137 000000A9 3F                      	db 0x3F
   138                                  	; L_constants + 170:
   139 000000AA 03                      	db T_string	; "boolean?"
   140 000000AB 0800000000000000        	dq 8
   141 000000B3 626F6F6C65616E3F        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x3F
   142                                  	; L_constants + 187:
   143 000000BB 03                      	db T_string	; "number?"
   144 000000BC 0700000000000000        	dq 7
   145 000000C4 6E756D6265723F          	db 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72, 0x3F
   146                                  	; L_constants + 203:
   147 000000CB 03                      	db T_string	; "collection?"
   148 000000CC 0B00000000000000        	dq 11
   149 000000D4 636F6C6C65637469        	db 0x63, 0x6F, 0x6C, 0x6C, 0x65, 0x63, 0x74, 0x69
   150 000000DC 6F6E3F                  	db 0x6F, 0x6E, 0x3F
   151                                  	; L_constants + 223:
   152 000000DF 03                      	db T_string	; "cons"
   153 000000E0 0400000000000000        	dq 4
   154 000000E8 636F6E73                	db 0x63, 0x6F, 0x6E, 0x73
   155                                  	; L_constants + 236:
   156 000000EC 03                      	db T_string	; "display-sexpr"
   157 000000ED 0D00000000000000        	dq 13
   158 000000F5 646973706C61792D        	db 0x64, 0x69, 0x73, 0x70, 0x6C, 0x61, 0x79, 0x2D
   159 000000FD 7365787072              	db 0x73, 0x65, 0x78, 0x70, 0x72
   160                                  	; L_constants + 258:
   161 00000102 03                      	db T_string	; "write-char"
   162 00000103 0A00000000000000        	dq 10
   163 0000010B 77726974652D6368        	db 0x77, 0x72, 0x69, 0x74, 0x65, 0x2D, 0x63, 0x68
   164 00000113 6172                    	db 0x61, 0x72
   165                                  	; L_constants + 277:
   166 00000115 03                      	db T_string	; "car"
   167 00000116 0300000000000000        	dq 3
   168 0000011E 636172                  	db 0x63, 0x61, 0x72
   169                                  	; L_constants + 289:
   170 00000121 03                      	db T_string	; "cdr"
   171 00000122 0300000000000000        	dq 3
   172 0000012A 636472                  	db 0x63, 0x64, 0x72
   173                                  	; L_constants + 301:
   174 0000012D 03                      	db T_string	; "string-length"
   175 0000012E 0D00000000000000        	dq 13
   176 00000136 737472696E672D6C        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x6C
   177 0000013E 656E677468              	db 0x65, 0x6E, 0x67, 0x74, 0x68
   178                                  	; L_constants + 323:
   179 00000143 03                      	db T_string	; "vector-length"
   180 00000144 0D00000000000000        	dq 13
   181 0000014C 766563746F722D6C        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x6C
   182 00000154 656E677468              	db 0x65, 0x6E, 0x67, 0x74, 0x68
   183                                  	; L_constants + 345:
   184 00000159 03                      	db T_string	; "real->integer"
   185 0000015A 0D00000000000000        	dq 13
   186 00000162 7265616C2D3E696E        	db 0x72, 0x65, 0x61, 0x6C, 0x2D, 0x3E, 0x69, 0x6E
   187 0000016A 7465676572              	db 0x74, 0x65, 0x67, 0x65, 0x72
   188                                  	; L_constants + 367:
   189 0000016F 03                      	db T_string	; "exit"
   190 00000170 0400000000000000        	dq 4
   191 00000178 65786974                	db 0x65, 0x78, 0x69, 0x74
   192                                  	; L_constants + 380:
   193 0000017C 03                      	db T_string	; "integer->real"
   194 0000017D 0D00000000000000        	dq 13
   195 00000185 696E74656765722D        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x2D
   196 0000018D 3E7265616C              	db 0x3E, 0x72, 0x65, 0x61, 0x6C
   197                                  	; L_constants + 402:
   198 00000192 03                      	db T_string	; "fraction->real"
   199 00000193 0E00000000000000        	dq 14
   200 0000019B 6672616374696F6E        	db 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E
   201 000001A3 2D3E7265616C            	db 0x2D, 0x3E, 0x72, 0x65, 0x61, 0x6C
   202                                  	; L_constants + 425:
   203 000001A9 03                      	db T_string	; "char->integer"
   204 000001AA 0D00000000000000        	dq 13
   205 000001B2 636861722D3E696E        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x3E, 0x69, 0x6E
   206 000001BA 7465676572              	db 0x74, 0x65, 0x67, 0x65, 0x72
   207                                  	; L_constants + 447:
   208 000001BF 03                      	db T_string	; "integer->char"
   209 000001C0 0D00000000000000        	dq 13
   210 000001C8 696E74656765722D        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x2D
   211 000001D0 3E63686172              	db 0x3E, 0x63, 0x68, 0x61, 0x72
   212                                  	; L_constants + 469:
   213 000001D5 03                      	db T_string	; "trng"
   214 000001D6 0400000000000000        	dq 4
   215 000001DE 74726E67                	db 0x74, 0x72, 0x6E, 0x67
   216                                  	; L_constants + 482:
   217 000001E2 03                      	db T_string	; "zero?"
   218 000001E3 0500000000000000        	dq 5
   219 000001EB 7A65726F3F              	db 0x7A, 0x65, 0x72, 0x6F, 0x3F
   220                                  	; L_constants + 496:
   221 000001F0 03                      	db T_string	; "integer?"
   222 000001F1 0800000000000000        	dq 8
   223 000001F9 696E74656765723F        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x3F
   224                                  	; L_constants + 513:
   225 00000201 03                      	db T_string	; "__bin-apply"
   226 00000202 0B00000000000000        	dq 11
   227 0000020A 5F5F62696E2D6170        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x70
   228 00000212 706C79                  	db 0x70, 0x6C, 0x79
   229                                  	; L_constants + 533:
   230 00000215 03                      	db T_string	; "__bin-add-rr"
   231 00000216 0C00000000000000        	dq 12
   232 0000021E 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   233 00000226 642D7272                	db 0x64, 0x2D, 0x72, 0x72
   234                                  	; L_constants + 554:
   235 0000022A 03                      	db T_string	; "__bin-sub-rr"
   236 0000022B 0C00000000000000        	dq 12
   237 00000233 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   238 0000023B 622D7272                	db 0x62, 0x2D, 0x72, 0x72
   239                                  	; L_constants + 575:
   240 0000023F 03                      	db T_string	; "__bin-mul-rr"
   241 00000240 0C00000000000000        	dq 12
   242 00000248 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   243 00000250 6C2D7272                	db 0x6C, 0x2D, 0x72, 0x72
   244                                  	; L_constants + 596:
   245 00000254 03                      	db T_string	; "__bin-div-rr"
   246 00000255 0C00000000000000        	dq 12
   247 0000025D 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   248 00000265 762D7272                	db 0x76, 0x2D, 0x72, 0x72
   249                                  	; L_constants + 617:
   250 00000269 03                      	db T_string	; "__bin-add-qq"
   251 0000026A 0C00000000000000        	dq 12
   252 00000272 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   253 0000027A 642D7171                	db 0x64, 0x2D, 0x71, 0x71
   254                                  	; L_constants + 638:
   255 0000027E 03                      	db T_string	; "__bin-sub-qq"
   256 0000027F 0C00000000000000        	dq 12
   257 00000287 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   258 0000028F 622D7171                	db 0x62, 0x2D, 0x71, 0x71
   259                                  	; L_constants + 659:
   260 00000293 03                      	db T_string	; "__bin-mul-qq"
   261 00000294 0C00000000000000        	dq 12
   262 0000029C 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   263 000002A4 6C2D7171                	db 0x6C, 0x2D, 0x71, 0x71
   264                                  	; L_constants + 680:
   265 000002A8 03                      	db T_string	; "__bin-div-qq"
   266 000002A9 0C00000000000000        	dq 12
   267 000002B1 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   268 000002B9 762D7171                	db 0x76, 0x2D, 0x71, 0x71
   269                                  	; L_constants + 701:
   270 000002BD 03                      	db T_string	; "__bin-add-zz"
   271 000002BE 0C00000000000000        	dq 12
   272 000002C6 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   273 000002CE 642D7A7A                	db 0x64, 0x2D, 0x7A, 0x7A
   274                                  	; L_constants + 722:
   275 000002D2 03                      	db T_string	; "__bin-sub-zz"
   276 000002D3 0C00000000000000        	dq 12
   277 000002DB 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   278 000002E3 622D7A7A                	db 0x62, 0x2D, 0x7A, 0x7A
   279                                  	; L_constants + 743:
   280 000002E7 03                      	db T_string	; "__bin-mul-zz"
   281 000002E8 0C00000000000000        	dq 12
   282 000002F0 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   283 000002F8 6C2D7A7A                	db 0x6C, 0x2D, 0x7A, 0x7A
   284                                  	; L_constants + 764:
   285 000002FC 03                      	db T_string	; "__bin-div-zz"
   286 000002FD 0C00000000000000        	dq 12
   287 00000305 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   288 0000030D 762D7A7A                	db 0x76, 0x2D, 0x7A, 0x7A
   289                                  	; L_constants + 785:
   290 00000311 03                      	db T_string	; "error"
   291 00000312 0500000000000000        	dq 5
   292 0000031A 6572726F72              	db 0x65, 0x72, 0x72, 0x6F, 0x72
   293                                  	; L_constants + 799:
   294 0000031F 03                      	db T_string	; "__bin-less-than-rr"
   295 00000320 1200000000000000        	dq 18
   296 00000328 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   297 00000330 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   298 00000338 7272                    	db 0x72, 0x72
   299                                  	; L_constants + 826:
   300 0000033A 03                      	db T_string	; "__bin-less-than-qq"
   301 0000033B 1200000000000000        	dq 18
   302 00000343 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   303 0000034B 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   304 00000353 7171                    	db 0x71, 0x71
   305                                  	; L_constants + 853:
   306 00000355 03                      	db T_string	; "__bin-less-than-zz"
   307 00000356 1200000000000000        	dq 18
   308 0000035E 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   309 00000366 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   310 0000036E 7A7A                    	db 0x7A, 0x7A
   311                                  	; L_constants + 880:
   312 00000370 03                      	db T_string	; "__bin-equal-rr"
   313 00000371 0E00000000000000        	dq 14
   314 00000379 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   315 00000381 75616C2D7272            	db 0x75, 0x61, 0x6C, 0x2D, 0x72, 0x72
   316                                  	; L_constants + 903:
   317 00000387 03                      	db T_string	; "__bin-equal-qq"
   318 00000388 0E00000000000000        	dq 14
   319 00000390 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   320 00000398 75616C2D7171            	db 0x75, 0x61, 0x6C, 0x2D, 0x71, 0x71
   321                                  	; L_constants + 926:
   322 0000039E 03                      	db T_string	; "__bin-equal-zz"
   323 0000039F 0E00000000000000        	dq 14
   324 000003A7 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   325 000003AF 75616C2D7A7A            	db 0x75, 0x61, 0x6C, 0x2D, 0x7A, 0x7A
   326                                  	; L_constants + 949:
   327 000003B5 03                      	db T_string	; "quotient"
   328 000003B6 0800000000000000        	dq 8
   329 000003BE 71756F7469656E74        	db 0x71, 0x75, 0x6F, 0x74, 0x69, 0x65, 0x6E, 0x74
   330                                  	; L_constants + 966:
   331 000003C6 03                      	db T_string	; "remainder"
   332 000003C7 0900000000000000        	dq 9
   333 000003CF 72656D61696E6465        	db 0x72, 0x65, 0x6D, 0x61, 0x69, 0x6E, 0x64, 0x65
   334 000003D7 72                      	db 0x72
   335                                  	; L_constants + 984:
   336 000003D8 03                      	db T_string	; "set-car!"
   337 000003D9 0800000000000000        	dq 8
   338 000003E1 7365742D63617221        	db 0x73, 0x65, 0x74, 0x2D, 0x63, 0x61, 0x72, 0x21
   339                                  	; L_constants + 1001:
   340 000003E9 03                      	db T_string	; "set-cdr!"
   341 000003EA 0800000000000000        	dq 8
   342 000003F2 7365742D63647221        	db 0x73, 0x65, 0x74, 0x2D, 0x63, 0x64, 0x72, 0x21
   343                                  	; L_constants + 1018:
   344 000003FA 03                      	db T_string	; "string-ref"
   345 000003FB 0A00000000000000        	dq 10
   346 00000403 737472696E672D72        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x72
   347 0000040B 6566                    	db 0x65, 0x66
   348                                  	; L_constants + 1037:
   349 0000040D 03                      	db T_string	; "vector-ref"
   350 0000040E 0A00000000000000        	dq 10
   351 00000416 766563746F722D72        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x72
   352 0000041E 6566                    	db 0x65, 0x66
   353                                  	; L_constants + 1056:
   354 00000420 03                      	db T_string	; "vector-set!"
   355 00000421 0B00000000000000        	dq 11
   356 00000429 766563746F722D73        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x73
   357 00000431 657421                  	db 0x65, 0x74, 0x21
   358                                  	; L_constants + 1076:
   359 00000434 03                      	db T_string	; "string-set!"
   360 00000435 0B00000000000000        	dq 11
   361 0000043D 737472696E672D73        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x73
   362 00000445 657421                  	db 0x65, 0x74, 0x21
   363                                  	; L_constants + 1096:
   364 00000448 03                      	db T_string	; "make-vector"
   365 00000449 0B00000000000000        	dq 11
   366 00000451 6D616B652D766563        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x76, 0x65, 0x63
   367 00000459 746F72                  	db 0x74, 0x6F, 0x72
   368                                  	; L_constants + 1116:
   369 0000045C 03                      	db T_string	; "make-string"
   370 0000045D 0B00000000000000        	dq 11
   371 00000465 6D616B652D737472        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x73, 0x74, 0x72
   372 0000046D 696E67                  	db 0x69, 0x6E, 0x67
   373                                  	; L_constants + 1136:
   374 00000470 03                      	db T_string	; "numerator"
   375 00000471 0900000000000000        	dq 9
   376 00000479 6E756D657261746F        	db 0x6E, 0x75, 0x6D, 0x65, 0x72, 0x61, 0x74, 0x6F
   377 00000481 72                      	db 0x72
   378                                  	; L_constants + 1154:
   379 00000482 03                      	db T_string	; "denominator"
   380 00000483 0B00000000000000        	dq 11
   381 0000048B 64656E6F6D696E61        	db 0x64, 0x65, 0x6E, 0x6F, 0x6D, 0x69, 0x6E, 0x61
   382 00000493 746F72                  	db 0x74, 0x6F, 0x72
   383                                  	; L_constants + 1174:
   384 00000496 03                      	db T_string	; "eq?"
   385 00000497 0300000000000000        	dq 3
   386 0000049F 65713F                  	db 0x65, 0x71, 0x3F
   387                                  	; L_constants + 1186:
   388 000004A2 03                      	db T_string	; "__integer-to-fracti...
   389 000004A3 1500000000000000        	dq 21
   390 000004AB 5F5F696E74656765        	db 0x5F, 0x5F, 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65
   391 000004B3 722D746F2D667261        	db 0x72, 0x2D, 0x74, 0x6F, 0x2D, 0x66, 0x72, 0x61
   392 000004BB 6374696F6E              	db 0x63, 0x74, 0x69, 0x6F, 0x6E
   393                                  	; L_constants + 1216:
   394 000004C0 03                      	db T_string	; "logand"
   395 000004C1 0600000000000000        	dq 6
   396 000004C9 6C6F67616E64            	db 0x6C, 0x6F, 0x67, 0x61, 0x6E, 0x64
   397                                  	; L_constants + 1231:
   398 000004CF 03                      	db T_string	; "logor"
   399 000004D0 0500000000000000        	dq 5
   400 000004D8 6C6F676F72              	db 0x6C, 0x6F, 0x67, 0x6F, 0x72
   401                                  	; L_constants + 1245:
   402 000004DD 03                      	db T_string	; "logxor"
   403 000004DE 0600000000000000        	dq 6
   404 000004E6 6C6F67786F72            	db 0x6C, 0x6F, 0x67, 0x78, 0x6F, 0x72
   405                                  	; L_constants + 1260:
   406 000004EC 03                      	db T_string	; "lognot"
   407 000004ED 0600000000000000        	dq 6
   408 000004F5 6C6F676E6F74            	db 0x6C, 0x6F, 0x67, 0x6E, 0x6F, 0x74
   409                                  	; L_constants + 1275:
   410 000004FB 03                      	db T_string	; "ash"
   411 000004FC 0300000000000000        	dq 3
   412 00000504 617368                  	db 0x61, 0x73, 0x68
   413                                  	; L_constants + 1287:
   414 00000507 03                      	db T_string	; "symbol?"
   415 00000508 0700000000000000        	dq 7
   416 00000510 73796D626F6C3F          	db 0x73, 0x79, 0x6D, 0x62, 0x6F, 0x6C, 0x3F
   417                                  	; L_constants + 1303:
   418 00000517 03                      	db T_string	; "uninterned-symbol?"
   419 00000518 1200000000000000        	dq 18
   420 00000520 756E696E7465726E        	db 0x75, 0x6E, 0x69, 0x6E, 0x74, 0x65, 0x72, 0x6E
   421 00000528 65642D73796D626F        	db 0x65, 0x64, 0x2D, 0x73, 0x79, 0x6D, 0x62, 0x6F
   422 00000530 6C3F                    	db 0x6C, 0x3F
   423                                  	; L_constants + 1330:
   424 00000532 03                      	db T_string	; "gensym?"
   425 00000533 0700000000000000        	dq 7
   426 0000053B 67656E73796D3F          	db 0x67, 0x65, 0x6E, 0x73, 0x79, 0x6D, 0x3F
   427                                  	; L_constants + 1346:
   428 00000542 03                      	db T_string	; "gensym"
   429 00000543 0600000000000000        	dq 6
   430 0000054B 67656E73796D            	db 0x67, 0x65, 0x6E, 0x73, 0x79, 0x6D
   431                                  	; L_constants + 1361:
   432 00000551 03                      	db T_string	; "frame"
   433 00000552 0500000000000000        	dq 5
   434 0000055A 6672616D65              	db 0x66, 0x72, 0x61, 0x6D, 0x65
   435                                  	; L_constants + 1375:
   436 0000055F 03                      	db T_string	; "break"
   437 00000560 0500000000000000        	dq 5
   438 00000568 627265616B              	db 0x62, 0x72, 0x65, 0x61, 0x6B
   439                                  	; L_constants + 1389:
   440 0000056D 03                      	db T_string	; "boolean-false?"
   441 0000056E 0E00000000000000        	dq 14
   442 00000576 626F6F6C65616E2D        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x2D
   443 0000057E 66616C73653F            	db 0x66, 0x61, 0x6C, 0x73, 0x65, 0x3F
   444                                  	; L_constants + 1412:
   445 00000584 03                      	db T_string	; "boolean-true?"
   446 00000585 0D00000000000000        	dq 13
   447 0000058D 626F6F6C65616E2D        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x2D
   448 00000595 747275653F              	db 0x74, 0x72, 0x75, 0x65, 0x3F
   449                                  	; L_constants + 1434:
   450 0000059A 03                      	db T_string	; "primitive?"
   451 0000059B 0A00000000000000        	dq 10
   452 000005A3 7072696D69746976        	db 0x70, 0x72, 0x69, 0x6D, 0x69, 0x74, 0x69, 0x76
   453 000005AB 653F                    	db 0x65, 0x3F
   454                                  	; L_constants + 1453:
   455 000005AD 03                      	db T_string	; "length"
   456 000005AE 0600000000000000        	dq 6
   457 000005B6 6C656E677468            	db 0x6C, 0x65, 0x6E, 0x67, 0x74, 0x68
   458                                  	; L_constants + 1468:
   459 000005BC 03                      	db T_string	; "make-list"
   460 000005BD 0900000000000000        	dq 9
   461 000005C5 6D616B652D6C6973        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x6C, 0x69, 0x73
   462 000005CD 74                      	db 0x74
   463                                  	; L_constants + 1486:
   464 000005CE 03                      	db T_string	; "return"
   465 000005CF 0600000000000000        	dq 6
   466 000005D7 72657475726E            	db 0x72, 0x65, 0x74, 0x75, 0x72, 0x6E
   467                                  	; L_constants + 1501:
   468 000005DD 03                      	db T_string	; "+"
   469 000005DE 0100000000000000        	dq 1
   470 000005E6 2B                      	db 0x2B
   471                                  	; L_constants + 1511:
   472 000005E7 11                      	db T_integer	; 1
   473 000005E8 0100000000000000        	dq 1
   474                                  	; L_constants + 1520:
   475 000005F0 11                      	db T_integer	; 2
   476 000005F1 0200000000000000        	dq 2
   477                                  free_var_0:	; location of +
   478 000005F9 [0106000000000000]      	dq .undefined_object
   479                                  .undefined_object:
   480 00000601 05                      	db T_undefined
   481 00000602 [DD05000000000000]      	dq L_constants + 1501
   482                                  
   483                                  
   484                                  extern printf, fprintf, stdout, stderr, fwrite, exit, putchar, getchar
   485                                  global main
   486                                  section .text
   487                                  main:
   488 00000000 C8000000                        enter 0, 0
   489 00000004 6A00                            push 0
   490 00000006 6A00                            push 0
   491 00000008 68[45000000]                    push Lend
   492 0000000D C8000000                        enter 0, 0
   493                                  
   494                                  	; preparing a non-tail-call
   495 00000011 48B8-                   	mov rax, L_constants + 1520
   495 00000013 [F005000000000000] 
   496 0000001B 50                      	push rax
   497 0000001C 48B8-                   	mov rax, L_constants + 1511
   497 0000001E [E705000000000000] 
   498 00000026 50                      	push rax
   499 00000027 6A02                    	push 2	; arg count
   500 00000029 488B0425[F9050000]      	mov rax, qword [free_var_0]	; free var +
   501 00000031 803805                  	cmp byte [rax], T_undefined
   502 00000034 744D                    	je L_error_fvar_undefined
   503 00000036 803804                  	cmp byte [rax], T_closure
   504 00000039 0F85C8000000            	jne L_error_non_closure
   505 0000003F FF7001                  	push SOB_CLOSURE_ENV(rax)
   506 00000042 FF5009                  	call SOB_CLOSURE_CODE(rax)
   507                                  Lend:
   508 00000045 4889C7                  	mov rdi, rax
   509 00000048 E8B8030000              	call print_sexpr_if_not_void
   510 0000004D 48BF-                   mov rdi, fmt_memory_usage
   510 0000004F [A206000000000000] 
   511 00000057 488B3425[28070000]              mov rsi, qword [top_of_memory]
   512 0000005F 4881EE[00000000]                sub rsi, memory
   513 00000066 B800000000                      mov rax, 0
   514                                          ENTER
    44 0000006B C8000000            <1>  enter 0, 0
    45 0000006F 4883E4F0            <1>  and rsp, ~15
   515 00000073 E8(00000000)                    call printf
   516                                          LEAVE
    49 00000078 C9                  <1>  leave
   517 00000079 B800000000                      mov rax, 0
   518 0000007E E8(00000000)                    call exit
   519                                  
   520                                  L_error_fvar_undefined:
   521 00000083 50                              push rax
   522 00000084 488B3C25[00000000]              mov rdi, qword [stderr]  ; destination
   523 0000008C 48BE-                           mov rsi, fmt_undefined_free_var_1
   523 0000008E [0A06000000000000] 
   524 00000096 B800000000                      mov rax, 0
   525                                          ENTER
    44 0000009B C8000000            <1>  enter 0, 0
    45 0000009F 4883E4F0            <1>  and rsp, ~15
   526 000000A3 E8(00000000)                    call fprintf
   527                                          LEAVE
    49 000000A8 C9                  <1>  leave
   528 000000A9 58                              pop rax
   529 000000AA 488B4001                        mov rax, qword [rax + 1] ; string
   530 000000AE 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
   531 000000B2 BE01000000                      mov rsi, 1               ; sizeof(char)
   532 000000B7 488B5001                        mov rdx, qword [rax + 1] ; string-length
   533 000000BB 488B0C25[00000000]              mov rcx, qword [stderr]  ; destination
   534 000000C3 B800000000                      mov rax, 0
   535                                          ENTER
    44 000000C8 C8000000            <1>  enter 0, 0
    45 000000CC 4883E4F0            <1>  and rsp, ~15
   536 000000D0 E8(00000000)                    call fwrite
   537                                          LEAVE
    49 000000D5 C9                  <1>  leave
   538 000000D6 488B3C25[00000000]              mov rdi, [stderr]       ; destination
   539 000000DE 48BE-                           mov rsi, fmt_undefined_free_var_2
   539 000000E0 [2106000000000000] 
   540 000000E8 B800000000                      mov rax, 0
   541                                          ENTER
    44 000000ED C8000000            <1>  enter 0, 0
    45 000000F1 4883E4F0            <1>  and rsp, ~15
   542 000000F5 E8(00000000)                    call fprintf
   543                                          LEAVE
    49 000000FA C9                  <1>  leave
   544 000000FB 48C7C0F6FFFFFF                  mov rax, -10
   545 00000102 E8(00000000)                    call exit
   546                                  
   547                                  L_error_non_closure:
   548 00000107 488B3C25[00000000]              mov rdi, qword [stderr]
   549 0000010F 48BE-                           mov rsi, fmt_non_closure
   549 00000111 [D806000000000000] 
   550 00000119 B800000000                      mov rax, 0
   551                                          ENTER
    44 0000011E C8000000            <1>  enter 0, 0
    45 00000122 4883E4F0            <1>  and rsp, ~15
   552 00000126 E8(00000000)                    call fprintf
   553                                          LEAVE
    49 0000012B C9                  <1>  leave
   554 0000012C 48C7C0FEFFFFFF                  mov rax, -2
   555 00000133 E8(00000000)                    call exit
   556                                  
   557                                  L_error_improper_list:
   558 00000138 488B3C25[00000000]      	mov rdi, qword [stderr]
   559 00000140 48BE-                   	mov rsi, fmt_error_improper_list
   559 00000142 [0007000000000000] 
   560 0000014A B800000000              	mov rax, 0
   561                                          ENTER
    44 0000014F C8000000            <1>  enter 0, 0
    45 00000153 4883E4F0            <1>  and rsp, ~15
   562 00000157 E8(00000000)            	call fprintf
   563                                          LEAVE
    49 0000015C C9                  <1>  leave
   564 0000015D 48C7C0F9FFFFFF          	mov rax, -7
   565 00000164 E8(00000000)            	call exit
   566                                  
   567                                  L_error_incorrect_arity_simple:
   568 00000169 488B3C25[00000000]              mov rdi, qword [stderr]
   569 00000171 48BE-                           mov rsi, fmt_incorrect_arity_simple
   569 00000173 [4306000000000000] 
   570 0000017B EB12                            jmp L_error_incorrect_arity_common
   571                                  L_error_incorrect_arity_opt:
   572 0000017D 488B3C25[00000000]              mov rdi, qword [stderr]
   573 00000185 48BE-                           mov rsi, fmt_incorrect_arity_opt
   573 00000187 [6E06000000000000] 
   574                                  L_error_incorrect_arity_common:
   575 0000018F 5A                              pop rdx
   576 00000190 59                              pop rcx
   577 00000191 B800000000                      mov rax, 0
   578                                          ENTER
    44 00000196 C8000000            <1>  enter 0, 0
    45 0000019A 4883E4F0            <1>  and rsp, ~15
   579 0000019E E8(00000000)                    call fprintf
   580                                          LEAVE
    49 000001A3 C9                  <1>  leave
   581 000001A4 48C7C0FAFFFFFF                  mov rax, -6
   582 000001AB E8(00000000)                    call exit
   583                                  
   584                                  section .data
   585                                  fmt_undefined_free_var_1:
   586 0000060A 212121205468652066-             db `!!! The free variable \0`
   586 00000613 726565207661726961-
   586 0000061C 626C652000         
   587                                  fmt_undefined_free_var_2:
   588 00000621 207761732075736564-             db ` was used before it was defined.\n\0`
   588 0000062A 206265666F72652069-
   588 00000633 742077617320646566-
   588 0000063C 696E65642E0A00     
   589                                  fmt_incorrect_arity_simple:
   590 00000643 212121204578706563-             db `!!! Expected %ld arguments, but given %ld\n\0`
   590 0000064C 74656420256C642061-
   590 00000655 7267756D656E74732C-
   590 0000065E 206275742067697665-
   590 00000667 6E20256C640A00     
   591                                  fmt_incorrect_arity_opt:
   592 0000066E 212121204578706563-             db `!!! Expected at least %ld arguments, but given %ld\n\0`
   592 00000677 746564206174206C65-
   592 00000680 61737420256C642061-
   592 00000689 7267756D656E74732C-
   592 00000692 206275742067697665-
   592 0000069B 6E20256C640A00     
   593                                  fmt_memory_usage:
   594 000006A2 0A2121212055736564-             db `\n!!! Used %ld bytes of dynamically-allocated memory\n\n\0`
   594 000006AB 20256C642062797465-
   594 000006B4 73206F662064796E61-
   594 000006BD 6D6963616C6C792D61-
   594 000006C6 6C6C6F636174656420-
   594 000006CF 6D656D6F72790A0A00 
   595                                  fmt_non_closure:
   596 000006D8 21212120417474656D-             db `!!! Attempting to apply a non-closure!\n\0`
   596 000006E1 7074696E6720746F20-
   596 000006EA 6170706C792061206E-
   596 000006F3 6F6E2D636C6F737572-
   596 000006FC 65210A00           
   597                                  fmt_error_improper_list:
   598 00000700 212121205468652061-     	db `!!! The argument is not a proper list!\n\0`
   598 00000709 7267756D656E742069-
   598 00000712 73206E6F7420612070-
   598 0000071B 726F706572206C6973-
   598 00000724 74210A00           
   599                                  
   600                                  section .bss
   601                                  memory:
   602 00000000 <res 40000000h>         	resb gbytes(1)
   603                                  
   604                                  section .data
   605                                  top_of_memory:
   606 00000728 [0000000000000000]              dq memory
   607                                  
   608                                  section .text
   609                                  malloc:
   610 000001B0 488B0425[28070000]              mov rax, qword [top_of_memory]
   611 000001B8 48013C25[28070000]              add qword [top_of_memory], rdi
   612 000001C0 C3                              ret
   613                                  
   614                                  L_code_ptr_return:
   615 000001C1 48837C241002            	cmp qword [rsp + 8*2], 2
   616 000001C7 0F85461C0000            	jne L_error_arg_count_2
   617 000001CD 488B4C2418              	mov rcx, qword [rsp + 8*3]
   618                                  	assert_integer(rcx)
    53 000001D2 803911              <1>  cmp byte [%1], %2
    54 000001D5 0F85D71C0000        <1>  jne L_error_incorrect_type
   619 000001DB 488B4901                	mov rcx, qword [rcx + 1]
   620 000001DF 4883F900                	cmp rcx, 0
   621 000001E3 0F8C5E1B0000            	jl L_error_integer_range
   622 000001E9 488B442420              	mov rax, qword [rsp + 8*4]
   623                                  .L0:
   624 000001EE 4883F900                        cmp rcx, 0
   625 000001F2 7409                            je .L1
   626 000001F4 488B6D00                	mov rbp, qword [rbp]
   627 000001F8 48FFC9                  	dec rcx
   628 000001FB 7FF1                    	jg .L0
   629                                  .L1:
   630 000001FD 4889EC                  	mov rsp, rbp
   631 00000200 5D                      	pop rbp
   632 00000201 5B                              pop rbx
   633 00000202 488B4C2408                      mov rcx, qword [rsp + 8*1]
   634 00000207 488D64CC10                      lea rsp, [rsp + 8*rcx + 8*2]
   635 0000020C FFE3                    	jmp rbx
   636                                  
   637                                  L_code_ptr_make_list:
   638 0000020E C8000000                	enter 0, 0
   639 00000212 48837D1801                      cmp COUNT, 1
   640 00000217 740C                            je .L0
   641 00000219 48837D1802                      cmp COUNT, 2
   642 0000021E 7411                            je .L1
   643 00000220 E9231C0000                      jmp L_error_arg_count_12
   644                                  .L0:
   645 00000225 49B9-                           mov r9, sob_void
   645 00000227 [0000000000000000] 
   646 0000022F EB04                            jmp .L2
   647                                  .L1:
   648 00000231 4C8B4D28                        mov r9, PARAM(1)
   649                                  .L2:
   650 00000235 488B4D20                        mov rcx, PARAM(0)
   651                                          assert_integer(rcx)
    53 00000239 803911              <1>  cmp byte [%1], %2
    54 0000023C 0F85701C0000        <1>  jne L_error_incorrect_type
   652 00000242 488B4901                        mov rcx, qword [rcx + 1]
   653 00000246 4883F900                        cmp rcx, 0
   654 0000024A 0F8C281B0000                    jl L_error_arg_negative
   655 00000250 49B8-                           mov r8, sob_nil
   655 00000252 [0100000000000000] 
   656                                  .L3:
   657 0000025A 4883F900                        cmp rcx, 0
   658 0000025E 7E1D                            jle .L4
   659 00000260 BF11000000                      mov rdi, 1 + 8 + 8
   660 00000265 E846FFFFFF                      call malloc
   661 0000026A C60021                          mov byte [rax], T_pair
   662 0000026D 4C894801                        mov qword [rax + 1], r9
   663 00000271 4C894009                        mov qword [rax + 1 + 8], r8
   664 00000275 4989C0                          mov r8, rax
   665 00000278 48FFC9                          dec rcx
   666 0000027B EBDD                            jmp .L3
   667                                  .L4:
   668 0000027D 4C89C0                          mov rax, r8
   669 00000280 48837D1802                      cmp COUNT, 2
   670 00000285 7404                            je .L5
   671 00000287 C9                              leave
   672 00000288 C21800                          ret AND_KILL_FRAME(1)
   673                                  .L5:
   674 0000028B C9                      	leave
   675 0000028C C22000                  	ret AND_KILL_FRAME(2)
   676                                  
   677                                  L_code_ptr_is_primitive:
   678 0000028F C8000000                	enter 0, 0
   679 00000293 48837D1801              	cmp COUNT, 1
   680 00000298 0F85401B0000            	jne L_error_arg_count_1
   681 0000029E 488B4520                	mov rax, PARAM(0)
   682                                  	assert_closure(rax)
    53 000002A2 803804              <1>  cmp byte [%1], %2
    54 000002A5 0F85071C0000        <1>  jne L_error_incorrect_type
   683 000002AB 4883780100              	cmp SOB_CLOSURE_ENV(rax), 0
   684 000002B0 750C                    	jne .L_false
   685 000002B2 48B8-                   	mov rax, sob_boolean_true
   685 000002B4 [0300000000000000] 
   686 000002BC EB0A                    	jmp .L_end
   687                                  .L_false:
   688 000002BE 48B8-                   	mov rax, sob_boolean_false
   688 000002C0 [0200000000000000] 
   689                                  .L_end:
   690 000002C8 C9                      	leave
   691 000002C9 C21800                  	ret AND_KILL_FRAME(1)
   692                                  
   693                                  L_code_ptr_length:
   694 000002CC C8000000                	enter 0, 0
   695 000002D0 48837D1801              	cmp COUNT, 1
   696 000002D5 0F85031B0000            	jne L_error_arg_count_1
   697 000002DB 488B5D20                	mov rbx, PARAM(0)
   698 000002DF BF00000000              	mov rdi, 0
   699                                  .L:
   700 000002E4 803B01                  	cmp byte [rbx], T_nil
   701 000002E7 7412                    	je .L_end
   702                                  	assert_pair(rbx)
    53 000002E9 803B21              <1>  cmp byte [%1], %2
    54 000002EC 0F85C01B0000        <1>  jne L_error_incorrect_type
   703 000002F2 488B5B09                	mov rbx, SOB_PAIR_CDR(rbx)
   704 000002F6 48FFC7                  	inc rdi
   705 000002F9 EBE9                    	jmp .L
   706                                  .L_end:
   707 000002FB E82D1A0000              	call make_integer
   708 00000300 C9                      	leave
   709 00000301 C21800                  	ret AND_KILL_FRAME(1)
   710                                  
   711                                  L_code_ptr_break:
   712 00000304 48837C241000                    cmp qword [rsp + 8 * 2], 0
   713 0000030A 0F85991A0000                    jne L_error_arg_count_0
   714 00000310 CC                              int3
   715 00000311 48B8-                           mov rax, sob_void
   715 00000313 [0000000000000000] 
   716 0000031B C21000                          ret AND_KILL_FRAME(0)        
   717                                  
   718                                  L_code_ptr_frame:
   719 0000031E C8000000                        enter 0, 0
   720 00000322 48837D1800                      cmp COUNT, 0
   721 00000327 0F857C1A0000                    jne L_error_arg_count_0
   722                                  
   723 0000032D 48BF-                           mov rdi, fmt_frame
   723 0000032F [3007000000000000] 
   724 00000337 488B7500                        mov rsi, qword [rbp]    ; old rbp
   725 0000033B 488B5608                        mov rdx, qword [rsi + 8*1] ; ret addr
   726 0000033F 488B4E10                        mov rcx, qword [rsi + 8*2] ; lexical environment
   727 00000343 4C8B4618                        mov r8, qword [rsi + 8*3] ; count
   728 00000347 4C8D4E20                        lea r9, [rsi + 8*4]       ; address of argument 0
   729 0000034B 6A00                            push 0
   730 0000034D 4151                            push r9
   731 0000034F 4150                            push r8                   ; we'll use it when printing the params
   732 00000351 B800000000                      mov rax, 0
   733                                          
   734                                          ENTER
    44 00000356 C8000000            <1>  enter 0, 0
    45 0000035A 4883E4F0            <1>  and rsp, ~15
   735 0000035E E8(00000000)                    call printf
   736                                          LEAVE
    49 00000363 C9                  <1>  leave
   737                                  
   738                                  .L:
   739 00000364 488B0C24                        mov rcx, qword [rsp]
   740 00000368 4883F900                        cmp rcx, 0
   741 0000036C 7467                            je .L_out
   742 0000036E 48BF-                           mov rdi, fmt_frame_param_prefix
   742 00000370 [6907000000000000] 
   743 00000378 488B742410                      mov rsi, qword [rsp + 8*2]
   744 0000037D B800000000                      mov rax, 0
   745                                          
   746                                          ENTER
    44 00000382 C8000000            <1>  enter 0, 0
    45 00000386 4883E4F0            <1>  and rsp, ~15
   747 0000038A E8(00000000)                    call printf
   748                                          LEAVE
    49 0000038F C9                  <1>  leave
   749                                  
   750 00000390 488B0C24                        mov rcx, qword [rsp]
   751 00000394 48FFC9                          dec rcx
   752 00000397 48890C24                        mov qword [rsp], rcx    ; dec arg count
   753 0000039B 48FF442410                      inc qword [rsp + 8*2]   ; increment index of current arg
   754 000003A0 488B7C2408                      mov rdi, qword [rsp + 8*1] ; addr of addr current arg
   755 000003A5 4C8D4F08                        lea r9, [rdi + 8]          ; addr of next arg
   756 000003A9 4C894C2408                      mov qword [rsp + 8*1], r9  ; backup addr of next arg
   757 000003AE 488B3F                          mov rdi, qword [rdi]       ; addr of current arg
   758 000003B1 E87B000000                      call print_sexpr
   759 000003B6 48BF-                           mov rdi, fmt_newline
   759 000003B8 [9507000000000000] 
   760 000003C0 B800000000                      mov rax, 0
   761                                          ENTER
    44 000003C5 C8000000            <1>  enter 0, 0
    45 000003C9 4883E4F0            <1>  and rsp, ~15
   762 000003CD E8(00000000)                    call printf
   763                                          LEAVE
    49 000003D2 C9                  <1>  leave
   764 000003D3 EB8F                            jmp .L
   765                                  .L_out:
   766 000003D5 48BF-                           mov rdi, fmt_frame_continue
   766 000003D7 [7A07000000000000] 
   767 000003DF B800000000                      mov rax, 0
   768                                          ENTER
    44 000003E4 C8000000            <1>  enter 0, 0
    45 000003E8 4883E4F0            <1>  and rsp, ~15
   769 000003EC E8(00000000)                    call printf
   770 000003F1 E8(00000000)                    call getchar
   771                                          LEAVE
    49 000003F6 C9                  <1>  leave
   772                                          
   773 000003F7 48B8-                           mov rax, sob_void
   773 000003F9 [0000000000000000] 
   774 00000401 C9                              leave
   775 00000402 C21000                          ret AND_KILL_FRAME(0)
   776                                          
   777                                  print_sexpr_if_not_void:
   778 00000405 4881FF[00000000]        	cmp rdi, sob_void
   779 0000040C 7422                    	je .done
   780 0000040E E81E000000              	call print_sexpr
   781 00000413 48BF-                   	mov rdi, fmt_newline
   781 00000415 [9507000000000000] 
   782 0000041D B800000000              	mov rax, 0
   783                                  	ENTER
    44 00000422 C8000000            <1>  enter 0, 0
    45 00000426 4883E4F0            <1>  and rsp, ~15
   784 0000042A E8(00000000)            	call printf
   785                                  	LEAVE
    49 0000042F C9                  <1>  leave
   786                                  .done:
   787 00000430 C3                      	ret
   788                                  
   789                                  section .data
   790                                  fmt_frame:
   791 00000730 524250203D2025703B-             db `RBP = %p; ret addr = %p; lex env = %p; param count = %d\n\0`
   791 00000739 207265742061646472-
   791 00000742 203D2025703B206C65-
   791 0000074B 7820656E76203D2025-
   791 00000754 703B20706172616D20-
   791 0000075D 636F756E74203D2025-
   791 00000766 640A00             
   792                                  fmt_frame_param_prefix:
   793 00000769 3D3D5B706172616D20-             db `==[param %d]==> \0`
   793 00000772 25645D3D3D3E2000   
   794                                  fmt_frame_continue:
   795 0000077A 486974203C456E7465-             db `Hit <Enter> to continue...\0`
   795 00000783 723E20746F20636F6E-
   795 0000078C 74696E75652E2E2E00 
   796                                  fmt_newline:
   797 00000795 0A00                    	db `\n\0`
   798                                  fmt_void:
   799 00000797 233C766F69643E00        	db `#<void>\0`
   800                                  fmt_nil:
   801 0000079F 282900                  	db `()\0`
   802                                  fmt_boolean_false:
   803 000007A2 236600                  	db `#f\0`
   804                                  fmt_boolean_true:
   805 000007A5 237400                  	db `#t\0`
   806                                  fmt_char_backslash:
   807 000007A8 235C5C00                	db `#\\\\\0`
   808                                  fmt_char_dquote:
   809 000007AC 235C2200                	db `#\\"\0`
   810                                  fmt_char_simple:
   811 000007B0 235C256300              	db `#\\%c\0`
   812                                  fmt_char_null:
   813 000007B5 235C6E756C00            	db `#\\nul\0`
   814                                  fmt_char_bell:
   815 000007BB 235C62656C6C00          	db `#\\bell\0`
   816                                  fmt_char_backspace:
   817 000007C2 235C6261636B737061-     	db `#\\backspace\0`
   817 000007CB 636500             
   818                                  fmt_char_tab:
   819 000007CE 235C74616200            	db `#\\tab\0`
   820                                  fmt_char_newline:
   821 000007D4 235C6E65776C696E65-     	db `#\\newline\0`
   821 000007DD 00                 
   822                                  fmt_char_formfeed:
   823 000007DE 235C7061676500          	db `#\\page\0`
   824                                  fmt_char_return:
   825 000007E5 235C72657475726E00      	db `#\\return\0`
   826                                  fmt_char_escape:
   827 000007EE 235C65736300            	db `#\\esc\0`
   828                                  fmt_char_space:
   829 000007F4 235C737061636500        	db `#\\space\0`
   830                                  fmt_char_hex:
   831 000007FC 235C782530325800        	db `#\\x%02X\0`
   832                                  fmt_gensym:
   833 00000804 47256C6400                      db `G%ld\0`
   834                                  fmt_closure:
   835 00000809 233C636C6F73757265-     	db `#<closure at 0x%08X env=0x%08X code=0x%08X>\0`
   835 00000812 206174203078253038-
   835 0000081B 5820656E763D307825-
   835 00000824 30385820636F64653D-
   835 0000082D 3078253038583E00   
   836                                  fmt_lparen:
   837 00000835 2800                    	db `(\0`
   838                                  fmt_dotted_pair:
   839 00000837 202E2000                	db ` . \0`
   840                                  fmt_rparen:
   841 0000083B 2900                    	db `)\0`
   842                                  fmt_space:
   843 0000083D 2000                    	db ` \0`
   844                                  fmt_empty_vector:
   845 0000083F 23282900                	db `#()\0`
   846                                  fmt_vector:
   847 00000843 232800                  	db `#(\0`
   848                                  fmt_real:
   849 00000846 256600                  	db `%f\0`
   850                                  fmt_fraction:
   851 00000849 256C642F256C6400        	db `%ld/%ld\0`
   852                                  fmt_zero:
   853 00000851 3000                    	db `0\0`
   854                                  fmt_int:
   855 00000853 256C6400                	db `%ld\0`
   856                                  fmt_unknown_scheme_object_error:
   857 00000857 0A0A21212120457272-     	db `\n\n!!! Error: Unknown Scheme-object (RTTI 0x%02X) `
   857 00000860 6F723A20556E6B6E6F-
   857 00000869 776E20536368656D65-
   857 00000872 2D6F626A6563742028-
   857 0000087B 525454492030782530-
   857 00000884 32582920           
   858 00000888 617420616464726573-     	db `at address 0x%08X\n\n\0`
   858 00000891 73203078253038580A-
   858 0000089A 0A00               
   859                                  fmt_dquote:
   860 0000089C 2200                    	db `\"\0`
   861                                  fmt_string_char:
   862 0000089E 256300                          db `%c\0`
   863                                  fmt_string_char_7:
   864 000008A1 5C6100                          db `\\a\0`
   865                                  fmt_string_char_8:
   866 000008A4 5C6200                          db `\\b\0`
   867                                  fmt_string_char_9:
   868 000008A7 5C7400                          db `\\t\0`
   869                                  fmt_string_char_10:
   870 000008AA 5C6E00                          db `\\n\0`
   871                                  fmt_string_char_11:
   872 000008AD 5C7600                          db `\\v\0`
   873                                  fmt_string_char_12:
   874 000008B0 5C6600                          db `\\f\0`
   875                                  fmt_string_char_13:
   876 000008B3 5C7200                          db `\\r\0`
   877                                  fmt_string_char_34:
   878 000008B6 5C2200                          db `\\"\0`
   879                                  fmt_string_char_92:
   880 000008B9 5C5C00                          db `\\\\\0`
   881                                  fmt_string_char_hex:
   882 000008BC 5C7825583B00                    db `\\x%X;\0`
   883                                  
   884                                  section .text
   885                                  
   886                                  print_sexpr:
   887 00000431 C8000000                	enter 0, 0
   888 00000435 8A07                    	mov al, byte [rdi]
   889 00000437 3C00                    	cmp al, T_void
   890 00000439 7465                    	je .Lvoid
   891 0000043B 3C01                    	cmp al, T_nil
   892 0000043D 7470                    	je .Lnil
   893 0000043F 3C09                    	cmp al, T_boolean_false
   894 00000441 747B                    	je .Lboolean_false
   895 00000443 3C0A                    	cmp al, T_boolean_true
   896 00000445 0F8482000000            	je .Lboolean_true
   897 0000044B 3C02                    	cmp al, T_char
   898 0000044D 0F8489000000            	je .Lchar
   899 00000453 3C41                    	cmp al, T_interned_symbol
   900 00000455 0F84BF010000            	je .Linterned_symbol
   901 0000045B 3C42                            cmp al, T_uninterned_symbol
   902 0000045D 0F84E3010000                    je .Luninterned_symbol
   903 00000463 3C21                    	cmp al, T_pair
   904 00000465 0F84EE010000            	je .Lpair
   905 0000046B 3C22                    	cmp al, T_vector
   906 0000046D 0F84B7020000            	je .Lvector
   907 00000473 3C04                    	cmp al, T_closure
   908 00000475 0F8485010000            	je .Lclosure
   909 0000047B 3C13                    	cmp al, T_real
   910 0000047D 0F8448030000            	je .Lreal
   911 00000483 3C12                    	cmp al, T_fraction
   912 00000485 0F846E030000            	je .Lfraction
   913 0000048B 3C11                    	cmp al, T_integer
   914 0000048D 0F84A7030000            	je .Linteger
   915 00000493 3C03                    	cmp al, T_string
   916 00000495 0F84B2030000            	je .Lstring
   917                                  
   918 0000049B E9DC040000              	jmp .Lunknown_sexpr_type
   919                                  
   920                                  .Lvoid:
   921 000004A0 48BF-                   	mov rdi, fmt_void
   921 000004A2 [9707000000000000] 
   922 000004AA E900050000              	jmp .Lemit
   923                                  
   924                                  .Lnil:
   925 000004AF 48BF-                   	mov rdi, fmt_nil
   925 000004B1 [9F07000000000000] 
   926 000004B9 E9F1040000              	jmp .Lemit
   927                                  
   928                                  .Lboolean_false:
   929 000004BE 48BF-                   	mov rdi, fmt_boolean_false
   929 000004C0 [A207000000000000] 
   930 000004C8 E9E2040000              	jmp .Lemit
   931                                  
   932                                  .Lboolean_true:
   933 000004CD 48BF-                   	mov rdi, fmt_boolean_true
   933 000004CF [A507000000000000] 
   934 000004D7 E9D3040000              	jmp .Lemit
   935                                  
   936                                  .Lchar:
   937 000004DC 8A4701                  	mov al, byte [rdi + 1]
   938 000004DF 3C20                    	cmp al, ' '
   939 000004E1 7E20                    	jle .Lchar_whitespace
   940 000004E3 3C5C                    	cmp al, 92 		; backslash
   941 000004E5 7474                    	je .Lchar_backslash
   942 000004E7 3C22                    	cmp al, '"'
   943 000004E9 747F                    	je .Lchar_dquote
   944 000004EB 4825FF000000            	and rax, 255
   945 000004F1 48BF-                   	mov rdi, fmt_char_simple
   945 000004F3 [B007000000000000] 
   946 000004FB 4889C6                  	mov rsi, rax
   947 000004FE E9AC040000              	jmp .Lemit
   948                                  
   949                                  .Lchar_whitespace:
   950 00000503 3C00                    	cmp al, 0
   951 00000505 7472                    	je .Lchar_null
   952 00000507 3C07                    	cmp al, 7
   953 00000509 747D                    	je .Lchar_bell
   954 0000050B 3C08                    	cmp al, 8
   955 0000050D 0F8484000000            	je .Lchar_backspace
   956 00000513 3C09                    	cmp al, 9
   957 00000515 0F848B000000            	je .Lchar_tab
   958 0000051B 3C0A                    	cmp al, 10
   959 0000051D 0F8492000000            	je .Lchar_newline
   960 00000523 3C0C                    	cmp al, 12
   961 00000525 0F8499000000            	je .Lchar_formfeed
   962 0000052B 3C0D                    	cmp al, 13
   963 0000052D 0F84A0000000            	je .Lchar_return
   964 00000533 3C1B                    	cmp al, 27
   965 00000535 0F84A7000000            	je .Lchar_escape
   966 0000053B 4825FF000000            	and rax, 255
   967 00000541 3C20                    	cmp al, ' '
   968 00000543 0F84A8000000            	je .Lchar_space
   969 00000549 48BF-                   	mov rdi, fmt_char_hex
   969 0000054B [FC07000000000000] 
   970 00000553 4889C6                  	mov rsi, rax
   971 00000556 E954040000              	jmp .Lemit	
   972                                  
   973                                  .Lchar_backslash:
   974 0000055B 48BF-                   	mov rdi, fmt_char_backslash
   974 0000055D [A807000000000000] 
   975 00000565 E945040000              	jmp .Lemit
   976                                  
   977                                  .Lchar_dquote:
   978 0000056A 48BF-                   	mov rdi, fmt_char_dquote
   978 0000056C [AC07000000000000] 
   979 00000574 E936040000              	jmp .Lemit
   980                                  
   981                                  .Lchar_null:
   982 00000579 48BF-                   	mov rdi, fmt_char_null
   982 0000057B [B507000000000000] 
   983 00000583 E927040000              	jmp .Lemit
   984                                  
   985                                  .Lchar_bell:
   986 00000588 48BF-                   	mov rdi, fmt_char_bell
   986 0000058A [BB07000000000000] 
   987 00000592 E918040000              	jmp .Lemit
   988                                  
   989                                  .Lchar_backspace:
   990 00000597 48BF-                   	mov rdi, fmt_char_backspace
   990 00000599 [C207000000000000] 
   991 000005A1 E909040000              	jmp .Lemit
   992                                  
   993                                  .Lchar_tab:
   994 000005A6 48BF-                   	mov rdi, fmt_char_tab
   994 000005A8 [CE07000000000000] 
   995 000005B0 E9FA030000              	jmp .Lemit
   996                                  
   997                                  .Lchar_newline:
   998 000005B5 48BF-                   	mov rdi, fmt_char_newline
   998 000005B7 [D407000000000000] 
   999 000005BF E9EB030000              	jmp .Lemit
  1000                                  
  1001                                  .Lchar_formfeed:
  1002 000005C4 48BF-                   	mov rdi, fmt_char_formfeed
  1002 000005C6 [DE07000000000000] 
  1003 000005CE E9DC030000              	jmp .Lemit
  1004                                  
  1005                                  .Lchar_return:
  1006 000005D3 48BF-                   	mov rdi, fmt_char_return
  1006 000005D5 [E507000000000000] 
  1007 000005DD E9CD030000              	jmp .Lemit
  1008                                  
  1009                                  .Lchar_escape:
  1010 000005E2 48BF-                   	mov rdi, fmt_char_escape
  1010 000005E4 [EE07000000000000] 
  1011 000005EC E9BE030000              	jmp .Lemit
  1012                                  
  1013                                  .Lchar_space:
  1014 000005F1 48BF-                   	mov rdi, fmt_char_space
  1014 000005F3 [F407000000000000] 
  1015 000005FB E9AF030000              	jmp .Lemit
  1016                                  
  1017                                  .Lclosure:
  1018 00000600 4889FE                  	mov rsi, qword rdi
  1019 00000603 48BF-                   	mov rdi, fmt_closure
  1019 00000605 [0908000000000000] 
  1020 0000060D 488B5601                	mov rdx, SOB_CLOSURE_ENV(rsi)
  1021 00000611 488B4E09                	mov rcx, SOB_CLOSURE_CODE(rsi)
  1022 00000615 E995030000              	jmp .Lemit
  1023                                  
  1024                                  .Linterned_symbol:
  1025 0000061A 488B7F01                	mov rdi, qword [rdi + 1] ; sob_string
  1026 0000061E BE01000000              	mov rsi, 1		 ; size = 1 byte
  1027 00000623 488B5701                	mov rdx, qword [rdi + 1] ; length
  1028 00000627 488D7F09                	lea rdi, [rdi + 1 + 8]	 ; actual characters
  1029 0000062B 488B0C25[00000000]      	mov rcx, qword [stdout]	 ; FILE *
  1030                                  	ENTER
    44 00000633 C8000000            <1>  enter 0, 0
    45 00000637 4883E4F0            <1>  and rsp, ~15
  1031 0000063B E8(00000000)            	call fwrite
  1032                                  	LEAVE
    49 00000640 C9                  <1>  leave
  1033 00000641 E97E030000              	jmp .Lend
  1034                                  
  1035                                  .Luninterned_symbol:
  1036 00000646 488B7701                        mov rsi, qword [rdi + 1] ; gensym counter
  1037 0000064A 48BF-                           mov rdi, fmt_gensym
  1037 0000064C [0408000000000000] 
  1038 00000654 E956030000                      jmp .Lemit
  1039                                  	
  1040                                  .Lpair:
  1041 00000659 57                      	push rdi
  1042 0000065A 48BF-                   	mov rdi, fmt_lparen
  1042 0000065C [3508000000000000] 
  1043 00000664 B800000000              	mov rax, 0
  1044                                          ENTER
    44 00000669 C8000000            <1>  enter 0, 0
    45 0000066D 4883E4F0            <1>  and rsp, ~15
  1045 00000671 E8(00000000)            	call printf
  1046                                          LEAVE
    49 00000676 C9                  <1>  leave
  1047 00000677 488B3C24                	mov rdi, qword [rsp] 	; pair
  1048 0000067B 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
  1049 0000067F E8ADFDFFFF              	call print_sexpr
  1050 00000684 5F                      	pop rdi 		; pair
  1051 00000685 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
  1052                                  .Lcdr:
  1053 00000689 8A07                    	mov al, byte [rdi]
  1054 0000068B 3C01                    	cmp al, T_nil
  1055 0000068D 7447                    	je .Lcdr_nil
  1056 0000068F 3C21                    	cmp al, T_pair
  1057 00000691 7462                    	je .Lcdr_pair
  1058 00000693 57                      	push rdi
  1059 00000694 48BF-                   	mov rdi, fmt_dotted_pair
  1059 00000696 [3708000000000000] 
  1060 0000069E B800000000              	mov rax, 0
  1061                                          ENTER
    44 000006A3 C8000000            <1>  enter 0, 0
    45 000006A7 4883E4F0            <1>  and rsp, ~15
  1062 000006AB E8(00000000)            	call printf
  1063                                          LEAVE
    49 000006B0 C9                  <1>  leave
  1064 000006B1 5F                      	pop rdi
  1065 000006B2 E87AFDFFFF              	call print_sexpr
  1066 000006B7 48BF-                   	mov rdi, fmt_rparen
  1066 000006B9 [3B08000000000000] 
  1067 000006C1 B800000000              	mov rax, 0
  1068                                          ENTER
    44 000006C6 C8000000            <1>  enter 0, 0
    45 000006CA 4883E4F0            <1>  and rsp, ~15
  1069 000006CE E8(00000000)            	call printf
  1070                                          LEAVE
    49 000006D3 C9                  <1>  leave
  1071 000006D4 C9                      	leave
  1072 000006D5 C3                      	ret
  1073                                  
  1074                                  .Lcdr_nil:
  1075 000006D6 48BF-                   	mov rdi, fmt_rparen
  1075 000006D8 [3B08000000000000] 
  1076 000006E0 B800000000              	mov rax, 0
  1077                                          ENTER
    44 000006E5 C8000000            <1>  enter 0, 0
    45 000006E9 4883E4F0            <1>  and rsp, ~15
  1078 000006ED E8(00000000)            	call printf
  1079                                          LEAVE
    49 000006F2 C9                  <1>  leave
  1080 000006F3 C9                      	leave
  1081 000006F4 C3                      	ret
  1082                                  
  1083                                  .Lcdr_pair:
  1084 000006F5 57                      	push rdi
  1085 000006F6 48BF-                   	mov rdi, fmt_space
  1085 000006F8 [3D08000000000000] 
  1086 00000700 B800000000              	mov rax, 0
  1087                                          ENTER
    44 00000705 C8000000            <1>  enter 0, 0
    45 00000709 4883E4F0            <1>  and rsp, ~15
  1088 0000070D E8(00000000)            	call printf
  1089                                          LEAVE
    49 00000712 C9                  <1>  leave
  1090 00000713 488B3C24                	mov rdi, qword [rsp]
  1091 00000717 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
  1092 0000071B E811FDFFFF              	call print_sexpr
  1093 00000720 5F                      	pop rdi
  1094 00000721 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
  1095 00000725 E95FFFFFFF              	jmp .Lcdr
  1096                                  
  1097                                  .Lvector:
  1098 0000072A 488B4701                	mov rax, qword [rdi + 1] ; length
  1099 0000072E 4883F800                	cmp rax, 0
  1100 00000732 0F8484000000            	je .Lvector_empty
  1101 00000738 57                      	push rdi
  1102 00000739 48BF-                   	mov rdi, fmt_vector
  1102 0000073B [4308000000000000] 
  1103 00000743 B800000000              	mov rax, 0
  1104                                          ENTER
    44 00000748 C8000000            <1>  enter 0, 0
    45 0000074C 4883E4F0            <1>  and rsp, ~15
  1105 00000750 E8(00000000)            	call printf
  1106                                          LEAVE
    49 00000755 C9                  <1>  leave
  1107 00000756 488B3C24                	mov rdi, qword [rsp]
  1108 0000075A FF7701                  	push qword [rdi + 1]
  1109 0000075D 6A01                    	push 1
  1110 0000075F 488B7F09                	mov rdi, qword [rdi + 1 + 8] ; v[0]
  1111 00000763 E8C9FCFFFF              	call print_sexpr
  1112                                  .Lvector_loop:
  1113                                  	; [rsp] index
  1114                                  	; [rsp + 8*1] limit
  1115                                  	; [rsp + 8*2] vector
  1116 00000768 488B0424                	mov rax, qword [rsp]
  1117 0000076C 483B442408              	cmp rax, qword [rsp + 8*1]
  1118 00000771 7436                    	je .Lvector_end
  1119 00000773 48BF-                   	mov rdi, fmt_space
  1119 00000775 [3D08000000000000] 
  1120 0000077D B800000000              	mov rax, 0
  1121                                          ENTER
    44 00000782 C8000000            <1>  enter 0, 0
    45 00000786 4883E4F0            <1>  and rsp, ~15
  1122 0000078A E8(00000000)            	call printf
  1123                                          LEAVE
    49 0000078F C9                  <1>  leave
  1124 00000790 488B0424                	mov rax, qword [rsp]
  1125 00000794 488B5C2410              	mov rbx, qword [rsp + 8*2]
  1126 00000799 488B7CC309              	mov rdi, qword [rbx + 1 + 8 + 8 * rax] ; v[i]
  1127 0000079E E88EFCFFFF              	call print_sexpr
  1128 000007A3 48FF0424                	inc qword [rsp]
  1129 000007A7 EBBF                    	jmp .Lvector_loop
  1130                                  
  1131                                  .Lvector_end:
  1132 000007A9 4883C418                	add rsp, 8*3
  1133 000007AD 48BF-                   	mov rdi, fmt_rparen
  1133 000007AF [3B08000000000000] 
  1134 000007B7 E9F3010000              	jmp .Lemit	
  1135                                  
  1136                                  .Lvector_empty:
  1137 000007BC 48BF-                   	mov rdi, fmt_empty_vector
  1137 000007BE [3F08000000000000] 
  1138 000007C6 E9E4010000              	jmp .Lemit
  1139                                  
  1140                                  .Lreal:
  1141 000007CB FF7701                  	push qword [rdi + 1]
  1142 000007CE F20F100424              	movsd xmm0, qword [rsp]
  1143 000007D3 4883C408                	add rsp, 8*1
  1144 000007D7 48BF-                   	mov rdi, fmt_real
  1144 000007D9 [4608000000000000] 
  1145 000007E1 B801000000              	mov rax, 1
  1146                                  	ENTER
    44 000007E6 C8000000            <1>  enter 0, 0
    45 000007EA 4883E4F0            <1>  and rsp, ~15
  1147 000007EE E8(00000000)            	call printf
  1148                                  	LEAVE
    49 000007F3 C9                  <1>  leave
  1149 000007F4 E9CB010000              	jmp .Lend
  1150                                  
  1151                                  .Lfraction:
  1152 000007F9 488B7701                	mov rsi, qword [rdi + 1]
  1153 000007FD 488B5709                	mov rdx, qword [rdi + 1 + 8]
  1154 00000801 4883FE00                	cmp rsi, 0
  1155 00000805 7415                    	je .Lrat_zero
  1156 00000807 4883FA01                	cmp rdx, 1
  1157 0000080B 741E                    	je .Lrat_int
  1158 0000080D 48BF-                   	mov rdi, fmt_fraction
  1158 0000080F [4908000000000000] 
  1159 00000817 E993010000              	jmp .Lemit
  1160                                  
  1161                                  .Lrat_zero:
  1162 0000081C 48BF-                   	mov rdi, fmt_zero
  1162 0000081E [5108000000000000] 
  1163 00000826 E984010000              	jmp .Lemit
  1164                                  
  1165                                  .Lrat_int:
  1166 0000082B 48BF-                   	mov rdi, fmt_int
  1166 0000082D [5308000000000000] 
  1167 00000835 E975010000              	jmp .Lemit
  1168                                  
  1169                                  .Linteger:
  1170 0000083A 488B7701                	mov rsi, qword [rdi + 1]
  1171 0000083E 48BF-                   	mov rdi, fmt_int
  1171 00000840 [5308000000000000] 
  1172 00000848 E962010000              	jmp .Lemit
  1173                                  
  1174                                  .Lstring:
  1175 0000084D 488D4709                	lea rax, [rdi + 1 + 8]
  1176 00000851 50                      	push rax
  1177 00000852 FF7701                  	push qword [rdi + 1]
  1178 00000855 48BF-                   	mov rdi, fmt_dquote
  1178 00000857 [9C08000000000000] 
  1179 0000085F B800000000              	mov rax, 0
  1180                                  	ENTER
    44 00000864 C8000000            <1>  enter 0, 0
    45 00000868 4883E4F0            <1>  and rsp, ~15
  1181 0000086C E8(00000000)            	call printf
  1182                                  	LEAVE
    49 00000871 C9                  <1>  leave
  1183                                  .Lstring_loop:
  1184                                  	; qword [rsp]: limit
  1185                                  	; qword [rsp + 8*1]: char *
  1186 00000872 48833C2400              	cmp qword [rsp], 0
  1187 00000877 0F84EF000000            	je .Lstring_end
  1188 0000087D 488B442408              	mov rax, qword [rsp + 8*1]
  1189 00000882 8A00                    	mov al, byte [rax]
  1190 00000884 4825FF000000            	and rax, 255
  1191 0000088A 3C07                    	cmp al, 7
  1192 0000088C 745D                            je .Lstring_char_7
  1193 0000088E 3C08                            cmp al, 8
  1194 00000890 7465                            je .Lstring_char_8
  1195 00000892 3C09                            cmp al, 9
  1196 00000894 746D                            je .Lstring_char_9
  1197 00000896 3C0A                            cmp al, 10
  1198 00000898 7475                            je .Lstring_char_10
  1199 0000089A 3C0B                            cmp al, 11
  1200 0000089C 747D                            je .Lstring_char_11
  1201 0000089E 3C0C                            cmp al, 12
  1202 000008A0 0F8481000000                    je .Lstring_char_12
  1203 000008A6 3C0D                            cmp al, 13
  1204 000008A8 0F8485000000                    je .Lstring_char_13
  1205 000008AE 3C22                            cmp al, 34
  1206 000008B0 0F8489000000                    je .Lstring_char_34
  1207 000008B6 3C5C                            cmp al, 92              ;         je .Lstring_char_92
  1209 000008B8 3C20                            cmp al, ' '
  1210 000008BA 0F8C9A000000                    jl .Lstring_char_hex
  1211 000008C0 48BF-                           mov rdi, fmt_string_char
  1211 000008C2 [9E08000000000000] 
  1212 000008CA 4889C6                          mov rsi, rax
  1213                                  .Lstring_char_emit:
  1214 000008CD B800000000                      mov rax, 0
  1215                                          ENTER
    44 000008D2 C8000000            <1>  enter 0, 0
    45 000008D6 4883E4F0            <1>  and rsp, ~15
  1216 000008DA E8(00000000)                    call printf
  1217                                          LEAVE
    49 000008DF C9                  <1>  leave
  1218 000008E0 48FF0C24                        dec qword [rsp]
  1219 000008E4 48FF442408                      inc qword [rsp + 8*1]
  1220 000008E9 EB87                            jmp .Lstring_loop
  1221                                  
  1222                                  .Lstring_char_7:
  1223 000008EB 48BF-                           mov rdi, fmt_string_char_7
  1223 000008ED [A108000000000000] 
  1224 000008F5 EBD6                            jmp .Lstring_char_emit
  1225                                  
  1226                                  .Lstring_char_8:
  1227 000008F7 48BF-                           mov rdi, fmt_string_char_8
  1227 000008F9 [A408000000000000] 
  1228 00000901 EBCA                            jmp .Lstring_char_emit
  1229                                          
  1230                                  .Lstring_char_9:
  1231 00000903 48BF-                           mov rdi, fmt_string_char_9
  1231 00000905 [A708000000000000] 
  1232 0000090D EBBE                            jmp .Lstring_char_emit
  1233                                  
  1234                                  .Lstring_char_10:
  1235 0000090F 48BF-                           mov rdi, fmt_string_char_10
  1235 00000911 [AA08000000000000] 
  1236 00000919 EBB2                            jmp .Lstring_char_emit
  1237                                  
  1238                                  .Lstring_char_11:
  1239 0000091B 48BF-                           mov rdi, fmt_string_char_11
  1239 0000091D [AD08000000000000] 
  1240 00000925 EBA6                            jmp .Lstring_char_emit
  1241                                  
  1242                                  .Lstring_char_12:
  1243 00000927 48BF-                           mov rdi, fmt_string_char_12
  1243 00000929 [B008000000000000] 
  1244 00000931 EB9A                            jmp .Lstring_char_emit
  1245                                  
  1246                                  .Lstring_char_13:
  1247 00000933 48BF-                           mov rdi, fmt_string_char_13
  1247 00000935 [B308000000000000] 
  1248 0000093D EB8E                            jmp .Lstring_char_emit
  1249                                  
  1250                                  .Lstring_char_34:
  1251 0000093F 48BF-                           mov rdi, fmt_string_char_34
  1251 00000941 [B608000000000000] 
  1252 00000949 EB82                            jmp .Lstring_char_emit
  1253                                  
  1254                                  .Lstring_char_92:
  1255 0000094B 48BF-                           mov rdi, fmt_string_char_92
  1255 0000094D [B908000000000000] 
  1256 00000955 E973FFFFFF                      jmp .Lstring_char_emit
  1257                                  
  1258                                  .Lstring_char_hex:
  1259 0000095A 48BF-                           mov rdi, fmt_string_char_hex
  1259 0000095C [BC08000000000000] 
  1260 00000964 4889C6                          mov rsi, rax
  1261 00000967 E961FFFFFF                      jmp .Lstring_char_emit        
  1262                                  
  1263                                  .Lstring_end:
  1264 0000096C 4883C410                	add rsp, 8 * 2
  1265 00000970 48BF-                   	mov rdi, fmt_dquote
  1265 00000972 [9C08000000000000] 
  1266 0000097A EB33                    	jmp .Lemit
  1267                                  
  1268                                  .Lunknown_sexpr_type:
  1269 0000097C 48BE-                   	mov rsi, fmt_unknown_scheme_object_error
  1269 0000097E [5708000000000000] 
  1270 00000986 4825FF000000            	and rax, 255
  1271 0000098C 4889C2                  	mov rdx, rax
  1272 0000098F 4889F9                  	mov rcx, rdi
  1273 00000992 488B3C25[00000000]      	mov rdi, qword [stderr]
  1274 0000099A B800000000              	mov rax, 0
  1275                                          ENTER
    44 0000099F C8000000            <1>  enter 0, 0
    45 000009A3 4883E4F0            <1>  and rsp, ~15
  1276 000009A7 E8(00000000)            	call fprintf
  1277                                          LEAVE
    49 000009AC C9                  <1>  leave
  1278 000009AD C9                              leave
  1279 000009AE C3                              ret
  1280                                  
  1281                                  .Lemit:
  1282 000009AF B800000000              	mov rax, 0
  1283                                          ENTER
    44 000009B4 C8000000            <1>  enter 0, 0
    45 000009B8 4883E4F0            <1>  and rsp, ~15
  1284 000009BC E8(00000000)            	call printf
  1285                                          LEAVE
    49 000009C1 C9                  <1>  leave
  1286 000009C2 EB00                    	jmp .Lend
  1287                                  
  1288                                  .Lend:
  1289                                  	LEAVE
    49 000009C4 C9                  <1>  leave
  1290 000009C5 C3                      	ret
  1291                                  
  1292                                  ;;; rdi: address of free variable
  1293                                  ;;; rsi: address of code-pointer
  1294                                  bind_primitive:
  1295 000009C6 C8000000                        enter 0, 0
  1296 000009CA 57                              push rdi
  1297 000009CB BF11000000                      mov rdi, (1 + 8 + 8)
  1298 000009D0 E8DBF7FFFF                      call malloc
  1299 000009D5 5F                              pop rdi
  1300 000009D6 C60004                          mov byte [rax], T_closure
  1301 000009D9 48C7400100000000                mov SOB_CLOSURE_ENV(rax), 0 ; dummy, lexical environment
  1302 000009E1 48897009                        mov SOB_CLOSURE_CODE(rax), rsi ; code pointer
  1303 000009E5 488907                          mov qword [rdi], rax
  1304 000009E8 48B8-                           mov rax, sob_void
  1304 000009EA [0000000000000000] 
  1305 000009F2 C9                              leave
  1306 000009F3 C3                              ret
  1307                                  
  1308                                  L_code_ptr_ash:
  1309 000009F4 C8000000                        enter 0, 0
  1310 000009F8 48837D1802                      cmp COUNT, 2
  1311 000009FD 0F8510140000                    jne L_error_arg_count_2
  1312 00000A03 488B7D20                        mov rdi, PARAM(0)
  1313                                          assert_integer(rdi)
    53 00000A07 803F11              <1>  cmp byte [%1], %2
    54 00000A0A 0F85A2140000        <1>  jne L_error_incorrect_type
  1314 00000A10 488B4D28                        mov rcx, PARAM(1)
  1315                                          assert_integer(rcx)
    53 00000A14 803911              <1>  cmp byte [%1], %2
    54 00000A17 0F8595140000        <1>  jne L_error_incorrect_type
  1316 00000A1D 488B7F01                        mov rdi, qword [rdi + 1]
  1317 00000A21 488B4901                        mov rcx, qword [rcx + 1]
  1318 00000A25 4883F900                        cmp rcx, 0
  1319 00000A29 7C0F                            jl .L_negative
  1320                                  .L_loop_positive:
  1321 00000A2B 4883F900                        cmp rcx, 0
  1322 00000A2F 741B                            je .L_exit
  1323 00000A31 48D3E7                          sal rdi, cl
  1324 00000A34 48C1E908                        shr rcx, 8
  1325 00000A38 EBF1                            jmp .L_loop_positive
  1326                                  .L_negative:
  1327 00000A3A 48F7D9                          neg rcx
  1328                                  .L_loop_negative:
  1329 00000A3D 4883F900                        cmp rcx, 0
  1330 00000A41 7409                            je .L_exit
  1331 00000A43 48D3FF                          sar rdi, cl
  1332 00000A46 48C1E908                        shr rcx, 8
  1333 00000A4A EBF1                            jmp .L_loop_negative
  1334                                  .L_exit:
  1335 00000A4C E8DC120000                      call make_integer
  1336 00000A51 C9                              leave
  1337 00000A52 C22000                          ret AND_KILL_FRAME(2)
  1338                                  
  1339                                  L_code_ptr_logand:
  1340 00000A55 C8000000                        enter 0, 0
  1341 00000A59 48837D1802                      cmp COUNT, 2
  1342 00000A5E 0F85AF130000                    jne L_error_arg_count_2
  1343 00000A64 4C8B4520                        mov r8, PARAM(0)
  1344                                          assert_integer(r8)
    53 00000A68 41803811            <1>  cmp byte [%1], %2
    54 00000A6C 0F8540140000        <1>  jne L_error_incorrect_type
  1345 00000A72 4C8B4D28                        mov r9, PARAM(1)
  1346                                          assert_integer(r9)
    53 00000A76 41803911            <1>  cmp byte [%1], %2
    54 00000A7A 0F8532140000        <1>  jne L_error_incorrect_type
  1347 00000A80 498B7801                        mov rdi, qword [r8 + 1]
  1348 00000A84 49237901                        and rdi, qword [r9 + 1]
  1349 00000A88 E8A0120000                      call make_integer
  1350 00000A8D C9                              leave
  1351 00000A8E C22000                          ret AND_KILL_FRAME(2)
  1352                                  
  1353                                  L_code_ptr_logor:
  1354 00000A91 C8000000                        enter 0, 0
  1355 00000A95 48837D1802                      cmp COUNT, 2
  1356 00000A9A 0F8573130000                    jne L_error_arg_count_2
  1357 00000AA0 4C8B4520                        mov r8, PARAM(0)
  1358                                          assert_integer(r8)
    53 00000AA4 41803811            <1>  cmp byte [%1], %2
    54 00000AA8 0F8504140000        <1>  jne L_error_incorrect_type
  1359 00000AAE 4C8B4D28                        mov r9, PARAM(1)
  1360                                          assert_integer(r9)
    53 00000AB2 41803911            <1>  cmp byte [%1], %2
    54 00000AB6 0F85F6130000        <1>  jne L_error_incorrect_type
  1361 00000ABC 498B7801                        mov rdi, qword [r8 + 1]
  1362 00000AC0 490B7901                        or rdi, qword [r9 + 1]
  1363 00000AC4 E864120000                      call make_integer
  1364 00000AC9 C9                              leave
  1365 00000ACA C22000                          ret AND_KILL_FRAME(2)
  1366                                  
  1367                                  L_code_ptr_logxor:
  1368 00000ACD C8000000                        enter 0, 0
  1369 00000AD1 48837D1802                      cmp COUNT, 2
  1370 00000AD6 0F8537130000                    jne L_error_arg_count_2
  1371 00000ADC 4C8B4520                        mov r8, PARAM(0)
  1372                                          assert_integer(r8)
    53 00000AE0 41803811            <1>  cmp byte [%1], %2
    54 00000AE4 0F85C8130000        <1>  jne L_error_incorrect_type
  1373 00000AEA 4C8B4D28                        mov r9, PARAM(1)
  1374                                          assert_integer(r9)
    53 00000AEE 41803911            <1>  cmp byte [%1], %2
    54 00000AF2 0F85BA130000        <1>  jne L_error_incorrect_type
  1375 00000AF8 498B7801                        mov rdi, qword [r8 + 1]
  1376 00000AFC 49337901                        xor rdi, qword [r9 + 1]
  1377 00000B00 E828120000                      call make_integer
  1378                                          LEAVE
    49 00000B05 C9                  <1>  leave
  1379 00000B06 C22000                          ret AND_KILL_FRAME(2)
  1380                                  
  1381                                  L_code_ptr_lognot:
  1382 00000B09 C8000000                        enter 0, 0
  1383 00000B0D 48837D1801                      cmp COUNT, 1
  1384 00000B12 0F85C6120000                    jne L_error_arg_count_1
  1385 00000B18 4C8B4520                        mov r8, PARAM(0)
  1386                                          assert_integer(r8)
    53 00000B1C 41803811            <1>  cmp byte [%1], %2
    54 00000B20 0F858C130000        <1>  jne L_error_incorrect_type
  1387 00000B26 498B7801                        mov rdi, qword [r8 + 1]
  1388 00000B2A 48F7D7                          not rdi
  1389 00000B2D E8FB110000                      call make_integer
  1390 00000B32 C9                              leave
  1391 00000B33 C21800                          ret AND_KILL_FRAME(1)
  1392                                  
  1393                                  L_code_ptr_bin_apply:
  1394                                  ;;; fill in for final project!
  1395                                  
  1396                                  L_code_ptr_is_null:
  1397 00000B36 C8000000                        enter 0, 0
  1398 00000B3A 48837D1801                      cmp COUNT, 1
  1399 00000B3F 0F8599120000                    jne L_error_arg_count_1
  1400 00000B45 488B4520                        mov rax, PARAM(0)
  1401 00000B49 803801                          cmp byte [rax], T_nil
  1402 00000B4C 750C                            jne .L_false
  1403 00000B4E 48B8-                           mov rax, sob_boolean_true
  1403 00000B50 [0300000000000000] 
  1404 00000B58 EB0A                            jmp .L_end
  1405                                  .L_false:
  1406 00000B5A 48B8-                           mov rax, sob_boolean_false
  1406 00000B5C [0200000000000000] 
  1407                                  .L_end:
  1408 00000B64 C9                              leave
  1409 00000B65 C21800                          ret AND_KILL_FRAME(1)
  1410                                  
  1411                                  L_code_ptr_is_pair:
  1412 00000B68 C8000000                        enter 0, 0
  1413 00000B6C 48837D1801                      cmp COUNT, 1
  1414 00000B71 0F8567120000                    jne L_error_arg_count_1
  1415 00000B77 488B4520                        mov rax, PARAM(0)
  1416 00000B7B 803821                          cmp byte [rax], T_pair
  1417 00000B7E 750C                            jne .L_false
  1418 00000B80 48B8-                           mov rax, sob_boolean_true
  1418 00000B82 [0300000000000000] 
  1419 00000B8A EB0A                            jmp .L_end
  1420                                  .L_false:
  1421 00000B8C 48B8-                           mov rax, sob_boolean_false
  1421 00000B8E [0200000000000000] 
  1422                                  .L_end:
  1423 00000B96 C9                              leave
  1424 00000B97 C21800                          ret AND_KILL_FRAME(1)
  1425                                          
  1426                                  L_code_ptr_is_void:
  1427 00000B9A C8000000                        enter 0, 0
  1428 00000B9E 48837D1801                      cmp COUNT, 1
  1429 00000BA3 0F8535120000                    jne L_error_arg_count_1
  1430 00000BA9 488B4520                        mov rax, PARAM(0)
  1431 00000BAD 803800                          cmp byte [rax], T_void
  1432 00000BB0 750C                            jne .L_false
  1433 00000BB2 48B8-                           mov rax, sob_boolean_true
  1433 00000BB4 [0300000000000000] 
  1434 00000BBC EB0A                            jmp .L_end
  1435                                  .L_false:
  1436 00000BBE 48B8-                           mov rax, sob_boolean_false
  1436 00000BC0 [0200000000000000] 
  1437                                  .L_end:
  1438 00000BC8 C9                              leave
  1439 00000BC9 C21800                          ret AND_KILL_FRAME(1)
  1440                                  
  1441                                  L_code_ptr_is_char:
  1442 00000BCC C8000000                        enter 0, 0
  1443 00000BD0 48837D1801                      cmp COUNT, 1
  1444 00000BD5 0F8503120000                    jne L_error_arg_count_1
  1445 00000BDB 488B4520                        mov rax, PARAM(0)
  1446 00000BDF 803802                          cmp byte [rax], T_char
  1447 00000BE2 750C                            jne .L_false
  1448 00000BE4 48B8-                           mov rax, sob_boolean_true
  1448 00000BE6 [0300000000000000] 
  1449 00000BEE EB0A                            jmp .L_end
  1450                                  .L_false:
  1451 00000BF0 48B8-                           mov rax, sob_boolean_false
  1451 00000BF2 [0200000000000000] 
  1452                                  .L_end:
  1453 00000BFA C9                              leave
  1454 00000BFB C21800                          ret AND_KILL_FRAME(1)
  1455                                  
  1456                                  L_code_ptr_is_string:
  1457 00000BFE C8000000                        enter 0, 0
  1458 00000C02 48837D1801                      cmp COUNT, 1
  1459 00000C07 0F85D1110000                    jne L_error_arg_count_1
  1460 00000C0D 488B4520                        mov rax, PARAM(0)
  1461 00000C11 803803                          cmp byte [rax], T_string
  1462 00000C14 750C                            jne .L_false
  1463 00000C16 48B8-                           mov rax, sob_boolean_true
  1463 00000C18 [0300000000000000] 
  1464 00000C20 EB0A                            jmp .L_end
  1465                                  .L_false:
  1466 00000C22 48B8-                           mov rax, sob_boolean_false
  1466 00000C24 [0200000000000000] 
  1467                                  .L_end:
  1468 00000C2C C9                              leave
  1469 00000C2D C21800                          ret AND_KILL_FRAME(1)
  1470                                  
  1471                                  L_code_ptr_is_symbol:
  1472 00000C30 C8000000                        enter 0, 0
  1473 00000C34 48837D1801                      cmp COUNT, 1
  1474 00000C39 0F859F110000                    jne L_error_arg_count_1
  1475 00000C3F 4C8B4520                        mov r8, PARAM(0)
  1476 00000C43 41802040                        and byte [r8], T_symbol
  1477 00000C47 740C                            jz .L_false
  1478 00000C49 48B8-                           mov rax, sob_boolean_true
  1478 00000C4B [0300000000000000] 
  1479 00000C53 EB0A                            jmp .L_exit
  1480                                  .L_false:
  1481 00000C55 48B8-                           mov rax, sob_boolean_false
  1481 00000C57 [0200000000000000] 
  1482                                  .L_exit:
  1483 00000C5F C9                              leave
  1484 00000C60 C21800                          ret AND_KILL_FRAME(1)
  1485                                  
  1486                                  L_code_ptr_is_uninterned_symbol:
  1487 00000C63 C8000000                        enter 0, 0
  1488 00000C67 48837D1801                      cmp COUNT, 1
  1489 00000C6C 0F856C110000                    jne L_error_arg_count_1
  1490 00000C72 4C8B4520                        mov r8, PARAM(0)
  1491 00000C76 41803842                        cmp byte [r8], T_uninterned_symbol
  1492 00000C7A 750C                            jne .L_false
  1493 00000C7C 48B8-                           mov rax, sob_boolean_true
  1493 00000C7E [0300000000000000] 
  1494 00000C86 EB0A                            jmp .L_exit
  1495                                  .L_false:
  1496 00000C88 48B8-                           mov rax, sob_boolean_false
  1496 00000C8A [0200000000000000] 
  1497                                  .L_exit:
  1498 00000C92 C9                              leave
  1499 00000C93 C21800                          ret AND_KILL_FRAME(1)
  1500                                  
  1501                                  L_code_ptr_is_interned_symbol:
  1502 00000C96 C8000000                        enter 0, 0
  1503 00000C9A 48837D1801                      cmp COUNT, 1
  1504 00000C9F 0F8539110000                    jne L_error_arg_count_1
  1505 00000CA5 488B4520                        mov rax, PARAM(0)
  1506 00000CA9 803841                          cmp byte [rax], T_interned_symbol
  1507 00000CAC 750C                            jne .L_false
  1508 00000CAE 48B8-                           mov rax, sob_boolean_true
  1508 00000CB0 [0300000000000000] 
  1509 00000CB8 EB0A                            jmp .L_end
  1510                                  .L_false:
  1511 00000CBA 48B8-                           mov rax, sob_boolean_false
  1511 00000CBC [0200000000000000] 
  1512                                  .L_end:
  1513 00000CC4 C9                              leave
  1514 00000CC5 C21800                          ret AND_KILL_FRAME(1)
  1515                                  
  1516                                  L_code_ptr_gensym:
  1517 00000CC8 C8000000                        enter 0, 0
  1518 00000CCC 48837D1800                      cmp COUNT, 0
  1519 00000CD1 0F85D2100000                    jne L_error_arg_count_0
  1520 00000CD7 48FF0425[C2080000]              inc qword [gensym_count]
  1521 00000CDF BF09000000                      mov rdi, (1 + 8)
  1522 00000CE4 E8C7F4FFFF                      call malloc
  1523 00000CE9 C60042                          mov byte [rax], T_uninterned_symbol
  1524 00000CEC 488B0C25[C2080000]              mov rcx, qword [gensym_count]
  1525 00000CF4 48894801                        mov qword [rax + 1], rcx
  1526 00000CF8 C9                              leave
  1527 00000CF9 C21000                          ret AND_KILL_FRAME(0)
  1528                                  
  1529                                  L_code_ptr_is_vector:
  1530 00000CFC C8000000                        enter 0, 0
  1531 00000D00 48837D1801                      cmp COUNT, 1
  1532 00000D05 0F85D3100000                    jne L_error_arg_count_1
  1533 00000D0B 488B4520                        mov rax, PARAM(0)
  1534 00000D0F 803822                          cmp byte [rax], T_vector
  1535 00000D12 750C                            jne .L_false
  1536 00000D14 48B8-                           mov rax, sob_boolean_true
  1536 00000D16 [0300000000000000] 
  1537 00000D1E EB0A                            jmp .L_end
  1538                                  .L_false:
  1539 00000D20 48B8-                           mov rax, sob_boolean_false
  1539 00000D22 [0200000000000000] 
  1540                                  .L_end:
  1541 00000D2A C9                              leave
  1542 00000D2B C21800                          ret AND_KILL_FRAME(1)
  1543                                  
  1544                                  L_code_ptr_is_closure:
  1545 00000D2E C8000000                        enter 0, 0
  1546 00000D32 48837D1801                      cmp COUNT, 1
  1547 00000D37 0F85A1100000                    jne L_error_arg_count_1
  1548 00000D3D 488B4520                        mov rax, PARAM(0)
  1549 00000D41 803804                          cmp byte [rax], T_closure
  1550 00000D44 750C                            jne .L_false
  1551 00000D46 48B8-                           mov rax, sob_boolean_true
  1551 00000D48 [0300000000000000] 
  1552 00000D50 EB0A                            jmp .L_end
  1553                                  .L_false:
  1554 00000D52 48B8-                           mov rax, sob_boolean_false
  1554 00000D54 [0200000000000000] 
  1555                                  .L_end:
  1556 00000D5C C9                              leave
  1557 00000D5D C21800                          ret AND_KILL_FRAME(1)
  1558                                  
  1559                                  L_code_ptr_is_real:
  1560 00000D60 C8000000                        enter 0, 0
  1561 00000D64 48837D1801                      cmp COUNT, 1
  1562 00000D69 0F856F100000                    jne L_error_arg_count_1
  1563 00000D6F 488B4520                        mov rax, PARAM(0)
  1564 00000D73 803813                          cmp byte [rax], T_real
  1565 00000D76 750C                            jne .L_false
  1566 00000D78 48B8-                           mov rax, sob_boolean_true
  1566 00000D7A [0300000000000000] 
  1567 00000D82 EB0A                            jmp .L_end
  1568                                  .L_false:
  1569 00000D84 48B8-                           mov rax, sob_boolean_false
  1569 00000D86 [0200000000000000] 
  1570                                  .L_end:
  1571 00000D8E C9                              leave
  1572 00000D8F C21800                          ret AND_KILL_FRAME(1)
  1573                                  
  1574                                  L_code_ptr_is_fraction:
  1575 00000D92 C8000000                        enter 0, 0
  1576 00000D96 48837D1801                      cmp COUNT, 1
  1577 00000D9B 0F853D100000                    jne L_error_arg_count_1
  1578 00000DA1 488B4520                        mov rax, PARAM(0)
  1579 00000DA5 803812                          cmp byte [rax], T_fraction
  1580 00000DA8 750C                            jne .L_false
  1581 00000DAA 48B8-                           mov rax, sob_boolean_true
  1581 00000DAC [0300000000000000] 
  1582 00000DB4 EB0A                            jmp .L_end
  1583                                  .L_false:
  1584 00000DB6 48B8-                           mov rax, sob_boolean_false
  1584 00000DB8 [0200000000000000] 
  1585                                  .L_end:
  1586 00000DC0 C9                              leave
  1587 00000DC1 C21800                          ret AND_KILL_FRAME(1)
  1588                                  
  1589                                  L_code_ptr_is_boolean:
  1590 00000DC4 C8000000                        enter 0, 0
  1591 00000DC8 48837D1801                      cmp COUNT, 1
  1592 00000DCD 0F850B100000                    jne L_error_arg_count_1
  1593 00000DD3 488B4520                        mov rax, PARAM(0)
  1594 00000DD7 8A18                            mov bl, byte [rax]
  1595 00000DD9 80E308                          and bl, T_boolean
  1596 00000DDC 740C                            je .L_false
  1597 00000DDE 48B8-                           mov rax, sob_boolean_true
  1597 00000DE0 [0300000000000000] 
  1598 00000DE8 EB0A                            jmp .L_end
  1599                                  .L_false:
  1600 00000DEA 48B8-                           mov rax, sob_boolean_false
  1600 00000DEC [0200000000000000] 
  1601                                  .L_end:
  1602 00000DF4 C9                              leave
  1603 00000DF5 C21800                          ret AND_KILL_FRAME(1)
  1604                                          
  1605                                  L_code_ptr_is_boolean_false:
  1606 00000DF8 C8000000                        enter 0, 0
  1607 00000DFC 48837D1801                      cmp COUNT, 1
  1608 00000E01 0F85D70F0000                    jne L_error_arg_count_1
  1609 00000E07 488B4520                        mov rax, PARAM(0)
  1610 00000E0B 8A18                            mov bl, byte [rax]
  1611 00000E0D 80FB09                          cmp bl, T_boolean_false
  1612 00000E10 750C                            jne .L_false
  1613 00000E12 48B8-                           mov rax, sob_boolean_true
  1613 00000E14 [0300000000000000] 
  1614 00000E1C EB0A                            jmp .L_end
  1615                                  .L_false:
  1616 00000E1E 48B8-                           mov rax, sob_boolean_false
  1616 00000E20 [0200000000000000] 
  1617                                  .L_end:
  1618 00000E28 C9                              leave
  1619 00000E29 C21800                          ret AND_KILL_FRAME(1)
  1620                                  
  1621                                  L_code_ptr_is_boolean_true:
  1622 00000E2C C8000000                        enter 0, 0
  1623 00000E30 48837D1801                      cmp COUNT, 1
  1624 00000E35 0F85A30F0000                    jne L_error_arg_count_1
  1625 00000E3B 488B4520                        mov rax, PARAM(0)
  1626 00000E3F 8A18                            mov bl, byte [rax]
  1627 00000E41 80FB0A                          cmp bl, T_boolean_true
  1628 00000E44 750C                            jne .L_false
  1629 00000E46 48B8-                           mov rax, sob_boolean_true
  1629 00000E48 [0300000000000000] 
  1630 00000E50 EB0A                            jmp .L_end
  1631                                  .L_false:
  1632 00000E52 48B8-                           mov rax, sob_boolean_false
  1632 00000E54 [0200000000000000] 
  1633                                  .L_end:
  1634 00000E5C C9                              leave
  1635 00000E5D C21800                          ret AND_KILL_FRAME(1)
  1636                                  
  1637                                  L_code_ptr_is_number:
  1638 00000E60 C8000000                        enter 0, 0
  1639 00000E64 48837D1801                      cmp COUNT, 1
  1640 00000E69 0F856F0F0000                    jne L_error_arg_count_1
  1641 00000E6F 488B4520                        mov rax, PARAM(0)
  1642 00000E73 8A18                            mov bl, byte [rax]
  1643 00000E75 80E310                          and bl, T_number
  1644 00000E78 740C                            jz .L_false
  1645 00000E7A 48B8-                           mov rax, sob_boolean_true
  1645 00000E7C [0300000000000000] 
  1646 00000E84 EB0A                            jmp .L_end
  1647                                  .L_false:
  1648 00000E86 48B8-                           mov rax, sob_boolean_false
  1648 00000E88 [0200000000000000] 
  1649                                  .L_end:
  1650 00000E90 C9                              leave
  1651 00000E91 C21800                          ret AND_KILL_FRAME(1)
  1652                                          
  1653                                  L_code_ptr_is_collection:
  1654 00000E94 C8000000                        enter 0, 0
  1655 00000E98 48837D1801                      cmp COUNT, 1
  1656 00000E9D 0F853B0F0000                    jne L_error_arg_count_1
  1657 00000EA3 488B4520                        mov rax, PARAM(0)
  1658 00000EA7 8A18                            mov bl, byte [rax]
  1659 00000EA9 80E320                          and bl, T_collection
  1660 00000EAC 740C                            je .L_false
  1661 00000EAE 48B8-                           mov rax, sob_boolean_true
  1661 00000EB0 [0300000000000000] 
  1662 00000EB8 EB0A                            jmp .L_end
  1663                                  .L_false:
  1664 00000EBA 48B8-                           mov rax, sob_boolean_false
  1664 00000EBC [0200000000000000] 
  1665                                  .L_end:
  1666 00000EC4 C9                              leave
  1667 00000EC5 C21800                          ret AND_KILL_FRAME(1)
  1668                                  
  1669                                  L_code_ptr_cons:
  1670 00000EC8 C8000000                        enter 0, 0
  1671 00000ECC 48837D1802                      cmp COUNT, 2
  1672 00000ED1 0F853C0F0000                    jne L_error_arg_count_2
  1673 00000ED7 BF11000000                      mov rdi, (1 + 8 + 8)
  1674 00000EDC E8CFF2FFFF                      call malloc
  1675 00000EE1 C60021                          mov byte [rax], T_pair
  1676 00000EE4 488B5D20                        mov rbx, PARAM(0)
  1677 00000EE8 48895801                        mov SOB_PAIR_CAR(rax), rbx
  1678 00000EEC 488B5D28                        mov rbx, PARAM(1)
  1679 00000EF0 48895809                        mov SOB_PAIR_CDR(rax), rbx
  1680 00000EF4 C9                              leave
  1681 00000EF5 C22000                          ret AND_KILL_FRAME(2)
  1682                                  
  1683                                  L_code_ptr_display_sexpr:
  1684 00000EF8 C8000000                        enter 0, 0
  1685 00000EFC 48837D1801                      cmp COUNT, 1
  1686 00000F01 0F85D70E0000                    jne L_error_arg_count_1
  1687 00000F07 488B7D20                        mov rdi, PARAM(0)
  1688 00000F0B E821F5FFFF                      call print_sexpr
  1689 00000F10 48B8-                           mov rax, sob_void
  1689 00000F12 [0000000000000000] 
  1690 00000F1A C9                              leave
  1691 00000F1B C21800                          ret AND_KILL_FRAME(1)
  1692                                  
  1693                                  L_code_ptr_write_char:
  1694 00000F1E C8000000                        enter 0, 0
  1695 00000F22 48837D1801                      cmp COUNT, 1
  1696 00000F27 0F85B10E0000                    jne L_error_arg_count_1
  1697 00000F2D 488B4520                        mov rax, PARAM(0)
  1698                                          assert_char(rax)
    53 00000F31 803802              <1>  cmp byte [%1], %2
    54 00000F34 0F85780F0000        <1>  jne L_error_incorrect_type
  1699 00000F3A 8A4001                          mov al, SOB_CHAR_VALUE(rax)
  1700 00000F3D 4825FF000000                    and rax, 255
  1701 00000F43 48BF-                           mov rdi, fmt_char
  1701 00000F45 [CA08000000000000] 
  1702 00000F4D 4889C6                          mov rsi, rax
  1703 00000F50 B800000000                      mov rax, 0
  1704                                          ENTER
    44 00000F55 C8000000            <1>  enter 0, 0
    45 00000F59 4883E4F0            <1>  and rsp, ~15
  1705 00000F5D E8(00000000)                    call printf
  1706                                          LEAVE
    49 00000F62 C9                  <1>  leave
  1707 00000F63 48B8-                           mov rax, sob_void
  1707 00000F65 [0000000000000000] 
  1708 00000F6D C9                              leave
  1709 00000F6E C21800                          ret AND_KILL_FRAME(1)
  1710                                  
  1711                                  L_code_ptr_car:
  1712 00000F71 C8000000                        enter 0, 0
  1713 00000F75 48837D1801                      cmp COUNT, 1
  1714 00000F7A 0F855E0E0000                    jne L_error_arg_count_1
  1715 00000F80 488B4520                        mov rax, PARAM(0)
  1716                                          assert_pair(rax)
    53 00000F84 803821              <1>  cmp byte [%1], %2
    54 00000F87 0F85250F0000        <1>  jne L_error_incorrect_type
  1717 00000F8D 488B4001                        mov rax, SOB_PAIR_CAR(rax)
  1718 00000F91 C9                              leave
  1719 00000F92 C21800                          ret AND_KILL_FRAME(1)
  1720                                          
  1721                                  L_code_ptr_cdr:
  1722 00000F95 C8000000                        enter 0, 0
  1723 00000F99 48837D1801                      cmp COUNT, 1
  1724 00000F9E 0F853A0E0000                    jne L_error_arg_count_1
  1725 00000FA4 488B4520                        mov rax, PARAM(0)
  1726                                          assert_pair(rax)
    53 00000FA8 803821              <1>  cmp byte [%1], %2
    54 00000FAB 0F85010F0000        <1>  jne L_error_incorrect_type
  1727 00000FB1 488B4009                        mov rax, SOB_PAIR_CDR(rax)
  1728 00000FB5 C9                              leave
  1729 00000FB6 C21800                          ret AND_KILL_FRAME(1)
  1730                                          
  1731                                  L_code_ptr_string_length:
  1732 00000FB9 C8000000                        enter 0, 0
  1733 00000FBD 48837D1801                      cmp COUNT, 1
  1734 00000FC2 0F85160E0000                    jne L_error_arg_count_1
  1735 00000FC8 488B4520                        mov rax, PARAM(0)
  1736                                          assert_string(rax)
    53 00000FCC 803803              <1>  cmp byte [%1], %2
    54 00000FCF 0F85DD0E0000        <1>  jne L_error_incorrect_type
  1737 00000FD5 488B7801                        mov rdi, SOB_STRING_LENGTH(rax)
  1738 00000FD9 E84F0D0000                      call make_integer
  1739 00000FDE C9                              leave
  1740 00000FDF C21800                          ret AND_KILL_FRAME(1)
  1741                                  
  1742                                  L_code_ptr_vector_length:
  1743 00000FE2 C8000000                        enter 0, 0
  1744 00000FE6 48837D1801                      cmp COUNT, 1
  1745 00000FEB 0F85ED0D0000                    jne L_error_arg_count_1
  1746 00000FF1 488B4520                        mov rax, PARAM(0)
  1747                                          assert_vector(rax)
    53 00000FF5 803822              <1>  cmp byte [%1], %2
    54 00000FF8 0F85B40E0000        <1>  jne L_error_incorrect_type
  1748 00000FFE 488B7801                        mov rdi, SOB_VECTOR_LENGTH(rax)
  1749 00001002 E8260D0000                      call make_integer
  1750 00001007 C9                              leave
  1751 00001008 C21800                          ret AND_KILL_FRAME(1)
  1752                                  
  1753                                  L_code_ptr_real_to_integer:
  1754 0000100B C8000000                        enter 0, 0
  1755 0000100F 48837D1801                      cmp COUNT, 1
  1756 00001014 0F85C40D0000                    jne L_error_arg_count_1
  1757 0000101A 488B5D20                        mov rbx, PARAM(0)
  1758                                          assert_real(rbx)
    53 0000101E 803B13              <1>  cmp byte [%1], %2
    54 00001021 0F858B0E0000        <1>  jne L_error_incorrect_type
  1759 00001027 F20F104301                      movsd xmm0, qword [rbx + 1]
  1760 0000102C F2480F2CF8                      cvttsd2si rdi, xmm0
  1761 00001031 E8F70C0000                      call make_integer
  1762 00001036 C9                              leave
  1763 00001037 C21800                          ret AND_KILL_FRAME(1)
  1764                                  
  1765                                  L_code_ptr_exit:
  1766 0000103A C8000000                        enter 0, 0
  1767 0000103E 48837D1800                      cmp COUNT, 0
  1768 00001043 0F85600D0000                    jne L_error_arg_count_0
  1769 00001049 B800000000                      mov rax, 0
  1770 0000104E E8(00000000)                    call exit
  1771                                  
  1772                                  L_code_ptr_integer_to_real:
  1773 00001053 C8000000                        enter 0, 0
  1774 00001057 48837D1801                      cmp COUNT, 1
  1775 0000105C 0F857C0D0000                    jne L_error_arg_count_1
  1776 00001062 488B4520                        mov rax, PARAM(0)
  1777                                          assert_integer(rax)
    53 00001066 803811              <1>  cmp byte [%1], %2
    54 00001069 0F85430E0000        <1>  jne L_error_incorrect_type
  1778 0000106F FF7001                          push qword [rax + 1]
  1779 00001072 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1780 00001078 E8980C0000                      call make_real
  1781 0000107D C9                              leave
  1782 0000107E C21800                          ret AND_KILL_FRAME(1)
  1783                                  
  1784                                  L_code_ptr_fraction_to_real:
  1785 00001081 C8000000                        enter 0, 0
  1786 00001085 48837D1801                      cmp COUNT, 1
  1787 0000108A 0F854E0D0000                    jne L_error_arg_count_1
  1788 00001090 488B4520                        mov rax, PARAM(0)
  1789                                          assert_fraction(rax)
    53 00001094 803812              <1>  cmp byte [%1], %2
    54 00001097 0F85150E0000        <1>  jne L_error_incorrect_type
  1790 0000109D FF7001                          push qword [rax + 1]
  1791 000010A0 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1792 000010A6 FF7009                          push qword [rax + 1 + 8]
  1793 000010A9 F2480F2A0C24                    cvtsi2sd xmm1, qword [rsp]
  1794 000010AF F20F5EC1                        divsd xmm0, xmm1
  1795 000010B3 E85D0C0000                      call make_real
  1796 000010B8 C9                              leave
  1797 000010B9 C21800                          ret AND_KILL_FRAME(1)
  1798                                  
  1799                                  L_code_ptr_char_to_integer:
  1800 000010BC C8000000                        enter 0, 0
  1801 000010C0 48837D1801                      cmp COUNT, 1
  1802 000010C5 0F85130D0000                    jne L_error_arg_count_1
  1803 000010CB 488B4520                        mov rax, PARAM(0)
  1804                                          assert_char(rax)
    53 000010CF 803802              <1>  cmp byte [%1], %2
    54 000010D2 0F85DA0D0000        <1>  jne L_error_incorrect_type
  1805 000010D8 8A4001                          mov al, byte [rax + 1]
  1806 000010DB 4825FF000000                    and rax, 255
  1807 000010E1 4889C7                          mov rdi, rax
  1808 000010E4 E8440C0000                      call make_integer
  1809 000010E9 C9                              leave
  1810 000010EA C21800                          ret AND_KILL_FRAME(1)
  1811                                  
  1812                                  L_code_ptr_integer_to_fraction:
  1813 000010ED C8000000                        enter 0, 0
  1814 000010F1 48837D1801                      cmp COUNT, 1
  1815 000010F6 0F85E20C0000                    jne L_error_arg_count_1
  1816 000010FC 4C8B4520                        mov r8, PARAM(0)
  1817                                          assert_integer(r8)
    53 00001100 41803811            <1>  cmp byte [%1], %2
    54 00001104 0F85A80D0000        <1>  jne L_error_incorrect_type
  1818 0000110A BF11000000                      mov rdi, (1 + 8 + 8)
  1819 0000110F E89CF0FFFF                      call malloc
  1820 00001114 498B5801                        mov rbx, qword [r8 + 1]
  1821 00001118 C60012                          mov byte [rax], T_fraction
  1822 0000111B 48895801                        mov qword [rax + 1], rbx
  1823 0000111F 48C7400901000000                mov qword [rax + 1 + 8], 1
  1824 00001127 C9                              leave
  1825 00001128 C21800                          ret AND_KILL_FRAME(1)
  1826                                  
  1827                                  L_code_ptr_integer_to_char:
  1828 0000112B C8000000                        enter 0, 0
  1829 0000112F 48837D1801                      cmp COUNT, 1
  1830 00001134 0F85A40C0000                    jne L_error_arg_count_1
  1831 0000113A 488B4520                        mov rax, PARAM(0)
  1832                                          assert_integer(rax)
    53 0000113E 803811              <1>  cmp byte [%1], %2
    54 00001141 0F856B0D0000        <1>  jne L_error_incorrect_type
  1833 00001147 488B5801                        mov rbx, qword [rax + 1]
  1834 0000114B 4883FB00                        cmp rbx, 0
  1835 0000114F 0F8EF20B0000                    jle L_error_integer_range
  1836 00001155 4881FB00010000                  cmp rbx, 256
  1837 0000115C 0F8DE50B0000                    jge L_error_integer_range
  1838 00001162 BF02000000                      mov rdi, (1 + 1)
  1839 00001167 E844F0FFFF                      call malloc
  1840 0000116C C60002                          mov byte [rax], T_char
  1841 0000116F 885801                          mov byte [rax + 1], bl
  1842 00001172 C9                              leave
  1843 00001173 C21800                          ret AND_KILL_FRAME(1)
  1844                                  
  1845                                  L_code_ptr_trng:
  1846 00001176 C8000000                        enter 0, 0
  1847 0000117A 48837D1800                      cmp COUNT, 0
  1848 0000117F 0F85240C0000                    jne L_error_arg_count_0
  1849 00001185 480FC7F7                        rdrand rdi
  1850 00001189 48D1EF                          shr rdi, 1
  1851 0000118C E89C0B0000                      call make_integer
  1852 00001191 C9                              leave
  1853 00001192 C21000                          ret AND_KILL_FRAME(0)
  1854                                  
  1855                                  L_code_ptr_is_zero:
  1856 00001195 C8000000                        enter 0, 0
  1857 00001199 48837D1801                      cmp COUNT, 1
  1858 0000119E 0F853A0C0000                    jne L_error_arg_count_1
  1859 000011A4 488B4520                        mov rax, PARAM(0)
  1860 000011A8 803811                          cmp byte [rax], T_integer
  1861 000011AB 740F                            je .L_integer
  1862 000011AD 803812                          cmp byte [rax], T_fraction
  1863 000011B0 7413                            je .L_fraction
  1864 000011B2 803813                          cmp byte [rax], T_real
  1865 000011B5 7417                            je .L_real
  1866 000011B7 E9F60C0000                      jmp L_error_incorrect_type
  1867                                  .L_integer:
  1868 000011BC 4883780100                      cmp qword [rax + 1], 0
  1869 000011C1 7429                            je .L_zero
  1870 000011C3 EB1B                            jmp .L_not_zero
  1871                                  .L_fraction:
  1872 000011C5 4883780100                      cmp qword [rax + 1], 0
  1873 000011CA 7420                            je .L_zero
  1874 000011CC EB12                            jmp .L_not_zero
  1875                                  .L_real:
  1876 000011CE 660FEFC0                        pxor xmm0, xmm0
  1877 000011D2 FF7001                          push qword [rax + 1]
  1878 000011D5 F20F100C24                      movsd xmm1, qword [rsp]
  1879 000011DA 660F2EC1                        ucomisd xmm0, xmm1
  1880 000011DE 740C                            je .L_zero
  1881                                  .L_not_zero:
  1882 000011E0 48B8-                           mov rax, sob_boolean_false
  1882 000011E2 [0200000000000000] 
  1883 000011EA EB0A                            jmp .L_end
  1884                                  .L_zero:
  1885 000011EC 48B8-                           mov rax, sob_boolean_true
  1885 000011EE [0300000000000000] 
  1886                                  .L_end:
  1887 000011F6 C9                              leave
  1888 000011F7 C21800                          ret AND_KILL_FRAME(1)
  1889                                  
  1890                                  L_code_ptr_is_integer:
  1891 000011FA C8000000                        enter 0, 0
  1892 000011FE 48837D1801                      cmp COUNT, 1
  1893 00001203 0F85D50B0000                    jne L_error_arg_count_1
  1894 00001209 488B4520                        mov rax, PARAM(0)
  1895 0000120D 803811                          cmp byte [rax], T_integer
  1896 00001210 750C                            jne .L_false
  1897 00001212 48B8-                           mov rax, sob_boolean_true
  1897 00001214 [0300000000000000] 
  1898 0000121C EB0A                            jmp .L_exit
  1899                                  .L_false:
  1900 0000121E 48B8-                           mov rax, sob_boolean_false
  1900 00001220 [0200000000000000] 
  1901                                  .L_exit:
  1902 00001228 C9                              leave
  1903 00001229 C21800                          ret AND_KILL_FRAME(1)
  1904                                  
  1905                                  L_code_ptr_raw_bin_add_rr:
  1906 0000122C C8000000                        enter 0, 0
  1907 00001230 48837D1802                      cmp COUNT, 2
  1908 00001235 0F85D80B0000                    jne L_error_arg_count_2
  1909 0000123B 488B5D20                        mov rbx, PARAM(0)
  1910                                          assert_real(rbx)
    53 0000123F 803B13              <1>  cmp byte [%1], %2
    54 00001242 0F856A0C0000        <1>  jne L_error_incorrect_type
  1911 00001248 488B4D28                        mov rcx, PARAM(1)
  1912                                          assert_real(rcx)
    53 0000124C 803913              <1>  cmp byte [%1], %2
    54 0000124F 0F855D0C0000        <1>  jne L_error_incorrect_type
  1913 00001255 F20F104301                      movsd xmm0, qword [rbx + 1]
  1914 0000125A F20F104901                      movsd xmm1, qword [rcx + 1]
  1915 0000125F F20F58C1                        addsd xmm0, xmm1
  1916 00001263 E8AD0A0000                      call make_real
  1917 00001268 C9                              leave
  1918 00001269 C22000                          ret AND_KILL_FRAME(2)
  1919                                  
  1920                                  L_code_ptr_raw_bin_sub_rr:
  1921 0000126C C8000000                        enter 0, 0
  1922 00001270 48837D1802                      cmp COUNT, 2
  1923 00001275 0F85980B0000                    jne L_error_arg_count_2
  1924 0000127B 488B5D20                        mov rbx, PARAM(0)
  1925                                          assert_real(rbx)
    53 0000127F 803B13              <1>  cmp byte [%1], %2
    54 00001282 0F852A0C0000        <1>  jne L_error_incorrect_type
  1926 00001288 488B4D28                        mov rcx, PARAM(1)
  1927                                          assert_real(rcx)
    53 0000128C 803913              <1>  cmp byte [%1], %2
    54 0000128F 0F851D0C0000        <1>  jne L_error_incorrect_type
  1928 00001295 F20F104301                      movsd xmm0, qword [rbx + 1]
  1929 0000129A F20F104901                      movsd xmm1, qword [rcx + 1]
  1930 0000129F F20F5CC1                        subsd xmm0, xmm1
  1931 000012A3 E86D0A0000                      call make_real
  1932 000012A8 C9                              leave
  1933 000012A9 C22000                          ret AND_KILL_FRAME(2)
  1934                                  
  1935                                  L_code_ptr_raw_bin_mul_rr:
  1936 000012AC C8000000                        enter 0, 0
  1937 000012B0 48837D1802                      cmp COUNT, 2
  1938 000012B5 0F85580B0000                    jne L_error_arg_count_2
  1939 000012BB 488B5D20                        mov rbx, PARAM(0)
  1940                                          assert_real(rbx)
    53 000012BF 803B13              <1>  cmp byte [%1], %2
    54 000012C2 0F85EA0B0000        <1>  jne L_error_incorrect_type
  1941 000012C8 488B4D28                        mov rcx, PARAM(1)
  1942                                          assert_real(rcx)
    53 000012CC 803913              <1>  cmp byte [%1], %2
    54 000012CF 0F85DD0B0000        <1>  jne L_error_incorrect_type
  1943 000012D5 F20F104301                      movsd xmm0, qword [rbx + 1]
  1944 000012DA F20F104901                      movsd xmm1, qword [rcx + 1]
  1945 000012DF F20F59C1                        mulsd xmm0, xmm1
  1946 000012E3 E82D0A0000                      call make_real
  1947 000012E8 C9                              leave
  1948 000012E9 C22000                          ret AND_KILL_FRAME(2)
  1949                                  
  1950                                  L_code_ptr_raw_bin_div_rr:
  1951 000012EC C8000000                        enter 0, 0
  1952 000012F0 48837D1802                      cmp COUNT, 2
  1953 000012F5 0F85180B0000                    jne L_error_arg_count_2
  1954 000012FB 488B5D20                        mov rbx, PARAM(0)
  1955                                          assert_real(rbx)
    53 000012FF 803B13              <1>  cmp byte [%1], %2
    54 00001302 0F85AA0B0000        <1>  jne L_error_incorrect_type
  1956 00001308 488B4D28                        mov rcx, PARAM(1)
  1957                                          assert_real(rcx)
    53 0000130C 803913              <1>  cmp byte [%1], %2
    54 0000130F 0F859D0B0000        <1>  jne L_error_incorrect_type
  1958 00001315 F20F104301                      movsd xmm0, qword [rbx + 1]
  1959 0000131A F20F104901                      movsd xmm1, qword [rcx + 1]
  1960 0000131F 660FEFD2                        pxor xmm2, xmm2
  1961 00001323 660F2ECA                        ucomisd xmm1, xmm2
  1962 00001327 0F84B60B0000                    je L_error_division_by_zero
  1963 0000132D F20F5EC1                        divsd xmm0, xmm1
  1964 00001331 E8DF090000                      call make_real
  1965 00001336 C9                              leave
  1966 00001337 C22000                          ret AND_KILL_FRAME(2)
  1967                                  
  1968                                  L_code_ptr_raw_bin_add_zz:
  1969 0000133A C8000000                	enter 0, 0
  1970 0000133E 48837D1802              	cmp COUNT, 2
  1971 00001343 0F85CA0A0000            	jne L_error_arg_count_2
  1972 00001349 4C8B4520                	mov r8, PARAM(0)
  1973                                  	assert_integer(r8)
    53 0000134D 41803811            <1>  cmp byte [%1], %2
    54 00001351 0F855B0B0000        <1>  jne L_error_incorrect_type
  1974 00001357 4C8B4D28                	mov r9, PARAM(1)
  1975                                  	assert_integer(r9)
    53 0000135B 41803911            <1>  cmp byte [%1], %2
    54 0000135F 0F854D0B0000        <1>  jne L_error_incorrect_type
  1976 00001365 498B7801                	mov rdi, qword [r8 + 1]
  1977 00001369 49037901                	add rdi, qword [r9 + 1]
  1978 0000136D E8BB090000              	call make_integer
  1979 00001372 C9                      	leave
  1980 00001373 C22000                  	ret AND_KILL_FRAME(2)
  1981                                  
  1982                                  L_code_ptr_raw_bin_add_qq:
  1983 00001376 C8000000                        enter 0, 0
  1984 0000137A 48837D1802                      cmp COUNT, 2
  1985 0000137F 0F858E0A0000                    jne L_error_arg_count_2
  1986 00001385 4C8B4520                        mov r8, PARAM(0)
  1987                                          assert_fraction(r8)
    53 00001389 41803812            <1>  cmp byte [%1], %2
    54 0000138D 0F851F0B0000        <1>  jne L_error_incorrect_type
  1988 00001393 4C8B4D28                        mov r9, PARAM(1)
  1989                                          assert_fraction(r9)
    53 00001397 41803912            <1>  cmp byte [%1], %2
    54 0000139B 0F85110B0000        <1>  jne L_error_incorrect_type
  1990 000013A1 498B4001                        mov rax, qword [r8 + 1] ; num1
  1991 000013A5 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1992 000013A9 4899                            cqo
  1993 000013AB 48F7EB                          imul rbx
  1994 000013AE 4889C6                          mov rsi, rax
  1995 000013B1 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1996 000013B5 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  1997 000013B9 4899                            cqo
  1998 000013BB 48F7EB                          imul rbx
  1999 000013BE 4801C6                          add rsi, rax
  2000 000013C1 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2001 000013C5 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  2002 000013C9 4899                            cqo
  2003 000013CB 48F7EB                          imul rbx
  2004 000013CE 4889C7                          mov rdi, rax
  2005 000013D1 E8DE010000                      call normalize_fraction
  2006 000013D6 C9                              leave
  2007 000013D7 C22000                          ret AND_KILL_FRAME(2)
  2008                                  
  2009                                  L_code_ptr_raw_bin_sub_zz:
  2010 000013DA C8000000                	enter 0, 0
  2011 000013DE 48837D1802              	cmp COUNT, 2
  2012 000013E3 0F852A0A0000            	jne L_error_arg_count_2
  2013 000013E9 4C8B4520                	mov r8, PARAM(0)
  2014                                  	assert_integer(r8)
    53 000013ED 41803811            <1>  cmp byte [%1], %2
    54 000013F1 0F85BB0A0000        <1>  jne L_error_incorrect_type
  2015 000013F7 4C8B4D28                	mov r9, PARAM(1)
  2016                                  	assert_integer(r9)
    53 000013FB 41803911            <1>  cmp byte [%1], %2
    54 000013FF 0F85AD0A0000        <1>  jne L_error_incorrect_type
  2017 00001405 498B7801                	mov rdi, qword [r8 + 1]
  2018 00001409 492B7901                	sub rdi, qword [r9 + 1]
  2019 0000140D E81B090000              	call make_integer
  2020 00001412 C9                      	leave
  2021 00001413 C22000                  	ret AND_KILL_FRAME(2)
  2022                                  
  2023                                  L_code_ptr_raw_bin_sub_qq:
  2024 00001416 C8000000                        enter 0, 0
  2025 0000141A 48837D1802                      cmp COUNT, 2
  2026 0000141F 0F85EE090000                    jne L_error_arg_count_2
  2027 00001425 4C8B4520                        mov r8, PARAM(0)
  2028                                          assert_fraction(r8)
    53 00001429 41803812            <1>  cmp byte [%1], %2
    54 0000142D 0F857F0A0000        <1>  jne L_error_incorrect_type
  2029 00001433 4C8B4D28                        mov r9, PARAM(1)
  2030                                          assert_fraction(r9)
    53 00001437 41803912            <1>  cmp byte [%1], %2
    54 0000143B 0F85710A0000        <1>  jne L_error_incorrect_type
  2031 00001441 498B4001                        mov rax, qword [r8 + 1] ; num1
  2032 00001445 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  2033 00001449 4899                            cqo
  2034 0000144B 48F7EB                          imul rbx
  2035 0000144E 4889C6                          mov rsi, rax
  2036 00001451 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2037 00001455 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  2038 00001459 4899                            cqo
  2039 0000145B 48F7EB                          imul rbx
  2040 0000145E 4829C6                          sub rsi, rax
  2041 00001461 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2042 00001465 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  2043 00001469 4899                            cqo
  2044 0000146B 48F7EB                          imul rbx
  2045 0000146E 4889C7                          mov rdi, rax
  2046 00001471 E83E010000                      call normalize_fraction
  2047 00001476 C9                              leave
  2048 00001477 C22000                          ret AND_KILL_FRAME(2)
  2049                                  
  2050                                  L_code_ptr_raw_bin_mul_zz:
  2051 0000147A C8000000                	enter 0, 0
  2052 0000147E 48837D1802              	cmp COUNT, 2
  2053 00001483 0F858A090000            	jne L_error_arg_count_2
  2054 00001489 4C8B4520                	mov r8, PARAM(0)
  2055                                  	assert_integer(r8)
    53 0000148D 41803811            <1>  cmp byte [%1], %2
    54 00001491 0F851B0A0000        <1>  jne L_error_incorrect_type
  2056 00001497 4C8B4D28                	mov r9, PARAM(1)
  2057                                  	assert_integer(r9)
    53 0000149B 41803911            <1>  cmp byte [%1], %2
    54 0000149F 0F850D0A0000        <1>  jne L_error_incorrect_type
  2058 000014A5 4899                    	cqo
  2059 000014A7 498B4001                	mov rax, qword [r8 + 1]
  2060 000014AB 49F76101                	mul qword [r9 + 1]
  2061 000014AF 4889C7                  	mov rdi, rax
  2062 000014B2 E876080000              	call make_integer
  2063 000014B7 C9                      	leave
  2064 000014B8 C22000                  	ret AND_KILL_FRAME(2)
  2065                                  
  2066                                  L_code_ptr_raw_bin_mul_qq:
  2067 000014BB C8000000                        enter 0, 0
  2068 000014BF 48837D1802                      cmp COUNT, 2
  2069 000014C4 0F8549090000                    jne L_error_arg_count_2
  2070 000014CA 4C8B4520                        mov r8, PARAM(0)
  2071                                          assert_fraction(r8)
    53 000014CE 41803812            <1>  cmp byte [%1], %2
    54 000014D2 0F85DA090000        <1>  jne L_error_incorrect_type
  2072 000014D8 4C8B4D28                        mov r9, PARAM(1)
  2073                                          assert_fraction(r9)
    53 000014DC 41803912            <1>  cmp byte [%1], %2
    54 000014E0 0F85CC090000        <1>  jne L_error_incorrect_type
  2074 000014E6 498B4001                        mov rax, qword [r8 + 1] ; num1
  2075 000014EA 498B5901                        mov rbx, qword [r9 + 1] ; num2
  2076 000014EE 4899                            cqo
  2077 000014F0 48F7EB                          imul rbx
  2078 000014F3 4889C6                          mov rsi, rax
  2079 000014F6 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2080 000014FA 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  2081 000014FE 4899                            cqo
  2082 00001500 48F7EB                          imul rbx
  2083 00001503 4889C7                          mov rdi, rax
  2084 00001506 E8A9000000                      call normalize_fraction
  2085 0000150B C9                              leave
  2086 0000150C C22000                          ret AND_KILL_FRAME(2)
  2087                                          
  2088                                  L_code_ptr_raw_bin_div_zz:
  2089 0000150F C8000000                	enter 0, 0
  2090 00001513 48837D1802              	cmp COUNT, 2
  2091 00001518 0F85F5080000            	jne L_error_arg_count_2
  2092 0000151E 4C8B4520                	mov r8, PARAM(0)
  2093                                  	assert_integer(r8)
    53 00001522 41803811            <1>  cmp byte [%1], %2
    54 00001526 0F8586090000        <1>  jne L_error_incorrect_type
  2094 0000152C 4C8B4D28                	mov r9, PARAM(1)
  2095                                  	assert_integer(r9)
    53 00001530 41803911            <1>  cmp byte [%1], %2
    54 00001534 0F8578090000        <1>  jne L_error_incorrect_type
  2096 0000153A 498B7901                	mov rdi, qword [r9 + 1]
  2097 0000153E 4883FF00                	cmp rdi, 0
  2098 00001542 0F849B090000            	je L_error_division_by_zero
  2099 00001548 498B7001                	mov rsi, qword [r8 + 1]
  2100 0000154C E863000000              	call normalize_fraction
  2101 00001551 C9                      	leave
  2102 00001552 C22000                  	ret AND_KILL_FRAME(2)
  2103                                  
  2104                                  L_code_ptr_raw_bin_div_qq:
  2105 00001555 C8000000                        enter 0, 0
  2106 00001559 48837D1802                      cmp COUNT, 2
  2107 0000155E 0F85AF080000                    jne L_error_arg_count_2
  2108 00001564 4C8B4520                        mov r8, PARAM(0)
  2109                                          assert_fraction(r8)
    53 00001568 41803812            <1>  cmp byte [%1], %2
    54 0000156C 0F8540090000        <1>  jne L_error_incorrect_type
  2110 00001572 4C8B4D28                        mov r9, PARAM(1)
  2111                                          assert_fraction(r9)
    53 00001576 41803912            <1>  cmp byte [%1], %2
    54 0000157A 0F8532090000        <1>  jne L_error_incorrect_type
  2112 00001580 4983790100                      cmp qword [r9 + 1], 0
  2113 00001585 0F8458090000                    je L_error_division_by_zero
  2114 0000158B 498B4001                        mov rax, qword [r8 + 1] ; num1
  2115 0000158F 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  2116 00001593 4899                            cqo
  2117 00001595 48F7EB                          imul rbx
  2118 00001598 4889C6                          mov rsi, rax
  2119 0000159B 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2120 0000159F 498B5901                        mov rbx, qword [r9 + 1] ; num2
  2121 000015A3 4899                            cqo
  2122 000015A5 48F7EB                          imul rbx
  2123 000015A8 4889C7                          mov rdi, rax
  2124 000015AB E804000000                      call normalize_fraction
  2125 000015B0 C9                              leave
  2126 000015B1 C22000                          ret AND_KILL_FRAME(2)
  2127                                          
  2128                                  normalize_fraction:
  2129 000015B4 56                              push rsi
  2130 000015B5 57                              push rdi
  2131 000015B6 E859000000                      call gcd
  2132 000015BB 4889C3                          mov rbx, rax
  2133 000015BE 58                              pop rax
  2134 000015BF 4899                            cqo
  2135 000015C1 48F7FB                          idiv rbx
  2136 000015C4 4989C0                          mov r8, rax
  2137 000015C7 58                              pop rax
  2138 000015C8 4899                            cqo
  2139 000015CA 48F7FB                          idiv rbx
  2140 000015CD 4989C1                          mov r9, rax
  2141 000015D0 4983F900                        cmp r9, 0
  2142 000015D4 741C                            je .L_zero
  2143 000015D6 4983F801                        cmp r8, 1
  2144 000015DA 7421                            je .L_int
  2145 000015DC BF11000000                      mov rdi, (1 + 8 + 8)
  2146 000015E1 E8CAEBFFFF                      call malloc
  2147 000015E6 C60012                          mov byte [rax], T_fraction
  2148 000015E9 4C894801                        mov qword [rax + 1], r9
  2149 000015ED 4C894009                        mov qword [rax + 1 + 8], r8
  2150 000015F1 C3                              ret
  2151                                  .L_zero:
  2152 000015F2 BF00000000                      mov rdi, 0
  2153 000015F7 E831070000                      call make_integer
  2154 000015FC C3                              ret
  2155                                  .L_int:
  2156 000015FD 4C89CF                          mov rdi, r9
  2157 00001600 E828070000                      call make_integer
  2158 00001605 C3                              ret
  2159                                  
  2160                                  iabs:
  2161 00001606 4889F8                          mov rax, rdi
  2162 00001609 4883F800                        cmp rax, 0
  2163 0000160D 7C01                            jl .Lneg
  2164 0000160F C3                              ret
  2165                                  .Lneg:
  2166 00001610 48F7D8                          neg rax
  2167 00001613 C3                              ret
  2168                                  
  2169                                  gcd:
  2170 00001614 E8EDFFFFFF                      call iabs
  2171 00001619 4889C3                          mov rbx, rax
  2172 0000161C 4889F7                          mov rdi, rsi
  2173 0000161F E8E2FFFFFF                      call iabs
  2174 00001624 4883F800                        cmp rax, 0
  2175 00001628 7502                            jne .L0
  2176 0000162A 4893                            xchg rax, rbx
  2177                                  .L0:
  2178 0000162C 4883FB00                        cmp rbx, 0
  2179 00001630 740C                            je .L1
  2180 00001632 4899                            cqo
  2181 00001634 48F7F3                          div rbx
  2182 00001637 4889D0                          mov rax, rdx
  2183 0000163A 4893                            xchg rax, rbx
  2184 0000163C EBEE                            jmp .L0
  2185                                  .L1:
  2186 0000163E C3                              ret
  2187                                  
  2188                                  L_code_ptr_error:
  2189 0000163F C8000000                        enter 0, 0
  2190 00001643 48837D1802                      cmp COUNT, 2
  2191 00001648 0F85C5070000                    jne L_error_arg_count_2
  2192 0000164E 488B7520                        mov rsi, PARAM(0)
  2193                                          assert_interned_symbol(rsi)
    53 00001652 803E41              <1>  cmp byte [%1], %2
    54 00001655 0F8557080000        <1>  jne L_error_incorrect_type
  2194 0000165B 488B7528                        mov rsi, PARAM(1)
  2195                                          assert_string(rsi)
    53 0000165F 803E03              <1>  cmp byte [%1], %2
    54 00001662 0F854A080000        <1>  jne L_error_incorrect_type
  2196 00001668 48BF-                           mov rdi, fmt_scheme_error_part_1
  2196 0000166A [280A000000000000] 
  2197 00001672 B800000000                      mov rax, 0
  2198                                          ENTER
    44 00001677 C8000000            <1>  enter 0, 0
    45 0000167B 4883E4F0            <1>  and rsp, ~15
  2199 0000167F E8(00000000)                    call printf
  2200                                          LEAVE
    49 00001684 C9                  <1>  leave
  2201 00001685 488B7D20                        mov rdi, PARAM(0)
  2202 00001689 E8A3EDFFFF                      call print_sexpr
  2203 0000168E 48BF-                           mov rdi, fmt_scheme_error_part_2
  2203 00001690 [3C0A000000000000] 
  2204 00001698 B800000000                      mov rax, 0
  2205                                          ENTER
    44 0000169D C8000000            <1>  enter 0, 0
    45 000016A1 4883E4F0            <1>  and rsp, ~15
  2206 000016A5 E8(00000000)                    call printf
  2207                                          LEAVE
    49 000016AA C9                  <1>  leave
  2208 000016AB 488B4528                        mov rax, PARAM(1)       ; sob_string
  2209 000016AF BE01000000                      mov rsi, 1              ; size = 1 byte
  2210 000016B4 488B5001                        mov rdx, qword [rax + 1] ; length
  2211 000016B8 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
  2212 000016BC 488B0C25[00000000]              mov rcx, qword [stdout]  ; FILE*
  2213                                  	ENTER
    44 000016C4 C8000000            <1>  enter 0, 0
    45 000016C8 4883E4F0            <1>  and rsp, ~15
  2214 000016CC E8(00000000)                    call fwrite
  2215                                  	LEAVE
    49 000016D1 C9                  <1>  leave
  2216 000016D2 48BF-                           mov rdi, fmt_scheme_error_part_3
  2216 000016D4 [7E0A000000000000] 
  2217 000016DC B800000000                      mov rax, 0
  2218                                          ENTER
    44 000016E1 C8000000            <1>  enter 0, 0
    45 000016E5 4883E4F0            <1>  and rsp, ~15
  2219 000016E9 E8(00000000)                    call printf
  2220                                          LEAVE
    49 000016EE C9                  <1>  leave
  2221 000016EF 48C7C0F7FFFFFF                  mov rax, -9
  2222 000016F6 E8(00000000)                    call exit
  2223                                  
  2224                                  L_code_ptr_raw_less_than_rr:
  2225 000016FB C8000000                        enter 0, 0
  2226 000016FF 48837D1802                      cmp COUNT, 2
  2227 00001704 0F8509070000                    jne L_error_arg_count_2
  2228 0000170A 488B7520                        mov rsi, PARAM(0)
  2229                                          assert_real(rsi)
    53 0000170E 803E13              <1>  cmp byte [%1], %2
    54 00001711 0F859B070000        <1>  jne L_error_incorrect_type
  2230 00001717 488B7D28                        mov rdi, PARAM(1)
  2231                                          assert_real(rdi)
    53 0000171B 803F13              <1>  cmp byte [%1], %2
    54 0000171E 0F858E070000        <1>  jne L_error_incorrect_type
  2232 00001724 F20F104601                      movsd xmm0, qword [rsi + 1]
  2233 00001729 F20F104F01                      movsd xmm1, qword [rdi + 1]
  2234 0000172E 660F2FC1                        comisd xmm0, xmm1
  2235 00001732 730C                            jae .L_false
  2236 00001734 48B8-                           mov rax, sob_boolean_true
  2236 00001736 [0300000000000000] 
  2237 0000173E EB0A                            jmp .L_exit
  2238                                  .L_false:
  2239 00001740 48B8-                           mov rax, sob_boolean_false
  2239 00001742 [0200000000000000] 
  2240                                  .L_exit:
  2241 0000174A C9                              leave
  2242 0000174B C22000                          ret AND_KILL_FRAME(2)
  2243                                          
  2244                                  L_code_ptr_raw_less_than_zz:
  2245 0000174E C8000000                	enter 0, 0
  2246 00001752 48837D1802              	cmp COUNT, 2
  2247 00001757 0F85B6060000            	jne L_error_arg_count_2
  2248 0000175D 4C8B4520                	mov r8, PARAM(0)
  2249                                  	assert_integer(r8)
    53 00001761 41803811            <1>  cmp byte [%1], %2
    54 00001765 0F8547070000        <1>  jne L_error_incorrect_type
  2250 0000176B 4C8B4D28                	mov r9, PARAM(1)
  2251                                  	assert_integer(r9)
    53 0000176F 41803911            <1>  cmp byte [%1], %2
    54 00001773 0F8539070000        <1>  jne L_error_incorrect_type
  2252 00001779 498B7801                	mov rdi, qword [r8 + 1]
  2253 0000177D 493B7901                	cmp rdi, qword [r9 + 1]
  2254 00001781 7D0C                    	jge .L_false
  2255 00001783 48B8-                   	mov rax, sob_boolean_true
  2255 00001785 [0300000000000000] 
  2256 0000178D EB0A                    	jmp .L_exit
  2257                                  .L_false:
  2258 0000178F 48B8-                   	mov rax, sob_boolean_false
  2258 00001791 [0200000000000000] 
  2259                                  .L_exit:
  2260 00001799 C9                      	leave
  2261 0000179A C22000                  	ret AND_KILL_FRAME(2)
  2262                                  
  2263                                  L_code_ptr_raw_less_than_qq:
  2264 0000179D C8000000                        enter 0, 0
  2265 000017A1 48837D1802                      cmp COUNT, 2
  2266 000017A6 0F8567060000                    jne L_error_arg_count_2
  2267 000017AC 488B7520                        mov rsi, PARAM(0)
  2268                                          assert_fraction(rsi)
    53 000017B0 803E12              <1>  cmp byte [%1], %2
    54 000017B3 0F85F9060000        <1>  jne L_error_incorrect_type
  2269 000017B9 488B7D28                        mov rdi, PARAM(1)
  2270                                          assert_fraction(rdi)
    53 000017BD 803F12              <1>  cmp byte [%1], %2
    54 000017C0 0F85EC060000        <1>  jne L_error_incorrect_type
  2271 000017C6 488B4601                        mov rax, qword [rsi + 1] ; num1
  2272 000017CA 4899                            cqo
  2273 000017CC 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  2274 000017D0 4889C1                          mov rcx, rax
  2275 000017D3 488B4609                        mov rax, qword [rsi + 1 + 8] ; den1
  2276 000017D7 4899                            cqo
  2277 000017D9 48F76F01                        imul qword [rdi + 1]          ; num2
  2278 000017DD 4829C1                          sub rcx, rax
  2279 000017E0 7D0C                            jge .L_false
  2280 000017E2 48B8-                           mov rax, sob_boolean_true
  2280 000017E4 [0300000000000000] 
  2281 000017EC EB0A                            jmp .L_exit
  2282                                  .L_false:
  2283 000017EE 48B8-                           mov rax, sob_boolean_false
  2283 000017F0 [0200000000000000] 
  2284                                  .L_exit:
  2285 000017F8 C9                              leave
  2286 000017F9 C22000                          ret AND_KILL_FRAME(2)
  2287                                  
  2288                                  L_code_ptr_raw_equal_rr:
  2289 000017FC C8000000                        enter 0, 0
  2290 00001800 48837D1802                      cmp COUNT, 2
  2291 00001805 0F8508060000                    jne L_error_arg_count_2
  2292 0000180B 488B7520                        mov rsi, PARAM(0)
  2293                                          assert_real(rsi)
    53 0000180F 803E13              <1>  cmp byte [%1], %2
    54 00001812 0F859A060000        <1>  jne L_error_incorrect_type
  2294 00001818 488B7D28                        mov rdi, PARAM(1)
  2295                                          assert_real(rdi)
    53 0000181C 803F13              <1>  cmp byte [%1], %2
    54 0000181F 0F858D060000        <1>  jne L_error_incorrect_type
  2296 00001825 F20F104601                      movsd xmm0, qword [rsi + 1]
  2297 0000182A F20F104F01                      movsd xmm1, qword [rdi + 1]
  2298 0000182F 660F2FC1                        comisd xmm0, xmm1
  2299 00001833 750C                            jne .L_false
  2300 00001835 48B8-                           mov rax, sob_boolean_true
  2300 00001837 [0300000000000000] 
  2301 0000183F EB0A                            jmp .L_exit
  2302                                  .L_false:
  2303 00001841 48B8-                           mov rax, sob_boolean_false
  2303 00001843 [0200000000000000] 
  2304                                  .L_exit:
  2305 0000184B C9                              leave
  2306 0000184C C22000                          ret AND_KILL_FRAME(2)
  2307                                          
  2308                                  L_code_ptr_raw_equal_zz:
  2309 0000184F C8000000                	enter 0, 0
  2310 00001853 48837D1802              	cmp COUNT, 2
  2311 00001858 0F85B5050000            	jne L_error_arg_count_2
  2312 0000185E 4C8B4520                	mov r8, PARAM(0)
  2313                                  	assert_integer(r8)
    53 00001862 41803811            <1>  cmp byte [%1], %2
    54 00001866 0F8546060000        <1>  jne L_error_incorrect_type
  2314 0000186C 4C8B4D28                	mov r9, PARAM(1)
  2315                                  	assert_integer(r9)
    53 00001870 41803911            <1>  cmp byte [%1], %2
    54 00001874 0F8538060000        <1>  jne L_error_incorrect_type
  2316 0000187A 498B7801                	mov rdi, qword [r8 + 1]
  2317 0000187E 493B7901                	cmp rdi, qword [r9 + 1]
  2318 00001882 750C                    	jne .L_false
  2319 00001884 48B8-                   	mov rax, sob_boolean_true
  2319 00001886 [0300000000000000] 
  2320 0000188E EB0A                    	jmp .L_exit
  2321                                  .L_false:
  2322 00001890 48B8-                   	mov rax, sob_boolean_false
  2322 00001892 [0200000000000000] 
  2323                                  .L_exit:
  2324 0000189A C9                      	leave
  2325 0000189B C22000                  	ret AND_KILL_FRAME(2)
  2326                                  
  2327                                  L_code_ptr_raw_equal_qq:
  2328 0000189E C8000000                        enter 0, 0
  2329 000018A2 48837D1802                      cmp COUNT, 2
  2330 000018A7 0F8566050000                    jne L_error_arg_count_2
  2331 000018AD 488B7520                        mov rsi, PARAM(0)
  2332                                          assert_fraction(rsi)
    53 000018B1 803E12              <1>  cmp byte [%1], %2
    54 000018B4 0F85F8050000        <1>  jne L_error_incorrect_type
  2333 000018BA 488B7D28                        mov rdi, PARAM(1)
  2334                                          assert_fraction(rdi)
    53 000018BE 803F12              <1>  cmp byte [%1], %2
    54 000018C1 0F85EB050000        <1>  jne L_error_incorrect_type
  2335 000018C7 488B4601                        mov rax, qword [rsi + 1] ; num1
  2336 000018CB 4899                            cqo
  2337 000018CD 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  2338 000018D1 4889C1                          mov rcx, rax
  2339 000018D4 488B4709                        mov rax, qword [rdi + 1 + 8] ; den1
  2340 000018D8 4899                            cqo
  2341 000018DA 48F76F01                        imul qword [rdi + 1]          ; num2
  2342 000018DE 4829C1                          sub rcx, rax
  2343 000018E1 750C                            jne .L_false
  2344 000018E3 48B8-                           mov rax, sob_boolean_true
  2344 000018E5 [0300000000000000] 
  2345 000018ED EB0A                            jmp .L_exit
  2346                                  .L_false:
  2347 000018EF 48B8-                           mov rax, sob_boolean_false
  2347 000018F1 [0200000000000000] 
  2348                                  .L_exit:
  2349 000018F9 C9                              leave
  2350 000018FA C22000                          ret AND_KILL_FRAME(2)
  2351                                  
  2352                                  L_code_ptr_quotient:
  2353 000018FD C8000000                        enter 0, 0
  2354 00001901 48837D1802                      cmp COUNT, 2
  2355 00001906 0F8507050000                    jne L_error_arg_count_2
  2356 0000190C 488B7520                        mov rsi, PARAM(0)
  2357                                          assert_integer(rsi)
    53 00001910 803E11              <1>  cmp byte [%1], %2
    54 00001913 0F8599050000        <1>  jne L_error_incorrect_type
  2358 00001919 488B7D28                        mov rdi, PARAM(1)
  2359                                          assert_integer(rdi)
    53 0000191D 803F11              <1>  cmp byte [%1], %2
    54 00001920 0F858C050000        <1>  jne L_error_incorrect_type
  2360 00001926 488B4601                        mov rax, qword [rsi + 1]
  2361 0000192A 488B5F01                        mov rbx, qword [rdi + 1]
  2362 0000192E 4883FB00                        cmp rbx, 0
  2363 00001932 0F84AB050000                    je L_error_division_by_zero
  2364 00001938 4899                            cqo
  2365 0000193A 48F7FB                          idiv rbx
  2366 0000193D 4889C7                          mov rdi, rax
  2367 00001940 E8E8030000                      call make_integer
  2368 00001945 C9                              leave
  2369 00001946 C22000                          ret AND_KILL_FRAME(2)
  2370                                          
  2371                                  L_code_ptr_remainder:
  2372 00001949 C8000000                        enter 0, 0
  2373 0000194D 48837D1802                      cmp COUNT, 2
  2374 00001952 0F85BB040000                    jne L_error_arg_count_2
  2375 00001958 488B7520                        mov rsi, PARAM(0)
  2376                                          assert_integer(rsi)
    53 0000195C 803E11              <1>  cmp byte [%1], %2
    54 0000195F 0F854D050000        <1>  jne L_error_incorrect_type
  2377 00001965 488B7D28                        mov rdi, PARAM(1)
  2378                                          assert_integer(rdi)
    53 00001969 803F11              <1>  cmp byte [%1], %2
    54 0000196C 0F8540050000        <1>  jne L_error_incorrect_type
  2379 00001972 488B4601                        mov rax, qword [rsi + 1]
  2380 00001976 488B5F01                        mov rbx, qword [rdi + 1]
  2381 0000197A 4883FB00                        cmp rbx, 0
  2382 0000197E 0F845F050000                    je L_error_division_by_zero
  2383 00001984 4899                            cqo
  2384 00001986 48F7FB                          idiv rbx
  2385 00001989 4889D7                          mov rdi, rdx
  2386 0000198C E89C030000                      call make_integer
  2387 00001991 C9                              leave
  2388 00001992 C22000                          ret AND_KILL_FRAME(2)
  2389                                  
  2390                                  L_code_ptr_set_car:
  2391 00001995 C8000000                        enter 0, 0
  2392 00001999 48837D1802                      cmp COUNT, 2
  2393 0000199E 0F856F040000                    jne L_error_arg_count_2
  2394 000019A4 488B4520                        mov rax, PARAM(0)
  2395                                          assert_pair(rax)
    53 000019A8 803821              <1>  cmp byte [%1], %2
    54 000019AB 0F8501050000        <1>  jne L_error_incorrect_type
  2396 000019B1 488B5D28                        mov rbx, PARAM(1)
  2397 000019B5 48895801                        mov SOB_PAIR_CAR(rax), rbx
  2398 000019B9 48B8-                           mov rax, sob_void
  2398 000019BB [0000000000000000] 
  2399 000019C3 C9                              leave
  2400 000019C4 C22000                          ret AND_KILL_FRAME(2)
  2401                                  
  2402                                  L_code_ptr_set_cdr:
  2403 000019C7 C8000000                        enter 0, 0
  2404 000019CB 48837D1802                      cmp COUNT, 2
  2405 000019D0 0F853D040000                    jne L_error_arg_count_2
  2406 000019D6 488B4520                        mov rax, PARAM(0)
  2407                                          assert_pair(rax)
    53 000019DA 803821              <1>  cmp byte [%1], %2
    54 000019DD 0F85CF040000        <1>  jne L_error_incorrect_type
  2408 000019E3 488B5D28                        mov rbx, PARAM(1)
  2409 000019E7 48895809                        mov SOB_PAIR_CDR(rax), rbx
  2410 000019EB 48B8-                           mov rax, sob_void
  2410 000019ED [0000000000000000] 
  2411 000019F5 C9                              leave
  2412 000019F6 C22000                          ret AND_KILL_FRAME(2)
  2413                                  
  2414                                  L_code_ptr_string_ref:
  2415 000019F9 C8000000                        enter 0, 0
  2416 000019FD 48837D1802                      cmp COUNT, 2
  2417 00001A02 0F850B040000                    jne L_error_arg_count_2
  2418 00001A08 488B7D20                        mov rdi, PARAM(0)
  2419                                          assert_string(rdi)
    53 00001A0C 803F03              <1>  cmp byte [%1], %2
    54 00001A0F 0F859D040000        <1>  jne L_error_incorrect_type
  2420 00001A15 488B7528                        mov rsi, PARAM(1)
  2421                                          assert_integer(rsi)
    53 00001A19 803E11              <1>  cmp byte [%1], %2
    54 00001A1C 0F8590040000        <1>  jne L_error_incorrect_type
  2422 00001A22 488B5701                        mov rdx, qword [rdi + 1]
  2423 00001A26 488B4E01                        mov rcx, qword [rsi + 1]
  2424 00001A2A 4839D1                          cmp rcx, rdx
  2425 00001A2D 0F8D14030000                    jge L_error_integer_range
  2426 00001A33 4883F900                        cmp rcx, 0
  2427 00001A37 0F8C0A030000                    jl L_error_integer_range
  2428 00001A3D 8A5C3909                        mov bl, byte [rdi + 1 + 8 + 1 * rcx]
  2429 00001A41 BF02000000                      mov rdi, 2
  2430 00001A46 E865E7FFFF                      call malloc
  2431 00001A4B C60002                          mov byte [rax], T_char
  2432 00001A4E 885801                          mov byte [rax + 1], bl
  2433 00001A51 C9                              leave
  2434 00001A52 C22000                          ret AND_KILL_FRAME(2)
  2435                                  
  2436                                  L_code_ptr_vector_ref:
  2437 00001A55 C8000000                        enter 0, 0
  2438 00001A59 48837D1802                      cmp COUNT, 2
  2439 00001A5E 0F85AF030000                    jne L_error_arg_count_2
  2440 00001A64 488B7D20                        mov rdi, PARAM(0)
  2441                                          assert_vector(rdi)
    53 00001A68 803F22              <1>  cmp byte [%1], %2
    54 00001A6B 0F8541040000        <1>  jne L_error_incorrect_type
  2442 00001A71 488B7528                        mov rsi, PARAM(1)
  2443                                          assert_integer(rsi)
    53 00001A75 803E11              <1>  cmp byte [%1], %2
    54 00001A78 0F8534040000        <1>  jne L_error_incorrect_type
  2444 00001A7E 488B5701                        mov rdx, qword [rdi + 1]
  2445 00001A82 488B4E01                        mov rcx, qword [rsi + 1]
  2446 00001A86 4839D1                          cmp rcx, rdx
  2447 00001A89 0F8DB8020000                    jge L_error_integer_range
  2448 00001A8F 4883F900                        cmp rcx, 0
  2449 00001A93 0F8CAE020000                    jl L_error_integer_range
  2450 00001A99 488B44CF09                      mov rax, [rdi + 1 + 8 + 8 * rcx]
  2451 00001A9E C9                              leave
  2452 00001A9F C22000                          ret AND_KILL_FRAME(2)
  2453                                  
  2454                                  L_code_ptr_vector_set:
  2455 00001AA2 C8000000                        enter 0, 0
  2456 00001AA6 48837D1803                      cmp COUNT, 3
  2457 00001AAB 0F85CC030000                    jne L_error_arg_count_3
  2458 00001AB1 488B7D20                        mov rdi, PARAM(0)
  2459                                          assert_vector(rdi)
    53 00001AB5 803F22              <1>  cmp byte [%1], %2
    54 00001AB8 0F85F4030000        <1>  jne L_error_incorrect_type
  2460 00001ABE 488B7528                        mov rsi, PARAM(1)
  2461                                          assert_integer(rsi)
    53 00001AC2 803E11              <1>  cmp byte [%1], %2
    54 00001AC5 0F85E7030000        <1>  jne L_error_incorrect_type
  2462 00001ACB 488B5701                        mov rdx, qword [rdi + 1]
  2463 00001ACF 488B4E01                        mov rcx, qword [rsi + 1]
  2464 00001AD3 4839D1                          cmp rcx, rdx
  2465 00001AD6 0F8D6B020000                    jge L_error_integer_range
  2466 00001ADC 4883F900                        cmp rcx, 0
  2467 00001AE0 0F8C61020000                    jl L_error_integer_range
  2468 00001AE6 488B4530                        mov rax, PARAM(2)
  2469 00001AEA 488944CF09                      mov qword [rdi + 1 + 8 + 8 * rcx], rax
  2470 00001AEF 48B8-                           mov rax, sob_void
  2470 00001AF1 [0000000000000000] 
  2471 00001AF9 C9                              leave
  2472 00001AFA C22800                          ret AND_KILL_FRAME(3)
  2473                                  
  2474                                  L_code_ptr_string_set:
  2475 00001AFD C8000000                        enter 0, 0
  2476 00001B01 48837D1803                      cmp COUNT, 3
  2477 00001B06 0F8571030000                    jne L_error_arg_count_3
  2478 00001B0C 488B7D20                        mov rdi, PARAM(0)
  2479                                          assert_string(rdi)
    53 00001B10 803F03              <1>  cmp byte [%1], %2
    54 00001B13 0F8599030000        <1>  jne L_error_incorrect_type
  2480 00001B19 488B7528                        mov rsi, PARAM(1)
  2481                                          assert_integer(rsi)
    53 00001B1D 803E11              <1>  cmp byte [%1], %2
    54 00001B20 0F858C030000        <1>  jne L_error_incorrect_type
  2482 00001B26 488B5701                        mov rdx, qword [rdi + 1]
  2483 00001B2A 488B4E01                        mov rcx, qword [rsi + 1]
  2484 00001B2E 4839D1                          cmp rcx, rdx
  2485 00001B31 0F8D10020000                    jge L_error_integer_range
  2486 00001B37 4883F900                        cmp rcx, 0
  2487 00001B3B 0F8C06020000                    jl L_error_integer_range
  2488 00001B41 488B4530                        mov rax, PARAM(2)
  2489                                          assert_char(rax)
    53 00001B45 803802              <1>  cmp byte [%1], %2
    54 00001B48 0F8564030000        <1>  jne L_error_incorrect_type
  2490 00001B4E 8A4001                          mov al, byte [rax + 1]
  2491 00001B51 88443909                        mov byte [rdi + 1 + 8 + 1 * rcx], al
  2492 00001B55 48B8-                           mov rax, sob_void
  2492 00001B57 [0000000000000000] 
  2493 00001B5F C9                              leave
  2494 00001B60 C22800                          ret AND_KILL_FRAME(3)
  2495                                  
  2496                                  L_code_ptr_make_vector:
  2497 00001B63 C8000000                        enter 0, 0
  2498 00001B67 48837D1802                      cmp COUNT, 2
  2499 00001B6C 0F85A1020000                    jne L_error_arg_count_2
  2500 00001B72 488B4D20                        mov rcx, PARAM(0)
  2501                                          assert_integer(rcx)
    53 00001B76 803911              <1>  cmp byte [%1], %2
    54 00001B79 0F8533030000        <1>  jne L_error_incorrect_type
  2502 00001B7F 488B4901                        mov rcx, qword [rcx + 1]
  2503 00001B83 4883F900                        cmp rcx, 0
  2504 00001B87 0F8CBA010000                    jl L_error_integer_range
  2505 00001B8D 488B5528                        mov rdx, PARAM(1)
  2506 00001B91 488D3CCD09000000                lea rdi, [1 + 8 + 8 * rcx]
  2507 00001B99 E812E6FFFF                      call malloc
  2508 00001B9E C60022                          mov byte [rax], T_vector
  2509 00001BA1 48894801                        mov qword [rax + 1], rcx
  2510 00001BA5 41B800000000                    mov r8, 0
  2511                                  .L0:
  2512 00001BAB 4939C8                          cmp r8, rcx
  2513 00001BAE 740A                            je .L1
  2514 00001BB0 4A8954C009                      mov qword [rax + 1 + 8 + 8 * r8], rdx
  2515 00001BB5 49FFC0                          inc r8
  2516 00001BB8 EBF1                            jmp .L0
  2517                                  .L1:
  2518 00001BBA C9                              leave
  2519 00001BBB C22000                          ret AND_KILL_FRAME(2)
  2520                                          
  2521                                  L_code_ptr_make_string:
  2522 00001BBE C8000000                        enter 0, 0
  2523 00001BC2 48837D1802                      cmp COUNT, 2
  2524 00001BC7 0F8546020000                    jne L_error_arg_count_2
  2525 00001BCD 488B4D20                        mov rcx, PARAM(0)
  2526                                          assert_integer(rcx)
    53 00001BD1 803911              <1>  cmp byte [%1], %2
    54 00001BD4 0F85D8020000        <1>  jne L_error_incorrect_type
  2527 00001BDA 488B4901                        mov rcx, qword [rcx + 1]
  2528 00001BDE 4883F900                        cmp rcx, 0
  2529 00001BE2 0F8C5F010000                    jl L_error_integer_range
  2530 00001BE8 488B5528                        mov rdx, PARAM(1)
  2531                                          assert_char(rdx)
    53 00001BEC 803A02              <1>  cmp byte [%1], %2
    54 00001BEF 0F85BD020000        <1>  jne L_error_incorrect_type
  2532 00001BF5 8A5201                          mov dl, byte [rdx + 1]
  2533 00001BF8 488D7909                        lea rdi, [1 + 8 + 1 * rcx]
  2534 00001BFC E8AFE5FFFF                      call malloc
  2535 00001C01 C60003                          mov byte [rax], T_string
  2536 00001C04 48894801                        mov qword [rax + 1], rcx
  2537 00001C08 41B800000000                    mov r8, 0
  2538                                  .L0:
  2539 00001C0E 4939C8                          cmp r8, rcx
  2540 00001C11 740A                            je .L1
  2541 00001C13 4188540009                      mov byte [rax + 1 + 8 + 1 * r8], dl
  2542 00001C18 49FFC0                          inc r8
  2543 00001C1B EBF1                            jmp .L0
  2544                                  .L1:
  2545 00001C1D C9                              leave
  2546 00001C1E C22000                          ret AND_KILL_FRAME(2)
  2547                                  
  2548                                  L_code_ptr_numerator:
  2549 00001C21 C8000000                        enter 0, 0
  2550 00001C25 48837D1801                      cmp COUNT, 1
  2551 00001C2A 0F85AE010000                    jne L_error_arg_count_1
  2552 00001C30 488B4520                        mov rax, PARAM(0)
  2553                                          assert_fraction(rax)
    53 00001C34 803812              <1>  cmp byte [%1], %2
    54 00001C37 0F8575020000        <1>  jne L_error_incorrect_type
  2554 00001C3D 488B7801                        mov rdi, qword [rax + 1]
  2555 00001C41 E8E7000000                      call make_integer
  2556 00001C46 C9                              leave
  2557 00001C47 C21800                          ret AND_KILL_FRAME(1)
  2558                                          
  2559                                  L_code_ptr_denominator:
  2560 00001C4A C8000000                        enter 0, 0
  2561 00001C4E 48837D1801                      cmp COUNT, 1
  2562 00001C53 0F8585010000                    jne L_error_arg_count_1
  2563 00001C59 488B4520                        mov rax, PARAM(0)
  2564                                          assert_fraction(rax)
    53 00001C5D 803812              <1>  cmp byte [%1], %2
    54 00001C60 0F854C020000        <1>  jne L_error_incorrect_type
  2565 00001C66 488B7809                        mov rdi, qword [rax + 1 + 8]
  2566 00001C6A E8BE000000                      call make_integer
  2567 00001C6F C9                              leave
  2568 00001C70 C21800                          ret AND_KILL_FRAME(1)
  2569                                  
  2570                                  L_code_ptr_is_eq:
  2571 00001C73 C8000000                	enter 0, 0
  2572 00001C77 48837D1802              	cmp COUNT, 2
  2573 00001C7C 0F8591010000            	jne L_error_arg_count_2
  2574 00001C82 488B7D20                	mov rdi, PARAM(0)
  2575 00001C86 488B7528                	mov rsi, PARAM(1)
  2576 00001C8A 4839F7                  	cmp rdi, rsi
  2577 00001C8D 746C                    	je .L_eq_true
  2578 00001C8F 8A17                    	mov dl, byte [rdi]
  2579 00001C91 3A16                    	cmp dl, byte [rsi]
  2580 00001C93 7572                    	jne .L_eq_false
  2581 00001C95 80FA02                  	cmp dl, T_char
  2582 00001C98 7459                    	je .L_char
  2583 00001C9A 80FA41                  	cmp dl, T_interned_symbol
  2584 00001C9D 7440                    	je .L_interned_symbol
  2585 00001C9F 80FA42                          cmp dl, T_uninterned_symbol
  2586 00001CA2 7443                            je .L_uninterned_symbol
  2587 00001CA4 80FA13                  	cmp dl, T_real
  2588 00001CA7 742E                    	je .L_real
  2589 00001CA9 80FA12                  	cmp dl, T_fraction
  2590 00001CAC 7413                    	je .L_fraction
  2591 00001CAE 80FA11                          cmp dl, T_integer
  2592 00001CB1 7402                            je .L_integer
  2593 00001CB3 EB52                    	jmp .L_eq_false
  2594                                  .L_integer:
  2595 00001CB5 488B4601                        mov rax, qword [rsi + 1]
  2596 00001CB9 483B4701                        cmp rax, qword [rdi + 1]
  2597 00001CBD 7548                            jne .L_eq_false
  2598 00001CBF EB3A                            jmp .L_eq_true
  2599                                  .L_fraction:
  2600 00001CC1 488B4601                	mov rax, qword [rsi + 1]
  2601 00001CC5 483B4701                	cmp rax, qword [rdi + 1]
  2602 00001CC9 753C                    	jne .L_eq_false
  2603 00001CCB 488B4609                	mov rax, qword [rsi + 1 + 8]
  2604 00001CCF 483B4709                	cmp rax, qword [rdi + 1 + 8]
  2605 00001CD3 7532                    	jne .L_eq_false
  2606 00001CD5 EB24                    	jmp .L_eq_true
  2607                                  .L_real:
  2608 00001CD7 488B4601                	mov rax, qword [rsi + 1]
  2609 00001CDB 483B4701                	cmp rax, qword [rdi + 1]
  2610                                  .L_interned_symbol:
  2611                                  	; never reached, because interned_symbols are static!
  2612                                  	; but I'm keeping it in case, I'll ever change
  2613                                  	; the implementation
  2614 00001CDF 488B4601                	mov rax, qword [rsi + 1]
  2615 00001CE3 483B4701                	cmp rax, qword [rdi + 1]
  2616                                  .L_uninterned_symbol:
  2617 00001CE7 4C8B4701                        mov r8, qword [rdi + 1]
  2618 00001CEB 4C3B4601                        cmp r8, qword [rsi + 1]
  2619 00001CEF 7516                            jne .L_eq_false
  2620 00001CF1 EB08                            jmp .L_eq_true
  2621                                  .L_char:
  2622 00001CF3 8A5E01                  	mov bl, byte [rsi + 1]
  2623 00001CF6 3A5F01                  	cmp bl, byte [rdi + 1]
  2624 00001CF9 750C                    	jne .L_eq_false
  2625                                  .L_eq_true:
  2626 00001CFB 48B8-                   	mov rax, sob_boolean_true
  2626 00001CFD [0300000000000000] 
  2627 00001D05 EB0A                    	jmp .L_eq_exit
  2628                                  .L_eq_false:
  2629 00001D07 48B8-                   	mov rax, sob_boolean_false
  2629 00001D09 [0200000000000000] 
  2630                                  .L_eq_exit:
  2631 00001D11 C9                      	leave
  2632 00001D12 C22000                  	ret AND_KILL_FRAME(2)
  2633                                  
  2634                                  make_real:
  2635 00001D15 C8000000                        enter 0, 0
  2636 00001D19 BF09000000                      mov rdi, (1 + 8)
  2637 00001D1E E88DE4FFFF                      call malloc
  2638 00001D23 C60013                          mov byte [rax], T_real
  2639 00001D26 F20F114001                      movsd qword [rax + 1], xmm0
  2640 00001D2B C9                              leave 
  2641 00001D2C C3                              ret
  2642                                          
  2643                                  make_integer:
  2644 00001D2D C8000000                        enter 0, 0
  2645 00001D31 4889FE                          mov rsi, rdi
  2646 00001D34 BF09000000                      mov rdi, (1 + 8)
  2647 00001D39 E872E4FFFF                      call malloc
  2648 00001D3E C60011                          mov byte [rax], T_integer
  2649 00001D41 48897001                        mov qword [rax + 1], rsi
  2650 00001D45 C9                              leave
  2651 00001D46 C3                              ret
  2652                                          
  2653                                  L_error_integer_range:
  2654 00001D47 488B3C25[00000000]              mov rdi, qword [stderr]
  2655 00001D4F 48BE-                           mov rsi, fmt_integer_range
  2655 00001D51 [F509000000000000] 
  2656 00001D59 B800000000                      mov rax, 0
  2657                                          ENTER
    44 00001D5E C8000000            <1>  enter 0, 0
    45 00001D62 4883E4F0            <1>  and rsp, ~15
  2658 00001D66 E8(00000000)                    call fprintf
  2659                                          LEAVE
    49 00001D6B C9                  <1>  leave
  2660 00001D6C 48C7C0FBFFFFFF                  mov rax, -5
  2661 00001D73 E8(00000000)                    call exit
  2662                                  
  2663                                  L_error_arg_negative:
  2664 00001D78 488B3C25[00000000]              mov rdi, qword [stderr]
  2665 00001D80 48BE-                           mov rsi, fmt_arg_negative
  2665 00001D82 [CD08000000000000] 
  2666 00001D8A B800000000                      mov rax, 0
  2667                                          ENTER
    44 00001D8F C8000000            <1>  enter 0, 0
    45 00001D93 4883E4F0            <1>  and rsp, ~15
  2668 00001D97 E8(00000000)                    call fprintf
  2669                                          LEAVE
    49 00001D9C C9                  <1>  leave
  2670 00001D9D 48C7C0FDFFFFFF                  mov rax, -3
  2671 00001DA4 E8(00000000)                    call exit
  2672                                  
  2673                                  L_error_arg_count_0:
  2674 00001DA9 488B3C25[00000000]              mov rdi, qword [stderr]
  2675 00001DB1 48BE-                           mov rsi, fmt_arg_count_0
  2675 00001DB3 [F308000000000000] 
  2676 00001DBB 488B5518                        mov rdx, COUNT
  2677 00001DBF B800000000                      mov rax, 0
  2678                                          ENTER
    44 00001DC4 C8000000            <1>  enter 0, 0
    45 00001DC8 4883E4F0            <1>  and rsp, ~15
  2679 00001DCC E8(00000000)                    call fprintf
  2680                                          LEAVE
    49 00001DD1 C9                  <1>  leave
  2681 00001DD2 48C7C0FDFFFFFF                  mov rax, -3
  2682 00001DD9 E8(00000000)                    call exit
  2683                                  
  2684                                  L_error_arg_count_1:
  2685 00001DDE 488B3C25[00000000]              mov rdi, qword [stderr]
  2686 00001DE6 48BE-                           mov rsi, fmt_arg_count_1
  2686 00001DE8 [1B09000000000000] 
  2687 00001DF0 488B5518                        mov rdx, COUNT
  2688 00001DF4 B800000000                      mov rax, 0
  2689                                          ENTER
    44 00001DF9 C8000000            <1>  enter 0, 0
    45 00001DFD 4883E4F0            <1>  and rsp, ~15
  2690 00001E01 E8(00000000)                    call fprintf
  2691                                          LEAVE
    49 00001E06 C9                  <1>  leave
  2692 00001E07 48C7C0FDFFFFFF                  mov rax, -3
  2693 00001E0E E8(00000000)                    call exit
  2694                                  
  2695                                  L_error_arg_count_2:
  2696 00001E13 488B3C25[00000000]              mov rdi, qword [stderr]
  2697 00001E1B 48BE-                           mov rsi, fmt_arg_count_2
  2697 00001E1D [8109000000000000] 
  2698 00001E25 488B5518                        mov rdx, COUNT
  2699 00001E29 B800000000                      mov rax, 0
  2700                                          ENTER
    44 00001E2E C8000000            <1>  enter 0, 0
    45 00001E32 4883E4F0            <1>  and rsp, ~15
  2701 00001E36 E8(00000000)                    call fprintf
  2702                                          LEAVE
    49 00001E3B C9                  <1>  leave
  2703 00001E3C 48C7C0FDFFFFFF                  mov rax, -3
  2704 00001E43 E8(00000000)                    call exit
  2705                                  
  2706                                  L_error_arg_count_12:
  2707 00001E48 488B3C25[00000000]              mov rdi, qword [stderr]
  2708 00001E50 48BE-                           mov rsi, fmt_arg_count_12
  2708 00001E52 [4109000000000000] 
  2709 00001E5A 488B5518                        mov rdx, COUNT
  2710 00001E5E B800000000                      mov rax, 0
  2711                                          ENTER
    44 00001E63 C8000000            <1>  enter 0, 0
    45 00001E67 4883E4F0            <1>  and rsp, ~15
  2712 00001E6B E8(00000000)                    call fprintf
  2713                                          LEAVE
    49 00001E70 C9                  <1>  leave
  2714 00001E71 48C7C0FDFFFFFF                  mov rax, -3
  2715 00001E78 E8(00000000)                    call exit
  2716                                  
  2717                                  L_error_arg_count_3:
  2718 00001E7D 488B3C25[00000000]              mov rdi, qword [stderr]
  2719 00001E85 48BE-                           mov rsi, fmt_arg_count_3
  2719 00001E87 [A809000000000000] 
  2720 00001E8F 488B5518                        mov rdx, COUNT
  2721 00001E93 B800000000                      mov rax, 0
  2722                                          ENTER
    44 00001E98 C8000000            <1>  enter 0, 0
    45 00001E9C 4883E4F0            <1>  and rsp, ~15
  2723 00001EA0 E8(00000000)                    call fprintf
  2724                                          LEAVE
    49 00001EA5 C9                  <1>  leave
  2725 00001EA6 48C7C0FDFFFFFF                  mov rax, -3
  2726 00001EAD E8(00000000)                    call exit
  2727                                          
  2728                                  L_error_incorrect_type:
  2729 00001EB2 488B3C25[00000000]              mov rdi, qword [stderr]
  2730 00001EBA 48BE-                           mov rsi, fmt_type
  2730 00001EBC [D109000000000000] 
  2731 00001EC4 B800000000                      mov rax, 0
  2732                                          ENTER
    44 00001EC9 C8000000            <1>  enter 0, 0
    45 00001ECD 4883E4F0            <1>  and rsp, ~15
  2733 00001ED1 E8(00000000)                    call fprintf
  2734                                          LEAVE
    49 00001ED6 C9                  <1>  leave
  2735 00001ED7 48C7C0FCFFFFFF                  mov rax, -4
  2736 00001EDE E8(00000000)                    call exit
  2737                                  
  2738                                  L_error_division_by_zero:
  2739 00001EE3 488B3C25[00000000]              mov rdi, qword [stderr]
  2740 00001EEB 48BE-                           mov rsi, fmt_division_by_zero
  2740 00001EED [120A000000000000] 
  2741 00001EF5 B800000000                      mov rax, 0
  2742                                          ENTER
    44 00001EFA C8000000            <1>  enter 0, 0
    45 00001EFE 4883E4F0            <1>  and rsp, ~15
  2743 00001F02 E8(00000000)                    call fprintf
  2744                                          LEAVE
    49 00001F07 C9                  <1>  leave
  2745 00001F08 48C7C0F8FFFFFF                  mov rax, -8
  2746 00001F0F E8(00000000)                    call exit
  2747                                  
  2748                                  section .data
  2749                                  gensym_count:
  2750 000008C2 0000000000000000                dq 0
  2751                                  fmt_char:
  2752 000008CA 256300                          db `%c\0`
  2753                                  fmt_arg_negative:
  2754 000008CD 212121205468652061-             db `!!! The argument cannot be negative.\n\0`
  2754 000008D6 7267756D656E742063-
  2754 000008DF 616E6E6F7420626520-
  2754 000008E8 6E656761746976652E-
  2754 000008F1 0A00               
  2755                                  fmt_arg_count_0:
  2756 000008F3 212121204578706563-             db `!!! Expecting zero arguments. Found %d\n\0`
  2756 000008FC 74696E67207A65726F-
  2756 00000905 20617267756D656E74-
  2756 0000090E 732E20466F756E6420-
  2756 00000917 25640A00           
  2757                                  fmt_arg_count_1:
  2758 0000091B 212121204578706563-             db `!!! Expecting one argument. Found %d\n\0`
  2758 00000924 74696E67206F6E6520-
  2758 0000092D 617267756D656E742E-
  2758 00000936 20466F756E64202564-
  2758 0000093F 0A00               
  2759                                  fmt_arg_count_12:
  2760 00000941 212121204578706563-             db `!!! Expecting one required and one optional argument. Found %d\n\0`
  2760 0000094A 74696E67206F6E6520-
  2760 00000953 726571756972656420-
  2760 0000095C 616E64206F6E65206F-
  2760 00000965 7074696F6E616C2061-
  2760 0000096E 7267756D656E742E20-
  2760 00000977 466F756E642025640A-
  2760 00000980 00                 
  2761                                  fmt_arg_count_2:
  2762 00000981 212121204578706563-             db `!!! Expecting two arguments. Found %d\n\0`
  2762 0000098A 74696E672074776F20-
  2762 00000993 617267756D656E7473-
  2762 0000099C 2E20466F756E642025-
  2762 000009A5 640A00             
  2763                                  fmt_arg_count_3:
  2764 000009A8 212121204578706563-             db `!!! Expecting three arguments. Found %d\n\0`
  2764 000009B1 74696E672074687265-
  2764 000009BA 6520617267756D656E-
  2764 000009C3 74732E20466F756E64-
  2764 000009CC 2025640A00         
  2765                                  fmt_type:
  2766 000009D1 2121212046756E6374-             db `!!! Function passed incorrect type\n\0`
  2766 000009DA 696F6E207061737365-
  2766 000009E3 6420696E636F727265-
  2766 000009EC 637420747970650A00 
  2767                                  fmt_integer_range:
  2768 000009F5 21212120496E636F72-             db `!!! Incorrect integer range\n\0`
  2768 000009FE 7265637420696E7465-
  2768 00000A07 6765722072616E6765-
  2768 00000A10 0A00               
  2769                                  fmt_division_by_zero:
  2770 00000A12 212121204469766973-             db `!!! Division by zero\n\0`
  2770 00000A1B 696F6E206279207A65-
  2770 00000A24 726F0A00           
  2771                                  fmt_scheme_error_part_1:
  2772 00000A28 0A2121212054686520-             db `\n!!! The procedure \0`
  2772 00000A31 70726F636564757265-
  2772 00000A3A 2000               
  2773                                  fmt_scheme_error_part_2:
  2774 00000A3C 2061736B656420746F-             db ` asked to terminate the program\n`
  2774 00000A45 207465726D696E6174-
  2774 00000A4E 65207468652070726F-
  2774 00000A57 6772616D0A         
  2775 00000A5C 202020207769746820-             db `    with the following message:\n\n\0`
  2775 00000A65 74686520666F6C6C6F-
  2775 00000A6E 77696E67206D657373-
  2775 00000A77 6167653A0A0A00     
  2776                                  fmt_scheme_error_part_3:
  2777 00000A7E 0A0A476F6F64627965-             db `\n\nGoodbye!\n\n\0`
  2777 00000A87 210A0A00           
