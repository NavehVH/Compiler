     1                                  ;;; prologue-1.asm
     2                                  ;;; The first part of the standard prologue for compiled programs
     3                                  ;;;
     4                                  ;;; Programmer: Mayer Goldberg, 2023
     5                                  
     6                                  %define T_void 				0
     7                                  %define T_nil 				1
     8                                  %define T_char 				2
     9                                  %define T_string 			3
    10                                  %define T_closure 			4
    11                                  %define T_undefined			5
    12                                  %define T_boolean 			8
    13                                  %define T_boolean_false 		(T_boolean | 1)
    14                                  %define T_boolean_true 			(T_boolean | 2)
    15                                  %define T_number 			16
    16                                  %define T_integer			(T_number | 1)
    17                                  %define T_fraction 			(T_number | 2)
    18                                  %define T_real 				(T_number | 3)
    19                                  %define T_collection 			32
    20                                  %define T_pair 				(T_collection | 1)
    21                                  %define T_vector 			(T_collection | 2)
    22                                  %define T_symbol 			64
    23                                  %define T_interned_symbol		(T_symbol | 1)
    24                                  %define T_uninterned_symbol		(T_symbol | 2)
    25                                  
    26                                  %define SOB_CHAR_VALUE(reg) 		byte [reg + 1]
    27                                  %define SOB_PAIR_CAR(reg)		qword [reg + 1]
    28                                  %define SOB_PAIR_CDR(reg)		qword [reg + 1 + 8]
    29                                  %define SOB_STRING_LENGTH(reg)		qword [reg + 1]
    30                                  %define SOB_VECTOR_LENGTH(reg)		qword [reg + 1]
    31                                  %define SOB_CLOSURE_ENV(reg)		qword [reg + 1]
    32                                  %define SOB_CLOSURE_CODE(reg)		qword [reg + 1 + 8]
    33                                  
    34                                  %define OLD_RBP 			qword [rbp]
    35                                  %define RET_ADDR 			qword [rbp + 8 * 1]
    36                                  %define ENV 				qword [rbp + 8 * 2]
    37                                  %define COUNT 				qword [rbp + 8 * 3]
    38                                  %define PARAM(n) 			qword [rbp + 8 * (4 + n)]
    39                                  %define AND_KILL_FRAME(n)		(8 * (2 + n))
    40                                  
    41                                  %define MAGIC				496351
    42                                  
    43                                  %macro ENTER 0
    44                                  	enter 0, 0
    45                                  	and rsp, ~15
    46                                  %endmacro
    47                                  
    48                                  %macro LEAVE 0
    49                                  	leave
    50                                  %endmacro
    51                                  
    52                                  %macro assert_type 2
    53                                          cmp byte [%1], %2
    54                                          jne L_error_incorrect_type
    55                                  %endmacro
    56                                  
    57                                  %define assert_void(reg)		assert_type reg, T_void
    58                                  %define assert_nil(reg)			assert_type reg, T_nil
    59                                  %define assert_char(reg)		assert_type reg, T_char
    60                                  %define assert_string(reg)		assert_type reg, T_string
    61                                  %define assert_symbol(reg)		assert_type reg, T_symbol
    62                                  %define assert_interned_symbol(reg)	assert_type reg, T_interned_symbol
    63                                  %define assert_uninterned_symbol(reg)	assert_type reg, T_uninterned_symbol
    64                                  %define assert_closure(reg)		assert_type reg, T_closure
    65                                  %define assert_boolean(reg)		assert_type reg, T_boolean
    66                                  %define assert_integer(reg)		assert_type reg, T_integer
    67                                  %define assert_fraction(reg)		assert_type reg, T_fraction
    68                                  %define assert_real(reg)		assert_type reg, T_real
    69                                  %define assert_pair(reg)		assert_type reg, T_pair
    70                                  %define assert_vector(reg)		assert_type reg, T_vector
    71                                  
    72                                  %define sob_void			(L_constants + 0)
    73                                  %define sob_nil				(L_constants + 1)
    74                                  %define sob_boolean_false		(L_constants + 2)
    75                                  %define sob_boolean_true		(L_constants + 3)
    76                                  %define sob_char_nul			(L_constants + 4)
    77                                  
    78                                  %define bytes(n)			(n)
    79                                  %define kbytes(n) 			(bytes(n) << 10)
    80                                  %define mbytes(n) 			(kbytes(n) << 10)
    81                                  %define gbytes(n) 			(mbytes(n) << 10)
    82                                  
    83                                  section .data
    84                                  L_constants:
    85                                  	; L_constants + 0:
    86 00000000 00                      	db T_void
    87                                  	; L_constants + 1:
    88 00000001 01                      	db T_nil
    89                                  	; L_constants + 2:
    90 00000002 09                      	db T_boolean_false
    91                                  	; L_constants + 3:
    92 00000003 0A                      	db T_boolean_true
    93                                  	; L_constants + 4:
    94 00000004 0200                    	db T_char, 0x00	; #\nul
    95                                  	; L_constants + 6:
    96 00000006 03                      	db T_string	; "null?"
    97 00000007 0500000000000000        	dq 5
    98 0000000F 6E756C6C3F              	db 0x6E, 0x75, 0x6C, 0x6C, 0x3F
    99                                  	; L_constants + 20:
   100 00000014 03                      	db T_string	; "pair?"
   101 00000015 0500000000000000        	dq 5
   102 0000001D 706169723F              	db 0x70, 0x61, 0x69, 0x72, 0x3F
   103                                  	; L_constants + 34:
   104 00000022 03                      	db T_string	; "void?"
   105 00000023 0500000000000000        	dq 5
   106 0000002B 766F69643F              	db 0x76, 0x6F, 0x69, 0x64, 0x3F
   107                                  	; L_constants + 48:
   108 00000030 03                      	db T_string	; "char?"
   109 00000031 0500000000000000        	dq 5
   110 00000039 636861723F              	db 0x63, 0x68, 0x61, 0x72, 0x3F
   111                                  	; L_constants + 62:
   112 0000003E 03                      	db T_string	; "string?"
   113 0000003F 0700000000000000        	dq 7
   114 00000047 737472696E673F          	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x3F
   115                                  	; L_constants + 78:
   116 0000004E 03                      	db T_string	; "interned-symbol?"
   117 0000004F 1000000000000000        	dq 16
   118 00000057 696E7465726E6564        	db 0x69, 0x6E, 0x74, 0x65, 0x72, 0x6E, 0x65, 0x64
   119 0000005F 2D73796D626F6C3F        	db 0x2D, 0x73, 0x79, 0x6D, 0x62, 0x6F, 0x6C, 0x3F
   120                                  	; L_constants + 103:
   121 00000067 03                      	db T_string	; "vector?"
   122 00000068 0700000000000000        	dq 7
   123 00000070 766563746F723F          	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x3F
   124                                  	; L_constants + 119:
   125 00000077 03                      	db T_string	; "procedure?"
   126 00000078 0A00000000000000        	dq 10
   127 00000080 70726F6365647572        	db 0x70, 0x72, 0x6F, 0x63, 0x65, 0x64, 0x75, 0x72
   128 00000088 653F                    	db 0x65, 0x3F
   129                                  	; L_constants + 138:
   130 0000008A 03                      	db T_string	; "real?"
   131 0000008B 0500000000000000        	dq 5
   132 00000093 7265616C3F              	db 0x72, 0x65, 0x61, 0x6C, 0x3F
   133                                  	; L_constants + 152:
   134 00000098 03                      	db T_string	; "fraction?"
   135 00000099 0900000000000000        	dq 9
   136 000000A1 6672616374696F6E        	db 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E
   137 000000A9 3F                      	db 0x3F
   138                                  	; L_constants + 170:
   139 000000AA 03                      	db T_string	; "boolean?"
   140 000000AB 0800000000000000        	dq 8
   141 000000B3 626F6F6C65616E3F        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x3F
   142                                  	; L_constants + 187:
   143 000000BB 03                      	db T_string	; "number?"
   144 000000BC 0700000000000000        	dq 7
   145 000000C4 6E756D6265723F          	db 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72, 0x3F
   146                                  	; L_constants + 203:
   147 000000CB 03                      	db T_string	; "collection?"
   148 000000CC 0B00000000000000        	dq 11
   149 000000D4 636F6C6C65637469        	db 0x63, 0x6F, 0x6C, 0x6C, 0x65, 0x63, 0x74, 0x69
   150 000000DC 6F6E3F                  	db 0x6F, 0x6E, 0x3F
   151                                  	; L_constants + 223:
   152 000000DF 03                      	db T_string	; "cons"
   153 000000E0 0400000000000000        	dq 4
   154 000000E8 636F6E73                	db 0x63, 0x6F, 0x6E, 0x73
   155                                  	; L_constants + 236:
   156 000000EC 03                      	db T_string	; "display-sexpr"
   157 000000ED 0D00000000000000        	dq 13
   158 000000F5 646973706C61792D        	db 0x64, 0x69, 0x73, 0x70, 0x6C, 0x61, 0x79, 0x2D
   159 000000FD 7365787072              	db 0x73, 0x65, 0x78, 0x70, 0x72
   160                                  	; L_constants + 258:
   161 00000102 03                      	db T_string	; "write-char"
   162 00000103 0A00000000000000        	dq 10
   163 0000010B 77726974652D6368        	db 0x77, 0x72, 0x69, 0x74, 0x65, 0x2D, 0x63, 0x68
   164 00000113 6172                    	db 0x61, 0x72
   165                                  	; L_constants + 277:
   166 00000115 03                      	db T_string	; "car"
   167 00000116 0300000000000000        	dq 3
   168 0000011E 636172                  	db 0x63, 0x61, 0x72
   169                                  	; L_constants + 289:
   170 00000121 03                      	db T_string	; "cdr"
   171 00000122 0300000000000000        	dq 3
   172 0000012A 636472                  	db 0x63, 0x64, 0x72
   173                                  	; L_constants + 301:
   174 0000012D 03                      	db T_string	; "string-length"
   175 0000012E 0D00000000000000        	dq 13
   176 00000136 737472696E672D6C        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x6C
   177 0000013E 656E677468              	db 0x65, 0x6E, 0x67, 0x74, 0x68
   178                                  	; L_constants + 323:
   179 00000143 03                      	db T_string	; "vector-length"
   180 00000144 0D00000000000000        	dq 13
   181 0000014C 766563746F722D6C        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x6C
   182 00000154 656E677468              	db 0x65, 0x6E, 0x67, 0x74, 0x68
   183                                  	; L_constants + 345:
   184 00000159 03                      	db T_string	; "real->integer"
   185 0000015A 0D00000000000000        	dq 13
   186 00000162 7265616C2D3E696E        	db 0x72, 0x65, 0x61, 0x6C, 0x2D, 0x3E, 0x69, 0x6E
   187 0000016A 7465676572              	db 0x74, 0x65, 0x67, 0x65, 0x72
   188                                  	; L_constants + 367:
   189 0000016F 03                      	db T_string	; "exit"
   190 00000170 0400000000000000        	dq 4
   191 00000178 65786974                	db 0x65, 0x78, 0x69, 0x74
   192                                  	; L_constants + 380:
   193 0000017C 03                      	db T_string	; "integer->real"
   194 0000017D 0D00000000000000        	dq 13
   195 00000185 696E74656765722D        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x2D
   196 0000018D 3E7265616C              	db 0x3E, 0x72, 0x65, 0x61, 0x6C
   197                                  	; L_constants + 402:
   198 00000192 03                      	db T_string	; "fraction->real"
   199 00000193 0E00000000000000        	dq 14
   200 0000019B 6672616374696F6E        	db 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E
   201 000001A3 2D3E7265616C            	db 0x2D, 0x3E, 0x72, 0x65, 0x61, 0x6C
   202                                  	; L_constants + 425:
   203 000001A9 03                      	db T_string	; "char->integer"
   204 000001AA 0D00000000000000        	dq 13
   205 000001B2 636861722D3E696E        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x3E, 0x69, 0x6E
   206 000001BA 7465676572              	db 0x74, 0x65, 0x67, 0x65, 0x72
   207                                  	; L_constants + 447:
   208 000001BF 03                      	db T_string	; "integer->char"
   209 000001C0 0D00000000000000        	dq 13
   210 000001C8 696E74656765722D        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x2D
   211 000001D0 3E63686172              	db 0x3E, 0x63, 0x68, 0x61, 0x72
   212                                  	; L_constants + 469:
   213 000001D5 03                      	db T_string	; "trng"
   214 000001D6 0400000000000000        	dq 4
   215 000001DE 74726E67                	db 0x74, 0x72, 0x6E, 0x67
   216                                  	; L_constants + 482:
   217 000001E2 03                      	db T_string	; "zero?"
   218 000001E3 0500000000000000        	dq 5
   219 000001EB 7A65726F3F              	db 0x7A, 0x65, 0x72, 0x6F, 0x3F
   220                                  	; L_constants + 496:
   221 000001F0 03                      	db T_string	; "integer?"
   222 000001F1 0800000000000000        	dq 8
   223 000001F9 696E74656765723F        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x3F
   224                                  	; L_constants + 513:
   225 00000201 03                      	db T_string	; "__bin-apply"
   226 00000202 0B00000000000000        	dq 11
   227 0000020A 5F5F62696E2D6170        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x70
   228 00000212 706C79                  	db 0x70, 0x6C, 0x79
   229                                  	; L_constants + 533:
   230 00000215 03                      	db T_string	; "__bin-add-rr"
   231 00000216 0C00000000000000        	dq 12
   232 0000021E 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   233 00000226 642D7272                	db 0x64, 0x2D, 0x72, 0x72
   234                                  	; L_constants + 554:
   235 0000022A 03                      	db T_string	; "__bin-sub-rr"
   236 0000022B 0C00000000000000        	dq 12
   237 00000233 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   238 0000023B 622D7272                	db 0x62, 0x2D, 0x72, 0x72
   239                                  	; L_constants + 575:
   240 0000023F 03                      	db T_string	; "__bin-mul-rr"
   241 00000240 0C00000000000000        	dq 12
   242 00000248 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   243 00000250 6C2D7272                	db 0x6C, 0x2D, 0x72, 0x72
   244                                  	; L_constants + 596:
   245 00000254 03                      	db T_string	; "__bin-div-rr"
   246 00000255 0C00000000000000        	dq 12
   247 0000025D 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   248 00000265 762D7272                	db 0x76, 0x2D, 0x72, 0x72
   249                                  	; L_constants + 617:
   250 00000269 03                      	db T_string	; "__bin-add-qq"
   251 0000026A 0C00000000000000        	dq 12
   252 00000272 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   253 0000027A 642D7171                	db 0x64, 0x2D, 0x71, 0x71
   254                                  	; L_constants + 638:
   255 0000027E 03                      	db T_string	; "__bin-sub-qq"
   256 0000027F 0C00000000000000        	dq 12
   257 00000287 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   258 0000028F 622D7171                	db 0x62, 0x2D, 0x71, 0x71
   259                                  	; L_constants + 659:
   260 00000293 03                      	db T_string	; "__bin-mul-qq"
   261 00000294 0C00000000000000        	dq 12
   262 0000029C 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   263 000002A4 6C2D7171                	db 0x6C, 0x2D, 0x71, 0x71
   264                                  	; L_constants + 680:
   265 000002A8 03                      	db T_string	; "__bin-div-qq"
   266 000002A9 0C00000000000000        	dq 12
   267 000002B1 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   268 000002B9 762D7171                	db 0x76, 0x2D, 0x71, 0x71
   269                                  	; L_constants + 701:
   270 000002BD 03                      	db T_string	; "__bin-add-zz"
   271 000002BE 0C00000000000000        	dq 12
   272 000002C6 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   273 000002CE 642D7A7A                	db 0x64, 0x2D, 0x7A, 0x7A
   274                                  	; L_constants + 722:
   275 000002D2 03                      	db T_string	; "__bin-sub-zz"
   276 000002D3 0C00000000000000        	dq 12
   277 000002DB 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   278 000002E3 622D7A7A                	db 0x62, 0x2D, 0x7A, 0x7A
   279                                  	; L_constants + 743:
   280 000002E7 03                      	db T_string	; "__bin-mul-zz"
   281 000002E8 0C00000000000000        	dq 12
   282 000002F0 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   283 000002F8 6C2D7A7A                	db 0x6C, 0x2D, 0x7A, 0x7A
   284                                  	; L_constants + 764:
   285 000002FC 03                      	db T_string	; "__bin-div-zz"
   286 000002FD 0C00000000000000        	dq 12
   287 00000305 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   288 0000030D 762D7A7A                	db 0x76, 0x2D, 0x7A, 0x7A
   289                                  	; L_constants + 785:
   290 00000311 03                      	db T_string	; "error"
   291 00000312 0500000000000000        	dq 5
   292 0000031A 6572726F72              	db 0x65, 0x72, 0x72, 0x6F, 0x72
   293                                  	; L_constants + 799:
   294 0000031F 03                      	db T_string	; "__bin-less-than-rr"
   295 00000320 1200000000000000        	dq 18
   296 00000328 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   297 00000330 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   298 00000338 7272                    	db 0x72, 0x72
   299                                  	; L_constants + 826:
   300 0000033A 03                      	db T_string	; "__bin-less-than-qq"
   301 0000033B 1200000000000000        	dq 18
   302 00000343 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   303 0000034B 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   304 00000353 7171                    	db 0x71, 0x71
   305                                  	; L_constants + 853:
   306 00000355 03                      	db T_string	; "__bin-less-than-zz"
   307 00000356 1200000000000000        	dq 18
   308 0000035E 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   309 00000366 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   310 0000036E 7A7A                    	db 0x7A, 0x7A
   311                                  	; L_constants + 880:
   312 00000370 03                      	db T_string	; "__bin-equal-rr"
   313 00000371 0E00000000000000        	dq 14
   314 00000379 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   315 00000381 75616C2D7272            	db 0x75, 0x61, 0x6C, 0x2D, 0x72, 0x72
   316                                  	; L_constants + 903:
   317 00000387 03                      	db T_string	; "__bin-equal-qq"
   318 00000388 0E00000000000000        	dq 14
   319 00000390 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   320 00000398 75616C2D7171            	db 0x75, 0x61, 0x6C, 0x2D, 0x71, 0x71
   321                                  	; L_constants + 926:
   322 0000039E 03                      	db T_string	; "__bin-equal-zz"
   323 0000039F 0E00000000000000        	dq 14
   324 000003A7 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   325 000003AF 75616C2D7A7A            	db 0x75, 0x61, 0x6C, 0x2D, 0x7A, 0x7A
   326                                  	; L_constants + 949:
   327 000003B5 03                      	db T_string	; "quotient"
   328 000003B6 0800000000000000        	dq 8
   329 000003BE 71756F7469656E74        	db 0x71, 0x75, 0x6F, 0x74, 0x69, 0x65, 0x6E, 0x74
   330                                  	; L_constants + 966:
   331 000003C6 03                      	db T_string	; "remainder"
   332 000003C7 0900000000000000        	dq 9
   333 000003CF 72656D61696E6465        	db 0x72, 0x65, 0x6D, 0x61, 0x69, 0x6E, 0x64, 0x65
   334 000003D7 72                      	db 0x72
   335                                  	; L_constants + 984:
   336 000003D8 03                      	db T_string	; "set-car!"
   337 000003D9 0800000000000000        	dq 8
   338 000003E1 7365742D63617221        	db 0x73, 0x65, 0x74, 0x2D, 0x63, 0x61, 0x72, 0x21
   339                                  	; L_constants + 1001:
   340 000003E9 03                      	db T_string	; "set-cdr!"
   341 000003EA 0800000000000000        	dq 8
   342 000003F2 7365742D63647221        	db 0x73, 0x65, 0x74, 0x2D, 0x63, 0x64, 0x72, 0x21
   343                                  	; L_constants + 1018:
   344 000003FA 03                      	db T_string	; "string-ref"
   345 000003FB 0A00000000000000        	dq 10
   346 00000403 737472696E672D72        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x72
   347 0000040B 6566                    	db 0x65, 0x66
   348                                  	; L_constants + 1037:
   349 0000040D 03                      	db T_string	; "vector-ref"
   350 0000040E 0A00000000000000        	dq 10
   351 00000416 766563746F722D72        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x72
   352 0000041E 6566                    	db 0x65, 0x66
   353                                  	; L_constants + 1056:
   354 00000420 03                      	db T_string	; "vector-set!"
   355 00000421 0B00000000000000        	dq 11
   356 00000429 766563746F722D73        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x73
   357 00000431 657421                  	db 0x65, 0x74, 0x21
   358                                  	; L_constants + 1076:
   359 00000434 03                      	db T_string	; "string-set!"
   360 00000435 0B00000000000000        	dq 11
   361 0000043D 737472696E672D73        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x73
   362 00000445 657421                  	db 0x65, 0x74, 0x21
   363                                  	; L_constants + 1096:
   364 00000448 03                      	db T_string	; "make-vector"
   365 00000449 0B00000000000000        	dq 11
   366 00000451 6D616B652D766563        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x76, 0x65, 0x63
   367 00000459 746F72                  	db 0x74, 0x6F, 0x72
   368                                  	; L_constants + 1116:
   369 0000045C 03                      	db T_string	; "make-string"
   370 0000045D 0B00000000000000        	dq 11
   371 00000465 6D616B652D737472        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x73, 0x74, 0x72
   372 0000046D 696E67                  	db 0x69, 0x6E, 0x67
   373                                  	; L_constants + 1136:
   374 00000470 03                      	db T_string	; "numerator"
   375 00000471 0900000000000000        	dq 9
   376 00000479 6E756D657261746F        	db 0x6E, 0x75, 0x6D, 0x65, 0x72, 0x61, 0x74, 0x6F
   377 00000481 72                      	db 0x72
   378                                  	; L_constants + 1154:
   379 00000482 03                      	db T_string	; "denominator"
   380 00000483 0B00000000000000        	dq 11
   381 0000048B 64656E6F6D696E61        	db 0x64, 0x65, 0x6E, 0x6F, 0x6D, 0x69, 0x6E, 0x61
   382 00000493 746F72                  	db 0x74, 0x6F, 0x72
   383                                  	; L_constants + 1174:
   384 00000496 03                      	db T_string	; "eq?"
   385 00000497 0300000000000000        	dq 3
   386 0000049F 65713F                  	db 0x65, 0x71, 0x3F
   387                                  	; L_constants + 1186:
   388 000004A2 03                      	db T_string	; "__integer-to-fracti...
   389 000004A3 1500000000000000        	dq 21
   390 000004AB 5F5F696E74656765        	db 0x5F, 0x5F, 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65
   391 000004B3 722D746F2D667261        	db 0x72, 0x2D, 0x74, 0x6F, 0x2D, 0x66, 0x72, 0x61
   392 000004BB 6374696F6E              	db 0x63, 0x74, 0x69, 0x6F, 0x6E
   393                                  	; L_constants + 1216:
   394 000004C0 03                      	db T_string	; "logand"
   395 000004C1 0600000000000000        	dq 6
   396 000004C9 6C6F67616E64            	db 0x6C, 0x6F, 0x67, 0x61, 0x6E, 0x64
   397                                  	; L_constants + 1231:
   398 000004CF 03                      	db T_string	; "logor"
   399 000004D0 0500000000000000        	dq 5
   400 000004D8 6C6F676F72              	db 0x6C, 0x6F, 0x67, 0x6F, 0x72
   401                                  	; L_constants + 1245:
   402 000004DD 03                      	db T_string	; "logxor"
   403 000004DE 0600000000000000        	dq 6
   404 000004E6 6C6F67786F72            	db 0x6C, 0x6F, 0x67, 0x78, 0x6F, 0x72
   405                                  	; L_constants + 1260:
   406 000004EC 03                      	db T_string	; "lognot"
   407 000004ED 0600000000000000        	dq 6
   408 000004F5 6C6F676E6F74            	db 0x6C, 0x6F, 0x67, 0x6E, 0x6F, 0x74
   409                                  	; L_constants + 1275:
   410 000004FB 03                      	db T_string	; "ash"
   411 000004FC 0300000000000000        	dq 3
   412 00000504 617368                  	db 0x61, 0x73, 0x68
   413                                  	; L_constants + 1287:
   414 00000507 03                      	db T_string	; "symbol?"
   415 00000508 0700000000000000        	dq 7
   416 00000510 73796D626F6C3F          	db 0x73, 0x79, 0x6D, 0x62, 0x6F, 0x6C, 0x3F
   417                                  	; L_constants + 1303:
   418 00000517 03                      	db T_string	; "uninterned-symbol?"
   419 00000518 1200000000000000        	dq 18
   420 00000520 756E696E7465726E        	db 0x75, 0x6E, 0x69, 0x6E, 0x74, 0x65, 0x72, 0x6E
   421 00000528 65642D73796D626F        	db 0x65, 0x64, 0x2D, 0x73, 0x79, 0x6D, 0x62, 0x6F
   422 00000530 6C3F                    	db 0x6C, 0x3F
   423                                  	; L_constants + 1330:
   424 00000532 03                      	db T_string	; "gensym?"
   425 00000533 0700000000000000        	dq 7
   426 0000053B 67656E73796D3F          	db 0x67, 0x65, 0x6E, 0x73, 0x79, 0x6D, 0x3F
   427                                  	; L_constants + 1346:
   428 00000542 03                      	db T_string	; "gensym"
   429 00000543 0600000000000000        	dq 6
   430 0000054B 67656E73796D            	db 0x67, 0x65, 0x6E, 0x73, 0x79, 0x6D
   431                                  	; L_constants + 1361:
   432 00000551 03                      	db T_string	; "frame"
   433 00000552 0500000000000000        	dq 5
   434 0000055A 6672616D65              	db 0x66, 0x72, 0x61, 0x6D, 0x65
   435                                  	; L_constants + 1375:
   436 0000055F 03                      	db T_string	; "break"
   437 00000560 0500000000000000        	dq 5
   438 00000568 627265616B              	db 0x62, 0x72, 0x65, 0x61, 0x6B
   439                                  	; L_constants + 1389:
   440 0000056D 03                      	db T_string	; "boolean-false?"
   441 0000056E 0E00000000000000        	dq 14
   442 00000576 626F6F6C65616E2D        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x2D
   443 0000057E 66616C73653F            	db 0x66, 0x61, 0x6C, 0x73, 0x65, 0x3F
   444                                  	; L_constants + 1412:
   445 00000584 03                      	db T_string	; "boolean-true?"
   446 00000585 0D00000000000000        	dq 13
   447 0000058D 626F6F6C65616E2D        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x2D
   448 00000595 747275653F              	db 0x74, 0x72, 0x75, 0x65, 0x3F
   449                                  	; L_constants + 1434:
   450 0000059A 03                      	db T_string	; "primitive?"
   451 0000059B 0A00000000000000        	dq 10
   452 000005A3 7072696D69746976        	db 0x70, 0x72, 0x69, 0x6D, 0x69, 0x74, 0x69, 0x76
   453 000005AB 653F                    	db 0x65, 0x3F
   454                                  	; L_constants + 1453:
   455 000005AD 03                      	db T_string	; "length"
   456 000005AE 0600000000000000        	dq 6
   457 000005B6 6C656E677468            	db 0x6C, 0x65, 0x6E, 0x67, 0x74, 0x68
   458                                  	; L_constants + 1468:
   459 000005BC 03                      	db T_string	; "make-list"
   460 000005BD 0900000000000000        	dq 9
   461 000005C5 6D616B652D6C6973        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x6C, 0x69, 0x73
   462 000005CD 74                      	db 0x74
   463                                  	; L_constants + 1486:
   464 000005CE 03                      	db T_string	; "return"
   465 000005CF 0600000000000000        	dq 6
   466 000005D7 72657475726E            	db 0x72, 0x65, 0x74, 0x75, 0x72, 0x6E
   467                                  	; L_constants + 1501:
   468 000005DD 11                      	db T_integer	; 1
   469 000005DE 0100000000000000        	dq 1
   470                                  	; L_constants + 1510:
   471 000005E6 11                      	db T_integer	; 2
   472 000005E7 0200000000000000        	dq 2
   473                                  	; L_constants + 1519:
   474 000005EF 11                      	db T_integer	; 3
   475 000005F0 0300000000000000        	dq 3
   476                                  	; L_constants + 1528:
   477 000005F8 11                      	db T_integer	; 4
   478 000005F9 0400000000000000        	dq 4
   479                                  	; L_constants + 1537:
   480 00000601 11                      	db T_integer	; 5
   481 00000602 0500000000000000        	dq 5
   482                                  	; L_constants + 1546:
   483 0000060A 11                      	db T_integer	; 6
   484 0000060B 0600000000000000        	dq 6
   485                                  
   486                                  
   487                                  extern printf, fprintf, stdout, stderr, fwrite, exit, putchar, getchar
   488                                  global main
   489                                  section .text
   490                                  main:
   491 00000000 C8000000                        enter 0, 0
   492 00000004 6A00                            push 0
   493 00000006 6A00                            push 0
   494 00000008 68[4F010000]                    push Lend
   495 0000000D C8000000                        enter 0, 0
   496                                  
   497                                  	; preparing a non-tail-call
   498 00000011 48B8-                   	mov rax, L_constants + 1546
   498 00000013 [0A06000000000000] 
   499 0000001B 50                      	push rax
   500 0000001C 48B8-                   	mov rax, L_constants + 1537
   500 0000001E [0106000000000000] 
   501 00000026 50                      	push rax
   502 00000027 48B8-                   	mov rax, L_constants + 1528
   502 00000029 [F805000000000000] 
   503 00000031 50                      	push rax
   504 00000032 48B8-                   	mov rax, L_constants + 1519
   504 00000034 [EF05000000000000] 
   505 0000003C 50                      	push rax
   506 0000003D 48B8-                   	mov rax, L_constants + 1510
   506 0000003F [E605000000000000] 
   507 00000047 50                      	push rax
   508 00000048 48B8-                   	mov rax, L_constants + 1501
   508 0000004A [DD05000000000000] 
   509 00000052 50                      	push rax
   510 00000053 6A06                    	push 6	; arg count
   511 00000055 BF11000000              	mov rdi, (1 + 8 + 8)	; Allocate memory for the closure structure
   512 0000005A E85B020000              	call malloc
   513 0000005F 50                      	push rax	; Save closure pointer on the stack
   514 00000060 BF10000000              	mov rdi, 8 * 2	; Allocate memory for the new rib
   515 00000065 E850020000              	call malloc
   516 0000006A 50                      	push rax	; Save new rib pointer on the stack
   517 0000006B BF08000000              	mov rdi, 8 * 1	; Allocate memory for the extended environment
   518 00000070 E845020000              	call malloc
   519 00000075 488B7D10                	mov rdi, ENV	; Load current environment pointer
   520 00000079 BE00000000              	mov rsi, 0	; Initialize loop index for copying environment
   521 0000007E BA01000000              	mov rdx, 1	; Offset for the extended environment
   522                                  .L_lambda_opt_env_loop_0001:	; Copy current environment to extended environment
   523 00000083 4883FE00                	cmp rsi, 0	; Check if all environment frames are copied
   524 00000087 7410                    	je .L_lambda_opt_env_end_0001	; Exit loop if done
   525 00000089 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]	; Load environment frame
   526 0000008D 48890CD0                	mov qword [rax + 8 * rdx], rcx	; Store frame in extended environment
   527 00000091 48FFC6                  	inc rsi	; Increment loop index
   528 00000094 48FFC2                  	inc rdx	; Increment offset for extended environment
   529 00000097 EBEA                    	jmp .L_lambda_opt_env_loop_0001	; Repeat loop
   530                                  .L_lambda_opt_env_end_0001:
   531 00000099 5B                      	pop rbx	; Restore new rib pointer
   532 0000009A BE00000000              	mov rsi, 0	; Initialize loop index for parameters
   533                                  .L_lambda_opt_params_loop_0001:	; Copy parameters to the new rib
   534 0000009F 4883FE02                	cmp rsi, 2	; Check if all parameters are copied
   535 000000A3 740E                    	je .L_lambda_opt_params_end_0001	; Exit loop if done
   536 000000A5 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]	; Load parameter from caller's frame
   537 000000AA 488914F3                	mov qword [rbx + 8 * rsi], rdx	; Store parameter in new rib
   538 000000AE 48FFC6                  	inc rsi	; Increment loop index
   539 000000B1 EBEC                    	jmp .L_lambda_opt_params_loop_0001	; Repeat loop
   540                                  .L_lambda_opt_params_end_0001:
   541 000000B3 488918                  	mov qword [rax], rbx	; Set new rib in the extended environment
   542 000000B6 4889C3                  	mov rbx, rax	; Store extended environment pointer in rbx
   543 000000B9 58                      	pop rax	; Restore closure pointer
   544 000000BA C60004                  	mov byte [rax], T_closure	; Mark as a closure
   545 000000BD 48895801                	mov SOB_CLOSURE_ENV(rax), rbx	; Set closure environment
   546 000000C1 48C74009[CB000000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0001	; Set closure code pointer
   547 000000C9 EB75                    	jmp .L_lambda_opt_end_0001	; Jump to end
   548                                  .L_lambda_opt_code_0001:
   549 000000CB 48837C241002            	cmp qword [rsp + 8 * 2], 2	; Compare number of arguments to expected count
   550 000000D1 740D                    	je .L_lambda_opt_arity_check_exact_0001	; If exact match, handle as exact arity
   551 000000D3 7F1A                    	jg .L_lambda_opt_arity_check_more_0001	; If more, handle optional arguments
   552 000000D5 FF742410                	push qword [rsp + 8 * 2]	; Push argument count
   553 000000D9 6A02                    	push 2	; Push expected count
   554 000000DB E9A7010000              	jmp L_error_incorrect_arity_opt	; Jump to error handler
   555                                  .L_lambda_opt_arity_check_exact_0001:
   556 000000E0 488D6424F8              	lea rsp, [rsp - 8]	; Allocate space for sob_nil
   557 000000E5 48C70424[01000000]      	mov qword [rsp], sob_nil	; Store sob_nil
   558 000000ED EB45                    	jmp .L_lambda_opt_stack_adjusted_0001	; Jump to stack adjustment
   559                                  .L_lambda_opt_arity_check_more_0001:
   560 000000EF 488B742410              	mov rsi, qword [rsp + 8 * 2] ; rsi <-- number of arguments
   561 000000F4 4889E7                  	mov rdi, rsp ; rdi <-- current stack pointer
   562 000000F7 4883EE02                	sub rsi, 2 ; rsi <-- number of optional arguments (total_args - fixed_args)
   563 000000FB 488D5CF410              	lea rbx, [rsp + 8 * rsi + 8 * 2] ; rbx <-- address of the last optional argument
   564 00000100 4889F1                  	mov rcx, rsi ; rcx <-- counter for optional arguments
   565 00000103 48B8-                   	mov rax, sob_nil ; rax <-- initialize the list as sob_nil (empty list)
   565 00000105 [0100000000000000] 
   566                                  .L_lambda_opt_stack_shrink_loop_0001:
   567 0000010D 4883F900                	cmp rcx, 0 ; check if there are more arguments to process
   568 00000111 7421                    	je .L_lambda_opt_stack_adjusted_0001 ; if no more arguments, jump to stack adjustment
   569 00000113 4883EB08                	sub rbx, 8 ; rbx <-- move to the next optional argument
   570 00000117 488B13                  	mov rdx, qword [rbx] ; rdx <-- load the current argument
   571 0000011A BF11000000              	mov rdi, (1 + 8 + 8) ; rdi <-- size of a T_pair object
   572 0000011F E896010000              	call malloc ; allocate memory for the T_pair object
   573 00000124 C60021                  	mov byte [rax], T_pair ; rax[0] <-- set as T_pair
   574 00000127 48895001                	mov qword [rax + 1], rdx ; rax[1] <-- store the current argument as CAR
   575 0000012B 48894009                	mov qword [rax + 1 + 8], rax ; rax[2] <-- store the rest of the list as CDR
   576 0000012F 48FFC9                  	dec rcx ; rcx <-- decrement the counter
   577 00000132 EBD9                    	jmp .L_lambda_opt_stack_shrink_loop_0001 ; repeat for the next optional argument
   578                                  .L_lambda_opt_stack_adjusted_0001:
   579 00000134 C8000000                	enter 0, 0 ; setup frame for the procedure
   580 00000138 488B4530                	mov rax, PARAM(2)	; param c
   581 0000013C C9                      	leave ; restore the previous frame
   582 0000013D C22800                  	ret AND_KILL_FRAME(3)
   583                                  .L_lambda_opt_end_0001:
   584 00000140 803804                  	cmp byte [rax], T_closure
   585 00000143 0F85C8000000            	jne L_error_non_closure
   586 00000149 FF7001                  	push SOB_CLOSURE_ENV(rax)
   587 0000014C FF5009                  	call SOB_CLOSURE_CODE(rax)
   588                                  Lend:
   589 0000014F 4889C7                  	mov rdi, rax
   590 00000152 E8B8030000              	call print_sexpr_if_not_void
   591                                  
   592 00000157 48BF-                           mov rdi, fmt_memory_usage
   592 00000159 [AB06000000000000] 
   593 00000161 488B3425[31070000]              mov rsi, qword [top_of_memory]
   594 00000169 4881EE[00000000]                sub rsi, memory
   595 00000170 B800000000                      mov rax, 0
   596                                          ENTER
    44 00000175 C8000000            <1>  enter 0, 0
    45 00000179 4883E4F0            <1>  and rsp, ~15
   597 0000017D E8(00000000)                    call printf
   598                                          LEAVE
    49 00000182 C9                  <1>  leave
   599 00000183 B800000000                      mov rax, 0
   600 00000188 E8(00000000)                    call exit
   601                                  
   602                                  L_error_fvar_undefined:
   603 0000018D 50                              push rax
   604 0000018E 488B3C25[00000000]              mov rdi, qword [stderr]  ; destination
   605 00000196 48BE-                           mov rsi, fmt_undefined_free_var_1
   605 00000198 [1306000000000000] 
   606 000001A0 B800000000                      mov rax, 0
   607                                          ENTER
    44 000001A5 C8000000            <1>  enter 0, 0
    45 000001A9 4883E4F0            <1>  and rsp, ~15
   608 000001AD E8(00000000)                    call fprintf
   609                                          LEAVE
    49 000001B2 C9                  <1>  leave
   610 000001B3 58                              pop rax
   611 000001B4 488B4001                        mov rax, qword [rax + 1] ; string
   612 000001B8 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
   613 000001BC BE01000000                      mov rsi, 1               ; sizeof(char)
   614 000001C1 488B5001                        mov rdx, qword [rax + 1] ; string-length
   615 000001C5 488B0C25[00000000]              mov rcx, qword [stderr]  ; destination
   616 000001CD B800000000                      mov rax, 0
   617                                          ENTER
    44 000001D2 C8000000            <1>  enter 0, 0
    45 000001D6 4883E4F0            <1>  and rsp, ~15
   618 000001DA E8(00000000)                    call fwrite
   619                                          LEAVE
    49 000001DF C9                  <1>  leave
   620 000001E0 488B3C25[00000000]              mov rdi, [stderr]       ; destination
   621 000001E8 48BE-                           mov rsi, fmt_undefined_free_var_2
   621 000001EA [2A06000000000000] 
   622 000001F2 B800000000                      mov rax, 0
   623                                          ENTER
    44 000001F7 C8000000            <1>  enter 0, 0
    45 000001FB 4883E4F0            <1>  and rsp, ~15
   624 000001FF E8(00000000)                    call fprintf
   625                                          LEAVE
    49 00000204 C9                  <1>  leave
   626 00000205 48C7C0F6FFFFFF                  mov rax, -10
   627 0000020C E8(00000000)                    call exit
   628                                  
   629                                  L_error_non_closure:
   630 00000211 488B3C25[00000000]              mov rdi, qword [stderr]
   631 00000219 48BE-                           mov rsi, fmt_non_closure
   631 0000021B [E106000000000000] 
   632 00000223 B800000000                      mov rax, 0
   633                                          ENTER
    44 00000228 C8000000            <1>  enter 0, 0
    45 0000022C 4883E4F0            <1>  and rsp, ~15
   634 00000230 E8(00000000)                    call fprintf
   635                                          LEAVE
    49 00000235 C9                  <1>  leave
   636 00000236 48C7C0FEFFFFFF                  mov rax, -2
   637 0000023D E8(00000000)                    call exit
   638                                  
   639                                  L_error_improper_list:
   640 00000242 488B3C25[00000000]      	mov rdi, qword [stderr]
   641 0000024A 48BE-                   	mov rsi, fmt_error_improper_list
   641 0000024C [0907000000000000] 
   642 00000254 B800000000              	mov rax, 0
   643                                          ENTER
    44 00000259 C8000000            <1>  enter 0, 0
    45 0000025D 4883E4F0            <1>  and rsp, ~15
   644 00000261 E8(00000000)            	call fprintf
   645                                          LEAVE
    49 00000266 C9                  <1>  leave
   646 00000267 48C7C0F9FFFFFF          	mov rax, -7
   647 0000026E E8(00000000)            	call exit
   648                                  
   649                                  L_error_incorrect_arity_simple:
   650 00000273 488B3C25[00000000]              mov rdi, qword [stderr]
   651 0000027B 48BE-                           mov rsi, fmt_incorrect_arity_simple
   651 0000027D [4C06000000000000] 
   652 00000285 EB12                            jmp L_error_incorrect_arity_common
   653                                  L_error_incorrect_arity_opt:
   654 00000287 488B3C25[00000000]              mov rdi, qword [stderr]
   655 0000028F 48BE-                           mov rsi, fmt_incorrect_arity_opt
   655 00000291 [7706000000000000] 
   656                                  L_error_incorrect_arity_common:
   657 00000299 5A                              pop rdx
   658 0000029A 59                              pop rcx
   659 0000029B B800000000                      mov rax, 0
   660                                          ENTER
    44 000002A0 C8000000            <1>  enter 0, 0
    45 000002A4 4883E4F0            <1>  and rsp, ~15
   661 000002A8 E8(00000000)                    call fprintf
   662                                          LEAVE
    49 000002AD C9                  <1>  leave
   663 000002AE 48C7C0FAFFFFFF                  mov rax, -6
   664 000002B5 E8(00000000)                    call exit
   665                                  
   666                                  section .data
   667                                  fmt_undefined_free_var_1:
   668 00000613 212121205468652066-             db `!!! The free variable \0`
   668 0000061C 726565207661726961-
   668 00000625 626C652000         
   669                                  fmt_undefined_free_var_2:
   670 0000062A 207761732075736564-             db ` was used before it was defined.\n\0`
   670 00000633 206265666F72652069-
   670 0000063C 742077617320646566-
   670 00000645 696E65642E0A00     
   671                                  fmt_incorrect_arity_simple:
   672 0000064C 212121204578706563-             db `!!! Expected %ld arguments, but given %ld\n\0`
   672 00000655 74656420256C642061-
   672 0000065E 7267756D656E74732C-
   672 00000667 206275742067697665-
   672 00000670 6E20256C640A00     
   673                                  fmt_incorrect_arity_opt:
   674 00000677 212121204578706563-             db `!!! Expected at least %ld arguments, but given %ld\n\0`
   674 00000680 746564206174206C65-
   674 00000689 61737420256C642061-
   674 00000692 7267756D656E74732C-
   674 0000069B 206275742067697665-
   674 000006A4 6E20256C640A00     
   675                                  fmt_memory_usage:
   676 000006AB 0A2121212055736564-             db `\n!!! Used %ld bytes of dynamically-allocated memory\n\n\0`
   676 000006B4 20256C642062797465-
   676 000006BD 73206F662064796E61-
   676 000006C6 6D6963616C6C792D61-
   676 000006CF 6C6C6F636174656420-
   676 000006D8 6D656D6F72790A0A00 
   677                                  fmt_non_closure:
   678 000006E1 21212120417474656D-             db `!!! Attempting to apply a non-closure!\n\0`
   678 000006EA 7074696E6720746F20-
   678 000006F3 6170706C792061206E-
   678 000006FC 6F6E2D636C6F737572-
   678 00000705 65210A00           
   679                                  fmt_error_improper_list:
   680 00000709 212121205468652061-     	db `!!! The argument is not a proper list!\n\0`
   680 00000712 7267756D656E742069-
   680 0000071B 73206E6F7420612070-
   680 00000724 726F706572206C6973-
   680 0000072D 74210A00           
   681                                  
   682                                  section .bss
   683                                  memory:
   684 00000000 <res 40000000h>         	resb gbytes(1)
   685                                  
   686                                  section .data
   687                                  top_of_memory:
   688 00000731 [0000000000000000]              dq memory
   689                                  
   690                                  section .text
   691                                  malloc:
   692 000002BA 488B0425[31070000]              mov rax, qword [top_of_memory]
   693 000002C2 48013C25[31070000]              add qword [top_of_memory], rdi
   694 000002CA C3                              ret
   695                                  
   696                                  L_code_ptr_return:
   697 000002CB 48837C241002            	cmp qword [rsp + 8*2], 2
   698 000002D1 0F85461C0000            	jne L_error_arg_count_2
   699 000002D7 488B4C2418              	mov rcx, qword [rsp + 8*3]
   700                                  	assert_integer(rcx)
    53 000002DC 803911              <1>  cmp byte [%1], %2
    54 000002DF 0F85D71C0000        <1>  jne L_error_incorrect_type
   701 000002E5 488B4901                	mov rcx, qword [rcx + 1]
   702 000002E9 4883F900                	cmp rcx, 0
   703 000002ED 0F8C5E1B0000            	jl L_error_integer_range
   704 000002F3 488B442420              	mov rax, qword [rsp + 8*4]
   705                                  .L0:
   706 000002F8 4883F900                        cmp rcx, 0
   707 000002FC 7409                            je .L1
   708 000002FE 488B6D00                	mov rbp, qword [rbp]
   709 00000302 48FFC9                  	dec rcx
   710 00000305 7FF1                    	jg .L0
   711                                  .L1:
   712 00000307 4889EC                  	mov rsp, rbp
   713 0000030A 5D                      	pop rbp
   714 0000030B 5B                              pop rbx
   715 0000030C 488B4C2408                      mov rcx, qword [rsp + 8*1]
   716 00000311 488D64CC10                      lea rsp, [rsp + 8*rcx + 8*2]
   717 00000316 FFE3                    	jmp rbx
   718                                  
   719                                  L_code_ptr_make_list:
   720 00000318 C8000000                	enter 0, 0
   721 0000031C 48837D1801                      cmp COUNT, 1
   722 00000321 740C                            je .L0
   723 00000323 48837D1802                      cmp COUNT, 2
   724 00000328 7411                            je .L1
   725 0000032A E9231C0000                      jmp L_error_arg_count_12
   726                                  .L0:
   727 0000032F 49B9-                           mov r9, sob_void
   727 00000331 [0000000000000000] 
   728 00000339 EB04                            jmp .L2
   729                                  .L1:
   730 0000033B 4C8B4D28                        mov r9, PARAM(1)
   731                                  .L2:
   732 0000033F 488B4D20                        mov rcx, PARAM(0)
   733                                          assert_integer(rcx)
    53 00000343 803911              <1>  cmp byte [%1], %2
    54 00000346 0F85701C0000        <1>  jne L_error_incorrect_type
   734 0000034C 488B4901                        mov rcx, qword [rcx + 1]
   735 00000350 4883F900                        cmp rcx, 0
   736 00000354 0F8C281B0000                    jl L_error_arg_negative
   737 0000035A 49B8-                           mov r8, sob_nil
   737 0000035C [0100000000000000] 
   738                                  .L3:
   739 00000364 4883F900                        cmp rcx, 0
   740 00000368 7E1D                            jle .L4
   741 0000036A BF11000000                      mov rdi, 1 + 8 + 8
   742 0000036F E846FFFFFF                      call malloc
   743 00000374 C60021                          mov byte [rax], T_pair
   744 00000377 4C894801                        mov qword [rax + 1], r9
   745 0000037B 4C894009                        mov qword [rax + 1 + 8], r8
   746 0000037F 4989C0                          mov r8, rax
   747 00000382 48FFC9                          dec rcx
   748 00000385 EBDD                            jmp .L3
   749                                  .L4:
   750 00000387 4C89C0                          mov rax, r8
   751 0000038A 48837D1802                      cmp COUNT, 2
   752 0000038F 7404                            je .L5
   753 00000391 C9                              leave
   754 00000392 C21800                          ret AND_KILL_FRAME(1)
   755                                  .L5:
   756 00000395 C9                      	leave
   757 00000396 C22000                  	ret AND_KILL_FRAME(2)
   758                                  
   759                                  L_code_ptr_is_primitive:
   760 00000399 C8000000                	enter 0, 0
   761 0000039D 48837D1801              	cmp COUNT, 1
   762 000003A2 0F85401B0000            	jne L_error_arg_count_1
   763 000003A8 488B4520                	mov rax, PARAM(0)
   764                                  	assert_closure(rax)
    53 000003AC 803804              <1>  cmp byte [%1], %2
    54 000003AF 0F85071C0000        <1>  jne L_error_incorrect_type
   765 000003B5 4883780100              	cmp SOB_CLOSURE_ENV(rax), 0
   766 000003BA 750C                    	jne .L_false
   767 000003BC 48B8-                   	mov rax, sob_boolean_true
   767 000003BE [0300000000000000] 
   768 000003C6 EB0A                    	jmp .L_end
   769                                  .L_false:
   770 000003C8 48B8-                   	mov rax, sob_boolean_false
   770 000003CA [0200000000000000] 
   771                                  .L_end:
   772 000003D2 C9                      	leave
   773 000003D3 C21800                  	ret AND_KILL_FRAME(1)
   774                                  
   775                                  L_code_ptr_length:
   776 000003D6 C8000000                	enter 0, 0
   777 000003DA 48837D1801              	cmp COUNT, 1
   778 000003DF 0F85031B0000            	jne L_error_arg_count_1
   779 000003E5 488B5D20                	mov rbx, PARAM(0)
   780 000003E9 BF00000000              	mov rdi, 0
   781                                  .L:
   782 000003EE 803B01                  	cmp byte [rbx], T_nil
   783 000003F1 7412                    	je .L_end
   784                                  	assert_pair(rbx)
    53 000003F3 803B21              <1>  cmp byte [%1], %2
    54 000003F6 0F85C01B0000        <1>  jne L_error_incorrect_type
   785 000003FC 488B5B09                	mov rbx, SOB_PAIR_CDR(rbx)
   786 00000400 48FFC7                  	inc rdi
   787 00000403 EBE9                    	jmp .L
   788                                  .L_end:
   789 00000405 E82D1A0000              	call make_integer
   790 0000040A C9                      	leave
   791 0000040B C21800                  	ret AND_KILL_FRAME(1)
   792                                  
   793                                  L_code_ptr_break:
   794 0000040E 48837C241000                    cmp qword [rsp + 8 * 2], 0
   795 00000414 0F85991A0000                    jne L_error_arg_count_0
   796 0000041A CC                              int3
   797 0000041B 48B8-                           mov rax, sob_void
   797 0000041D [0000000000000000] 
   798 00000425 C21000                          ret AND_KILL_FRAME(0)        
   799                                  
   800                                  L_code_ptr_frame:
   801 00000428 C8000000                        enter 0, 0
   802 0000042C 48837D1800                      cmp COUNT, 0
   803 00000431 0F857C1A0000                    jne L_error_arg_count_0
   804                                  
   805 00000437 48BF-                           mov rdi, fmt_frame
   805 00000439 [3907000000000000] 
   806 00000441 488B7500                        mov rsi, qword [rbp]    ; old rbp
   807 00000445 488B5608                        mov rdx, qword [rsi + 8*1] ; ret addr
   808 00000449 488B4E10                        mov rcx, qword [rsi + 8*2] ; lexical environment
   809 0000044D 4C8B4618                        mov r8, qword [rsi + 8*3] ; count
   810 00000451 4C8D4E20                        lea r9, [rsi + 8*4]       ; address of argument 0
   811 00000455 6A00                            push 0
   812 00000457 4151                            push r9
   813 00000459 4150                            push r8                   ; we'll use it when printing the params
   814 0000045B B800000000                      mov rax, 0
   815                                          
   816                                          ENTER
    44 00000460 C8000000            <1>  enter 0, 0
    45 00000464 4883E4F0            <1>  and rsp, ~15
   817 00000468 E8(00000000)                    call printf
   818                                          LEAVE
    49 0000046D C9                  <1>  leave
   819                                  
   820                                  .L:
   821 0000046E 488B0C24                        mov rcx, qword [rsp]
   822 00000472 4883F900                        cmp rcx, 0
   823 00000476 7467                            je .L_out
   824 00000478 48BF-                           mov rdi, fmt_frame_param_prefix
   824 0000047A [7207000000000000] 
   825 00000482 488B742410                      mov rsi, qword [rsp + 8*2]
   826 00000487 B800000000                      mov rax, 0
   827                                          
   828                                          ENTER
    44 0000048C C8000000            <1>  enter 0, 0
    45 00000490 4883E4F0            <1>  and rsp, ~15
   829 00000494 E8(00000000)                    call printf
   830                                          LEAVE
    49 00000499 C9                  <1>  leave
   831                                  
   832 0000049A 488B0C24                        mov rcx, qword [rsp]
   833 0000049E 48FFC9                          dec rcx
   834 000004A1 48890C24                        mov qword [rsp], rcx    ; dec arg count
   835 000004A5 48FF442410                      inc qword [rsp + 8*2]   ; increment index of current arg
   836 000004AA 488B7C2408                      mov rdi, qword [rsp + 8*1] ; addr of addr current arg
   837 000004AF 4C8D4F08                        lea r9, [rdi + 8]          ; addr of next arg
   838 000004B3 4C894C2408                      mov qword [rsp + 8*1], r9  ; backup addr of next arg
   839 000004B8 488B3F                          mov rdi, qword [rdi]       ; addr of current arg
   840 000004BB E87B000000                      call print_sexpr
   841 000004C0 48BF-                           mov rdi, fmt_newline
   841 000004C2 [9E07000000000000] 
   842 000004CA B800000000                      mov rax, 0
   843                                          ENTER
    44 000004CF C8000000            <1>  enter 0, 0
    45 000004D3 4883E4F0            <1>  and rsp, ~15
   844 000004D7 E8(00000000)                    call printf
   845                                          LEAVE
    49 000004DC C9                  <1>  leave
   846 000004DD EB8F                            jmp .L
   847                                  .L_out:
   848 000004DF 48BF-                           mov rdi, fmt_frame_continue
   848 000004E1 [8307000000000000] 
   849 000004E9 B800000000                      mov rax, 0
   850                                          ENTER
    44 000004EE C8000000            <1>  enter 0, 0
    45 000004F2 4883E4F0            <1>  and rsp, ~15
   851 000004F6 E8(00000000)                    call printf
   852 000004FB E8(00000000)                    call getchar
   853                                          LEAVE
    49 00000500 C9                  <1>  leave
   854                                          
   855 00000501 48B8-                           mov rax, sob_void
   855 00000503 [0000000000000000] 
   856 0000050B C9                              leave
   857 0000050C C21000                          ret AND_KILL_FRAME(0)
   858                                          
   859                                  print_sexpr_if_not_void:
   860 0000050F 4881FF[00000000]        	cmp rdi, sob_void
   861 00000516 7422                    	je .done
   862 00000518 E81E000000              	call print_sexpr
   863 0000051D 48BF-                   	mov rdi, fmt_newline
   863 0000051F [9E07000000000000] 
   864 00000527 B800000000              	mov rax, 0
   865                                  	ENTER
    44 0000052C C8000000            <1>  enter 0, 0
    45 00000530 4883E4F0            <1>  and rsp, ~15
   866 00000534 E8(00000000)            	call printf
   867                                  	LEAVE
    49 00000539 C9                  <1>  leave
   868                                  .done:
   869 0000053A C3                      	ret
   870                                  
   871                                  section .data
   872                                  fmt_frame:
   873 00000739 524250203D2025703B-             db `RBP = %p; ret addr = %p; lex env = %p; param count = %d\n\0`
   873 00000742 207265742061646472-
   873 0000074B 203D2025703B206C65-
   873 00000754 7820656E76203D2025-
   873 0000075D 703B20706172616D20-
   873 00000766 636F756E74203D2025-
   873 0000076F 640A00             
   874                                  fmt_frame_param_prefix:
   875 00000772 3D3D5B706172616D20-             db `==[param %d]==> \0`
   875 0000077B 25645D3D3D3E2000   
   876                                  fmt_frame_continue:
   877 00000783 486974203C456E7465-             db `Hit <Enter> to continue...\0`
   877 0000078C 723E20746F20636F6E-
   877 00000795 74696E75652E2E2E00 
   878                                  fmt_newline:
   879 0000079E 0A00                    	db `\n\0`
   880                                  fmt_void:
   881 000007A0 233C766F69643E00        	db `#<void>\0`
   882                                  fmt_nil:
   883 000007A8 282900                  	db `()\0`
   884                                  fmt_boolean_false:
   885 000007AB 236600                  	db `#f\0`
   886                                  fmt_boolean_true:
   887 000007AE 237400                  	db `#t\0`
   888                                  fmt_char_backslash:
   889 000007B1 235C5C00                	db `#\\\\\0`
   890                                  fmt_char_dquote:
   891 000007B5 235C2200                	db `#\\"\0`
   892                                  fmt_char_simple:
   893 000007B9 235C256300              	db `#\\%c\0`
   894                                  fmt_char_null:
   895 000007BE 235C6E756C00            	db `#\\nul\0`
   896                                  fmt_char_bell:
   897 000007C4 235C62656C6C00          	db `#\\bell\0`
   898                                  fmt_char_backspace:
   899 000007CB 235C6261636B737061-     	db `#\\backspace\0`
   899 000007D4 636500             
   900                                  fmt_char_tab:
   901 000007D7 235C74616200            	db `#\\tab\0`
   902                                  fmt_char_newline:
   903 000007DD 235C6E65776C696E65-     	db `#\\newline\0`
   903 000007E6 00                 
   904                                  fmt_char_formfeed:
   905 000007E7 235C7061676500          	db `#\\page\0`
   906                                  fmt_char_return:
   907 000007EE 235C72657475726E00      	db `#\\return\0`
   908                                  fmt_char_escape:
   909 000007F7 235C65736300            	db `#\\esc\0`
   910                                  fmt_char_space:
   911 000007FD 235C737061636500        	db `#\\space\0`
   912                                  fmt_char_hex:
   913 00000805 235C782530325800        	db `#\\x%02X\0`
   914                                  fmt_gensym:
   915 0000080D 47256C6400                      db `G%ld\0`
   916                                  fmt_closure:
   917 00000812 233C636C6F73757265-     	db `#<closure at 0x%08X env=0x%08X code=0x%08X>\0`
   917 0000081B 206174203078253038-
   917 00000824 5820656E763D307825-
   917 0000082D 30385820636F64653D-
   917 00000836 3078253038583E00   
   918                                  fmt_lparen:
   919 0000083E 2800                    	db `(\0`
   920                                  fmt_dotted_pair:
   921 00000840 202E2000                	db ` . \0`
   922                                  fmt_rparen:
   923 00000844 2900                    	db `)\0`
   924                                  fmt_space:
   925 00000846 2000                    	db ` \0`
   926                                  fmt_empty_vector:
   927 00000848 23282900                	db `#()\0`
   928                                  fmt_vector:
   929 0000084C 232800                  	db `#(\0`
   930                                  fmt_real:
   931 0000084F 256600                  	db `%f\0`
   932                                  fmt_fraction:
   933 00000852 256C642F256C6400        	db `%ld/%ld\0`
   934                                  fmt_zero:
   935 0000085A 3000                    	db `0\0`
   936                                  fmt_int:
   937 0000085C 256C6400                	db `%ld\0`
   938                                  fmt_unknown_scheme_object_error:
   939 00000860 0A0A21212120457272-     	db `\n\n!!! Error: Unknown Scheme-object (RTTI 0x%02X) `
   939 00000869 6F723A20556E6B6E6F-
   939 00000872 776E20536368656D65-
   939 0000087B 2D6F626A6563742028-
   939 00000884 525454492030782530-
   939 0000088D 32582920           
   940 00000891 617420616464726573-     	db `at address 0x%08X\n\n\0`
   940 0000089A 73203078253038580A-
   940 000008A3 0A00               
   941                                  fmt_dquote:
   942 000008A5 2200                    	db `\"\0`
   943                                  fmt_string_char:
   944 000008A7 256300                          db `%c\0`
   945                                  fmt_string_char_7:
   946 000008AA 5C6100                          db `\\a\0`
   947                                  fmt_string_char_8:
   948 000008AD 5C6200                          db `\\b\0`
   949                                  fmt_string_char_9:
   950 000008B0 5C7400                          db `\\t\0`
   951                                  fmt_string_char_10:
   952 000008B3 5C6E00                          db `\\n\0`
   953                                  fmt_string_char_11:
   954 000008B6 5C7600                          db `\\v\0`
   955                                  fmt_string_char_12:
   956 000008B9 5C6600                          db `\\f\0`
   957                                  fmt_string_char_13:
   958 000008BC 5C7200                          db `\\r\0`
   959                                  fmt_string_char_34:
   960 000008BF 5C2200                          db `\\"\0`
   961                                  fmt_string_char_92:
   962 000008C2 5C5C00                          db `\\\\\0`
   963                                  fmt_string_char_hex:
   964 000008C5 5C7825583B00                    db `\\x%X;\0`
   965                                  
   966                                  section .text
   967                                  
   968                                  print_sexpr:
   969 0000053B C8000000                	enter 0, 0
   970 0000053F 8A07                    	mov al, byte [rdi]
   971 00000541 3C00                    	cmp al, T_void
   972 00000543 7465                    	je .Lvoid
   973 00000545 3C01                    	cmp al, T_nil
   974 00000547 7470                    	je .Lnil
   975 00000549 3C09                    	cmp al, T_boolean_false
   976 0000054B 747B                    	je .Lboolean_false
   977 0000054D 3C0A                    	cmp al, T_boolean_true
   978 0000054F 0F8482000000            	je .Lboolean_true
   979 00000555 3C02                    	cmp al, T_char
   980 00000557 0F8489000000            	je .Lchar
   981 0000055D 3C41                    	cmp al, T_interned_symbol
   982 0000055F 0F84BF010000            	je .Linterned_symbol
   983 00000565 3C42                            cmp al, T_uninterned_symbol
   984 00000567 0F84E3010000                    je .Luninterned_symbol
   985 0000056D 3C21                    	cmp al, T_pair
   986 0000056F 0F84EE010000            	je .Lpair
   987 00000575 3C22                    	cmp al, T_vector
   988 00000577 0F84B7020000            	je .Lvector
   989 0000057D 3C04                    	cmp al, T_closure
   990 0000057F 0F8485010000            	je .Lclosure
   991 00000585 3C13                    	cmp al, T_real
   992 00000587 0F8448030000            	je .Lreal
   993 0000058D 3C12                    	cmp al, T_fraction
   994 0000058F 0F846E030000            	je .Lfraction
   995 00000595 3C11                    	cmp al, T_integer
   996 00000597 0F84A7030000            	je .Linteger
   997 0000059D 3C03                    	cmp al, T_string
   998 0000059F 0F84B2030000            	je .Lstring
   999                                  
  1000 000005A5 E9DC040000              	jmp .Lunknown_sexpr_type
  1001                                  
  1002                                  .Lvoid:
  1003 000005AA 48BF-                   	mov rdi, fmt_void
  1003 000005AC [A007000000000000] 
  1004 000005B4 E900050000              	jmp .Lemit
  1005                                  
  1006                                  .Lnil:
  1007 000005B9 48BF-                   	mov rdi, fmt_nil
  1007 000005BB [A807000000000000] 
  1008 000005C3 E9F1040000              	jmp .Lemit
  1009                                  
  1010                                  .Lboolean_false:
  1011 000005C8 48BF-                   	mov rdi, fmt_boolean_false
  1011 000005CA [AB07000000000000] 
  1012 000005D2 E9E2040000              	jmp .Lemit
  1013                                  
  1014                                  .Lboolean_true:
  1015 000005D7 48BF-                   	mov rdi, fmt_boolean_true
  1015 000005D9 [AE07000000000000] 
  1016 000005E1 E9D3040000              	jmp .Lemit
  1017                                  
  1018                                  .Lchar:
  1019 000005E6 8A4701                  	mov al, byte [rdi + 1]
  1020 000005E9 3C20                    	cmp al, ' '
  1021 000005EB 7E20                    	jle .Lchar_whitespace
  1022 000005ED 3C5C                    	cmp al, 92 		; backslash
  1023 000005EF 7474                    	je .Lchar_backslash
  1024 000005F1 3C22                    	cmp al, '"'
  1025 000005F3 747F                    	je .Lchar_dquote
  1026 000005F5 4825FF000000            	and rax, 255
  1027 000005FB 48BF-                   	mov rdi, fmt_char_simple
  1027 000005FD [B907000000000000] 
  1028 00000605 4889C6                  	mov rsi, rax
  1029 00000608 E9AC040000              	jmp .Lemit
  1030                                  
  1031                                  .Lchar_whitespace:
  1032 0000060D 3C00                    	cmp al, 0
  1033 0000060F 7472                    	je .Lchar_null
  1034 00000611 3C07                    	cmp al, 7
  1035 00000613 747D                    	je .Lchar_bell
  1036 00000615 3C08                    	cmp al, 8
  1037 00000617 0F8484000000            	je .Lchar_backspace
  1038 0000061D 3C09                    	cmp al, 9
  1039 0000061F 0F848B000000            	je .Lchar_tab
  1040 00000625 3C0A                    	cmp al, 10
  1041 00000627 0F8492000000            	je .Lchar_newline
  1042 0000062D 3C0C                    	cmp al, 12
  1043 0000062F 0F8499000000            	je .Lchar_formfeed
  1044 00000635 3C0D                    	cmp al, 13
  1045 00000637 0F84A0000000            	je .Lchar_return
  1046 0000063D 3C1B                    	cmp al, 27
  1047 0000063F 0F84A7000000            	je .Lchar_escape
  1048 00000645 4825FF000000            	and rax, 255
  1049 0000064B 3C20                    	cmp al, ' '
  1050 0000064D 0F84A8000000            	je .Lchar_space
  1051 00000653 48BF-                   	mov rdi, fmt_char_hex
  1051 00000655 [0508000000000000] 
  1052 0000065D 4889C6                  	mov rsi, rax
  1053 00000660 E954040000              	jmp .Lemit	
  1054                                  
  1055                                  .Lchar_backslash:
  1056 00000665 48BF-                   	mov rdi, fmt_char_backslash
  1056 00000667 [B107000000000000] 
  1057 0000066F E945040000              	jmp .Lemit
  1058                                  
  1059                                  .Lchar_dquote:
  1060 00000674 48BF-                   	mov rdi, fmt_char_dquote
  1060 00000676 [B507000000000000] 
  1061 0000067E E936040000              	jmp .Lemit
  1062                                  
  1063                                  .Lchar_null:
  1064 00000683 48BF-                   	mov rdi, fmt_char_null
  1064 00000685 [BE07000000000000] 
  1065 0000068D E927040000              	jmp .Lemit
  1066                                  
  1067                                  .Lchar_bell:
  1068 00000692 48BF-                   	mov rdi, fmt_char_bell
  1068 00000694 [C407000000000000] 
  1069 0000069C E918040000              	jmp .Lemit
  1070                                  
  1071                                  .Lchar_backspace:
  1072 000006A1 48BF-                   	mov rdi, fmt_char_backspace
  1072 000006A3 [CB07000000000000] 
  1073 000006AB E909040000              	jmp .Lemit
  1074                                  
  1075                                  .Lchar_tab:
  1076 000006B0 48BF-                   	mov rdi, fmt_char_tab
  1076 000006B2 [D707000000000000] 
  1077 000006BA E9FA030000              	jmp .Lemit
  1078                                  
  1079                                  .Lchar_newline:
  1080 000006BF 48BF-                   	mov rdi, fmt_char_newline
  1080 000006C1 [DD07000000000000] 
  1081 000006C9 E9EB030000              	jmp .Lemit
  1082                                  
  1083                                  .Lchar_formfeed:
  1084 000006CE 48BF-                   	mov rdi, fmt_char_formfeed
  1084 000006D0 [E707000000000000] 
  1085 000006D8 E9DC030000              	jmp .Lemit
  1086                                  
  1087                                  .Lchar_return:
  1088 000006DD 48BF-                   	mov rdi, fmt_char_return
  1088 000006DF [EE07000000000000] 
  1089 000006E7 E9CD030000              	jmp .Lemit
  1090                                  
  1091                                  .Lchar_escape:
  1092 000006EC 48BF-                   	mov rdi, fmt_char_escape
  1092 000006EE [F707000000000000] 
  1093 000006F6 E9BE030000              	jmp .Lemit
  1094                                  
  1095                                  .Lchar_space:
  1096 000006FB 48BF-                   	mov rdi, fmt_char_space
  1096 000006FD [FD07000000000000] 
  1097 00000705 E9AF030000              	jmp .Lemit
  1098                                  
  1099                                  .Lclosure:
  1100 0000070A 4889FE                  	mov rsi, qword rdi
  1101 0000070D 48BF-                   	mov rdi, fmt_closure
  1101 0000070F [1208000000000000] 
  1102 00000717 488B5601                	mov rdx, SOB_CLOSURE_ENV(rsi)
  1103 0000071B 488B4E09                	mov rcx, SOB_CLOSURE_CODE(rsi)
  1104 0000071F E995030000              	jmp .Lemit
  1105                                  
  1106                                  .Linterned_symbol:
  1107 00000724 488B7F01                	mov rdi, qword [rdi + 1] ; sob_string
  1108 00000728 BE01000000              	mov rsi, 1		 ; size = 1 byte
  1109 0000072D 488B5701                	mov rdx, qword [rdi + 1] ; length
  1110 00000731 488D7F09                	lea rdi, [rdi + 1 + 8]	 ; actual characters
  1111 00000735 488B0C25[00000000]      	mov rcx, qword [stdout]	 ; FILE *
  1112                                  	ENTER
    44 0000073D C8000000            <1>  enter 0, 0
    45 00000741 4883E4F0            <1>  and rsp, ~15
  1113 00000745 E8(00000000)            	call fwrite
  1114                                  	LEAVE
    49 0000074A C9                  <1>  leave
  1115 0000074B E97E030000              	jmp .Lend
  1116                                  
  1117                                  .Luninterned_symbol:
  1118 00000750 488B7701                        mov rsi, qword [rdi + 1] ; gensym counter
  1119 00000754 48BF-                           mov rdi, fmt_gensym
  1119 00000756 [0D08000000000000] 
  1120 0000075E E956030000                      jmp .Lemit
  1121                                  	
  1122                                  .Lpair:
  1123 00000763 57                      	push rdi
  1124 00000764 48BF-                   	mov rdi, fmt_lparen
  1124 00000766 [3E08000000000000] 
  1125 0000076E B800000000              	mov rax, 0
  1126                                          ENTER
    44 00000773 C8000000            <1>  enter 0, 0
    45 00000777 4883E4F0            <1>  and rsp, ~15
  1127 0000077B E8(00000000)            	call printf
  1128                                          LEAVE
    49 00000780 C9                  <1>  leave
  1129 00000781 488B3C24                	mov rdi, qword [rsp] 	; pair
  1130 00000785 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
  1131 00000789 E8ADFDFFFF              	call print_sexpr
  1132 0000078E 5F                      	pop rdi 		; pair
  1133 0000078F 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
  1134                                  .Lcdr:
  1135 00000793 8A07                    	mov al, byte [rdi]
  1136 00000795 3C01                    	cmp al, T_nil
  1137 00000797 7447                    	je .Lcdr_nil
  1138 00000799 3C21                    	cmp al, T_pair
  1139 0000079B 7462                    	je .Lcdr_pair
  1140 0000079D 57                      	push rdi
  1141 0000079E 48BF-                   	mov rdi, fmt_dotted_pair
  1141 000007A0 [4008000000000000] 
  1142 000007A8 B800000000              	mov rax, 0
  1143                                          ENTER
    44 000007AD C8000000            <1>  enter 0, 0
    45 000007B1 4883E4F0            <1>  and rsp, ~15
  1144 000007B5 E8(00000000)            	call printf
  1145                                          LEAVE
    49 000007BA C9                  <1>  leave
  1146 000007BB 5F                      	pop rdi
  1147 000007BC E87AFDFFFF              	call print_sexpr
  1148 000007C1 48BF-                   	mov rdi, fmt_rparen
  1148 000007C3 [4408000000000000] 
  1149 000007CB B800000000              	mov rax, 0
  1150                                          ENTER
    44 000007D0 C8000000            <1>  enter 0, 0
    45 000007D4 4883E4F0            <1>  and rsp, ~15
  1151 000007D8 E8(00000000)            	call printf
  1152                                          LEAVE
    49 000007DD C9                  <1>  leave
  1153 000007DE C9                      	leave
  1154 000007DF C3                      	ret
  1155                                  
  1156                                  .Lcdr_nil:
  1157 000007E0 48BF-                   	mov rdi, fmt_rparen
  1157 000007E2 [4408000000000000] 
  1158 000007EA B800000000              	mov rax, 0
  1159                                          ENTER
    44 000007EF C8000000            <1>  enter 0, 0
    45 000007F3 4883E4F0            <1>  and rsp, ~15
  1160 000007F7 E8(00000000)            	call printf
  1161                                          LEAVE
    49 000007FC C9                  <1>  leave
  1162 000007FD C9                      	leave
  1163 000007FE C3                      	ret
  1164                                  
  1165                                  .Lcdr_pair:
  1166 000007FF 57                      	push rdi
  1167 00000800 48BF-                   	mov rdi, fmt_space
  1167 00000802 [4608000000000000] 
  1168 0000080A B800000000              	mov rax, 0
  1169                                          ENTER
    44 0000080F C8000000            <1>  enter 0, 0
    45 00000813 4883E4F0            <1>  and rsp, ~15
  1170 00000817 E8(00000000)            	call printf
  1171                                          LEAVE
    49 0000081C C9                  <1>  leave
  1172 0000081D 488B3C24                	mov rdi, qword [rsp]
  1173 00000821 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
  1174 00000825 E811FDFFFF              	call print_sexpr
  1175 0000082A 5F                      	pop rdi
  1176 0000082B 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
  1177 0000082F E95FFFFFFF              	jmp .Lcdr
  1178                                  
  1179                                  .Lvector:
  1180 00000834 488B4701                	mov rax, qword [rdi + 1] ; length
  1181 00000838 4883F800                	cmp rax, 0
  1182 0000083C 0F8484000000            	je .Lvector_empty
  1183 00000842 57                      	push rdi
  1184 00000843 48BF-                   	mov rdi, fmt_vector
  1184 00000845 [4C08000000000000] 
  1185 0000084D B800000000              	mov rax, 0
  1186                                          ENTER
    44 00000852 C8000000            <1>  enter 0, 0
    45 00000856 4883E4F0            <1>  and rsp, ~15
  1187 0000085A E8(00000000)            	call printf
  1188                                          LEAVE
    49 0000085F C9                  <1>  leave
  1189 00000860 488B3C24                	mov rdi, qword [rsp]
  1190 00000864 FF7701                  	push qword [rdi + 1]
  1191 00000867 6A01                    	push 1
  1192 00000869 488B7F09                	mov rdi, qword [rdi + 1 + 8] ; v[0]
  1193 0000086D E8C9FCFFFF              	call print_sexpr
  1194                                  .Lvector_loop:
  1195                                  	; [rsp] index
  1196                                  	; [rsp + 8*1] limit
  1197                                  	; [rsp + 8*2] vector
  1198 00000872 488B0424                	mov rax, qword [rsp]
  1199 00000876 483B442408              	cmp rax, qword [rsp + 8*1]
  1200 0000087B 7436                    	je .Lvector_end
  1201 0000087D 48BF-                   	mov rdi, fmt_space
  1201 0000087F [4608000000000000] 
  1202 00000887 B800000000              	mov rax, 0
  1203                                          ENTER
    44 0000088C C8000000            <1>  enter 0, 0
    45 00000890 4883E4F0            <1>  and rsp, ~15
  1204 00000894 E8(00000000)            	call printf
  1205                                          LEAVE
    49 00000899 C9                  <1>  leave
  1206 0000089A 488B0424                	mov rax, qword [rsp]
  1207 0000089E 488B5C2410              	mov rbx, qword [rsp + 8*2]
  1208 000008A3 488B7CC309              	mov rdi, qword [rbx + 1 + 8 + 8 * rax] ; v[i]
  1209 000008A8 E88EFCFFFF              	call print_sexpr
  1210 000008AD 48FF0424                	inc qword [rsp]
  1211 000008B1 EBBF                    	jmp .Lvector_loop
  1212                                  
  1213                                  .Lvector_end:
  1214 000008B3 4883C418                	add rsp, 8*3
  1215 000008B7 48BF-                   	mov rdi, fmt_rparen
  1215 000008B9 [4408000000000000] 
  1216 000008C1 E9F3010000              	jmp .Lemit	
  1217                                  
  1218                                  .Lvector_empty:
  1219 000008C6 48BF-                   	mov rdi, fmt_empty_vector
  1219 000008C8 [4808000000000000] 
  1220 000008D0 E9E4010000              	jmp .Lemit
  1221                                  
  1222                                  .Lreal:
  1223 000008D5 FF7701                  	push qword [rdi + 1]
  1224 000008D8 F20F100424              	movsd xmm0, qword [rsp]
  1225 000008DD 4883C408                	add rsp, 8*1
  1226 000008E1 48BF-                   	mov rdi, fmt_real
  1226 000008E3 [4F08000000000000] 
  1227 000008EB B801000000              	mov rax, 1
  1228                                  	ENTER
    44 000008F0 C8000000            <1>  enter 0, 0
    45 000008F4 4883E4F0            <1>  and rsp, ~15
  1229 000008F8 E8(00000000)            	call printf
  1230                                  	LEAVE
    49 000008FD C9                  <1>  leave
  1231 000008FE E9CB010000              	jmp .Lend
  1232                                  
  1233                                  .Lfraction:
  1234 00000903 488B7701                	mov rsi, qword [rdi + 1]
  1235 00000907 488B5709                	mov rdx, qword [rdi + 1 + 8]
  1236 0000090B 4883FE00                	cmp rsi, 0
  1237 0000090F 7415                    	je .Lrat_zero
  1238 00000911 4883FA01                	cmp rdx, 1
  1239 00000915 741E                    	je .Lrat_int
  1240 00000917 48BF-                   	mov rdi, fmt_fraction
  1240 00000919 [5208000000000000] 
  1241 00000921 E993010000              	jmp .Lemit
  1242                                  
  1243                                  .Lrat_zero:
  1244 00000926 48BF-                   	mov rdi, fmt_zero
  1244 00000928 [5A08000000000000] 
  1245 00000930 E984010000              	jmp .Lemit
  1246                                  
  1247                                  .Lrat_int:
  1248 00000935 48BF-                   	mov rdi, fmt_int
  1248 00000937 [5C08000000000000] 
  1249 0000093F E975010000              	jmp .Lemit
  1250                                  
  1251                                  .Linteger:
  1252 00000944 488B7701                	mov rsi, qword [rdi + 1]
  1253 00000948 48BF-                   	mov rdi, fmt_int
  1253 0000094A [5C08000000000000] 
  1254 00000952 E962010000              	jmp .Lemit
  1255                                  
  1256                                  .Lstring:
  1257 00000957 488D4709                	lea rax, [rdi + 1 + 8]
  1258 0000095B 50                      	push rax
  1259 0000095C FF7701                  	push qword [rdi + 1]
  1260 0000095F 48BF-                   	mov rdi, fmt_dquote
  1260 00000961 [A508000000000000] 
  1261 00000969 B800000000              	mov rax, 0
  1262                                  	ENTER
    44 0000096E C8000000            <1>  enter 0, 0
    45 00000972 4883E4F0            <1>  and rsp, ~15
  1263 00000976 E8(00000000)            	call printf
  1264                                  	LEAVE
    49 0000097B C9                  <1>  leave
  1265                                  .Lstring_loop:
  1266                                  	; qword [rsp]: limit
  1267                                  	; qword [rsp + 8*1]: char *
  1268 0000097C 48833C2400              	cmp qword [rsp], 0
  1269 00000981 0F84EF000000            	je .Lstring_end
  1270 00000987 488B442408              	mov rax, qword [rsp + 8*1]
  1271 0000098C 8A00                    	mov al, byte [rax]
  1272 0000098E 4825FF000000            	and rax, 255
  1273 00000994 3C07                    	cmp al, 7
  1274 00000996 745D                            je .Lstring_char_7
  1275 00000998 3C08                            cmp al, 8
  1276 0000099A 7465                            je .Lstring_char_8
  1277 0000099C 3C09                            cmp al, 9
  1278 0000099E 746D                            je .Lstring_char_9
  1279 000009A0 3C0A                            cmp al, 10
  1280 000009A2 7475                            je .Lstring_char_10
  1281 000009A4 3C0B                            cmp al, 11
  1282 000009A6 747D                            je .Lstring_char_11
  1283 000009A8 3C0C                            cmp al, 12
  1284 000009AA 0F8481000000                    je .Lstring_char_12
  1285 000009B0 3C0D                            cmp al, 13
  1286 000009B2 0F8485000000                    je .Lstring_char_13
  1287 000009B8 3C22                            cmp al, 34
  1288 000009BA 0F8489000000                    je .Lstring_char_34
  1289 000009C0 3C5C                            cmp al, 92              ;         je .Lstring_char_92
  1291 000009C2 3C20                            cmp al, ' '
  1292 000009C4 0F8C9A000000                    jl .Lstring_char_hex
  1293 000009CA 48BF-                           mov rdi, fmt_string_char
  1293 000009CC [A708000000000000] 
  1294 000009D4 4889C6                          mov rsi, rax
  1295                                  .Lstring_char_emit:
  1296 000009D7 B800000000                      mov rax, 0
  1297                                          ENTER
    44 000009DC C8000000            <1>  enter 0, 0
    45 000009E0 4883E4F0            <1>  and rsp, ~15
  1298 000009E4 E8(00000000)                    call printf
  1299                                          LEAVE
    49 000009E9 C9                  <1>  leave
  1300 000009EA 48FF0C24                        dec qword [rsp]
  1301 000009EE 48FF442408                      inc qword [rsp + 8*1]
  1302 000009F3 EB87                            jmp .Lstring_loop
  1303                                  
  1304                                  .Lstring_char_7:
  1305 000009F5 48BF-                           mov rdi, fmt_string_char_7
  1305 000009F7 [AA08000000000000] 
  1306 000009FF EBD6                            jmp .Lstring_char_emit
  1307                                  
  1308                                  .Lstring_char_8:
  1309 00000A01 48BF-                           mov rdi, fmt_string_char_8
  1309 00000A03 [AD08000000000000] 
  1310 00000A0B EBCA                            jmp .Lstring_char_emit
  1311                                          
  1312                                  .Lstring_char_9:
  1313 00000A0D 48BF-                           mov rdi, fmt_string_char_9
  1313 00000A0F [B008000000000000] 
  1314 00000A17 EBBE                            jmp .Lstring_char_emit
  1315                                  
  1316                                  .Lstring_char_10:
  1317 00000A19 48BF-                           mov rdi, fmt_string_char_10
  1317 00000A1B [B308000000000000] 
  1318 00000A23 EBB2                            jmp .Lstring_char_emit
  1319                                  
  1320                                  .Lstring_char_11:
  1321 00000A25 48BF-                           mov rdi, fmt_string_char_11
  1321 00000A27 [B608000000000000] 
  1322 00000A2F EBA6                            jmp .Lstring_char_emit
  1323                                  
  1324                                  .Lstring_char_12:
  1325 00000A31 48BF-                           mov rdi, fmt_string_char_12
  1325 00000A33 [B908000000000000] 
  1326 00000A3B EB9A                            jmp .Lstring_char_emit
  1327                                  
  1328                                  .Lstring_char_13:
  1329 00000A3D 48BF-                           mov rdi, fmt_string_char_13
  1329 00000A3F [BC08000000000000] 
  1330 00000A47 EB8E                            jmp .Lstring_char_emit
  1331                                  
  1332                                  .Lstring_char_34:
  1333 00000A49 48BF-                           mov rdi, fmt_string_char_34
  1333 00000A4B [BF08000000000000] 
  1334 00000A53 EB82                            jmp .Lstring_char_emit
  1335                                  
  1336                                  .Lstring_char_92:
  1337 00000A55 48BF-                           mov rdi, fmt_string_char_92
  1337 00000A57 [C208000000000000] 
  1338 00000A5F E973FFFFFF                      jmp .Lstring_char_emit
  1339                                  
  1340                                  .Lstring_char_hex:
  1341 00000A64 48BF-                           mov rdi, fmt_string_char_hex
  1341 00000A66 [C508000000000000] 
  1342 00000A6E 4889C6                          mov rsi, rax
  1343 00000A71 E961FFFFFF                      jmp .Lstring_char_emit        
  1344                                  
  1345                                  .Lstring_end:
  1346 00000A76 4883C410                	add rsp, 8 * 2
  1347 00000A7A 48BF-                   	mov rdi, fmt_dquote
  1347 00000A7C [A508000000000000] 
  1348 00000A84 EB33                    	jmp .Lemit
  1349                                  
  1350                                  .Lunknown_sexpr_type:
  1351 00000A86 48BE-                   	mov rsi, fmt_unknown_scheme_object_error
  1351 00000A88 [6008000000000000] 
  1352 00000A90 4825FF000000            	and rax, 255
  1353 00000A96 4889C2                  	mov rdx, rax
  1354 00000A99 4889F9                  	mov rcx, rdi
  1355 00000A9C 488B3C25[00000000]      	mov rdi, qword [stderr]
  1356 00000AA4 B800000000              	mov rax, 0
  1357                                          ENTER
    44 00000AA9 C8000000            <1>  enter 0, 0
    45 00000AAD 4883E4F0            <1>  and rsp, ~15
  1358 00000AB1 E8(00000000)            	call fprintf
  1359                                          LEAVE
    49 00000AB6 C9                  <1>  leave
  1360 00000AB7 C9                              leave
  1361 00000AB8 C3                              ret
  1362                                  
  1363                                  .Lemit:
  1364 00000AB9 B800000000              	mov rax, 0
  1365                                          ENTER
    44 00000ABE C8000000            <1>  enter 0, 0
    45 00000AC2 4883E4F0            <1>  and rsp, ~15
  1366 00000AC6 E8(00000000)            	call printf
  1367                                          LEAVE
    49 00000ACB C9                  <1>  leave
  1368 00000ACC EB00                    	jmp .Lend
  1369                                  
  1370                                  .Lend:
  1371                                  	LEAVE
    49 00000ACE C9                  <1>  leave
  1372 00000ACF C3                      	ret
  1373                                  
  1374                                  ;;; rdi: address of free variable
  1375                                  ;;; rsi: address of code-pointer
  1376                                  bind_primitive:
  1377 00000AD0 C8000000                        enter 0, 0
  1378 00000AD4 57                              push rdi
  1379 00000AD5 BF11000000                      mov rdi, (1 + 8 + 8)
  1380 00000ADA E8DBF7FFFF                      call malloc
  1381 00000ADF 5F                              pop rdi
  1382 00000AE0 C60004                          mov byte [rax], T_closure
  1383 00000AE3 48C7400100000000                mov SOB_CLOSURE_ENV(rax), 0 ; dummy, lexical environment
  1384 00000AEB 48897009                        mov SOB_CLOSURE_CODE(rax), rsi ; code pointer
  1385 00000AEF 488907                          mov qword [rdi], rax
  1386 00000AF2 48B8-                           mov rax, sob_void
  1386 00000AF4 [0000000000000000] 
  1387 00000AFC C9                              leave
  1388 00000AFD C3                              ret
  1389                                  
  1390                                  L_code_ptr_ash:
  1391 00000AFE C8000000                        enter 0, 0
  1392 00000B02 48837D1802                      cmp COUNT, 2
  1393 00000B07 0F8510140000                    jne L_error_arg_count_2
  1394 00000B0D 488B7D20                        mov rdi, PARAM(0)
  1395                                          assert_integer(rdi)
    53 00000B11 803F11              <1>  cmp byte [%1], %2
    54 00000B14 0F85A2140000        <1>  jne L_error_incorrect_type
  1396 00000B1A 488B4D28                        mov rcx, PARAM(1)
  1397                                          assert_integer(rcx)
    53 00000B1E 803911              <1>  cmp byte [%1], %2
    54 00000B21 0F8595140000        <1>  jne L_error_incorrect_type
  1398 00000B27 488B7F01                        mov rdi, qword [rdi + 1]
  1399 00000B2B 488B4901                        mov rcx, qword [rcx + 1]
  1400 00000B2F 4883F900                        cmp rcx, 0
  1401 00000B33 7C0F                            jl .L_negative
  1402                                  .L_loop_positive:
  1403 00000B35 4883F900                        cmp rcx, 0
  1404 00000B39 741B                            je .L_exit
  1405 00000B3B 48D3E7                          sal rdi, cl
  1406 00000B3E 48C1E908                        shr rcx, 8
  1407 00000B42 EBF1                            jmp .L_loop_positive
  1408                                  .L_negative:
  1409 00000B44 48F7D9                          neg rcx
  1410                                  .L_loop_negative:
  1411 00000B47 4883F900                        cmp rcx, 0
  1412 00000B4B 7409                            je .L_exit
  1413 00000B4D 48D3FF                          sar rdi, cl
  1414 00000B50 48C1E908                        shr rcx, 8
  1415 00000B54 EBF1                            jmp .L_loop_negative
  1416                                  .L_exit:
  1417 00000B56 E8DC120000                      call make_integer
  1418 00000B5B C9                              leave
  1419 00000B5C C22000                          ret AND_KILL_FRAME(2)
  1420                                  
  1421                                  L_code_ptr_logand:
  1422 00000B5F C8000000                        enter 0, 0
  1423 00000B63 48837D1802                      cmp COUNT, 2
  1424 00000B68 0F85AF130000                    jne L_error_arg_count_2
  1425 00000B6E 4C8B4520                        mov r8, PARAM(0)
  1426                                          assert_integer(r8)
    53 00000B72 41803811            <1>  cmp byte [%1], %2
    54 00000B76 0F8540140000        <1>  jne L_error_incorrect_type
  1427 00000B7C 4C8B4D28                        mov r9, PARAM(1)
  1428                                          assert_integer(r9)
    53 00000B80 41803911            <1>  cmp byte [%1], %2
    54 00000B84 0F8532140000        <1>  jne L_error_incorrect_type
  1429 00000B8A 498B7801                        mov rdi, qword [r8 + 1]
  1430 00000B8E 49237901                        and rdi, qword [r9 + 1]
  1431 00000B92 E8A0120000                      call make_integer
  1432 00000B97 C9                              leave
  1433 00000B98 C22000                          ret AND_KILL_FRAME(2)
  1434                                  
  1435                                  L_code_ptr_logor:
  1436 00000B9B C8000000                        enter 0, 0
  1437 00000B9F 48837D1802                      cmp COUNT, 2
  1438 00000BA4 0F8573130000                    jne L_error_arg_count_2
  1439 00000BAA 4C8B4520                        mov r8, PARAM(0)
  1440                                          assert_integer(r8)
    53 00000BAE 41803811            <1>  cmp byte [%1], %2
    54 00000BB2 0F8504140000        <1>  jne L_error_incorrect_type
  1441 00000BB8 4C8B4D28                        mov r9, PARAM(1)
  1442                                          assert_integer(r9)
    53 00000BBC 41803911            <1>  cmp byte [%1], %2
    54 00000BC0 0F85F6130000        <1>  jne L_error_incorrect_type
  1443 00000BC6 498B7801                        mov rdi, qword [r8 + 1]
  1444 00000BCA 490B7901                        or rdi, qword [r9 + 1]
  1445 00000BCE E864120000                      call make_integer
  1446 00000BD3 C9                              leave
  1447 00000BD4 C22000                          ret AND_KILL_FRAME(2)
  1448                                  
  1449                                  L_code_ptr_logxor:
  1450 00000BD7 C8000000                        enter 0, 0
  1451 00000BDB 48837D1802                      cmp COUNT, 2
  1452 00000BE0 0F8537130000                    jne L_error_arg_count_2
  1453 00000BE6 4C8B4520                        mov r8, PARAM(0)
  1454                                          assert_integer(r8)
    53 00000BEA 41803811            <1>  cmp byte [%1], %2
    54 00000BEE 0F85C8130000        <1>  jne L_error_incorrect_type
  1455 00000BF4 4C8B4D28                        mov r9, PARAM(1)
  1456                                          assert_integer(r9)
    53 00000BF8 41803911            <1>  cmp byte [%1], %2
    54 00000BFC 0F85BA130000        <1>  jne L_error_incorrect_type
  1457 00000C02 498B7801                        mov rdi, qword [r8 + 1]
  1458 00000C06 49337901                        xor rdi, qword [r9 + 1]
  1459 00000C0A E828120000                      call make_integer
  1460                                          LEAVE
    49 00000C0F C9                  <1>  leave
  1461 00000C10 C22000                          ret AND_KILL_FRAME(2)
  1462                                  
  1463                                  L_code_ptr_lognot:
  1464 00000C13 C8000000                        enter 0, 0
  1465 00000C17 48837D1801                      cmp COUNT, 1
  1466 00000C1C 0F85C6120000                    jne L_error_arg_count_1
  1467 00000C22 4C8B4520                        mov r8, PARAM(0)
  1468                                          assert_integer(r8)
    53 00000C26 41803811            <1>  cmp byte [%1], %2
    54 00000C2A 0F858C130000        <1>  jne L_error_incorrect_type
  1469 00000C30 498B7801                        mov rdi, qword [r8 + 1]
  1470 00000C34 48F7D7                          not rdi
  1471 00000C37 E8FB110000                      call make_integer
  1472 00000C3C C9                              leave
  1473 00000C3D C21800                          ret AND_KILL_FRAME(1)
  1474                                  
  1475                                  L_code_ptr_bin_apply:
  1476                                  ;;; fill in for final project!
  1477                                  
  1478                                  L_code_ptr_is_null:
  1479 00000C40 C8000000                        enter 0, 0
  1480 00000C44 48837D1801                      cmp COUNT, 1
  1481 00000C49 0F8599120000                    jne L_error_arg_count_1
  1482 00000C4F 488B4520                        mov rax, PARAM(0)
  1483 00000C53 803801                          cmp byte [rax], T_nil
  1484 00000C56 750C                            jne .L_false
  1485 00000C58 48B8-                           mov rax, sob_boolean_true
  1485 00000C5A [0300000000000000] 
  1486 00000C62 EB0A                            jmp .L_end
  1487                                  .L_false:
  1488 00000C64 48B8-                           mov rax, sob_boolean_false
  1488 00000C66 [0200000000000000] 
  1489                                  .L_end:
  1490 00000C6E C9                              leave
  1491 00000C6F C21800                          ret AND_KILL_FRAME(1)
  1492                                  
  1493                                  L_code_ptr_is_pair:
  1494 00000C72 C8000000                        enter 0, 0
  1495 00000C76 48837D1801                      cmp COUNT, 1
  1496 00000C7B 0F8567120000                    jne L_error_arg_count_1
  1497 00000C81 488B4520                        mov rax, PARAM(0)
  1498 00000C85 803821                          cmp byte [rax], T_pair
  1499 00000C88 750C                            jne .L_false
  1500 00000C8A 48B8-                           mov rax, sob_boolean_true
  1500 00000C8C [0300000000000000] 
  1501 00000C94 EB0A                            jmp .L_end
  1502                                  .L_false:
  1503 00000C96 48B8-                           mov rax, sob_boolean_false
  1503 00000C98 [0200000000000000] 
  1504                                  .L_end:
  1505 00000CA0 C9                              leave
  1506 00000CA1 C21800                          ret AND_KILL_FRAME(1)
  1507                                          
  1508                                  L_code_ptr_is_void:
  1509 00000CA4 C8000000                        enter 0, 0
  1510 00000CA8 48837D1801                      cmp COUNT, 1
  1511 00000CAD 0F8535120000                    jne L_error_arg_count_1
  1512 00000CB3 488B4520                        mov rax, PARAM(0)
  1513 00000CB7 803800                          cmp byte [rax], T_void
  1514 00000CBA 750C                            jne .L_false
  1515 00000CBC 48B8-                           mov rax, sob_boolean_true
  1515 00000CBE [0300000000000000] 
  1516 00000CC6 EB0A                            jmp .L_end
  1517                                  .L_false:
  1518 00000CC8 48B8-                           mov rax, sob_boolean_false
  1518 00000CCA [0200000000000000] 
  1519                                  .L_end:
  1520 00000CD2 C9                              leave
  1521 00000CD3 C21800                          ret AND_KILL_FRAME(1)
  1522                                  
  1523                                  L_code_ptr_is_char:
  1524 00000CD6 C8000000                        enter 0, 0
  1525 00000CDA 48837D1801                      cmp COUNT, 1
  1526 00000CDF 0F8503120000                    jne L_error_arg_count_1
  1527 00000CE5 488B4520                        mov rax, PARAM(0)
  1528 00000CE9 803802                          cmp byte [rax], T_char
  1529 00000CEC 750C                            jne .L_false
  1530 00000CEE 48B8-                           mov rax, sob_boolean_true
  1530 00000CF0 [0300000000000000] 
  1531 00000CF8 EB0A                            jmp .L_end
  1532                                  .L_false:
  1533 00000CFA 48B8-                           mov rax, sob_boolean_false
  1533 00000CFC [0200000000000000] 
  1534                                  .L_end:
  1535 00000D04 C9                              leave
  1536 00000D05 C21800                          ret AND_KILL_FRAME(1)
  1537                                  
  1538                                  L_code_ptr_is_string:
  1539 00000D08 C8000000                        enter 0, 0
  1540 00000D0C 48837D1801                      cmp COUNT, 1
  1541 00000D11 0F85D1110000                    jne L_error_arg_count_1
  1542 00000D17 488B4520                        mov rax, PARAM(0)
  1543 00000D1B 803803                          cmp byte [rax], T_string
  1544 00000D1E 750C                            jne .L_false
  1545 00000D20 48B8-                           mov rax, sob_boolean_true
  1545 00000D22 [0300000000000000] 
  1546 00000D2A EB0A                            jmp .L_end
  1547                                  .L_false:
  1548 00000D2C 48B8-                           mov rax, sob_boolean_false
  1548 00000D2E [0200000000000000] 
  1549                                  .L_end:
  1550 00000D36 C9                              leave
  1551 00000D37 C21800                          ret AND_KILL_FRAME(1)
  1552                                  
  1553                                  L_code_ptr_is_symbol:
  1554 00000D3A C8000000                        enter 0, 0
  1555 00000D3E 48837D1801                      cmp COUNT, 1
  1556 00000D43 0F859F110000                    jne L_error_arg_count_1
  1557 00000D49 4C8B4520                        mov r8, PARAM(0)
  1558 00000D4D 41802040                        and byte [r8], T_symbol
  1559 00000D51 740C                            jz .L_false
  1560 00000D53 48B8-                           mov rax, sob_boolean_true
  1560 00000D55 [0300000000000000] 
  1561 00000D5D EB0A                            jmp .L_exit
  1562                                  .L_false:
  1563 00000D5F 48B8-                           mov rax, sob_boolean_false
  1563 00000D61 [0200000000000000] 
  1564                                  .L_exit:
  1565 00000D69 C9                              leave
  1566 00000D6A C21800                          ret AND_KILL_FRAME(1)
  1567                                  
  1568                                  L_code_ptr_is_uninterned_symbol:
  1569 00000D6D C8000000                        enter 0, 0
  1570 00000D71 48837D1801                      cmp COUNT, 1
  1571 00000D76 0F856C110000                    jne L_error_arg_count_1
  1572 00000D7C 4C8B4520                        mov r8, PARAM(0)
  1573 00000D80 41803842                        cmp byte [r8], T_uninterned_symbol
  1574 00000D84 750C                            jne .L_false
  1575 00000D86 48B8-                           mov rax, sob_boolean_true
  1575 00000D88 [0300000000000000] 
  1576 00000D90 EB0A                            jmp .L_exit
  1577                                  .L_false:
  1578 00000D92 48B8-                           mov rax, sob_boolean_false
  1578 00000D94 [0200000000000000] 
  1579                                  .L_exit:
  1580 00000D9C C9                              leave
  1581 00000D9D C21800                          ret AND_KILL_FRAME(1)
  1582                                  
  1583                                  L_code_ptr_is_interned_symbol:
  1584 00000DA0 C8000000                        enter 0, 0
  1585 00000DA4 48837D1801                      cmp COUNT, 1
  1586 00000DA9 0F8539110000                    jne L_error_arg_count_1
  1587 00000DAF 488B4520                        mov rax, PARAM(0)
  1588 00000DB3 803841                          cmp byte [rax], T_interned_symbol
  1589 00000DB6 750C                            jne .L_false
  1590 00000DB8 48B8-                           mov rax, sob_boolean_true
  1590 00000DBA [0300000000000000] 
  1591 00000DC2 EB0A                            jmp .L_end
  1592                                  .L_false:
  1593 00000DC4 48B8-                           mov rax, sob_boolean_false
  1593 00000DC6 [0200000000000000] 
  1594                                  .L_end:
  1595 00000DCE C9                              leave
  1596 00000DCF C21800                          ret AND_KILL_FRAME(1)
  1597                                  
  1598                                  L_code_ptr_gensym:
  1599 00000DD2 C8000000                        enter 0, 0
  1600 00000DD6 48837D1800                      cmp COUNT, 0
  1601 00000DDB 0F85D2100000                    jne L_error_arg_count_0
  1602 00000DE1 48FF0425[CB080000]              inc qword [gensym_count]
  1603 00000DE9 BF09000000                      mov rdi, (1 + 8)
  1604 00000DEE E8C7F4FFFF                      call malloc
  1605 00000DF3 C60042                          mov byte [rax], T_uninterned_symbol
  1606 00000DF6 488B0C25[CB080000]              mov rcx, qword [gensym_count]
  1607 00000DFE 48894801                        mov qword [rax + 1], rcx
  1608 00000E02 C9                              leave
  1609 00000E03 C21000                          ret AND_KILL_FRAME(0)
  1610                                  
  1611                                  L_code_ptr_is_vector:
  1612 00000E06 C8000000                        enter 0, 0
  1613 00000E0A 48837D1801                      cmp COUNT, 1
  1614 00000E0F 0F85D3100000                    jne L_error_arg_count_1
  1615 00000E15 488B4520                        mov rax, PARAM(0)
  1616 00000E19 803822                          cmp byte [rax], T_vector
  1617 00000E1C 750C                            jne .L_false
  1618 00000E1E 48B8-                           mov rax, sob_boolean_true
  1618 00000E20 [0300000000000000] 
  1619 00000E28 EB0A                            jmp .L_end
  1620                                  .L_false:
  1621 00000E2A 48B8-                           mov rax, sob_boolean_false
  1621 00000E2C [0200000000000000] 
  1622                                  .L_end:
  1623 00000E34 C9                              leave
  1624 00000E35 C21800                          ret AND_KILL_FRAME(1)
  1625                                  
  1626                                  L_code_ptr_is_closure:
  1627 00000E38 C8000000                        enter 0, 0
  1628 00000E3C 48837D1801                      cmp COUNT, 1
  1629 00000E41 0F85A1100000                    jne L_error_arg_count_1
  1630 00000E47 488B4520                        mov rax, PARAM(0)
  1631 00000E4B 803804                          cmp byte [rax], T_closure
  1632 00000E4E 750C                            jne .L_false
  1633 00000E50 48B8-                           mov rax, sob_boolean_true
  1633 00000E52 [0300000000000000] 
  1634 00000E5A EB0A                            jmp .L_end
  1635                                  .L_false:
  1636 00000E5C 48B8-                           mov rax, sob_boolean_false
  1636 00000E5E [0200000000000000] 
  1637                                  .L_end:
  1638 00000E66 C9                              leave
  1639 00000E67 C21800                          ret AND_KILL_FRAME(1)
  1640                                  
  1641                                  L_code_ptr_is_real:
  1642 00000E6A C8000000                        enter 0, 0
  1643 00000E6E 48837D1801                      cmp COUNT, 1
  1644 00000E73 0F856F100000                    jne L_error_arg_count_1
  1645 00000E79 488B4520                        mov rax, PARAM(0)
  1646 00000E7D 803813                          cmp byte [rax], T_real
  1647 00000E80 750C                            jne .L_false
  1648 00000E82 48B8-                           mov rax, sob_boolean_true
  1648 00000E84 [0300000000000000] 
  1649 00000E8C EB0A                            jmp .L_end
  1650                                  .L_false:
  1651 00000E8E 48B8-                           mov rax, sob_boolean_false
  1651 00000E90 [0200000000000000] 
  1652                                  .L_end:
  1653 00000E98 C9                              leave
  1654 00000E99 C21800                          ret AND_KILL_FRAME(1)
  1655                                  
  1656                                  L_code_ptr_is_fraction:
  1657 00000E9C C8000000                        enter 0, 0
  1658 00000EA0 48837D1801                      cmp COUNT, 1
  1659 00000EA5 0F853D100000                    jne L_error_arg_count_1
  1660 00000EAB 488B4520                        mov rax, PARAM(0)
  1661 00000EAF 803812                          cmp byte [rax], T_fraction
  1662 00000EB2 750C                            jne .L_false
  1663 00000EB4 48B8-                           mov rax, sob_boolean_true
  1663 00000EB6 [0300000000000000] 
  1664 00000EBE EB0A                            jmp .L_end
  1665                                  .L_false:
  1666 00000EC0 48B8-                           mov rax, sob_boolean_false
  1666 00000EC2 [0200000000000000] 
  1667                                  .L_end:
  1668 00000ECA C9                              leave
  1669 00000ECB C21800                          ret AND_KILL_FRAME(1)
  1670                                  
  1671                                  L_code_ptr_is_boolean:
  1672 00000ECE C8000000                        enter 0, 0
  1673 00000ED2 48837D1801                      cmp COUNT, 1
  1674 00000ED7 0F850B100000                    jne L_error_arg_count_1
  1675 00000EDD 488B4520                        mov rax, PARAM(0)
  1676 00000EE1 8A18                            mov bl, byte [rax]
  1677 00000EE3 80E308                          and bl, T_boolean
  1678 00000EE6 740C                            je .L_false
  1679 00000EE8 48B8-                           mov rax, sob_boolean_true
  1679 00000EEA [0300000000000000] 
  1680 00000EF2 EB0A                            jmp .L_end
  1681                                  .L_false:
  1682 00000EF4 48B8-                           mov rax, sob_boolean_false
  1682 00000EF6 [0200000000000000] 
  1683                                  .L_end:
  1684 00000EFE C9                              leave
  1685 00000EFF C21800                          ret AND_KILL_FRAME(1)
  1686                                          
  1687                                  L_code_ptr_is_boolean_false:
  1688 00000F02 C8000000                        enter 0, 0
  1689 00000F06 48837D1801                      cmp COUNT, 1
  1690 00000F0B 0F85D70F0000                    jne L_error_arg_count_1
  1691 00000F11 488B4520                        mov rax, PARAM(0)
  1692 00000F15 8A18                            mov bl, byte [rax]
  1693 00000F17 80FB09                          cmp bl, T_boolean_false
  1694 00000F1A 750C                            jne .L_false
  1695 00000F1C 48B8-                           mov rax, sob_boolean_true
  1695 00000F1E [0300000000000000] 
  1696 00000F26 EB0A                            jmp .L_end
  1697                                  .L_false:
  1698 00000F28 48B8-                           mov rax, sob_boolean_false
  1698 00000F2A [0200000000000000] 
  1699                                  .L_end:
  1700 00000F32 C9                              leave
  1701 00000F33 C21800                          ret AND_KILL_FRAME(1)
  1702                                  
  1703                                  L_code_ptr_is_boolean_true:
  1704 00000F36 C8000000                        enter 0, 0
  1705 00000F3A 48837D1801                      cmp COUNT, 1
  1706 00000F3F 0F85A30F0000                    jne L_error_arg_count_1
  1707 00000F45 488B4520                        mov rax, PARAM(0)
  1708 00000F49 8A18                            mov bl, byte [rax]
  1709 00000F4B 80FB0A                          cmp bl, T_boolean_true
  1710 00000F4E 750C                            jne .L_false
  1711 00000F50 48B8-                           mov rax, sob_boolean_true
  1711 00000F52 [0300000000000000] 
  1712 00000F5A EB0A                            jmp .L_end
  1713                                  .L_false:
  1714 00000F5C 48B8-                           mov rax, sob_boolean_false
  1714 00000F5E [0200000000000000] 
  1715                                  .L_end:
  1716 00000F66 C9                              leave
  1717 00000F67 C21800                          ret AND_KILL_FRAME(1)
  1718                                  
  1719                                  L_code_ptr_is_number:
  1720 00000F6A C8000000                        enter 0, 0
  1721 00000F6E 48837D1801                      cmp COUNT, 1
  1722 00000F73 0F856F0F0000                    jne L_error_arg_count_1
  1723 00000F79 488B4520                        mov rax, PARAM(0)
  1724 00000F7D 8A18                            mov bl, byte [rax]
  1725 00000F7F 80E310                          and bl, T_number
  1726 00000F82 740C                            jz .L_false
  1727 00000F84 48B8-                           mov rax, sob_boolean_true
  1727 00000F86 [0300000000000000] 
  1728 00000F8E EB0A                            jmp .L_end
  1729                                  .L_false:
  1730 00000F90 48B8-                           mov rax, sob_boolean_false
  1730 00000F92 [0200000000000000] 
  1731                                  .L_end:
  1732 00000F9A C9                              leave
  1733 00000F9B C21800                          ret AND_KILL_FRAME(1)
  1734                                          
  1735                                  L_code_ptr_is_collection:
  1736 00000F9E C8000000                        enter 0, 0
  1737 00000FA2 48837D1801                      cmp COUNT, 1
  1738 00000FA7 0F853B0F0000                    jne L_error_arg_count_1
  1739 00000FAD 488B4520                        mov rax, PARAM(0)
  1740 00000FB1 8A18                            mov bl, byte [rax]
  1741 00000FB3 80E320                          and bl, T_collection
  1742 00000FB6 740C                            je .L_false
  1743 00000FB8 48B8-                           mov rax, sob_boolean_true
  1743 00000FBA [0300000000000000] 
  1744 00000FC2 EB0A                            jmp .L_end
  1745                                  .L_false:
  1746 00000FC4 48B8-                           mov rax, sob_boolean_false
  1746 00000FC6 [0200000000000000] 
  1747                                  .L_end:
  1748 00000FCE C9                              leave
  1749 00000FCF C21800                          ret AND_KILL_FRAME(1)
  1750                                  
  1751                                  L_code_ptr_cons:
  1752 00000FD2 C8000000                        enter 0, 0
  1753 00000FD6 48837D1802                      cmp COUNT, 2
  1754 00000FDB 0F853C0F0000                    jne L_error_arg_count_2
  1755 00000FE1 BF11000000                      mov rdi, (1 + 8 + 8)
  1756 00000FE6 E8CFF2FFFF                      call malloc
  1757 00000FEB C60021                          mov byte [rax], T_pair
  1758 00000FEE 488B5D20                        mov rbx, PARAM(0)
  1759 00000FF2 48895801                        mov SOB_PAIR_CAR(rax), rbx
  1760 00000FF6 488B5D28                        mov rbx, PARAM(1)
  1761 00000FFA 48895809                        mov SOB_PAIR_CDR(rax), rbx
  1762 00000FFE C9                              leave
  1763 00000FFF C22000                          ret AND_KILL_FRAME(2)
  1764                                  
  1765                                  L_code_ptr_display_sexpr:
  1766 00001002 C8000000                        enter 0, 0
  1767 00001006 48837D1801                      cmp COUNT, 1
  1768 0000100B 0F85D70E0000                    jne L_error_arg_count_1
  1769 00001011 488B7D20                        mov rdi, PARAM(0)
  1770 00001015 E821F5FFFF                      call print_sexpr
  1771 0000101A 48B8-                           mov rax, sob_void
  1771 0000101C [0000000000000000] 
  1772 00001024 C9                              leave
  1773 00001025 C21800                          ret AND_KILL_FRAME(1)
  1774                                  
  1775                                  L_code_ptr_write_char:
  1776 00001028 C8000000                        enter 0, 0
  1777 0000102C 48837D1801                      cmp COUNT, 1
  1778 00001031 0F85B10E0000                    jne L_error_arg_count_1
  1779 00001037 488B4520                        mov rax, PARAM(0)
  1780                                          assert_char(rax)
    53 0000103B 803802              <1>  cmp byte [%1], %2
    54 0000103E 0F85780F0000        <1>  jne L_error_incorrect_type
  1781 00001044 8A4001                          mov al, SOB_CHAR_VALUE(rax)
  1782 00001047 4825FF000000                    and rax, 255
  1783 0000104D 48BF-                           mov rdi, fmt_char
  1783 0000104F [D308000000000000] 
  1784 00001057 4889C6                          mov rsi, rax
  1785 0000105A B800000000                      mov rax, 0
  1786                                          ENTER
    44 0000105F C8000000            <1>  enter 0, 0
    45 00001063 4883E4F0            <1>  and rsp, ~15
  1787 00001067 E8(00000000)                    call printf
  1788                                          LEAVE
    49 0000106C C9                  <1>  leave
  1789 0000106D 48B8-                           mov rax, sob_void
  1789 0000106F [0000000000000000] 
  1790 00001077 C9                              leave
  1791 00001078 C21800                          ret AND_KILL_FRAME(1)
  1792                                  
  1793                                  L_code_ptr_car:
  1794 0000107B C8000000                        enter 0, 0
  1795 0000107F 48837D1801                      cmp COUNT, 1
  1796 00001084 0F855E0E0000                    jne L_error_arg_count_1
  1797 0000108A 488B4520                        mov rax, PARAM(0)
  1798                                          assert_pair(rax)
    53 0000108E 803821              <1>  cmp byte [%1], %2
    54 00001091 0F85250F0000        <1>  jne L_error_incorrect_type
  1799 00001097 488B4001                        mov rax, SOB_PAIR_CAR(rax)
  1800 0000109B C9                              leave
  1801 0000109C C21800                          ret AND_KILL_FRAME(1)
  1802                                          
  1803                                  L_code_ptr_cdr:
  1804 0000109F C8000000                        enter 0, 0
  1805 000010A3 48837D1801                      cmp COUNT, 1
  1806 000010A8 0F853A0E0000                    jne L_error_arg_count_1
  1807 000010AE 488B4520                        mov rax, PARAM(0)
  1808                                          assert_pair(rax)
    53 000010B2 803821              <1>  cmp byte [%1], %2
    54 000010B5 0F85010F0000        <1>  jne L_error_incorrect_type
  1809 000010BB 488B4009                        mov rax, SOB_PAIR_CDR(rax)
  1810 000010BF C9                              leave
  1811 000010C0 C21800                          ret AND_KILL_FRAME(1)
  1812                                          
  1813                                  L_code_ptr_string_length:
  1814 000010C3 C8000000                        enter 0, 0
  1815 000010C7 48837D1801                      cmp COUNT, 1
  1816 000010CC 0F85160E0000                    jne L_error_arg_count_1
  1817 000010D2 488B4520                        mov rax, PARAM(0)
  1818                                          assert_string(rax)
    53 000010D6 803803              <1>  cmp byte [%1], %2
    54 000010D9 0F85DD0E0000        <1>  jne L_error_incorrect_type
  1819 000010DF 488B7801                        mov rdi, SOB_STRING_LENGTH(rax)
  1820 000010E3 E84F0D0000                      call make_integer
  1821 000010E8 C9                              leave
  1822 000010E9 C21800                          ret AND_KILL_FRAME(1)
  1823                                  
  1824                                  L_code_ptr_vector_length:
  1825 000010EC C8000000                        enter 0, 0
  1826 000010F0 48837D1801                      cmp COUNT, 1
  1827 000010F5 0F85ED0D0000                    jne L_error_arg_count_1
  1828 000010FB 488B4520                        mov rax, PARAM(0)
  1829                                          assert_vector(rax)
    53 000010FF 803822              <1>  cmp byte [%1], %2
    54 00001102 0F85B40E0000        <1>  jne L_error_incorrect_type
  1830 00001108 488B7801                        mov rdi, SOB_VECTOR_LENGTH(rax)
  1831 0000110C E8260D0000                      call make_integer
  1832 00001111 C9                              leave
  1833 00001112 C21800                          ret AND_KILL_FRAME(1)
  1834                                  
  1835                                  L_code_ptr_real_to_integer:
  1836 00001115 C8000000                        enter 0, 0
  1837 00001119 48837D1801                      cmp COUNT, 1
  1838 0000111E 0F85C40D0000                    jne L_error_arg_count_1
  1839 00001124 488B5D20                        mov rbx, PARAM(0)
  1840                                          assert_real(rbx)
    53 00001128 803B13              <1>  cmp byte [%1], %2
    54 0000112B 0F858B0E0000        <1>  jne L_error_incorrect_type
  1841 00001131 F20F104301                      movsd xmm0, qword [rbx + 1]
  1842 00001136 F2480F2CF8                      cvttsd2si rdi, xmm0
  1843 0000113B E8F70C0000                      call make_integer
  1844 00001140 C9                              leave
  1845 00001141 C21800                          ret AND_KILL_FRAME(1)
  1846                                  
  1847                                  L_code_ptr_exit:
  1848 00001144 C8000000                        enter 0, 0
  1849 00001148 48837D1800                      cmp COUNT, 0
  1850 0000114D 0F85600D0000                    jne L_error_arg_count_0
  1851 00001153 B800000000                      mov rax, 0
  1852 00001158 E8(00000000)                    call exit
  1853                                  
  1854                                  L_code_ptr_integer_to_real:
  1855 0000115D C8000000                        enter 0, 0
  1856 00001161 48837D1801                      cmp COUNT, 1
  1857 00001166 0F857C0D0000                    jne L_error_arg_count_1
  1858 0000116C 488B4520                        mov rax, PARAM(0)
  1859                                          assert_integer(rax)
    53 00001170 803811              <1>  cmp byte [%1], %2
    54 00001173 0F85430E0000        <1>  jne L_error_incorrect_type
  1860 00001179 FF7001                          push qword [rax + 1]
  1861 0000117C F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1862 00001182 E8980C0000                      call make_real
  1863 00001187 C9                              leave
  1864 00001188 C21800                          ret AND_KILL_FRAME(1)
  1865                                  
  1866                                  L_code_ptr_fraction_to_real:
  1867 0000118B C8000000                        enter 0, 0
  1868 0000118F 48837D1801                      cmp COUNT, 1
  1869 00001194 0F854E0D0000                    jne L_error_arg_count_1
  1870 0000119A 488B4520                        mov rax, PARAM(0)
  1871                                          assert_fraction(rax)
    53 0000119E 803812              <1>  cmp byte [%1], %2
    54 000011A1 0F85150E0000        <1>  jne L_error_incorrect_type
  1872 000011A7 FF7001                          push qword [rax + 1]
  1873 000011AA F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1874 000011B0 FF7009                          push qword [rax + 1 + 8]
  1875 000011B3 F2480F2A0C24                    cvtsi2sd xmm1, qword [rsp]
  1876 000011B9 F20F5EC1                        divsd xmm0, xmm1
  1877 000011BD E85D0C0000                      call make_real
  1878 000011C2 C9                              leave
  1879 000011C3 C21800                          ret AND_KILL_FRAME(1)
  1880                                  
  1881                                  L_code_ptr_char_to_integer:
  1882 000011C6 C8000000                        enter 0, 0
  1883 000011CA 48837D1801                      cmp COUNT, 1
  1884 000011CF 0F85130D0000                    jne L_error_arg_count_1
  1885 000011D5 488B4520                        mov rax, PARAM(0)
  1886                                          assert_char(rax)
    53 000011D9 803802              <1>  cmp byte [%1], %2
    54 000011DC 0F85DA0D0000        <1>  jne L_error_incorrect_type
  1887 000011E2 8A4001                          mov al, byte [rax + 1]
  1888 000011E5 4825FF000000                    and rax, 255
  1889 000011EB 4889C7                          mov rdi, rax
  1890 000011EE E8440C0000                      call make_integer
  1891 000011F3 C9                              leave
  1892 000011F4 C21800                          ret AND_KILL_FRAME(1)
  1893                                  
  1894                                  L_code_ptr_integer_to_fraction:
  1895 000011F7 C8000000                        enter 0, 0
  1896 000011FB 48837D1801                      cmp COUNT, 1
  1897 00001200 0F85E20C0000                    jne L_error_arg_count_1
  1898 00001206 4C8B4520                        mov r8, PARAM(0)
  1899                                          assert_integer(r8)
    53 0000120A 41803811            <1>  cmp byte [%1], %2
    54 0000120E 0F85A80D0000        <1>  jne L_error_incorrect_type
  1900 00001214 BF11000000                      mov rdi, (1 + 8 + 8)
  1901 00001219 E89CF0FFFF                      call malloc
  1902 0000121E 498B5801                        mov rbx, qword [r8 + 1]
  1903 00001222 C60012                          mov byte [rax], T_fraction
  1904 00001225 48895801                        mov qword [rax + 1], rbx
  1905 00001229 48C7400901000000                mov qword [rax + 1 + 8], 1
  1906 00001231 C9                              leave
  1907 00001232 C21800                          ret AND_KILL_FRAME(1)
  1908                                  
  1909                                  L_code_ptr_integer_to_char:
  1910 00001235 C8000000                        enter 0, 0
  1911 00001239 48837D1801                      cmp COUNT, 1
  1912 0000123E 0F85A40C0000                    jne L_error_arg_count_1
  1913 00001244 488B4520                        mov rax, PARAM(0)
  1914                                          assert_integer(rax)
    53 00001248 803811              <1>  cmp byte [%1], %2
    54 0000124B 0F856B0D0000        <1>  jne L_error_incorrect_type
  1915 00001251 488B5801                        mov rbx, qword [rax + 1]
  1916 00001255 4883FB00                        cmp rbx, 0
  1917 00001259 0F8EF20B0000                    jle L_error_integer_range
  1918 0000125F 4881FB00010000                  cmp rbx, 256
  1919 00001266 0F8DE50B0000                    jge L_error_integer_range
  1920 0000126C BF02000000                      mov rdi, (1 + 1)
  1921 00001271 E844F0FFFF                      call malloc
  1922 00001276 C60002                          mov byte [rax], T_char
  1923 00001279 885801                          mov byte [rax + 1], bl
  1924 0000127C C9                              leave
  1925 0000127D C21800                          ret AND_KILL_FRAME(1)
  1926                                  
  1927                                  L_code_ptr_trng:
  1928 00001280 C8000000                        enter 0, 0
  1929 00001284 48837D1800                      cmp COUNT, 0
  1930 00001289 0F85240C0000                    jne L_error_arg_count_0
  1931 0000128F 480FC7F7                        rdrand rdi
  1932 00001293 48D1EF                          shr rdi, 1
  1933 00001296 E89C0B0000                      call make_integer
  1934 0000129B C9                              leave
  1935 0000129C C21000                          ret AND_KILL_FRAME(0)
  1936                                  
  1937                                  L_code_ptr_is_zero:
  1938 0000129F C8000000                        enter 0, 0
  1939 000012A3 48837D1801                      cmp COUNT, 1
  1940 000012A8 0F853A0C0000                    jne L_error_arg_count_1
  1941 000012AE 488B4520                        mov rax, PARAM(0)
  1942 000012B2 803811                          cmp byte [rax], T_integer
  1943 000012B5 740F                            je .L_integer
  1944 000012B7 803812                          cmp byte [rax], T_fraction
  1945 000012BA 7413                            je .L_fraction
  1946 000012BC 803813                          cmp byte [rax], T_real
  1947 000012BF 7417                            je .L_real
  1948 000012C1 E9F60C0000                      jmp L_error_incorrect_type
  1949                                  .L_integer:
  1950 000012C6 4883780100                      cmp qword [rax + 1], 0
  1951 000012CB 7429                            je .L_zero
  1952 000012CD EB1B                            jmp .L_not_zero
  1953                                  .L_fraction:
  1954 000012CF 4883780100                      cmp qword [rax + 1], 0
  1955 000012D4 7420                            je .L_zero
  1956 000012D6 EB12                            jmp .L_not_zero
  1957                                  .L_real:
  1958 000012D8 660FEFC0                        pxor xmm0, xmm0
  1959 000012DC FF7001                          push qword [rax + 1]
  1960 000012DF F20F100C24                      movsd xmm1, qword [rsp]
  1961 000012E4 660F2EC1                        ucomisd xmm0, xmm1
  1962 000012E8 740C                            je .L_zero
  1963                                  .L_not_zero:
  1964 000012EA 48B8-                           mov rax, sob_boolean_false
  1964 000012EC [0200000000000000] 
  1965 000012F4 EB0A                            jmp .L_end
  1966                                  .L_zero:
  1967 000012F6 48B8-                           mov rax, sob_boolean_true
  1967 000012F8 [0300000000000000] 
  1968                                  .L_end:
  1969 00001300 C9                              leave
  1970 00001301 C21800                          ret AND_KILL_FRAME(1)
  1971                                  
  1972                                  L_code_ptr_is_integer:
  1973 00001304 C8000000                        enter 0, 0
  1974 00001308 48837D1801                      cmp COUNT, 1
  1975 0000130D 0F85D50B0000                    jne L_error_arg_count_1
  1976 00001313 488B4520                        mov rax, PARAM(0)
  1977 00001317 803811                          cmp byte [rax], T_integer
  1978 0000131A 750C                            jne .L_false
  1979 0000131C 48B8-                           mov rax, sob_boolean_true
  1979 0000131E [0300000000000000] 
  1980 00001326 EB0A                            jmp .L_exit
  1981                                  .L_false:
  1982 00001328 48B8-                           mov rax, sob_boolean_false
  1982 0000132A [0200000000000000] 
  1983                                  .L_exit:
  1984 00001332 C9                              leave
  1985 00001333 C21800                          ret AND_KILL_FRAME(1)
  1986                                  
  1987                                  L_code_ptr_raw_bin_add_rr:
  1988 00001336 C8000000                        enter 0, 0
  1989 0000133A 48837D1802                      cmp COUNT, 2
  1990 0000133F 0F85D80B0000                    jne L_error_arg_count_2
  1991 00001345 488B5D20                        mov rbx, PARAM(0)
  1992                                          assert_real(rbx)
    53 00001349 803B13              <1>  cmp byte [%1], %2
    54 0000134C 0F856A0C0000        <1>  jne L_error_incorrect_type
  1993 00001352 488B4D28                        mov rcx, PARAM(1)
  1994                                          assert_real(rcx)
    53 00001356 803913              <1>  cmp byte [%1], %2
    54 00001359 0F855D0C0000        <1>  jne L_error_incorrect_type
  1995 0000135F F20F104301                      movsd xmm0, qword [rbx + 1]
  1996 00001364 F20F104901                      movsd xmm1, qword [rcx + 1]
  1997 00001369 F20F58C1                        addsd xmm0, xmm1
  1998 0000136D E8AD0A0000                      call make_real
  1999 00001372 C9                              leave
  2000 00001373 C22000                          ret AND_KILL_FRAME(2)
  2001                                  
  2002                                  L_code_ptr_raw_bin_sub_rr:
  2003 00001376 C8000000                        enter 0, 0
  2004 0000137A 48837D1802                      cmp COUNT, 2
  2005 0000137F 0F85980B0000                    jne L_error_arg_count_2
  2006 00001385 488B5D20                        mov rbx, PARAM(0)
  2007                                          assert_real(rbx)
    53 00001389 803B13              <1>  cmp byte [%1], %2
    54 0000138C 0F852A0C0000        <1>  jne L_error_incorrect_type
  2008 00001392 488B4D28                        mov rcx, PARAM(1)
  2009                                          assert_real(rcx)
    53 00001396 803913              <1>  cmp byte [%1], %2
    54 00001399 0F851D0C0000        <1>  jne L_error_incorrect_type
  2010 0000139F F20F104301                      movsd xmm0, qword [rbx + 1]
  2011 000013A4 F20F104901                      movsd xmm1, qword [rcx + 1]
  2012 000013A9 F20F5CC1                        subsd xmm0, xmm1
  2013 000013AD E86D0A0000                      call make_real
  2014 000013B2 C9                              leave
  2015 000013B3 C22000                          ret AND_KILL_FRAME(2)
  2016                                  
  2017                                  L_code_ptr_raw_bin_mul_rr:
  2018 000013B6 C8000000                        enter 0, 0
  2019 000013BA 48837D1802                      cmp COUNT, 2
  2020 000013BF 0F85580B0000                    jne L_error_arg_count_2
  2021 000013C5 488B5D20                        mov rbx, PARAM(0)
  2022                                          assert_real(rbx)
    53 000013C9 803B13              <1>  cmp byte [%1], %2
    54 000013CC 0F85EA0B0000        <1>  jne L_error_incorrect_type
  2023 000013D2 488B4D28                        mov rcx, PARAM(1)
  2024                                          assert_real(rcx)
    53 000013D6 803913              <1>  cmp byte [%1], %2
    54 000013D9 0F85DD0B0000        <1>  jne L_error_incorrect_type
  2025 000013DF F20F104301                      movsd xmm0, qword [rbx + 1]
  2026 000013E4 F20F104901                      movsd xmm1, qword [rcx + 1]
  2027 000013E9 F20F59C1                        mulsd xmm0, xmm1
  2028 000013ED E82D0A0000                      call make_real
  2029 000013F2 C9                              leave
  2030 000013F3 C22000                          ret AND_KILL_FRAME(2)
  2031                                  
  2032                                  L_code_ptr_raw_bin_div_rr:
  2033 000013F6 C8000000                        enter 0, 0
  2034 000013FA 48837D1802                      cmp COUNT, 2
  2035 000013FF 0F85180B0000                    jne L_error_arg_count_2
  2036 00001405 488B5D20                        mov rbx, PARAM(0)
  2037                                          assert_real(rbx)
    53 00001409 803B13              <1>  cmp byte [%1], %2
    54 0000140C 0F85AA0B0000        <1>  jne L_error_incorrect_type
  2038 00001412 488B4D28                        mov rcx, PARAM(1)
  2039                                          assert_real(rcx)
    53 00001416 803913              <1>  cmp byte [%1], %2
    54 00001419 0F859D0B0000        <1>  jne L_error_incorrect_type
  2040 0000141F F20F104301                      movsd xmm0, qword [rbx + 1]
  2041 00001424 F20F104901                      movsd xmm1, qword [rcx + 1]
  2042 00001429 660FEFD2                        pxor xmm2, xmm2
  2043 0000142D 660F2ECA                        ucomisd xmm1, xmm2
  2044 00001431 0F84B60B0000                    je L_error_division_by_zero
  2045 00001437 F20F5EC1                        divsd xmm0, xmm1
  2046 0000143B E8DF090000                      call make_real
  2047 00001440 C9                              leave
  2048 00001441 C22000                          ret AND_KILL_FRAME(2)
  2049                                  
  2050                                  L_code_ptr_raw_bin_add_zz:
  2051 00001444 C8000000                	enter 0, 0
  2052 00001448 48837D1802              	cmp COUNT, 2
  2053 0000144D 0F85CA0A0000            	jne L_error_arg_count_2
  2054 00001453 4C8B4520                	mov r8, PARAM(0)
  2055                                  	assert_integer(r8)
    53 00001457 41803811            <1>  cmp byte [%1], %2
    54 0000145B 0F855B0B0000        <1>  jne L_error_incorrect_type
  2056 00001461 4C8B4D28                	mov r9, PARAM(1)
  2057                                  	assert_integer(r9)
    53 00001465 41803911            <1>  cmp byte [%1], %2
    54 00001469 0F854D0B0000        <1>  jne L_error_incorrect_type
  2058 0000146F 498B7801                	mov rdi, qword [r8 + 1]
  2059 00001473 49037901                	add rdi, qword [r9 + 1]
  2060 00001477 E8BB090000              	call make_integer
  2061 0000147C C9                      	leave
  2062 0000147D C22000                  	ret AND_KILL_FRAME(2)
  2063                                  
  2064                                  L_code_ptr_raw_bin_add_qq:
  2065 00001480 C8000000                        enter 0, 0
  2066 00001484 48837D1802                      cmp COUNT, 2
  2067 00001489 0F858E0A0000                    jne L_error_arg_count_2
  2068 0000148F 4C8B4520                        mov r8, PARAM(0)
  2069                                          assert_fraction(r8)
    53 00001493 41803812            <1>  cmp byte [%1], %2
    54 00001497 0F851F0B0000        <1>  jne L_error_incorrect_type
  2070 0000149D 4C8B4D28                        mov r9, PARAM(1)
  2071                                          assert_fraction(r9)
    53 000014A1 41803912            <1>  cmp byte [%1], %2
    54 000014A5 0F85110B0000        <1>  jne L_error_incorrect_type
  2072 000014AB 498B4001                        mov rax, qword [r8 + 1] ; num1
  2073 000014AF 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  2074 000014B3 4899                            cqo
  2075 000014B5 48F7EB                          imul rbx
  2076 000014B8 4889C6                          mov rsi, rax
  2077 000014BB 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2078 000014BF 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  2079 000014C3 4899                            cqo
  2080 000014C5 48F7EB                          imul rbx
  2081 000014C8 4801C6                          add rsi, rax
  2082 000014CB 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2083 000014CF 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  2084 000014D3 4899                            cqo
  2085 000014D5 48F7EB                          imul rbx
  2086 000014D8 4889C7                          mov rdi, rax
  2087 000014DB E8DE010000                      call normalize_fraction
  2088 000014E0 C9                              leave
  2089 000014E1 C22000                          ret AND_KILL_FRAME(2)
  2090                                  
  2091                                  L_code_ptr_raw_bin_sub_zz:
  2092 000014E4 C8000000                	enter 0, 0
  2093 000014E8 48837D1802              	cmp COUNT, 2
  2094 000014ED 0F852A0A0000            	jne L_error_arg_count_2
  2095 000014F3 4C8B4520                	mov r8, PARAM(0)
  2096                                  	assert_integer(r8)
    53 000014F7 41803811            <1>  cmp byte [%1], %2
    54 000014FB 0F85BB0A0000        <1>  jne L_error_incorrect_type
  2097 00001501 4C8B4D28                	mov r9, PARAM(1)
  2098                                  	assert_integer(r9)
    53 00001505 41803911            <1>  cmp byte [%1], %2
    54 00001509 0F85AD0A0000        <1>  jne L_error_incorrect_type
  2099 0000150F 498B7801                	mov rdi, qword [r8 + 1]
  2100 00001513 492B7901                	sub rdi, qword [r9 + 1]
  2101 00001517 E81B090000              	call make_integer
  2102 0000151C C9                      	leave
  2103 0000151D C22000                  	ret AND_KILL_FRAME(2)
  2104                                  
  2105                                  L_code_ptr_raw_bin_sub_qq:
  2106 00001520 C8000000                        enter 0, 0
  2107 00001524 48837D1802                      cmp COUNT, 2
  2108 00001529 0F85EE090000                    jne L_error_arg_count_2
  2109 0000152F 4C8B4520                        mov r8, PARAM(0)
  2110                                          assert_fraction(r8)
    53 00001533 41803812            <1>  cmp byte [%1], %2
    54 00001537 0F857F0A0000        <1>  jne L_error_incorrect_type
  2111 0000153D 4C8B4D28                        mov r9, PARAM(1)
  2112                                          assert_fraction(r9)
    53 00001541 41803912            <1>  cmp byte [%1], %2
    54 00001545 0F85710A0000        <1>  jne L_error_incorrect_type
  2113 0000154B 498B4001                        mov rax, qword [r8 + 1] ; num1
  2114 0000154F 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  2115 00001553 4899                            cqo
  2116 00001555 48F7EB                          imul rbx
  2117 00001558 4889C6                          mov rsi, rax
  2118 0000155B 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2119 0000155F 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  2120 00001563 4899                            cqo
  2121 00001565 48F7EB                          imul rbx
  2122 00001568 4829C6                          sub rsi, rax
  2123 0000156B 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2124 0000156F 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  2125 00001573 4899                            cqo
  2126 00001575 48F7EB                          imul rbx
  2127 00001578 4889C7                          mov rdi, rax
  2128 0000157B E83E010000                      call normalize_fraction
  2129 00001580 C9                              leave
  2130 00001581 C22000                          ret AND_KILL_FRAME(2)
  2131                                  
  2132                                  L_code_ptr_raw_bin_mul_zz:
  2133 00001584 C8000000                	enter 0, 0
  2134 00001588 48837D1802              	cmp COUNT, 2
  2135 0000158D 0F858A090000            	jne L_error_arg_count_2
  2136 00001593 4C8B4520                	mov r8, PARAM(0)
  2137                                  	assert_integer(r8)
    53 00001597 41803811            <1>  cmp byte [%1], %2
    54 0000159B 0F851B0A0000        <1>  jne L_error_incorrect_type
  2138 000015A1 4C8B4D28                	mov r9, PARAM(1)
  2139                                  	assert_integer(r9)
    53 000015A5 41803911            <1>  cmp byte [%1], %2
    54 000015A9 0F850D0A0000        <1>  jne L_error_incorrect_type
  2140 000015AF 4899                    	cqo
  2141 000015B1 498B4001                	mov rax, qword [r8 + 1]
  2142 000015B5 49F76101                	mul qword [r9 + 1]
  2143 000015B9 4889C7                  	mov rdi, rax
  2144 000015BC E876080000              	call make_integer
  2145 000015C1 C9                      	leave
  2146 000015C2 C22000                  	ret AND_KILL_FRAME(2)
  2147                                  
  2148                                  L_code_ptr_raw_bin_mul_qq:
  2149 000015C5 C8000000                        enter 0, 0
  2150 000015C9 48837D1802                      cmp COUNT, 2
  2151 000015CE 0F8549090000                    jne L_error_arg_count_2
  2152 000015D4 4C8B4520                        mov r8, PARAM(0)
  2153                                          assert_fraction(r8)
    53 000015D8 41803812            <1>  cmp byte [%1], %2
    54 000015DC 0F85DA090000        <1>  jne L_error_incorrect_type
  2154 000015E2 4C8B4D28                        mov r9, PARAM(1)
  2155                                          assert_fraction(r9)
    53 000015E6 41803912            <1>  cmp byte [%1], %2
    54 000015EA 0F85CC090000        <1>  jne L_error_incorrect_type
  2156 000015F0 498B4001                        mov rax, qword [r8 + 1] ; num1
  2157 000015F4 498B5901                        mov rbx, qword [r9 + 1] ; num2
  2158 000015F8 4899                            cqo
  2159 000015FA 48F7EB                          imul rbx
  2160 000015FD 4889C6                          mov rsi, rax
  2161 00001600 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2162 00001604 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  2163 00001608 4899                            cqo
  2164 0000160A 48F7EB                          imul rbx
  2165 0000160D 4889C7                          mov rdi, rax
  2166 00001610 E8A9000000                      call normalize_fraction
  2167 00001615 C9                              leave
  2168 00001616 C22000                          ret AND_KILL_FRAME(2)
  2169                                          
  2170                                  L_code_ptr_raw_bin_div_zz:
  2171 00001619 C8000000                	enter 0, 0
  2172 0000161D 48837D1802              	cmp COUNT, 2
  2173 00001622 0F85F5080000            	jne L_error_arg_count_2
  2174 00001628 4C8B4520                	mov r8, PARAM(0)
  2175                                  	assert_integer(r8)
    53 0000162C 41803811            <1>  cmp byte [%1], %2
    54 00001630 0F8586090000        <1>  jne L_error_incorrect_type
  2176 00001636 4C8B4D28                	mov r9, PARAM(1)
  2177                                  	assert_integer(r9)
    53 0000163A 41803911            <1>  cmp byte [%1], %2
    54 0000163E 0F8578090000        <1>  jne L_error_incorrect_type
  2178 00001644 498B7901                	mov rdi, qword [r9 + 1]
  2179 00001648 4883FF00                	cmp rdi, 0
  2180 0000164C 0F849B090000            	je L_error_division_by_zero
  2181 00001652 498B7001                	mov rsi, qword [r8 + 1]
  2182 00001656 E863000000              	call normalize_fraction
  2183 0000165B C9                      	leave
  2184 0000165C C22000                  	ret AND_KILL_FRAME(2)
  2185                                  
  2186                                  L_code_ptr_raw_bin_div_qq:
  2187 0000165F C8000000                        enter 0, 0
  2188 00001663 48837D1802                      cmp COUNT, 2
  2189 00001668 0F85AF080000                    jne L_error_arg_count_2
  2190 0000166E 4C8B4520                        mov r8, PARAM(0)
  2191                                          assert_fraction(r8)
    53 00001672 41803812            <1>  cmp byte [%1], %2
    54 00001676 0F8540090000        <1>  jne L_error_incorrect_type
  2192 0000167C 4C8B4D28                        mov r9, PARAM(1)
  2193                                          assert_fraction(r9)
    53 00001680 41803912            <1>  cmp byte [%1], %2
    54 00001684 0F8532090000        <1>  jne L_error_incorrect_type
  2194 0000168A 4983790100                      cmp qword [r9 + 1], 0
  2195 0000168F 0F8458090000                    je L_error_division_by_zero
  2196 00001695 498B4001                        mov rax, qword [r8 + 1] ; num1
  2197 00001699 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  2198 0000169D 4899                            cqo
  2199 0000169F 48F7EB                          imul rbx
  2200 000016A2 4889C6                          mov rsi, rax
  2201 000016A5 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2202 000016A9 498B5901                        mov rbx, qword [r9 + 1] ; num2
  2203 000016AD 4899                            cqo
  2204 000016AF 48F7EB                          imul rbx
  2205 000016B2 4889C7                          mov rdi, rax
  2206 000016B5 E804000000                      call normalize_fraction
  2207 000016BA C9                              leave
  2208 000016BB C22000                          ret AND_KILL_FRAME(2)
  2209                                          
  2210                                  normalize_fraction:
  2211 000016BE 56                              push rsi
  2212 000016BF 57                              push rdi
  2213 000016C0 E859000000                      call gcd
  2214 000016C5 4889C3                          mov rbx, rax
  2215 000016C8 58                              pop rax
  2216 000016C9 4899                            cqo
  2217 000016CB 48F7FB                          idiv rbx
  2218 000016CE 4989C0                          mov r8, rax
  2219 000016D1 58                              pop rax
  2220 000016D2 4899                            cqo
  2221 000016D4 48F7FB                          idiv rbx
  2222 000016D7 4989C1                          mov r9, rax
  2223 000016DA 4983F900                        cmp r9, 0
  2224 000016DE 741C                            je .L_zero
  2225 000016E0 4983F801                        cmp r8, 1
  2226 000016E4 7421                            je .L_int
  2227 000016E6 BF11000000                      mov rdi, (1 + 8 + 8)
  2228 000016EB E8CAEBFFFF                      call malloc
  2229 000016F0 C60012                          mov byte [rax], T_fraction
  2230 000016F3 4C894801                        mov qword [rax + 1], r9
  2231 000016F7 4C894009                        mov qword [rax + 1 + 8], r8
  2232 000016FB C3                              ret
  2233                                  .L_zero:
  2234 000016FC BF00000000                      mov rdi, 0
  2235 00001701 E831070000                      call make_integer
  2236 00001706 C3                              ret
  2237                                  .L_int:
  2238 00001707 4C89CF                          mov rdi, r9
  2239 0000170A E828070000                      call make_integer
  2240 0000170F C3                              ret
  2241                                  
  2242                                  iabs:
  2243 00001710 4889F8                          mov rax, rdi
  2244 00001713 4883F800                        cmp rax, 0
  2245 00001717 7C01                            jl .Lneg
  2246 00001719 C3                              ret
  2247                                  .Lneg:
  2248 0000171A 48F7D8                          neg rax
  2249 0000171D C3                              ret
  2250                                  
  2251                                  gcd:
  2252 0000171E E8EDFFFFFF                      call iabs
  2253 00001723 4889C3                          mov rbx, rax
  2254 00001726 4889F7                          mov rdi, rsi
  2255 00001729 E8E2FFFFFF                      call iabs
  2256 0000172E 4883F800                        cmp rax, 0
  2257 00001732 7502                            jne .L0
  2258 00001734 4893                            xchg rax, rbx
  2259                                  .L0:
  2260 00001736 4883FB00                        cmp rbx, 0
  2261 0000173A 740C                            je .L1
  2262 0000173C 4899                            cqo
  2263 0000173E 48F7F3                          div rbx
  2264 00001741 4889D0                          mov rax, rdx
  2265 00001744 4893                            xchg rax, rbx
  2266 00001746 EBEE                            jmp .L0
  2267                                  .L1:
  2268 00001748 C3                              ret
  2269                                  
  2270                                  L_code_ptr_error:
  2271 00001749 C8000000                        enter 0, 0
  2272 0000174D 48837D1802                      cmp COUNT, 2
  2273 00001752 0F85C5070000                    jne L_error_arg_count_2
  2274 00001758 488B7520                        mov rsi, PARAM(0)
  2275                                          assert_interned_symbol(rsi)
    53 0000175C 803E41              <1>  cmp byte [%1], %2
    54 0000175F 0F8557080000        <1>  jne L_error_incorrect_type
  2276 00001765 488B7528                        mov rsi, PARAM(1)
  2277                                          assert_string(rsi)
    53 00001769 803E03              <1>  cmp byte [%1], %2
    54 0000176C 0F854A080000        <1>  jne L_error_incorrect_type
  2278 00001772 48BF-                           mov rdi, fmt_scheme_error_part_1
  2278 00001774 [310A000000000000] 
  2279 0000177C B800000000                      mov rax, 0
  2280                                          ENTER
    44 00001781 C8000000            <1>  enter 0, 0
    45 00001785 4883E4F0            <1>  and rsp, ~15
  2281 00001789 E8(00000000)                    call printf
  2282                                          LEAVE
    49 0000178E C9                  <1>  leave
  2283 0000178F 488B7D20                        mov rdi, PARAM(0)
  2284 00001793 E8A3EDFFFF                      call print_sexpr
  2285 00001798 48BF-                           mov rdi, fmt_scheme_error_part_2
  2285 0000179A [450A000000000000] 
  2286 000017A2 B800000000                      mov rax, 0
  2287                                          ENTER
    44 000017A7 C8000000            <1>  enter 0, 0
    45 000017AB 4883E4F0            <1>  and rsp, ~15
  2288 000017AF E8(00000000)                    call printf
  2289                                          LEAVE
    49 000017B4 C9                  <1>  leave
  2290 000017B5 488B4528                        mov rax, PARAM(1)       ; sob_string
  2291 000017B9 BE01000000                      mov rsi, 1              ; size = 1 byte
  2292 000017BE 488B5001                        mov rdx, qword [rax + 1] ; length
  2293 000017C2 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
  2294 000017C6 488B0C25[00000000]              mov rcx, qword [stdout]  ; FILE*
  2295                                  	ENTER
    44 000017CE C8000000            <1>  enter 0, 0
    45 000017D2 4883E4F0            <1>  and rsp, ~15
  2296 000017D6 E8(00000000)                    call fwrite
  2297                                  	LEAVE
    49 000017DB C9                  <1>  leave
  2298 000017DC 48BF-                           mov rdi, fmt_scheme_error_part_3
  2298 000017DE [870A000000000000] 
  2299 000017E6 B800000000                      mov rax, 0
  2300                                          ENTER
    44 000017EB C8000000            <1>  enter 0, 0
    45 000017EF 4883E4F0            <1>  and rsp, ~15
  2301 000017F3 E8(00000000)                    call printf
  2302                                          LEAVE
    49 000017F8 C9                  <1>  leave
  2303 000017F9 48C7C0F7FFFFFF                  mov rax, -9
  2304 00001800 E8(00000000)                    call exit
  2305                                  
  2306                                  L_code_ptr_raw_less_than_rr:
  2307 00001805 C8000000                        enter 0, 0
  2308 00001809 48837D1802                      cmp COUNT, 2
  2309 0000180E 0F8509070000                    jne L_error_arg_count_2
  2310 00001814 488B7520                        mov rsi, PARAM(0)
  2311                                          assert_real(rsi)
    53 00001818 803E13              <1>  cmp byte [%1], %2
    54 0000181B 0F859B070000        <1>  jne L_error_incorrect_type
  2312 00001821 488B7D28                        mov rdi, PARAM(1)
  2313                                          assert_real(rdi)
    53 00001825 803F13              <1>  cmp byte [%1], %2
    54 00001828 0F858E070000        <1>  jne L_error_incorrect_type
  2314 0000182E F20F104601                      movsd xmm0, qword [rsi + 1]
  2315 00001833 F20F104F01                      movsd xmm1, qword [rdi + 1]
  2316 00001838 660F2FC1                        comisd xmm0, xmm1
  2317 0000183C 730C                            jae .L_false
  2318 0000183E 48B8-                           mov rax, sob_boolean_true
  2318 00001840 [0300000000000000] 
  2319 00001848 EB0A                            jmp .L_exit
  2320                                  .L_false:
  2321 0000184A 48B8-                           mov rax, sob_boolean_false
  2321 0000184C [0200000000000000] 
  2322                                  .L_exit:
  2323 00001854 C9                              leave
  2324 00001855 C22000                          ret AND_KILL_FRAME(2)
  2325                                          
  2326                                  L_code_ptr_raw_less_than_zz:
  2327 00001858 C8000000                	enter 0, 0
  2328 0000185C 48837D1802              	cmp COUNT, 2
  2329 00001861 0F85B6060000            	jne L_error_arg_count_2
  2330 00001867 4C8B4520                	mov r8, PARAM(0)
  2331                                  	assert_integer(r8)
    53 0000186B 41803811            <1>  cmp byte [%1], %2
    54 0000186F 0F8547070000        <1>  jne L_error_incorrect_type
  2332 00001875 4C8B4D28                	mov r9, PARAM(1)
  2333                                  	assert_integer(r9)
    53 00001879 41803911            <1>  cmp byte [%1], %2
    54 0000187D 0F8539070000        <1>  jne L_error_incorrect_type
  2334 00001883 498B7801                	mov rdi, qword [r8 + 1]
  2335 00001887 493B7901                	cmp rdi, qword [r9 + 1]
  2336 0000188B 7D0C                    	jge .L_false
  2337 0000188D 48B8-                   	mov rax, sob_boolean_true
  2337 0000188F [0300000000000000] 
  2338 00001897 EB0A                    	jmp .L_exit
  2339                                  .L_false:
  2340 00001899 48B8-                   	mov rax, sob_boolean_false
  2340 0000189B [0200000000000000] 
  2341                                  .L_exit:
  2342 000018A3 C9                      	leave
  2343 000018A4 C22000                  	ret AND_KILL_FRAME(2)
  2344                                  
  2345                                  L_code_ptr_raw_less_than_qq:
  2346 000018A7 C8000000                        enter 0, 0
  2347 000018AB 48837D1802                      cmp COUNT, 2
  2348 000018B0 0F8567060000                    jne L_error_arg_count_2
  2349 000018B6 488B7520                        mov rsi, PARAM(0)
  2350                                          assert_fraction(rsi)
    53 000018BA 803E12              <1>  cmp byte [%1], %2
    54 000018BD 0F85F9060000        <1>  jne L_error_incorrect_type
  2351 000018C3 488B7D28                        mov rdi, PARAM(1)
  2352                                          assert_fraction(rdi)
    53 000018C7 803F12              <1>  cmp byte [%1], %2
    54 000018CA 0F85EC060000        <1>  jne L_error_incorrect_type
  2353 000018D0 488B4601                        mov rax, qword [rsi + 1] ; num1
  2354 000018D4 4899                            cqo
  2355 000018D6 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  2356 000018DA 4889C1                          mov rcx, rax
  2357 000018DD 488B4609                        mov rax, qword [rsi + 1 + 8] ; den1
  2358 000018E1 4899                            cqo
  2359 000018E3 48F76F01                        imul qword [rdi + 1]          ; num2
  2360 000018E7 4829C1                          sub rcx, rax
  2361 000018EA 7D0C                            jge .L_false
  2362 000018EC 48B8-                           mov rax, sob_boolean_true
  2362 000018EE [0300000000000000] 
  2363 000018F6 EB0A                            jmp .L_exit
  2364                                  .L_false:
  2365 000018F8 48B8-                           mov rax, sob_boolean_false
  2365 000018FA [0200000000000000] 
  2366                                  .L_exit:
  2367 00001902 C9                              leave
  2368 00001903 C22000                          ret AND_KILL_FRAME(2)
  2369                                  
  2370                                  L_code_ptr_raw_equal_rr:
  2371 00001906 C8000000                        enter 0, 0
  2372 0000190A 48837D1802                      cmp COUNT, 2
  2373 0000190F 0F8508060000                    jne L_error_arg_count_2
  2374 00001915 488B7520                        mov rsi, PARAM(0)
  2375                                          assert_real(rsi)
    53 00001919 803E13              <1>  cmp byte [%1], %2
    54 0000191C 0F859A060000        <1>  jne L_error_incorrect_type
  2376 00001922 488B7D28                        mov rdi, PARAM(1)
  2377                                          assert_real(rdi)
    53 00001926 803F13              <1>  cmp byte [%1], %2
    54 00001929 0F858D060000        <1>  jne L_error_incorrect_type
  2378 0000192F F20F104601                      movsd xmm0, qword [rsi + 1]
  2379 00001934 F20F104F01                      movsd xmm1, qword [rdi + 1]
  2380 00001939 660F2FC1                        comisd xmm0, xmm1
  2381 0000193D 750C                            jne .L_false
  2382 0000193F 48B8-                           mov rax, sob_boolean_true
  2382 00001941 [0300000000000000] 
  2383 00001949 EB0A                            jmp .L_exit
  2384                                  .L_false:
  2385 0000194B 48B8-                           mov rax, sob_boolean_false
  2385 0000194D [0200000000000000] 
  2386                                  .L_exit:
  2387 00001955 C9                              leave
  2388 00001956 C22000                          ret AND_KILL_FRAME(2)
  2389                                          
  2390                                  L_code_ptr_raw_equal_zz:
  2391 00001959 C8000000                	enter 0, 0
  2392 0000195D 48837D1802              	cmp COUNT, 2
  2393 00001962 0F85B5050000            	jne L_error_arg_count_2
  2394 00001968 4C8B4520                	mov r8, PARAM(0)
  2395                                  	assert_integer(r8)
    53 0000196C 41803811            <1>  cmp byte [%1], %2
    54 00001970 0F8546060000        <1>  jne L_error_incorrect_type
  2396 00001976 4C8B4D28                	mov r9, PARAM(1)
  2397                                  	assert_integer(r9)
    53 0000197A 41803911            <1>  cmp byte [%1], %2
    54 0000197E 0F8538060000        <1>  jne L_error_incorrect_type
  2398 00001984 498B7801                	mov rdi, qword [r8 + 1]
  2399 00001988 493B7901                	cmp rdi, qword [r9 + 1]
  2400 0000198C 750C                    	jne .L_false
  2401 0000198E 48B8-                   	mov rax, sob_boolean_true
  2401 00001990 [0300000000000000] 
  2402 00001998 EB0A                    	jmp .L_exit
  2403                                  .L_false:
  2404 0000199A 48B8-                   	mov rax, sob_boolean_false
  2404 0000199C [0200000000000000] 
  2405                                  .L_exit:
  2406 000019A4 C9                      	leave
  2407 000019A5 C22000                  	ret AND_KILL_FRAME(2)
  2408                                  
  2409                                  L_code_ptr_raw_equal_qq:
  2410 000019A8 C8000000                        enter 0, 0
  2411 000019AC 48837D1802                      cmp COUNT, 2
  2412 000019B1 0F8566050000                    jne L_error_arg_count_2
  2413 000019B7 488B7520                        mov rsi, PARAM(0)
  2414                                          assert_fraction(rsi)
    53 000019BB 803E12              <1>  cmp byte [%1], %2
    54 000019BE 0F85F8050000        <1>  jne L_error_incorrect_type
  2415 000019C4 488B7D28                        mov rdi, PARAM(1)
  2416                                          assert_fraction(rdi)
    53 000019C8 803F12              <1>  cmp byte [%1], %2
    54 000019CB 0F85EB050000        <1>  jne L_error_incorrect_type
  2417 000019D1 488B4601                        mov rax, qword [rsi + 1] ; num1
  2418 000019D5 4899                            cqo
  2419 000019D7 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  2420 000019DB 4889C1                          mov rcx, rax
  2421 000019DE 488B4709                        mov rax, qword [rdi + 1 + 8] ; den1
  2422 000019E2 4899                            cqo
  2423 000019E4 48F76F01                        imul qword [rdi + 1]          ; num2
  2424 000019E8 4829C1                          sub rcx, rax
  2425 000019EB 750C                            jne .L_false
  2426 000019ED 48B8-                           mov rax, sob_boolean_true
  2426 000019EF [0300000000000000] 
  2427 000019F7 EB0A                            jmp .L_exit
  2428                                  .L_false:
  2429 000019F9 48B8-                           mov rax, sob_boolean_false
  2429 000019FB [0200000000000000] 
  2430                                  .L_exit:
  2431 00001A03 C9                              leave
  2432 00001A04 C22000                          ret AND_KILL_FRAME(2)
  2433                                  
  2434                                  L_code_ptr_quotient:
  2435 00001A07 C8000000                        enter 0, 0
  2436 00001A0B 48837D1802                      cmp COUNT, 2
  2437 00001A10 0F8507050000                    jne L_error_arg_count_2
  2438 00001A16 488B7520                        mov rsi, PARAM(0)
  2439                                          assert_integer(rsi)
    53 00001A1A 803E11              <1>  cmp byte [%1], %2
    54 00001A1D 0F8599050000        <1>  jne L_error_incorrect_type
  2440 00001A23 488B7D28                        mov rdi, PARAM(1)
  2441                                          assert_integer(rdi)
    53 00001A27 803F11              <1>  cmp byte [%1], %2
    54 00001A2A 0F858C050000        <1>  jne L_error_incorrect_type
  2442 00001A30 488B4601                        mov rax, qword [rsi + 1]
  2443 00001A34 488B5F01                        mov rbx, qword [rdi + 1]
  2444 00001A38 4883FB00                        cmp rbx, 0
  2445 00001A3C 0F84AB050000                    je L_error_division_by_zero
  2446 00001A42 4899                            cqo
  2447 00001A44 48F7FB                          idiv rbx
  2448 00001A47 4889C7                          mov rdi, rax
  2449 00001A4A E8E8030000                      call make_integer
  2450 00001A4F C9                              leave
  2451 00001A50 C22000                          ret AND_KILL_FRAME(2)
  2452                                          
  2453                                  L_code_ptr_remainder:
  2454 00001A53 C8000000                        enter 0, 0
  2455 00001A57 48837D1802                      cmp COUNT, 2
  2456 00001A5C 0F85BB040000                    jne L_error_arg_count_2
  2457 00001A62 488B7520                        mov rsi, PARAM(0)
  2458                                          assert_integer(rsi)
    53 00001A66 803E11              <1>  cmp byte [%1], %2
    54 00001A69 0F854D050000        <1>  jne L_error_incorrect_type
  2459 00001A6F 488B7D28                        mov rdi, PARAM(1)
  2460                                          assert_integer(rdi)
    53 00001A73 803F11              <1>  cmp byte [%1], %2
    54 00001A76 0F8540050000        <1>  jne L_error_incorrect_type
  2461 00001A7C 488B4601                        mov rax, qword [rsi + 1]
  2462 00001A80 488B5F01                        mov rbx, qword [rdi + 1]
  2463 00001A84 4883FB00                        cmp rbx, 0
  2464 00001A88 0F845F050000                    je L_error_division_by_zero
  2465 00001A8E 4899                            cqo
  2466 00001A90 48F7FB                          idiv rbx
  2467 00001A93 4889D7                          mov rdi, rdx
  2468 00001A96 E89C030000                      call make_integer
  2469 00001A9B C9                              leave
  2470 00001A9C C22000                          ret AND_KILL_FRAME(2)
  2471                                  
  2472                                  L_code_ptr_set_car:
  2473 00001A9F C8000000                        enter 0, 0
  2474 00001AA3 48837D1802                      cmp COUNT, 2
  2475 00001AA8 0F856F040000                    jne L_error_arg_count_2
  2476 00001AAE 488B4520                        mov rax, PARAM(0)
  2477                                          assert_pair(rax)
    53 00001AB2 803821              <1>  cmp byte [%1], %2
    54 00001AB5 0F8501050000        <1>  jne L_error_incorrect_type
  2478 00001ABB 488B5D28                        mov rbx, PARAM(1)
  2479 00001ABF 48895801                        mov SOB_PAIR_CAR(rax), rbx
  2480 00001AC3 48B8-                           mov rax, sob_void
  2480 00001AC5 [0000000000000000] 
  2481 00001ACD C9                              leave
  2482 00001ACE C22000                          ret AND_KILL_FRAME(2)
  2483                                  
  2484                                  L_code_ptr_set_cdr:
  2485 00001AD1 C8000000                        enter 0, 0
  2486 00001AD5 48837D1802                      cmp COUNT, 2
  2487 00001ADA 0F853D040000                    jne L_error_arg_count_2
  2488 00001AE0 488B4520                        mov rax, PARAM(0)
  2489                                          assert_pair(rax)
    53 00001AE4 803821              <1>  cmp byte [%1], %2
    54 00001AE7 0F85CF040000        <1>  jne L_error_incorrect_type
  2490 00001AED 488B5D28                        mov rbx, PARAM(1)
  2491 00001AF1 48895809                        mov SOB_PAIR_CDR(rax), rbx
  2492 00001AF5 48B8-                           mov rax, sob_void
  2492 00001AF7 [0000000000000000] 
  2493 00001AFF C9                              leave
  2494 00001B00 C22000                          ret AND_KILL_FRAME(2)
  2495                                  
  2496                                  L_code_ptr_string_ref:
  2497 00001B03 C8000000                        enter 0, 0
  2498 00001B07 48837D1802                      cmp COUNT, 2
  2499 00001B0C 0F850B040000                    jne L_error_arg_count_2
  2500 00001B12 488B7D20                        mov rdi, PARAM(0)
  2501                                          assert_string(rdi)
    53 00001B16 803F03              <1>  cmp byte [%1], %2
    54 00001B19 0F859D040000        <1>  jne L_error_incorrect_type
  2502 00001B1F 488B7528                        mov rsi, PARAM(1)
  2503                                          assert_integer(rsi)
    53 00001B23 803E11              <1>  cmp byte [%1], %2
    54 00001B26 0F8590040000        <1>  jne L_error_incorrect_type
  2504 00001B2C 488B5701                        mov rdx, qword [rdi + 1]
  2505 00001B30 488B4E01                        mov rcx, qword [rsi + 1]
  2506 00001B34 4839D1                          cmp rcx, rdx
  2507 00001B37 0F8D14030000                    jge L_error_integer_range
  2508 00001B3D 4883F900                        cmp rcx, 0
  2509 00001B41 0F8C0A030000                    jl L_error_integer_range
  2510 00001B47 8A5C3909                        mov bl, byte [rdi + 1 + 8 + 1 * rcx]
  2511 00001B4B BF02000000                      mov rdi, 2
  2512 00001B50 E865E7FFFF                      call malloc
  2513 00001B55 C60002                          mov byte [rax], T_char
  2514 00001B58 885801                          mov byte [rax + 1], bl
  2515 00001B5B C9                              leave
  2516 00001B5C C22000                          ret AND_KILL_FRAME(2)
  2517                                  
  2518                                  L_code_ptr_vector_ref:
  2519 00001B5F C8000000                        enter 0, 0
  2520 00001B63 48837D1802                      cmp COUNT, 2
  2521 00001B68 0F85AF030000                    jne L_error_arg_count_2
  2522 00001B6E 488B7D20                        mov rdi, PARAM(0)
  2523                                          assert_vector(rdi)
    53 00001B72 803F22              <1>  cmp byte [%1], %2
    54 00001B75 0F8541040000        <1>  jne L_error_incorrect_type
  2524 00001B7B 488B7528                        mov rsi, PARAM(1)
  2525                                          assert_integer(rsi)
    53 00001B7F 803E11              <1>  cmp byte [%1], %2
    54 00001B82 0F8534040000        <1>  jne L_error_incorrect_type
  2526 00001B88 488B5701                        mov rdx, qword [rdi + 1]
  2527 00001B8C 488B4E01                        mov rcx, qword [rsi + 1]
  2528 00001B90 4839D1                          cmp rcx, rdx
  2529 00001B93 0F8DB8020000                    jge L_error_integer_range
  2530 00001B99 4883F900                        cmp rcx, 0
  2531 00001B9D 0F8CAE020000                    jl L_error_integer_range
  2532 00001BA3 488B44CF09                      mov rax, [rdi + 1 + 8 + 8 * rcx]
  2533 00001BA8 C9                              leave
  2534 00001BA9 C22000                          ret AND_KILL_FRAME(2)
  2535                                  
  2536                                  L_code_ptr_vector_set:
  2537 00001BAC C8000000                        enter 0, 0
  2538 00001BB0 48837D1803                      cmp COUNT, 3
  2539 00001BB5 0F85CC030000                    jne L_error_arg_count_3
  2540 00001BBB 488B7D20                        mov rdi, PARAM(0)
  2541                                          assert_vector(rdi)
    53 00001BBF 803F22              <1>  cmp byte [%1], %2
    54 00001BC2 0F85F4030000        <1>  jne L_error_incorrect_type
  2542 00001BC8 488B7528                        mov rsi, PARAM(1)
  2543                                          assert_integer(rsi)
    53 00001BCC 803E11              <1>  cmp byte [%1], %2
    54 00001BCF 0F85E7030000        <1>  jne L_error_incorrect_type
  2544 00001BD5 488B5701                        mov rdx, qword [rdi + 1]
  2545 00001BD9 488B4E01                        mov rcx, qword [rsi + 1]
  2546 00001BDD 4839D1                          cmp rcx, rdx
  2547 00001BE0 0F8D6B020000                    jge L_error_integer_range
  2548 00001BE6 4883F900                        cmp rcx, 0
  2549 00001BEA 0F8C61020000                    jl L_error_integer_range
  2550 00001BF0 488B4530                        mov rax, PARAM(2)
  2551 00001BF4 488944CF09                      mov qword [rdi + 1 + 8 + 8 * rcx], rax
  2552 00001BF9 48B8-                           mov rax, sob_void
  2552 00001BFB [0000000000000000] 
  2553 00001C03 C9                              leave
  2554 00001C04 C22800                          ret AND_KILL_FRAME(3)
  2555                                  
  2556                                  L_code_ptr_string_set:
  2557 00001C07 C8000000                        enter 0, 0
  2558 00001C0B 48837D1803                      cmp COUNT, 3
  2559 00001C10 0F8571030000                    jne L_error_arg_count_3
  2560 00001C16 488B7D20                        mov rdi, PARAM(0)
  2561                                          assert_string(rdi)
    53 00001C1A 803F03              <1>  cmp byte [%1], %2
    54 00001C1D 0F8599030000        <1>  jne L_error_incorrect_type
  2562 00001C23 488B7528                        mov rsi, PARAM(1)
  2563                                          assert_integer(rsi)
    53 00001C27 803E11              <1>  cmp byte [%1], %2
    54 00001C2A 0F858C030000        <1>  jne L_error_incorrect_type
  2564 00001C30 488B5701                        mov rdx, qword [rdi + 1]
  2565 00001C34 488B4E01                        mov rcx, qword [rsi + 1]
  2566 00001C38 4839D1                          cmp rcx, rdx
  2567 00001C3B 0F8D10020000                    jge L_error_integer_range
  2568 00001C41 4883F900                        cmp rcx, 0
  2569 00001C45 0F8C06020000                    jl L_error_integer_range
  2570 00001C4B 488B4530                        mov rax, PARAM(2)
  2571                                          assert_char(rax)
    53 00001C4F 803802              <1>  cmp byte [%1], %2
    54 00001C52 0F8564030000        <1>  jne L_error_incorrect_type
  2572 00001C58 8A4001                          mov al, byte [rax + 1]
  2573 00001C5B 88443909                        mov byte [rdi + 1 + 8 + 1 * rcx], al
  2574 00001C5F 48B8-                           mov rax, sob_void
  2574 00001C61 [0000000000000000] 
  2575 00001C69 C9                              leave
  2576 00001C6A C22800                          ret AND_KILL_FRAME(3)
  2577                                  
  2578                                  L_code_ptr_make_vector:
  2579 00001C6D C8000000                        enter 0, 0
  2580 00001C71 48837D1802                      cmp COUNT, 2
  2581 00001C76 0F85A1020000                    jne L_error_arg_count_2
  2582 00001C7C 488B4D20                        mov rcx, PARAM(0)
  2583                                          assert_integer(rcx)
    53 00001C80 803911              <1>  cmp byte [%1], %2
    54 00001C83 0F8533030000        <1>  jne L_error_incorrect_type
  2584 00001C89 488B4901                        mov rcx, qword [rcx + 1]
  2585 00001C8D 4883F900                        cmp rcx, 0
  2586 00001C91 0F8CBA010000                    jl L_error_integer_range
  2587 00001C97 488B5528                        mov rdx, PARAM(1)
  2588 00001C9B 488D3CCD09000000                lea rdi, [1 + 8 + 8 * rcx]
  2589 00001CA3 E812E6FFFF                      call malloc
  2590 00001CA8 C60022                          mov byte [rax], T_vector
  2591 00001CAB 48894801                        mov qword [rax + 1], rcx
  2592 00001CAF 41B800000000                    mov r8, 0
  2593                                  .L0:
  2594 00001CB5 4939C8                          cmp r8, rcx
  2595 00001CB8 740A                            je .L1
  2596 00001CBA 4A8954C009                      mov qword [rax + 1 + 8 + 8 * r8], rdx
  2597 00001CBF 49FFC0                          inc r8
  2598 00001CC2 EBF1                            jmp .L0
  2599                                  .L1:
  2600 00001CC4 C9                              leave
  2601 00001CC5 C22000                          ret AND_KILL_FRAME(2)
  2602                                          
  2603                                  L_code_ptr_make_string:
  2604 00001CC8 C8000000                        enter 0, 0
  2605 00001CCC 48837D1802                      cmp COUNT, 2
  2606 00001CD1 0F8546020000                    jne L_error_arg_count_2
  2607 00001CD7 488B4D20                        mov rcx, PARAM(0)
  2608                                          assert_integer(rcx)
    53 00001CDB 803911              <1>  cmp byte [%1], %2
    54 00001CDE 0F85D8020000        <1>  jne L_error_incorrect_type
  2609 00001CE4 488B4901                        mov rcx, qword [rcx + 1]
  2610 00001CE8 4883F900                        cmp rcx, 0
  2611 00001CEC 0F8C5F010000                    jl L_error_integer_range
  2612 00001CF2 488B5528                        mov rdx, PARAM(1)
  2613                                          assert_char(rdx)
    53 00001CF6 803A02              <1>  cmp byte [%1], %2
    54 00001CF9 0F85BD020000        <1>  jne L_error_incorrect_type
  2614 00001CFF 8A5201                          mov dl, byte [rdx + 1]
  2615 00001D02 488D7909                        lea rdi, [1 + 8 + 1 * rcx]
  2616 00001D06 E8AFE5FFFF                      call malloc
  2617 00001D0B C60003                          mov byte [rax], T_string
  2618 00001D0E 48894801                        mov qword [rax + 1], rcx
  2619 00001D12 41B800000000                    mov r8, 0
  2620                                  .L0:
  2621 00001D18 4939C8                          cmp r8, rcx
  2622 00001D1B 740A                            je .L1
  2623 00001D1D 4188540009                      mov byte [rax + 1 + 8 + 1 * r8], dl
  2624 00001D22 49FFC0                          inc r8
  2625 00001D25 EBF1                            jmp .L0
  2626                                  .L1:
  2627 00001D27 C9                              leave
  2628 00001D28 C22000                          ret AND_KILL_FRAME(2)
  2629                                  
  2630                                  L_code_ptr_numerator:
  2631 00001D2B C8000000                        enter 0, 0
  2632 00001D2F 48837D1801                      cmp COUNT, 1
  2633 00001D34 0F85AE010000                    jne L_error_arg_count_1
  2634 00001D3A 488B4520                        mov rax, PARAM(0)
  2635                                          assert_fraction(rax)
    53 00001D3E 803812              <1>  cmp byte [%1], %2
    54 00001D41 0F8575020000        <1>  jne L_error_incorrect_type
  2636 00001D47 488B7801                        mov rdi, qword [rax + 1]
  2637 00001D4B E8E7000000                      call make_integer
  2638 00001D50 C9                              leave
  2639 00001D51 C21800                          ret AND_KILL_FRAME(1)
  2640                                          
  2641                                  L_code_ptr_denominator:
  2642 00001D54 C8000000                        enter 0, 0
  2643 00001D58 48837D1801                      cmp COUNT, 1
  2644 00001D5D 0F8585010000                    jne L_error_arg_count_1
  2645 00001D63 488B4520                        mov rax, PARAM(0)
  2646                                          assert_fraction(rax)
    53 00001D67 803812              <1>  cmp byte [%1], %2
    54 00001D6A 0F854C020000        <1>  jne L_error_incorrect_type
  2647 00001D70 488B7809                        mov rdi, qword [rax + 1 + 8]
  2648 00001D74 E8BE000000                      call make_integer
  2649 00001D79 C9                              leave
  2650 00001D7A C21800                          ret AND_KILL_FRAME(1)
  2651                                  
  2652                                  L_code_ptr_is_eq:
  2653 00001D7D C8000000                	enter 0, 0
  2654 00001D81 48837D1802              	cmp COUNT, 2
  2655 00001D86 0F8591010000            	jne L_error_arg_count_2
  2656 00001D8C 488B7D20                	mov rdi, PARAM(0)
  2657 00001D90 488B7528                	mov rsi, PARAM(1)
  2658 00001D94 4839F7                  	cmp rdi, rsi
  2659 00001D97 746C                    	je .L_eq_true
  2660 00001D99 8A17                    	mov dl, byte [rdi]
  2661 00001D9B 3A16                    	cmp dl, byte [rsi]
  2662 00001D9D 7572                    	jne .L_eq_false
  2663 00001D9F 80FA02                  	cmp dl, T_char
  2664 00001DA2 7459                    	je .L_char
  2665 00001DA4 80FA41                  	cmp dl, T_interned_symbol
  2666 00001DA7 7440                    	je .L_interned_symbol
  2667 00001DA9 80FA42                          cmp dl, T_uninterned_symbol
  2668 00001DAC 7443                            je .L_uninterned_symbol
  2669 00001DAE 80FA13                  	cmp dl, T_real
  2670 00001DB1 742E                    	je .L_real
  2671 00001DB3 80FA12                  	cmp dl, T_fraction
  2672 00001DB6 7413                    	je .L_fraction
  2673 00001DB8 80FA11                          cmp dl, T_integer
  2674 00001DBB 7402                            je .L_integer
  2675 00001DBD EB52                    	jmp .L_eq_false
  2676                                  .L_integer:
  2677 00001DBF 488B4601                        mov rax, qword [rsi + 1]
  2678 00001DC3 483B4701                        cmp rax, qword [rdi + 1]
  2679 00001DC7 7548                            jne .L_eq_false
  2680 00001DC9 EB3A                            jmp .L_eq_true
  2681                                  .L_fraction:
  2682 00001DCB 488B4601                	mov rax, qword [rsi + 1]
  2683 00001DCF 483B4701                	cmp rax, qword [rdi + 1]
  2684 00001DD3 753C                    	jne .L_eq_false
  2685 00001DD5 488B4609                	mov rax, qword [rsi + 1 + 8]
  2686 00001DD9 483B4709                	cmp rax, qword [rdi + 1 + 8]
  2687 00001DDD 7532                    	jne .L_eq_false
  2688 00001DDF EB24                    	jmp .L_eq_true
  2689                                  .L_real:
  2690 00001DE1 488B4601                	mov rax, qword [rsi + 1]
  2691 00001DE5 483B4701                	cmp rax, qword [rdi + 1]
  2692                                  .L_interned_symbol:
  2693                                  	; never reached, because interned_symbols are static!
  2694                                  	; but I'm keeping it in case, I'll ever change
  2695                                  	; the implementation
  2696 00001DE9 488B4601                	mov rax, qword [rsi + 1]
  2697 00001DED 483B4701                	cmp rax, qword [rdi + 1]
  2698                                  .L_uninterned_symbol:
  2699 00001DF1 4C8B4701                        mov r8, qword [rdi + 1]
  2700 00001DF5 4C3B4601                        cmp r8, qword [rsi + 1]
  2701 00001DF9 7516                            jne .L_eq_false
  2702 00001DFB EB08                            jmp .L_eq_true
  2703                                  .L_char:
  2704 00001DFD 8A5E01                  	mov bl, byte [rsi + 1]
  2705 00001E00 3A5F01                  	cmp bl, byte [rdi + 1]
  2706 00001E03 750C                    	jne .L_eq_false
  2707                                  .L_eq_true:
  2708 00001E05 48B8-                   	mov rax, sob_boolean_true
  2708 00001E07 [0300000000000000] 
  2709 00001E0F EB0A                    	jmp .L_eq_exit
  2710                                  .L_eq_false:
  2711 00001E11 48B8-                   	mov rax, sob_boolean_false
  2711 00001E13 [0200000000000000] 
  2712                                  .L_eq_exit:
  2713 00001E1B C9                      	leave
  2714 00001E1C C22000                  	ret AND_KILL_FRAME(2)
  2715                                  
  2716                                  make_real:
  2717 00001E1F C8000000                        enter 0, 0
  2718 00001E23 BF09000000                      mov rdi, (1 + 8)
  2719 00001E28 E88DE4FFFF                      call malloc
  2720 00001E2D C60013                          mov byte [rax], T_real
  2721 00001E30 F20F114001                      movsd qword [rax + 1], xmm0
  2722 00001E35 C9                              leave 
  2723 00001E36 C3                              ret
  2724                                          
  2725                                  make_integer:
  2726 00001E37 C8000000                        enter 0, 0
  2727 00001E3B 4889FE                          mov rsi, rdi
  2728 00001E3E BF09000000                      mov rdi, (1 + 8)
  2729 00001E43 E872E4FFFF                      call malloc
  2730 00001E48 C60011                          mov byte [rax], T_integer
  2731 00001E4B 48897001                        mov qword [rax + 1], rsi
  2732 00001E4F C9                              leave
  2733 00001E50 C3                              ret
  2734                                          
  2735                                  L_error_integer_range:
  2736 00001E51 488B3C25[00000000]              mov rdi, qword [stderr]
  2737 00001E59 48BE-                           mov rsi, fmt_integer_range
  2737 00001E5B [FE09000000000000] 
  2738 00001E63 B800000000                      mov rax, 0
  2739                                          ENTER
    44 00001E68 C8000000            <1>  enter 0, 0
    45 00001E6C 4883E4F0            <1>  and rsp, ~15
  2740 00001E70 E8(00000000)                    call fprintf
  2741                                          LEAVE
    49 00001E75 C9                  <1>  leave
  2742 00001E76 48C7C0FBFFFFFF                  mov rax, -5
  2743 00001E7D E8(00000000)                    call exit
  2744                                  
  2745                                  L_error_arg_negative:
  2746 00001E82 488B3C25[00000000]              mov rdi, qword [stderr]
  2747 00001E8A 48BE-                           mov rsi, fmt_arg_negative
  2747 00001E8C [D608000000000000] 
  2748 00001E94 B800000000                      mov rax, 0
  2749                                          ENTER
    44 00001E99 C8000000            <1>  enter 0, 0
    45 00001E9D 4883E4F0            <1>  and rsp, ~15
  2750 00001EA1 E8(00000000)                    call fprintf
  2751                                          LEAVE
    49 00001EA6 C9                  <1>  leave
  2752 00001EA7 48C7C0FDFFFFFF                  mov rax, -3
  2753 00001EAE E8(00000000)                    call exit
  2754                                  
  2755                                  L_error_arg_count_0:
  2756 00001EB3 488B3C25[00000000]              mov rdi, qword [stderr]
  2757 00001EBB 48BE-                           mov rsi, fmt_arg_count_0
  2757 00001EBD [FC08000000000000] 
  2758 00001EC5 488B5518                        mov rdx, COUNT
  2759 00001EC9 B800000000                      mov rax, 0
  2760                                          ENTER
    44 00001ECE C8000000            <1>  enter 0, 0
    45 00001ED2 4883E4F0            <1>  and rsp, ~15
  2761 00001ED6 E8(00000000)                    call fprintf
  2762                                          LEAVE
    49 00001EDB C9                  <1>  leave
  2763 00001EDC 48C7C0FDFFFFFF                  mov rax, -3
  2764 00001EE3 E8(00000000)                    call exit
  2765                                  
  2766                                  L_error_arg_count_1:
  2767 00001EE8 488B3C25[00000000]              mov rdi, qword [stderr]
  2768 00001EF0 48BE-                           mov rsi, fmt_arg_count_1
  2768 00001EF2 [2409000000000000] 
  2769 00001EFA 488B5518                        mov rdx, COUNT
  2770 00001EFE B800000000                      mov rax, 0
  2771                                          ENTER
    44 00001F03 C8000000            <1>  enter 0, 0
    45 00001F07 4883E4F0            <1>  and rsp, ~15
  2772 00001F0B E8(00000000)                    call fprintf
  2773                                          LEAVE
    49 00001F10 C9                  <1>  leave
  2774 00001F11 48C7C0FDFFFFFF                  mov rax, -3
  2775 00001F18 E8(00000000)                    call exit
  2776                                  
  2777                                  L_error_arg_count_2:
  2778 00001F1D 488B3C25[00000000]              mov rdi, qword [stderr]
  2779 00001F25 48BE-                           mov rsi, fmt_arg_count_2
  2779 00001F27 [8A09000000000000] 
  2780 00001F2F 488B5518                        mov rdx, COUNT
  2781 00001F33 B800000000                      mov rax, 0
  2782                                          ENTER
    44 00001F38 C8000000            <1>  enter 0, 0
    45 00001F3C 4883E4F0            <1>  and rsp, ~15
  2783 00001F40 E8(00000000)                    call fprintf
  2784                                          LEAVE
    49 00001F45 C9                  <1>  leave
  2785 00001F46 48C7C0FDFFFFFF                  mov rax, -3
  2786 00001F4D E8(00000000)                    call exit
  2787                                  
  2788                                  L_error_arg_count_12:
  2789 00001F52 488B3C25[00000000]              mov rdi, qword [stderr]
  2790 00001F5A 48BE-                           mov rsi, fmt_arg_count_12
  2790 00001F5C [4A09000000000000] 
  2791 00001F64 488B5518                        mov rdx, COUNT
  2792 00001F68 B800000000                      mov rax, 0
  2793                                          ENTER
    44 00001F6D C8000000            <1>  enter 0, 0
    45 00001F71 4883E4F0            <1>  and rsp, ~15
  2794 00001F75 E8(00000000)                    call fprintf
  2795                                          LEAVE
    49 00001F7A C9                  <1>  leave
  2796 00001F7B 48C7C0FDFFFFFF                  mov rax, -3
  2797 00001F82 E8(00000000)                    call exit
  2798                                  
  2799                                  L_error_arg_count_3:
  2800 00001F87 488B3C25[00000000]              mov rdi, qword [stderr]
  2801 00001F8F 48BE-                           mov rsi, fmt_arg_count_3
  2801 00001F91 [B109000000000000] 
  2802 00001F99 488B5518                        mov rdx, COUNT
  2803 00001F9D B800000000                      mov rax, 0
  2804                                          ENTER
    44 00001FA2 C8000000            <1>  enter 0, 0
    45 00001FA6 4883E4F0            <1>  and rsp, ~15
  2805 00001FAA E8(00000000)                    call fprintf
  2806                                          LEAVE
    49 00001FAF C9                  <1>  leave
  2807 00001FB0 48C7C0FDFFFFFF                  mov rax, -3
  2808 00001FB7 E8(00000000)                    call exit
  2809                                          
  2810                                  L_error_incorrect_type:
  2811 00001FBC 488B3C25[00000000]              mov rdi, qword [stderr]
  2812 00001FC4 48BE-                           mov rsi, fmt_type
  2812 00001FC6 [DA09000000000000] 
  2813 00001FCE B800000000                      mov rax, 0
  2814                                          ENTER
    44 00001FD3 C8000000            <1>  enter 0, 0
    45 00001FD7 4883E4F0            <1>  and rsp, ~15
  2815 00001FDB E8(00000000)                    call fprintf
  2816                                          LEAVE
    49 00001FE0 C9                  <1>  leave
  2817 00001FE1 48C7C0FCFFFFFF                  mov rax, -4
  2818 00001FE8 E8(00000000)                    call exit
  2819                                  
  2820                                  L_error_division_by_zero:
  2821 00001FED 488B3C25[00000000]              mov rdi, qword [stderr]
  2822 00001FF5 48BE-                           mov rsi, fmt_division_by_zero
  2822 00001FF7 [1B0A000000000000] 
  2823 00001FFF B800000000                      mov rax, 0
  2824                                          ENTER
    44 00002004 C8000000            <1>  enter 0, 0
    45 00002008 4883E4F0            <1>  and rsp, ~15
  2825 0000200C E8(00000000)                    call fprintf
  2826                                          LEAVE
    49 00002011 C9                  <1>  leave
  2827 00002012 48C7C0F8FFFFFF                  mov rax, -8
  2828 00002019 E8(00000000)                    call exit
  2829                                  
  2830                                  section .data
  2831                                  gensym_count:
  2832 000008CB 0000000000000000                dq 0
  2833                                  fmt_char:
  2834 000008D3 256300                          db `%c\0`
  2835                                  fmt_arg_negative:
  2836 000008D6 212121205468652061-             db `!!! The argument cannot be negative.\n\0`
  2836 000008DF 7267756D656E742063-
  2836 000008E8 616E6E6F7420626520-
  2836 000008F1 6E656761746976652E-
  2836 000008FA 0A00               
  2837                                  fmt_arg_count_0:
  2838 000008FC 212121204578706563-             db `!!! Expecting zero arguments. Found %d\n\0`
  2838 00000905 74696E67207A65726F-
  2838 0000090E 20617267756D656E74-
  2838 00000917 732E20466F756E6420-
  2838 00000920 25640A00           
  2839                                  fmt_arg_count_1:
  2840 00000924 212121204578706563-             db `!!! Expecting one argument. Found %d\n\0`
  2840 0000092D 74696E67206F6E6520-
  2840 00000936 617267756D656E742E-
  2840 0000093F 20466F756E64202564-
  2840 00000948 0A00               
  2841                                  fmt_arg_count_12:
  2842 0000094A 212121204578706563-             db `!!! Expecting one required and one optional argument. Found %d\n\0`
  2842 00000953 74696E67206F6E6520-
  2842 0000095C 726571756972656420-
  2842 00000965 616E64206F6E65206F-
  2842 0000096E 7074696F6E616C2061-
  2842 00000977 7267756D656E742E20-
  2842 00000980 466F756E642025640A-
  2842 00000989 00                 
  2843                                  fmt_arg_count_2:
  2844 0000098A 212121204578706563-             db `!!! Expecting two arguments. Found %d\n\0`
  2844 00000993 74696E672074776F20-
  2844 0000099C 617267756D656E7473-
  2844 000009A5 2E20466F756E642025-
  2844 000009AE 640A00             
  2845                                  fmt_arg_count_3:
  2846 000009B1 212121204578706563-             db `!!! Expecting three arguments. Found %d\n\0`
  2846 000009BA 74696E672074687265-
  2846 000009C3 6520617267756D656E-
  2846 000009CC 74732E20466F756E64-
  2846 000009D5 2025640A00         
  2847                                  fmt_type:
  2848 000009DA 2121212046756E6374-             db `!!! Function passed incorrect type\n\0`
  2848 000009E3 696F6E207061737365-
  2848 000009EC 6420696E636F727265-
  2848 000009F5 637420747970650A00 
  2849                                  fmt_integer_range:
  2850 000009FE 21212120496E636F72-             db `!!! Incorrect integer range\n\0`
  2850 00000A07 7265637420696E7465-
  2850 00000A10 6765722072616E6765-
  2850 00000A19 0A00               
  2851                                  fmt_division_by_zero:
  2852 00000A1B 212121204469766973-             db `!!! Division by zero\n\0`
  2852 00000A24 696F6E206279207A65-
  2852 00000A2D 726F0A00           
  2853                                  fmt_scheme_error_part_1:
  2854 00000A31 0A2121212054686520-             db `\n!!! The procedure \0`
  2854 00000A3A 70726F636564757265-
  2854 00000A43 2000               
  2855                                  fmt_scheme_error_part_2:
  2856 00000A45 2061736B656420746F-             db ` asked to terminate the program\n`
  2856 00000A4E 207465726D696E6174-
  2856 00000A57 65207468652070726F-
  2856 00000A60 6772616D0A         
  2857 00000A65 202020207769746820-             db `    with the following message:\n\n\0`
  2857 00000A6E 74686520666F6C6C6F-
  2857 00000A77 77696E67206D657373-
  2857 00000A80 6167653A0A0A00     
  2858                                  fmt_scheme_error_part_3:
  2859 00000A87 0A0A476F6F64627965-             db `\n\nGoodbye!\n\n\0`
  2859 00000A90 210A0A00           
