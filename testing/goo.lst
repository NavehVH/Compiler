     1                                  ;;; prologue-1.asm
     2                                  ;;; The first part of the standard prologue for compiled programs
     3                                  ;;;
     4                                  ;;; Programmer: Mayer Goldberg, 2023
     5                                  
     6                                  %define T_void 				0
     7                                  %define T_nil 				1
     8                                  %define T_char 				2
     9                                  %define T_string 			3
    10                                  %define T_closure 			4
    11                                  %define T_undefined			5
    12                                  %define T_boolean 			8
    13                                  %define T_boolean_false 		(T_boolean | 1)
    14                                  %define T_boolean_true 			(T_boolean | 2)
    15                                  %define T_number 			16
    16                                  %define T_integer			(T_number | 1)
    17                                  %define T_fraction 			(T_number | 2)
    18                                  %define T_real 				(T_number | 3)
    19                                  %define T_collection 			32
    20                                  %define T_pair 				(T_collection | 1)
    21                                  %define T_vector 			(T_collection | 2)
    22                                  %define T_symbol 			64
    23                                  %define T_interned_symbol		(T_symbol | 1)
    24                                  %define T_uninterned_symbol		(T_symbol | 2)
    25                                  
    26                                  %define SOB_CHAR_VALUE(reg) 		byte [reg + 1]
    27                                  %define SOB_PAIR_CAR(reg)		qword [reg + 1]
    28                                  %define SOB_PAIR_CDR(reg)		qword [reg + 1 + 8]
    29                                  %define SOB_STRING_LENGTH(reg)		qword [reg + 1]
    30                                  %define SOB_VECTOR_LENGTH(reg)		qword [reg + 1]
    31                                  %define SOB_CLOSURE_ENV(reg)		qword [reg + 1]
    32                                  %define SOB_CLOSURE_CODE(reg)		qword [reg + 1 + 8]
    33                                  
    34                                  %define OLD_RBP 			qword [rbp]
    35                                  %define RET_ADDR 			qword [rbp + 8 * 1]
    36                                  %define ENV 				qword [rbp + 8 * 2]
    37                                  %define COUNT 				qword [rbp + 8 * 3]
    38                                  %define PARAM(n) 			qword [rbp + 8 * (4 + n)]
    39                                  %define AND_KILL_FRAME(n)		(8 * (2 + n))
    40                                  
    41                                  %define MAGIC				496351
    42                                  
    43                                  %macro ENTER 0
    44                                  	enter 0, 0
    45                                  	and rsp, ~15
    46                                  %endmacro
    47                                  
    48                                  %macro LEAVE 0
    49                                  	leave
    50                                  %endmacro
    51                                  
    52                                  %macro assert_type 2
    53                                          cmp byte [%1], %2
    54                                          jne L_error_incorrect_type
    55                                  %endmacro
    56                                  
    57                                  %define assert_void(reg)		assert_type reg, T_void
    58                                  %define assert_nil(reg)			assert_type reg, T_nil
    59                                  %define assert_char(reg)		assert_type reg, T_char
    60                                  %define assert_string(reg)		assert_type reg, T_string
    61                                  %define assert_symbol(reg)		assert_type reg, T_symbol
    62                                  %define assert_interned_symbol(reg)	assert_type reg, T_interned_symbol
    63                                  %define assert_uninterned_symbol(reg)	assert_type reg, T_uninterned_symbol
    64                                  %define assert_closure(reg)		assert_type reg, T_closure
    65                                  %define assert_boolean(reg)		assert_type reg, T_boolean
    66                                  %define assert_integer(reg)		assert_type reg, T_integer
    67                                  %define assert_fraction(reg)		assert_type reg, T_fraction
    68                                  %define assert_real(reg)		assert_type reg, T_real
    69                                  %define assert_pair(reg)		assert_type reg, T_pair
    70                                  %define assert_vector(reg)		assert_type reg, T_vector
    71                                  
    72                                  %define sob_void			(L_constants + 0)
    73                                  %define sob_nil				(L_constants + 1)
    74                                  %define sob_boolean_false		(L_constants + 2)
    75                                  %define sob_boolean_true		(L_constants + 3)
    76                                  %define sob_char_nul			(L_constants + 4)
    77                                  
    78                                  %define bytes(n)			(n)
    79                                  %define kbytes(n) 			(bytes(n) << 10)
    80                                  %define mbytes(n) 			(kbytes(n) << 10)
    81                                  %define gbytes(n) 			(mbytes(n) << 10)
    82                                  
    83                                  section .data
    84                                  L_constants:
    85                                  	; L_constants + 0:
    86 00000000 00                      	db T_void
    87                                  	; L_constants + 1:
    88 00000001 01                      	db T_nil
    89                                  	; L_constants + 2:
    90 00000002 09                      	db T_boolean_false
    91                                  	; L_constants + 3:
    92 00000003 0A                      	db T_boolean_true
    93                                  	; L_constants + 4:
    94 00000004 0200                    	db T_char, 0x00	; #\nul
    95                                  	; L_constants + 6:
    96 00000006 03                      	db T_string	; "null?"
    97 00000007 0500000000000000        	dq 5
    98 0000000F 6E756C6C3F              	db 0x6E, 0x75, 0x6C, 0x6C, 0x3F
    99                                  	; L_constants + 20:
   100 00000014 03                      	db T_string	; "pair?"
   101 00000015 0500000000000000        	dq 5
   102 0000001D 706169723F              	db 0x70, 0x61, 0x69, 0x72, 0x3F
   103                                  	; L_constants + 34:
   104 00000022 03                      	db T_string	; "void?"
   105 00000023 0500000000000000        	dq 5
   106 0000002B 766F69643F              	db 0x76, 0x6F, 0x69, 0x64, 0x3F
   107                                  	; L_constants + 48:
   108 00000030 03                      	db T_string	; "char?"
   109 00000031 0500000000000000        	dq 5
   110 00000039 636861723F              	db 0x63, 0x68, 0x61, 0x72, 0x3F
   111                                  	; L_constants + 62:
   112 0000003E 03                      	db T_string	; "string?"
   113 0000003F 0700000000000000        	dq 7
   114 00000047 737472696E673F          	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x3F
   115                                  	; L_constants + 78:
   116 0000004E 03                      	db T_string	; "interned-symbol?"
   117 0000004F 1000000000000000        	dq 16
   118 00000057 696E7465726E6564        	db 0x69, 0x6E, 0x74, 0x65, 0x72, 0x6E, 0x65, 0x64
   119 0000005F 2D73796D626F6C3F        	db 0x2D, 0x73, 0x79, 0x6D, 0x62, 0x6F, 0x6C, 0x3F
   120                                  	; L_constants + 103:
   121 00000067 03                      	db T_string	; "vector?"
   122 00000068 0700000000000000        	dq 7
   123 00000070 766563746F723F          	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x3F
   124                                  	; L_constants + 119:
   125 00000077 03                      	db T_string	; "procedure?"
   126 00000078 0A00000000000000        	dq 10
   127 00000080 70726F6365647572        	db 0x70, 0x72, 0x6F, 0x63, 0x65, 0x64, 0x75, 0x72
   128 00000088 653F                    	db 0x65, 0x3F
   129                                  	; L_constants + 138:
   130 0000008A 03                      	db T_string	; "real?"
   131 0000008B 0500000000000000        	dq 5
   132 00000093 7265616C3F              	db 0x72, 0x65, 0x61, 0x6C, 0x3F
   133                                  	; L_constants + 152:
   134 00000098 03                      	db T_string	; "fraction?"
   135 00000099 0900000000000000        	dq 9
   136 000000A1 6672616374696F6E        	db 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E
   137 000000A9 3F                      	db 0x3F
   138                                  	; L_constants + 170:
   139 000000AA 03                      	db T_string	; "boolean?"
   140 000000AB 0800000000000000        	dq 8
   141 000000B3 626F6F6C65616E3F        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x3F
   142                                  	; L_constants + 187:
   143 000000BB 03                      	db T_string	; "number?"
   144 000000BC 0700000000000000        	dq 7
   145 000000C4 6E756D6265723F          	db 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72, 0x3F
   146                                  	; L_constants + 203:
   147 000000CB 03                      	db T_string	; "collection?"
   148 000000CC 0B00000000000000        	dq 11
   149 000000D4 636F6C6C65637469        	db 0x63, 0x6F, 0x6C, 0x6C, 0x65, 0x63, 0x74, 0x69
   150 000000DC 6F6E3F                  	db 0x6F, 0x6E, 0x3F
   151                                  	; L_constants + 223:
   152 000000DF 03                      	db T_string	; "cons"
   153 000000E0 0400000000000000        	dq 4
   154 000000E8 636F6E73                	db 0x63, 0x6F, 0x6E, 0x73
   155                                  	; L_constants + 236:
   156 000000EC 03                      	db T_string	; "display-sexpr"
   157 000000ED 0D00000000000000        	dq 13
   158 000000F5 646973706C61792D        	db 0x64, 0x69, 0x73, 0x70, 0x6C, 0x61, 0x79, 0x2D
   159 000000FD 7365787072              	db 0x73, 0x65, 0x78, 0x70, 0x72
   160                                  	; L_constants + 258:
   161 00000102 03                      	db T_string	; "write-char"
   162 00000103 0A00000000000000        	dq 10
   163 0000010B 77726974652D6368        	db 0x77, 0x72, 0x69, 0x74, 0x65, 0x2D, 0x63, 0x68
   164 00000113 6172                    	db 0x61, 0x72
   165                                  	; L_constants + 277:
   166 00000115 03                      	db T_string	; "car"
   167 00000116 0300000000000000        	dq 3
   168 0000011E 636172                  	db 0x63, 0x61, 0x72
   169                                  	; L_constants + 289:
   170 00000121 03                      	db T_string	; "cdr"
   171 00000122 0300000000000000        	dq 3
   172 0000012A 636472                  	db 0x63, 0x64, 0x72
   173                                  	; L_constants + 301:
   174 0000012D 03                      	db T_string	; "string-length"
   175 0000012E 0D00000000000000        	dq 13
   176 00000136 737472696E672D6C        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x6C
   177 0000013E 656E677468              	db 0x65, 0x6E, 0x67, 0x74, 0x68
   178                                  	; L_constants + 323:
   179 00000143 03                      	db T_string	; "vector-length"
   180 00000144 0D00000000000000        	dq 13
   181 0000014C 766563746F722D6C        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x6C
   182 00000154 656E677468              	db 0x65, 0x6E, 0x67, 0x74, 0x68
   183                                  	; L_constants + 345:
   184 00000159 03                      	db T_string	; "real->integer"
   185 0000015A 0D00000000000000        	dq 13
   186 00000162 7265616C2D3E696E        	db 0x72, 0x65, 0x61, 0x6C, 0x2D, 0x3E, 0x69, 0x6E
   187 0000016A 7465676572              	db 0x74, 0x65, 0x67, 0x65, 0x72
   188                                  	; L_constants + 367:
   189 0000016F 03                      	db T_string	; "exit"
   190 00000170 0400000000000000        	dq 4
   191 00000178 65786974                	db 0x65, 0x78, 0x69, 0x74
   192                                  	; L_constants + 380:
   193 0000017C 03                      	db T_string	; "integer->real"
   194 0000017D 0D00000000000000        	dq 13
   195 00000185 696E74656765722D        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x2D
   196 0000018D 3E7265616C              	db 0x3E, 0x72, 0x65, 0x61, 0x6C
   197                                  	; L_constants + 402:
   198 00000192 03                      	db T_string	; "fraction->real"
   199 00000193 0E00000000000000        	dq 14
   200 0000019B 6672616374696F6E        	db 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E
   201 000001A3 2D3E7265616C            	db 0x2D, 0x3E, 0x72, 0x65, 0x61, 0x6C
   202                                  	; L_constants + 425:
   203 000001A9 03                      	db T_string	; "char->integer"
   204 000001AA 0D00000000000000        	dq 13
   205 000001B2 636861722D3E696E        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x3E, 0x69, 0x6E
   206 000001BA 7465676572              	db 0x74, 0x65, 0x67, 0x65, 0x72
   207                                  	; L_constants + 447:
   208 000001BF 03                      	db T_string	; "integer->char"
   209 000001C0 0D00000000000000        	dq 13
   210 000001C8 696E74656765722D        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x2D
   211 000001D0 3E63686172              	db 0x3E, 0x63, 0x68, 0x61, 0x72
   212                                  	; L_constants + 469:
   213 000001D5 03                      	db T_string	; "trng"
   214 000001D6 0400000000000000        	dq 4
   215 000001DE 74726E67                	db 0x74, 0x72, 0x6E, 0x67
   216                                  	; L_constants + 482:
   217 000001E2 03                      	db T_string	; "zero?"
   218 000001E3 0500000000000000        	dq 5
   219 000001EB 7A65726F3F              	db 0x7A, 0x65, 0x72, 0x6F, 0x3F
   220                                  	; L_constants + 496:
   221 000001F0 03                      	db T_string	; "integer?"
   222 000001F1 0800000000000000        	dq 8
   223 000001F9 696E74656765723F        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x3F
   224                                  	; L_constants + 513:
   225 00000201 03                      	db T_string	; "__bin-apply"
   226 00000202 0B00000000000000        	dq 11
   227 0000020A 5F5F62696E2D6170        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x70
   228 00000212 706C79                  	db 0x70, 0x6C, 0x79
   229                                  	; L_constants + 533:
   230 00000215 03                      	db T_string	; "__bin-add-rr"
   231 00000216 0C00000000000000        	dq 12
   232 0000021E 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   233 00000226 642D7272                	db 0x64, 0x2D, 0x72, 0x72
   234                                  	; L_constants + 554:
   235 0000022A 03                      	db T_string	; "__bin-sub-rr"
   236 0000022B 0C00000000000000        	dq 12
   237 00000233 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   238 0000023B 622D7272                	db 0x62, 0x2D, 0x72, 0x72
   239                                  	; L_constants + 575:
   240 0000023F 03                      	db T_string	; "__bin-mul-rr"
   241 00000240 0C00000000000000        	dq 12
   242 00000248 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   243 00000250 6C2D7272                	db 0x6C, 0x2D, 0x72, 0x72
   244                                  	; L_constants + 596:
   245 00000254 03                      	db T_string	; "__bin-div-rr"
   246 00000255 0C00000000000000        	dq 12
   247 0000025D 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   248 00000265 762D7272                	db 0x76, 0x2D, 0x72, 0x72
   249                                  	; L_constants + 617:
   250 00000269 03                      	db T_string	; "__bin-add-qq"
   251 0000026A 0C00000000000000        	dq 12
   252 00000272 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   253 0000027A 642D7171                	db 0x64, 0x2D, 0x71, 0x71
   254                                  	; L_constants + 638:
   255 0000027E 03                      	db T_string	; "__bin-sub-qq"
   256 0000027F 0C00000000000000        	dq 12
   257 00000287 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   258 0000028F 622D7171                	db 0x62, 0x2D, 0x71, 0x71
   259                                  	; L_constants + 659:
   260 00000293 03                      	db T_string	; "__bin-mul-qq"
   261 00000294 0C00000000000000        	dq 12
   262 0000029C 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   263 000002A4 6C2D7171                	db 0x6C, 0x2D, 0x71, 0x71
   264                                  	; L_constants + 680:
   265 000002A8 03                      	db T_string	; "__bin-div-qq"
   266 000002A9 0C00000000000000        	dq 12
   267 000002B1 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   268 000002B9 762D7171                	db 0x76, 0x2D, 0x71, 0x71
   269                                  	; L_constants + 701:
   270 000002BD 03                      	db T_string	; "__bin-add-zz"
   271 000002BE 0C00000000000000        	dq 12
   272 000002C6 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   273 000002CE 642D7A7A                	db 0x64, 0x2D, 0x7A, 0x7A
   274                                  	; L_constants + 722:
   275 000002D2 03                      	db T_string	; "__bin-sub-zz"
   276 000002D3 0C00000000000000        	dq 12
   277 000002DB 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   278 000002E3 622D7A7A                	db 0x62, 0x2D, 0x7A, 0x7A
   279                                  	; L_constants + 743:
   280 000002E7 03                      	db T_string	; "__bin-mul-zz"
   281 000002E8 0C00000000000000        	dq 12
   282 000002F0 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   283 000002F8 6C2D7A7A                	db 0x6C, 0x2D, 0x7A, 0x7A
   284                                  	; L_constants + 764:
   285 000002FC 03                      	db T_string	; "__bin-div-zz"
   286 000002FD 0C00000000000000        	dq 12
   287 00000305 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   288 0000030D 762D7A7A                	db 0x76, 0x2D, 0x7A, 0x7A
   289                                  	; L_constants + 785:
   290 00000311 03                      	db T_string	; "error"
   291 00000312 0500000000000000        	dq 5
   292 0000031A 6572726F72              	db 0x65, 0x72, 0x72, 0x6F, 0x72
   293                                  	; L_constants + 799:
   294 0000031F 03                      	db T_string	; "__bin-less-than-rr"
   295 00000320 1200000000000000        	dq 18
   296 00000328 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   297 00000330 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   298 00000338 7272                    	db 0x72, 0x72
   299                                  	; L_constants + 826:
   300 0000033A 03                      	db T_string	; "__bin-less-than-qq"
   301 0000033B 1200000000000000        	dq 18
   302 00000343 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   303 0000034B 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   304 00000353 7171                    	db 0x71, 0x71
   305                                  	; L_constants + 853:
   306 00000355 03                      	db T_string	; "__bin-less-than-zz"
   307 00000356 1200000000000000        	dq 18
   308 0000035E 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   309 00000366 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   310 0000036E 7A7A                    	db 0x7A, 0x7A
   311                                  	; L_constants + 880:
   312 00000370 03                      	db T_string	; "__bin-equal-rr"
   313 00000371 0E00000000000000        	dq 14
   314 00000379 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   315 00000381 75616C2D7272            	db 0x75, 0x61, 0x6C, 0x2D, 0x72, 0x72
   316                                  	; L_constants + 903:
   317 00000387 03                      	db T_string	; "__bin-equal-qq"
   318 00000388 0E00000000000000        	dq 14
   319 00000390 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   320 00000398 75616C2D7171            	db 0x75, 0x61, 0x6C, 0x2D, 0x71, 0x71
   321                                  	; L_constants + 926:
   322 0000039E 03                      	db T_string	; "__bin-equal-zz"
   323 0000039F 0E00000000000000        	dq 14
   324 000003A7 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   325 000003AF 75616C2D7A7A            	db 0x75, 0x61, 0x6C, 0x2D, 0x7A, 0x7A
   326                                  	; L_constants + 949:
   327 000003B5 03                      	db T_string	; "quotient"
   328 000003B6 0800000000000000        	dq 8
   329 000003BE 71756F7469656E74        	db 0x71, 0x75, 0x6F, 0x74, 0x69, 0x65, 0x6E, 0x74
   330                                  	; L_constants + 966:
   331 000003C6 03                      	db T_string	; "remainder"
   332 000003C7 0900000000000000        	dq 9
   333 000003CF 72656D61696E6465        	db 0x72, 0x65, 0x6D, 0x61, 0x69, 0x6E, 0x64, 0x65
   334 000003D7 72                      	db 0x72
   335                                  	; L_constants + 984:
   336 000003D8 03                      	db T_string	; "set-car!"
   337 000003D9 0800000000000000        	dq 8
   338 000003E1 7365742D63617221        	db 0x73, 0x65, 0x74, 0x2D, 0x63, 0x61, 0x72, 0x21
   339                                  	; L_constants + 1001:
   340 000003E9 03                      	db T_string	; "set-cdr!"
   341 000003EA 0800000000000000        	dq 8
   342 000003F2 7365742D63647221        	db 0x73, 0x65, 0x74, 0x2D, 0x63, 0x64, 0x72, 0x21
   343                                  	; L_constants + 1018:
   344 000003FA 03                      	db T_string	; "string-ref"
   345 000003FB 0A00000000000000        	dq 10
   346 00000403 737472696E672D72        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x72
   347 0000040B 6566                    	db 0x65, 0x66
   348                                  	; L_constants + 1037:
   349 0000040D 03                      	db T_string	; "vector-ref"
   350 0000040E 0A00000000000000        	dq 10
   351 00000416 766563746F722D72        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x72
   352 0000041E 6566                    	db 0x65, 0x66
   353                                  	; L_constants + 1056:
   354 00000420 03                      	db T_string	; "vector-set!"
   355 00000421 0B00000000000000        	dq 11
   356 00000429 766563746F722D73        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x73
   357 00000431 657421                  	db 0x65, 0x74, 0x21
   358                                  	; L_constants + 1076:
   359 00000434 03                      	db T_string	; "string-set!"
   360 00000435 0B00000000000000        	dq 11
   361 0000043D 737472696E672D73        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x73
   362 00000445 657421                  	db 0x65, 0x74, 0x21
   363                                  	; L_constants + 1096:
   364 00000448 03                      	db T_string	; "make-vector"
   365 00000449 0B00000000000000        	dq 11
   366 00000451 6D616B652D766563        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x76, 0x65, 0x63
   367 00000459 746F72                  	db 0x74, 0x6F, 0x72
   368                                  	; L_constants + 1116:
   369 0000045C 03                      	db T_string	; "make-string"
   370 0000045D 0B00000000000000        	dq 11
   371 00000465 6D616B652D737472        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x73, 0x74, 0x72
   372 0000046D 696E67                  	db 0x69, 0x6E, 0x67
   373                                  	; L_constants + 1136:
   374 00000470 03                      	db T_string	; "numerator"
   375 00000471 0900000000000000        	dq 9
   376 00000479 6E756D657261746F        	db 0x6E, 0x75, 0x6D, 0x65, 0x72, 0x61, 0x74, 0x6F
   377 00000481 72                      	db 0x72
   378                                  	; L_constants + 1154:
   379 00000482 03                      	db T_string	; "denominator"
   380 00000483 0B00000000000000        	dq 11
   381 0000048B 64656E6F6D696E61        	db 0x64, 0x65, 0x6E, 0x6F, 0x6D, 0x69, 0x6E, 0x61
   382 00000493 746F72                  	db 0x74, 0x6F, 0x72
   383                                  	; L_constants + 1174:
   384 00000496 03                      	db T_string	; "eq?"
   385 00000497 0300000000000000        	dq 3
   386 0000049F 65713F                  	db 0x65, 0x71, 0x3F
   387                                  	; L_constants + 1186:
   388 000004A2 03                      	db T_string	; "__integer-to-fracti...
   389 000004A3 1500000000000000        	dq 21
   390 000004AB 5F5F696E74656765        	db 0x5F, 0x5F, 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65
   391 000004B3 722D746F2D667261        	db 0x72, 0x2D, 0x74, 0x6F, 0x2D, 0x66, 0x72, 0x61
   392 000004BB 6374696F6E              	db 0x63, 0x74, 0x69, 0x6F, 0x6E
   393                                  	; L_constants + 1216:
   394 000004C0 03                      	db T_string	; "logand"
   395 000004C1 0600000000000000        	dq 6
   396 000004C9 6C6F67616E64            	db 0x6C, 0x6F, 0x67, 0x61, 0x6E, 0x64
   397                                  	; L_constants + 1231:
   398 000004CF 03                      	db T_string	; "logor"
   399 000004D0 0500000000000000        	dq 5
   400 000004D8 6C6F676F72              	db 0x6C, 0x6F, 0x67, 0x6F, 0x72
   401                                  	; L_constants + 1245:
   402 000004DD 03                      	db T_string	; "logxor"
   403 000004DE 0600000000000000        	dq 6
   404 000004E6 6C6F67786F72            	db 0x6C, 0x6F, 0x67, 0x78, 0x6F, 0x72
   405                                  	; L_constants + 1260:
   406 000004EC 03                      	db T_string	; "lognot"
   407 000004ED 0600000000000000        	dq 6
   408 000004F5 6C6F676E6F74            	db 0x6C, 0x6F, 0x67, 0x6E, 0x6F, 0x74
   409                                  	; L_constants + 1275:
   410 000004FB 03                      	db T_string	; "ash"
   411 000004FC 0300000000000000        	dq 3
   412 00000504 617368                  	db 0x61, 0x73, 0x68
   413                                  	; L_constants + 1287:
   414 00000507 03                      	db T_string	; "symbol?"
   415 00000508 0700000000000000        	dq 7
   416 00000510 73796D626F6C3F          	db 0x73, 0x79, 0x6D, 0x62, 0x6F, 0x6C, 0x3F
   417                                  	; L_constants + 1303:
   418 00000517 03                      	db T_string	; "uninterned-symbol?"
   419 00000518 1200000000000000        	dq 18
   420 00000520 756E696E7465726E        	db 0x75, 0x6E, 0x69, 0x6E, 0x74, 0x65, 0x72, 0x6E
   421 00000528 65642D73796D626F        	db 0x65, 0x64, 0x2D, 0x73, 0x79, 0x6D, 0x62, 0x6F
   422 00000530 6C3F                    	db 0x6C, 0x3F
   423                                  	; L_constants + 1330:
   424 00000532 03                      	db T_string	; "gensym?"
   425 00000533 0700000000000000        	dq 7
   426 0000053B 67656E73796D3F          	db 0x67, 0x65, 0x6E, 0x73, 0x79, 0x6D, 0x3F
   427                                  	; L_constants + 1346:
   428 00000542 03                      	db T_string	; "gensym"
   429 00000543 0600000000000000        	dq 6
   430 0000054B 67656E73796D            	db 0x67, 0x65, 0x6E, 0x73, 0x79, 0x6D
   431                                  	; L_constants + 1361:
   432 00000551 03                      	db T_string	; "frame"
   433 00000552 0500000000000000        	dq 5
   434 0000055A 6672616D65              	db 0x66, 0x72, 0x61, 0x6D, 0x65
   435                                  	; L_constants + 1375:
   436 0000055F 03                      	db T_string	; "break"
   437 00000560 0500000000000000        	dq 5
   438 00000568 627265616B              	db 0x62, 0x72, 0x65, 0x61, 0x6B
   439                                  	; L_constants + 1389:
   440 0000056D 03                      	db T_string	; "boolean-false?"
   441 0000056E 0E00000000000000        	dq 14
   442 00000576 626F6F6C65616E2D        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x2D
   443 0000057E 66616C73653F            	db 0x66, 0x61, 0x6C, 0x73, 0x65, 0x3F
   444                                  	; L_constants + 1412:
   445 00000584 03                      	db T_string	; "boolean-true?"
   446 00000585 0D00000000000000        	dq 13
   447 0000058D 626F6F6C65616E2D        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x2D
   448 00000595 747275653F              	db 0x74, 0x72, 0x75, 0x65, 0x3F
   449                                  	; L_constants + 1434:
   450 0000059A 03                      	db T_string	; "primitive?"
   451 0000059B 0A00000000000000        	dq 10
   452 000005A3 7072696D69746976        	db 0x70, 0x72, 0x69, 0x6D, 0x69, 0x74, 0x69, 0x76
   453 000005AB 653F                    	db 0x65, 0x3F
   454                                  	; L_constants + 1453:
   455 000005AD 03                      	db T_string	; "length"
   456 000005AE 0600000000000000        	dq 6
   457 000005B6 6C656E677468            	db 0x6C, 0x65, 0x6E, 0x67, 0x74, 0x68
   458                                  	; L_constants + 1468:
   459 000005BC 03                      	db T_string	; "make-list"
   460 000005BD 0900000000000000        	dq 9
   461 000005C5 6D616B652D6C6973        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x6C, 0x69, 0x73
   462 000005CD 74                      	db 0x74
   463                                  	; L_constants + 1486:
   464 000005CE 03                      	db T_string	; "return"
   465 000005CF 0600000000000000        	dq 6
   466 000005D7 72657475726E            	db 0x72, 0x65, 0x74, 0x75, 0x72, 0x6E
   467                                  	; L_constants + 1501:
   468 000005DD 11                      	db T_integer	; 1
   469 000005DE 0100000000000000        	dq 1
   470                                  	; L_constants + 1510:
   471 000005E6 11                      	db T_integer	; 2
   472 000005E7 0200000000000000        	dq 2
   473                                  
   474                                  
   475                                  extern printf, fprintf, stdout, stderr, fwrite, exit, putchar, getchar
   476                                  global main
   477                                  section .text
   478                                  main:
   479 00000000 C8000000                        enter 0, 0
   480 00000004 6A00                            push 0
   481 00000006 6A00                            push 0
   482 00000008 68[E5000000]                    push Lend
   483 0000000D C8000000                        enter 0, 0
   484                                  
   485                                  	; preparing a non-tail-call
   486 00000011 48B8-                   	mov rax, L_constants + 1510
   486 00000013 [E605000000000000] 
   487 0000001B 50                      	push rax
   488 0000001C 48B8-                   	mov rax, L_constants + 1501
   488 0000001E [DD05000000000000] 
   489 00000026 50                      	push rax
   490 00000027 6A02                    	push 2	; arg count
   491 00000029 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   492 0000002E E81D020000              	call malloc
   493 00000033 50                      	push rax
   494 00000034 BF00000000              	mov rdi, 8 * 0	; new rib
   495 00000039 E812020000              	call malloc
   496 0000003E 50                      	push rax
   497 0000003F BF08000000              	mov rdi, 8 * 1	; extended env
   498 00000044 E807020000              	call malloc
   499 00000049 488B7D10                	mov rdi, ENV
   500 0000004D BE00000000              	mov rsi, 0
   501 00000052 BA01000000              	mov rdx, 1
   502                                  .L_lambda_opt_env_loop_0001:	; ext_env[i + 1] <-- env[i]
   503 00000057 4883FE00                	cmp rsi, 0
   504 0000005B 7410                    	je .L_lambda_opt_env_end_0001
   505 0000005D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
   506 00000061 48890CD0                	mov qword [rax + 8 * rdx], rcx
   507 00000065 48FFC6                  	inc rsi
   508 00000068 48FFC2                  	inc rdx
   509 0000006B EBEA                    	jmp .L_lambda_opt_env_loop_0001
   510                                  .L_lambda_opt_env_end_0001:
   511 0000006D 5B                      	pop rbx
   512 0000006E BE00000000              	mov rsi, 0
   513                                  .L_lambda_opt_params_loop_0001:	; copy params
   514 00000073 4883FE00                	cmp rsi, 0
   515 00000077 740E                    	je .L_lambda_opt_params_end_0001
   516 00000079 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   517 0000007E 488914F3                	mov qword [rbx + 8 * rsi], rdx
   518 00000082 48FFC6                  	inc rsi
   519 00000085 EBEC                    	jmp .L_lambda_opt_params_loop_0001
   520                                  .L_lambda_opt_params_end_0001:
   521 00000087 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   522 0000008A 4889C3                  	mov rbx, rax
   523 0000008D 58                      	pop rax
   524 0000008E C60004                  	mov byte [rax], T_closure
   525 00000091 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   526 00000095 48C74009[9F000000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0001
   527 0000009D EB37                    	jmp .L_lambda_opt_end_0001
   528                                  .L_lambda_opt_code_0001:
   529                                  	; Load number of arguments from stack
   530 0000009F 48837C241802            	cmp qword [rsp + 8 * 3], 2
   531 000000A5 740D                    	je .L_lambda_opt_arity_check_exact_0001	; Jump if arity matches
   532 000000A7 7F1F                    	jg .L_lambda_opt_arity_check_more_0001	; Jump if more arguments passed
   533                                  	; If no match, jump to error
   534 000000A9 FF742418                	push qword [rsp + 8 * 3]	; Push actual argument count
   535 000000AD 6A02                    	push 2
   536 000000AF E969010000              	jmp L_error_incorrect_arity_opt
   537                                  .L_lambda_opt_arity_check_exact_0001:
   538                                  	; Exact match case: Add an empty list for optional arguments
   539 000000B4 4883EC08                	sub rsp, 8 * 1	; Allocate space for the empty list
   540 000000B8 48C70424[01000000]      	mov qword [rsp], sob_nil	; Place the empty list on the stack
   541 000000C0 488344241801            	add qword [rsp + 8 * 3], 1	; Increment the argument count (n)
   542 000000C6 EB02                    	jmp .L_lambda_opt_stack_adjusted_0001
   543                                  .L_lambda_opt_arity_check_more_0001:
   544                                  	; Dummy label for arity_more - not implemented yet
   545 000000C8 EB00                    	jmp .L_lambda_opt_stack_adjusted_0001
   546                                  .L_lambda_opt_stack_adjusted_0001:
   547 000000CA C8000000                	enter 0, 0
   548 000000CE 488B4530                	mov rax, PARAM(2)	; param c
   549 000000D2 C9                      	leave
   550 000000D3 C22000                  	ret AND_KILL_FRAME(2)
   551                                  .L_lambda_opt_end_0001:	; new closure is in rax
   552 000000D6 803804                  	cmp byte [rax], T_closure
   553 000000D9 0F85C8000000            	jne L_error_non_closure
   554 000000DF FF7001                  	push SOB_CLOSURE_ENV(rax)
   555 000000E2 FF5009                  	call SOB_CLOSURE_CODE(rax)
   556                                  Lend:
   557 000000E5 4889C7                  	mov rdi, rax
   558 000000E8 E8B8030000              	call print_sexpr_if_not_void
   559                                  
   560 000000ED 48BF-                           mov rdi, fmt_memory_usage
   560 000000EF [8706000000000000] 
   561 000000F7 488B3425[0D070000]              mov rsi, qword [top_of_memory]
   562 000000FF 4881EE[00000000]                sub rsi, memory
   563 00000106 B800000000                      mov rax, 0
   564                                          ENTER
    44 0000010B C8000000            <1>  enter 0, 0
    45 0000010F 4883E4F0            <1>  and rsp, ~15
   565 00000113 E8(00000000)                    call printf
   566                                          LEAVE
    49 00000118 C9                  <1>  leave
   567 00000119 B800000000                      mov rax, 0
   568 0000011E E8(00000000)                    call exit
   569                                  
   570                                  L_error_fvar_undefined:
   571 00000123 50                              push rax
   572 00000124 488B3C25[00000000]              mov rdi, qword [stderr]  ; destination
   573 0000012C 48BE-                           mov rsi, fmt_undefined_free_var_1
   573 0000012E [EF05000000000000] 
   574 00000136 B800000000                      mov rax, 0
   575                                          ENTER
    44 0000013B C8000000            <1>  enter 0, 0
    45 0000013F 4883E4F0            <1>  and rsp, ~15
   576 00000143 E8(00000000)                    call fprintf
   577                                          LEAVE
    49 00000148 C9                  <1>  leave
   578 00000149 58                              pop rax
   579 0000014A 488B4001                        mov rax, qword [rax + 1] ; string
   580 0000014E 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
   581 00000152 BE01000000                      mov rsi, 1               ; sizeof(char)
   582 00000157 488B5001                        mov rdx, qword [rax + 1] ; string-length
   583 0000015B 488B0C25[00000000]              mov rcx, qword [stderr]  ; destination
   584 00000163 B800000000                      mov rax, 0
   585                                          ENTER
    44 00000168 C8000000            <1>  enter 0, 0
    45 0000016C 4883E4F0            <1>  and rsp, ~15
   586 00000170 E8(00000000)                    call fwrite
   587                                          LEAVE
    49 00000175 C9                  <1>  leave
   588 00000176 488B3C25[00000000]              mov rdi, [stderr]       ; destination
   589 0000017E 48BE-                           mov rsi, fmt_undefined_free_var_2
   589 00000180 [0606000000000000] 
   590 00000188 B800000000                      mov rax, 0
   591                                          ENTER
    44 0000018D C8000000            <1>  enter 0, 0
    45 00000191 4883E4F0            <1>  and rsp, ~15
   592 00000195 E8(00000000)                    call fprintf
   593                                          LEAVE
    49 0000019A C9                  <1>  leave
   594 0000019B 48C7C0F6FFFFFF                  mov rax, -10
   595 000001A2 E8(00000000)                    call exit
   596                                  
   597                                  L_error_non_closure:
   598 000001A7 488B3C25[00000000]              mov rdi, qword [stderr]
   599 000001AF 48BE-                           mov rsi, fmt_non_closure
   599 000001B1 [BD06000000000000] 
   600 000001B9 B800000000                      mov rax, 0
   601                                          ENTER
    44 000001BE C8000000            <1>  enter 0, 0
    45 000001C2 4883E4F0            <1>  and rsp, ~15
   602 000001C6 E8(00000000)                    call fprintf
   603                                          LEAVE
    49 000001CB C9                  <1>  leave
   604 000001CC 48C7C0FEFFFFFF                  mov rax, -2
   605 000001D3 E8(00000000)                    call exit
   606                                  
   607                                  L_error_improper_list:
   608 000001D8 488B3C25[00000000]      	mov rdi, qword [stderr]
   609 000001E0 48BE-                   	mov rsi, fmt_error_improper_list
   609 000001E2 [E506000000000000] 
   610 000001EA B800000000              	mov rax, 0
   611                                          ENTER
    44 000001EF C8000000            <1>  enter 0, 0
    45 000001F3 4883E4F0            <1>  and rsp, ~15
   612 000001F7 E8(00000000)            	call fprintf
   613                                          LEAVE
    49 000001FC C9                  <1>  leave
   614 000001FD 48C7C0F9FFFFFF          	mov rax, -7
   615 00000204 E8(00000000)            	call exit
   616                                  
   617                                  L_error_incorrect_arity_simple:
   618 00000209 488B3C25[00000000]              mov rdi, qword [stderr]
   619 00000211 48BE-                           mov rsi, fmt_incorrect_arity_simple
   619 00000213 [2806000000000000] 
   620 0000021B EB12                            jmp L_error_incorrect_arity_common
   621                                  L_error_incorrect_arity_opt:
   622 0000021D 488B3C25[00000000]              mov rdi, qword [stderr]
   623 00000225 48BE-                           mov rsi, fmt_incorrect_arity_opt
   623 00000227 [5306000000000000] 
   624                                  L_error_incorrect_arity_common:
   625 0000022F 5A                              pop rdx
   626 00000230 59                              pop rcx
   627 00000231 B800000000                      mov rax, 0
   628                                          ENTER
    44 00000236 C8000000            <1>  enter 0, 0
    45 0000023A 4883E4F0            <1>  and rsp, ~15
   629 0000023E E8(00000000)                    call fprintf
   630                                          LEAVE
    49 00000243 C9                  <1>  leave
   631 00000244 48C7C0FAFFFFFF                  mov rax, -6
   632 0000024B E8(00000000)                    call exit
   633                                  
   634                                  section .data
   635                                  fmt_undefined_free_var_1:
   636 000005EF 212121205468652066-             db `!!! The free variable \0`
   636 000005F8 726565207661726961-
   636 00000601 626C652000         
   637                                  fmt_undefined_free_var_2:
   638 00000606 207761732075736564-             db ` was used before it was defined.\n\0`
   638 0000060F 206265666F72652069-
   638 00000618 742077617320646566-
   638 00000621 696E65642E0A00     
   639                                  fmt_incorrect_arity_simple:
   640 00000628 212121204578706563-             db `!!! Expected %ld arguments, but given %ld\n\0`
   640 00000631 74656420256C642061-
   640 0000063A 7267756D656E74732C-
   640 00000643 206275742067697665-
   640 0000064C 6E20256C640A00     
   641                                  fmt_incorrect_arity_opt:
   642 00000653 212121204578706563-             db `!!! Expected at least %ld arguments, but given %ld\n\0`
   642 0000065C 746564206174206C65-
   642 00000665 61737420256C642061-
   642 0000066E 7267756D656E74732C-
   642 00000677 206275742067697665-
   642 00000680 6E20256C640A00     
   643                                  fmt_memory_usage:
   644 00000687 0A2121212055736564-             db `\n!!! Used %ld bytes of dynamically-allocated memory\n\n\0`
   644 00000690 20256C642062797465-
   644 00000699 73206F662064796E61-
   644 000006A2 6D6963616C6C792D61-
   644 000006AB 6C6C6F636174656420-
   644 000006B4 6D656D6F72790A0A00 
   645                                  fmt_non_closure:
   646 000006BD 21212120417474656D-             db `!!! Attempting to apply a non-closure!\n\0`
   646 000006C6 7074696E6720746F20-
   646 000006CF 6170706C792061206E-
   646 000006D8 6F6E2D636C6F737572-
   646 000006E1 65210A00           
   647                                  fmt_error_improper_list:
   648 000006E5 212121205468652061-     	db `!!! The argument is not a proper list!\n\0`
   648 000006EE 7267756D656E742069-
   648 000006F7 73206E6F7420612070-
   648 00000700 726F706572206C6973-
   648 00000709 74210A00           
   649                                  
   650                                  section .bss
   651                                  memory:
   652 00000000 <res 40000000h>         	resb gbytes(1)
   653                                  
   654                                  section .data
   655                                  top_of_memory:
   656 0000070D [0000000000000000]              dq memory
   657                                  
   658                                  section .text
   659                                  malloc:
   660 00000250 488B0425[0D070000]              mov rax, qword [top_of_memory]
   661 00000258 48013C25[0D070000]              add qword [top_of_memory], rdi
   662 00000260 C3                              ret
   663                                  
   664                                  L_code_ptr_return:
   665 00000261 48837C241002            	cmp qword [rsp + 8*2], 2
   666 00000267 0F856F1C0000            	jne L_error_arg_count_2
   667 0000026D 488B4C2418              	mov rcx, qword [rsp + 8*3]
   668                                  	assert_integer(rcx)
    53 00000272 803911              <1>  cmp byte [%1], %2
    54 00000275 0F85001D0000        <1>  jne L_error_incorrect_type
   669 0000027B 488B4901                	mov rcx, qword [rcx + 1]
   670 0000027F 4883F900                	cmp rcx, 0
   671 00000283 0F8C871B0000            	jl L_error_integer_range
   672 00000289 488B442420              	mov rax, qword [rsp + 8*4]
   673                                  .L0:
   674 0000028E 4883F900                        cmp rcx, 0
   675 00000292 7409                            je .L1
   676 00000294 488B6D00                	mov rbp, qword [rbp]
   677 00000298 48FFC9                  	dec rcx
   678 0000029B 7FF1                    	jg .L0
   679                                  .L1:
   680 0000029D 4889EC                  	mov rsp, rbp
   681 000002A0 5D                      	pop rbp
   682 000002A1 5B                              pop rbx
   683 000002A2 488B4C2408                      mov rcx, qword [rsp + 8*1]
   684 000002A7 488D64CC10                      lea rsp, [rsp + 8*rcx + 8*2]
   685 000002AC FFE3                    	jmp rbx
   686                                  
   687                                  L_code_ptr_make_list:
   688 000002AE C8000000                	enter 0, 0
   689 000002B2 48837D1801                      cmp COUNT, 1
   690 000002B7 740C                            je .L0
   691 000002B9 48837D1802                      cmp COUNT, 2
   692 000002BE 7411                            je .L1
   693 000002C0 E94C1C0000                      jmp L_error_arg_count_12
   694                                  .L0:
   695 000002C5 49B9-                           mov r9, sob_void
   695 000002C7 [0000000000000000] 
   696 000002CF EB04                            jmp .L2
   697                                  .L1:
   698 000002D1 4C8B4D28                        mov r9, PARAM(1)
   699                                  .L2:
   700 000002D5 488B4D20                        mov rcx, PARAM(0)
   701                                          assert_integer(rcx)
    53 000002D9 803911              <1>  cmp byte [%1], %2
    54 000002DC 0F85991C0000        <1>  jne L_error_incorrect_type
   702 000002E2 488B4901                        mov rcx, qword [rcx + 1]
   703 000002E6 4883F900                        cmp rcx, 0
   704 000002EA 0F8C511B0000                    jl L_error_arg_negative
   705 000002F0 49B8-                           mov r8, sob_nil
   705 000002F2 [0100000000000000] 
   706                                  .L3:
   707 000002FA 4883F900                        cmp rcx, 0
   708 000002FE 7E1D                            jle .L4
   709 00000300 BF11000000                      mov rdi, 1 + 8 + 8
   710 00000305 E846FFFFFF                      call malloc
   711 0000030A C60021                          mov byte [rax], T_pair
   712 0000030D 4C894801                        mov qword [rax + 1], r9
   713 00000311 4C894009                        mov qword [rax + 1 + 8], r8
   714 00000315 4989C0                          mov r8, rax
   715 00000318 48FFC9                          dec rcx
   716 0000031B EBDD                            jmp .L3
   717                                  .L4:
   718 0000031D 4C89C0                          mov rax, r8
   719 00000320 48837D1802                      cmp COUNT, 2
   720 00000325 7404                            je .L5
   721 00000327 C9                              leave
   722 00000328 C21800                          ret AND_KILL_FRAME(1)
   723                                  .L5:
   724 0000032B C9                      	leave
   725 0000032C C22000                  	ret AND_KILL_FRAME(2)
   726                                  
   727                                  L_code_ptr_is_primitive:
   728 0000032F C8000000                	enter 0, 0
   729 00000333 48837D1801              	cmp COUNT, 1
   730 00000338 0F85691B0000            	jne L_error_arg_count_1
   731 0000033E 488B4520                	mov rax, PARAM(0)
   732                                  	assert_closure(rax)
    53 00000342 803804              <1>  cmp byte [%1], %2
    54 00000345 0F85301C0000        <1>  jne L_error_incorrect_type
   733 0000034B 4883780100              	cmp SOB_CLOSURE_ENV(rax), 0
   734 00000350 750C                    	jne .L_false
   735 00000352 48B8-                   	mov rax, sob_boolean_true
   735 00000354 [0300000000000000] 
   736 0000035C EB0A                    	jmp .L_end
   737                                  .L_false:
   738 0000035E 48B8-                   	mov rax, sob_boolean_false
   738 00000360 [0200000000000000] 
   739                                  .L_end:
   740 00000368 C9                      	leave
   741 00000369 C21800                  	ret AND_KILL_FRAME(1)
   742                                  
   743                                  L_code_ptr_length:
   744 0000036C C8000000                	enter 0, 0
   745 00000370 48837D1801              	cmp COUNT, 1
   746 00000375 0F852C1B0000            	jne L_error_arg_count_1
   747 0000037B 488B5D20                	mov rbx, PARAM(0)
   748 0000037F BF00000000              	mov rdi, 0
   749                                  .L:
   750 00000384 803B01                  	cmp byte [rbx], T_nil
   751 00000387 7412                    	je .L_end
   752                                  	assert_pair(rbx)
    53 00000389 803B21              <1>  cmp byte [%1], %2
    54 0000038C 0F85E91B0000        <1>  jne L_error_incorrect_type
   753 00000392 488B5B09                	mov rbx, SOB_PAIR_CDR(rbx)
   754 00000396 48FFC7                  	inc rdi
   755 00000399 EBE9                    	jmp .L
   756                                  .L_end:
   757 0000039B E8561A0000              	call make_integer
   758 000003A0 C9                      	leave
   759 000003A1 C21800                  	ret AND_KILL_FRAME(1)
   760                                  
   761                                  L_code_ptr_break:
   762 000003A4 48837C241000                    cmp qword [rsp + 8 * 2], 0
   763 000003AA 0F85C21A0000                    jne L_error_arg_count_0
   764 000003B0 CC                              int3
   765 000003B1 48B8-                           mov rax, sob_void
   765 000003B3 [0000000000000000] 
   766 000003BB C21000                          ret AND_KILL_FRAME(0)        
   767                                  
   768                                  L_code_ptr_frame:
   769 000003BE C8000000                        enter 0, 0
   770 000003C2 48837D1800                      cmp COUNT, 0
   771 000003C7 0F85A51A0000                    jne L_error_arg_count_0
   772                                  
   773 000003CD 48BF-                           mov rdi, fmt_frame
   773 000003CF [1507000000000000] 
   774 000003D7 488B7500                        mov rsi, qword [rbp]    ; old rbp
   775 000003DB 488B5608                        mov rdx, qword [rsi + 8*1] ; ret addr
   776 000003DF 488B4E10                        mov rcx, qword [rsi + 8*2] ; lexical environment
   777 000003E3 4C8B4618                        mov r8, qword [rsi + 8*3] ; count
   778 000003E7 4C8D4E20                        lea r9, [rsi + 8*4]       ; address of argument 0
   779 000003EB 6A00                            push 0
   780 000003ED 4151                            push r9
   781 000003EF 4150                            push r8                   ; we'll use it when printing the params
   782 000003F1 B800000000                      mov rax, 0
   783                                          
   784                                          ENTER
    44 000003F6 C8000000            <1>  enter 0, 0
    45 000003FA 4883E4F0            <1>  and rsp, ~15
   785 000003FE E8(00000000)                    call printf
   786                                          LEAVE
    49 00000403 C9                  <1>  leave
   787                                  
   788                                  .L:
   789 00000404 488B0C24                        mov rcx, qword [rsp]
   790 00000408 4883F900                        cmp rcx, 0
   791 0000040C 7467                            je .L_out
   792 0000040E 48BF-                           mov rdi, fmt_frame_param_prefix
   792 00000410 [4E07000000000000] 
   793 00000418 488B742410                      mov rsi, qword [rsp + 8*2]
   794 0000041D B800000000                      mov rax, 0
   795                                          
   796                                          ENTER
    44 00000422 C8000000            <1>  enter 0, 0
    45 00000426 4883E4F0            <1>  and rsp, ~15
   797 0000042A E8(00000000)                    call printf
   798                                          LEAVE
    49 0000042F C9                  <1>  leave
   799                                  
   800 00000430 488B0C24                        mov rcx, qword [rsp]
   801 00000434 48FFC9                          dec rcx
   802 00000437 48890C24                        mov qword [rsp], rcx    ; dec arg count
   803 0000043B 48FF442410                      inc qword [rsp + 8*2]   ; increment index of current arg
   804 00000440 488B7C2408                      mov rdi, qword [rsp + 8*1] ; addr of addr current arg
   805 00000445 4C8D4F08                        lea r9, [rdi + 8]          ; addr of next arg
   806 00000449 4C894C2408                      mov qword [rsp + 8*1], r9  ; backup addr of next arg
   807 0000044E 488B3F                          mov rdi, qword [rdi]       ; addr of current arg
   808 00000451 E87B000000                      call print_sexpr
   809 00000456 48BF-                           mov rdi, fmt_newline
   809 00000458 [7A07000000000000] 
   810 00000460 B800000000                      mov rax, 0
   811                                          ENTER
    44 00000465 C8000000            <1>  enter 0, 0
    45 00000469 4883E4F0            <1>  and rsp, ~15
   812 0000046D E8(00000000)                    call printf
   813                                          LEAVE
    49 00000472 C9                  <1>  leave
   814 00000473 EB8F                            jmp .L
   815                                  .L_out:
   816 00000475 48BF-                           mov rdi, fmt_frame_continue
   816 00000477 [5F07000000000000] 
   817 0000047F B800000000                      mov rax, 0
   818                                          ENTER
    44 00000484 C8000000            <1>  enter 0, 0
    45 00000488 4883E4F0            <1>  and rsp, ~15
   819 0000048C E8(00000000)                    call printf
   820 00000491 E8(00000000)                    call getchar
   821                                          LEAVE
    49 00000496 C9                  <1>  leave
   822                                          
   823 00000497 48B8-                           mov rax, sob_void
   823 00000499 [0000000000000000] 
   824 000004A1 C9                              leave
   825 000004A2 C21000                          ret AND_KILL_FRAME(0)
   826                                          
   827                                  print_sexpr_if_not_void:
   828 000004A5 4881FF[00000000]        	cmp rdi, sob_void
   829 000004AC 7422                    	je .done
   830 000004AE E81E000000              	call print_sexpr
   831 000004B3 48BF-                   	mov rdi, fmt_newline
   831 000004B5 [7A07000000000000] 
   832 000004BD B800000000              	mov rax, 0
   833                                  	ENTER
    44 000004C2 C8000000            <1>  enter 0, 0
    45 000004C6 4883E4F0            <1>  and rsp, ~15
   834 000004CA E8(00000000)            	call printf
   835                                  	LEAVE
    49 000004CF C9                  <1>  leave
   836                                  .done:
   837 000004D0 C3                      	ret
   838                                  
   839                                  section .data
   840                                  fmt_frame:
   841 00000715 524250203D2025703B-             db `RBP = %p; ret addr = %p; lex env = %p; param count = %d\n\0`
   841 0000071E 207265742061646472-
   841 00000727 203D2025703B206C65-
   841 00000730 7820656E76203D2025-
   841 00000739 703B20706172616D20-
   841 00000742 636F756E74203D2025-
   841 0000074B 640A00             
   842                                  fmt_frame_param_prefix:
   843 0000074E 3D3D5B706172616D20-             db `==[param %d]==> \0`
   843 00000757 25645D3D3D3E2000   
   844                                  fmt_frame_continue:
   845 0000075F 486974203C456E7465-             db `Hit <Enter> to continue...\0`
   845 00000768 723E20746F20636F6E-
   845 00000771 74696E75652E2E2E00 
   846                                  fmt_newline:
   847 0000077A 0A00                    	db `\n\0`
   848                                  fmt_void:
   849 0000077C 233C766F69643E00        	db `#<void>\0`
   850                                  fmt_nil:
   851 00000784 282900                  	db `()\0`
   852                                  fmt_boolean_false:
   853 00000787 236600                  	db `#f\0`
   854                                  fmt_boolean_true:
   855 0000078A 237400                  	db `#t\0`
   856                                  fmt_char_backslash:
   857 0000078D 235C5C00                	db `#\\\\\0`
   858                                  fmt_char_dquote:
   859 00000791 235C2200                	db `#\\"\0`
   860                                  fmt_char_simple:
   861 00000795 235C256300              	db `#\\%c\0`
   862                                  fmt_char_null:
   863 0000079A 235C6E756C00            	db `#\\nul\0`
   864                                  fmt_char_bell:
   865 000007A0 235C62656C6C00          	db `#\\bell\0`
   866                                  fmt_char_backspace:
   867 000007A7 235C6261636B737061-     	db `#\\backspace\0`
   867 000007B0 636500             
   868                                  fmt_char_tab:
   869 000007B3 235C74616200            	db `#\\tab\0`
   870                                  fmt_char_newline:
   871 000007B9 235C6E65776C696E65-     	db `#\\newline\0`
   871 000007C2 00                 
   872                                  fmt_char_formfeed:
   873 000007C3 235C7061676500          	db `#\\page\0`
   874                                  fmt_char_return:
   875 000007CA 235C72657475726E00      	db `#\\return\0`
   876                                  fmt_char_escape:
   877 000007D3 235C65736300            	db `#\\esc\0`
   878                                  fmt_char_space:
   879 000007D9 235C737061636500        	db `#\\space\0`
   880                                  fmt_char_hex:
   881 000007E1 235C782530325800        	db `#\\x%02X\0`
   882                                  fmt_gensym:
   883 000007E9 47256C6400                      db `G%ld\0`
   884                                  fmt_closure:
   885 000007EE 233C636C6F73757265-     	db `#<closure at 0x%08X env=0x%08X code=0x%08X>\0`
   885 000007F7 206174203078253038-
   885 00000800 5820656E763D307825-
   885 00000809 30385820636F64653D-
   885 00000812 3078253038583E00   
   886                                  fmt_lparen:
   887 0000081A 2800                    	db `(\0`
   888                                  fmt_dotted_pair:
   889 0000081C 202E2000                	db ` . \0`
   890                                  fmt_rparen:
   891 00000820 2900                    	db `)\0`
   892                                  fmt_space:
   893 00000822 2000                    	db ` \0`
   894                                  fmt_empty_vector:
   895 00000824 23282900                	db `#()\0`
   896                                  fmt_vector:
   897 00000828 232800                  	db `#(\0`
   898                                  fmt_real:
   899 0000082B 256600                  	db `%f\0`
   900                                  fmt_fraction:
   901 0000082E 256C642F256C6400        	db `%ld/%ld\0`
   902                                  fmt_zero:
   903 00000836 3000                    	db `0\0`
   904                                  fmt_int:
   905 00000838 256C6400                	db `%ld\0`
   906                                  fmt_unknown_scheme_object_error:
   907 0000083C 0A0A21212120457272-     	db `\n\n!!! Error: Unknown Scheme-object (RTTI 0x%02X) `
   907 00000845 6F723A20556E6B6E6F-
   907 0000084E 776E20536368656D65-
   907 00000857 2D6F626A6563742028-
   907 00000860 525454492030782530-
   907 00000869 32582920           
   908 0000086D 617420616464726573-     	db `at address 0x%08X\n\n\0`
   908 00000876 73203078253038580A-
   908 0000087F 0A00               
   909                                  fmt_dquote:
   910 00000881 2200                    	db `\"\0`
   911                                  fmt_string_char:
   912 00000883 256300                          db `%c\0`
   913                                  fmt_string_char_7:
   914 00000886 5C6100                          db `\\a\0`
   915                                  fmt_string_char_8:
   916 00000889 5C6200                          db `\\b\0`
   917                                  fmt_string_char_9:
   918 0000088C 5C7400                          db `\\t\0`
   919                                  fmt_string_char_10:
   920 0000088F 5C6E00                          db `\\n\0`
   921                                  fmt_string_char_11:
   922 00000892 5C7600                          db `\\v\0`
   923                                  fmt_string_char_12:
   924 00000895 5C6600                          db `\\f\0`
   925                                  fmt_string_char_13:
   926 00000898 5C7200                          db `\\r\0`
   927                                  fmt_string_char_34:
   928 0000089B 5C2200                          db `\\"\0`
   929                                  fmt_string_char_92:
   930 0000089E 5C5C00                          db `\\\\\0`
   931                                  fmt_string_char_hex:
   932 000008A1 5C7825583B00                    db `\\x%X;\0`
   933                                  
   934                                  section .text
   935                                  
   936                                  print_sexpr:
   937 000004D1 C8000000                	enter 0, 0
   938 000004D5 8A07                    	mov al, byte [rdi]
   939 000004D7 3C00                    	cmp al, T_void
   940 000004D9 7465                    	je .Lvoid
   941 000004DB 3C01                    	cmp al, T_nil
   942 000004DD 7470                    	je .Lnil
   943 000004DF 3C09                    	cmp al, T_boolean_false
   944 000004E1 747B                    	je .Lboolean_false
   945 000004E3 3C0A                    	cmp al, T_boolean_true
   946 000004E5 0F8482000000            	je .Lboolean_true
   947 000004EB 3C02                    	cmp al, T_char
   948 000004ED 0F8489000000            	je .Lchar
   949 000004F3 3C41                    	cmp al, T_interned_symbol
   950 000004F5 0F84BF010000            	je .Linterned_symbol
   951 000004FB 3C42                            cmp al, T_uninterned_symbol
   952 000004FD 0F84E3010000                    je .Luninterned_symbol
   953 00000503 3C21                    	cmp al, T_pair
   954 00000505 0F84EE010000            	je .Lpair
   955 0000050B 3C22                    	cmp al, T_vector
   956 0000050D 0F84B7020000            	je .Lvector
   957 00000513 3C04                    	cmp al, T_closure
   958 00000515 0F8485010000            	je .Lclosure
   959 0000051B 3C13                    	cmp al, T_real
   960 0000051D 0F8448030000            	je .Lreal
   961 00000523 3C12                    	cmp al, T_fraction
   962 00000525 0F846E030000            	je .Lfraction
   963 0000052B 3C11                    	cmp al, T_integer
   964 0000052D 0F84A7030000            	je .Linteger
   965 00000533 3C03                    	cmp al, T_string
   966 00000535 0F84B2030000            	je .Lstring
   967                                  
   968 0000053B E9DC040000              	jmp .Lunknown_sexpr_type
   969                                  
   970                                  .Lvoid:
   971 00000540 48BF-                   	mov rdi, fmt_void
   971 00000542 [7C07000000000000] 
   972 0000054A E900050000              	jmp .Lemit
   973                                  
   974                                  .Lnil:
   975 0000054F 48BF-                   	mov rdi, fmt_nil
   975 00000551 [8407000000000000] 
   976 00000559 E9F1040000              	jmp .Lemit
   977                                  
   978                                  .Lboolean_false:
   979 0000055E 48BF-                   	mov rdi, fmt_boolean_false
   979 00000560 [8707000000000000] 
   980 00000568 E9E2040000              	jmp .Lemit
   981                                  
   982                                  .Lboolean_true:
   983 0000056D 48BF-                   	mov rdi, fmt_boolean_true
   983 0000056F [8A07000000000000] 
   984 00000577 E9D3040000              	jmp .Lemit
   985                                  
   986                                  .Lchar:
   987 0000057C 8A4701                  	mov al, byte [rdi + 1]
   988 0000057F 3C20                    	cmp al, ' '
   989 00000581 7E20                    	jle .Lchar_whitespace
   990 00000583 3C5C                    	cmp al, 92 		; backslash
   991 00000585 7474                    	je .Lchar_backslash
   992 00000587 3C22                    	cmp al, '"'
   993 00000589 747F                    	je .Lchar_dquote
   994 0000058B 4825FF000000            	and rax, 255
   995 00000591 48BF-                   	mov rdi, fmt_char_simple
   995 00000593 [9507000000000000] 
   996 0000059B 4889C6                  	mov rsi, rax
   997 0000059E E9AC040000              	jmp .Lemit
   998                                  
   999                                  .Lchar_whitespace:
  1000 000005A3 3C00                    	cmp al, 0
  1001 000005A5 7472                    	je .Lchar_null
  1002 000005A7 3C07                    	cmp al, 7
  1003 000005A9 747D                    	je .Lchar_bell
  1004 000005AB 3C08                    	cmp al, 8
  1005 000005AD 0F8484000000            	je .Lchar_backspace
  1006 000005B3 3C09                    	cmp al, 9
  1007 000005B5 0F848B000000            	je .Lchar_tab
  1008 000005BB 3C0A                    	cmp al, 10
  1009 000005BD 0F8492000000            	je .Lchar_newline
  1010 000005C3 3C0C                    	cmp al, 12
  1011 000005C5 0F8499000000            	je .Lchar_formfeed
  1012 000005CB 3C0D                    	cmp al, 13
  1013 000005CD 0F84A0000000            	je .Lchar_return
  1014 000005D3 3C1B                    	cmp al, 27
  1015 000005D5 0F84A7000000            	je .Lchar_escape
  1016 000005DB 4825FF000000            	and rax, 255
  1017 000005E1 3C20                    	cmp al, ' '
  1018 000005E3 0F84A8000000            	je .Lchar_space
  1019 000005E9 48BF-                   	mov rdi, fmt_char_hex
  1019 000005EB [E107000000000000] 
  1020 000005F3 4889C6                  	mov rsi, rax
  1021 000005F6 E954040000              	jmp .Lemit	
  1022                                  
  1023                                  .Lchar_backslash:
  1024 000005FB 48BF-                   	mov rdi, fmt_char_backslash
  1024 000005FD [8D07000000000000] 
  1025 00000605 E945040000              	jmp .Lemit
  1026                                  
  1027                                  .Lchar_dquote:
  1028 0000060A 48BF-                   	mov rdi, fmt_char_dquote
  1028 0000060C [9107000000000000] 
  1029 00000614 E936040000              	jmp .Lemit
  1030                                  
  1031                                  .Lchar_null:
  1032 00000619 48BF-                   	mov rdi, fmt_char_null
  1032 0000061B [9A07000000000000] 
  1033 00000623 E927040000              	jmp .Lemit
  1034                                  
  1035                                  .Lchar_bell:
  1036 00000628 48BF-                   	mov rdi, fmt_char_bell
  1036 0000062A [A007000000000000] 
  1037 00000632 E918040000              	jmp .Lemit
  1038                                  
  1039                                  .Lchar_backspace:
  1040 00000637 48BF-                   	mov rdi, fmt_char_backspace
  1040 00000639 [A707000000000000] 
  1041 00000641 E909040000              	jmp .Lemit
  1042                                  
  1043                                  .Lchar_tab:
  1044 00000646 48BF-                   	mov rdi, fmt_char_tab
  1044 00000648 [B307000000000000] 
  1045 00000650 E9FA030000              	jmp .Lemit
  1046                                  
  1047                                  .Lchar_newline:
  1048 00000655 48BF-                   	mov rdi, fmt_char_newline
  1048 00000657 [B907000000000000] 
  1049 0000065F E9EB030000              	jmp .Lemit
  1050                                  
  1051                                  .Lchar_formfeed:
  1052 00000664 48BF-                   	mov rdi, fmt_char_formfeed
  1052 00000666 [C307000000000000] 
  1053 0000066E E9DC030000              	jmp .Lemit
  1054                                  
  1055                                  .Lchar_return:
  1056 00000673 48BF-                   	mov rdi, fmt_char_return
  1056 00000675 [CA07000000000000] 
  1057 0000067D E9CD030000              	jmp .Lemit
  1058                                  
  1059                                  .Lchar_escape:
  1060 00000682 48BF-                   	mov rdi, fmt_char_escape
  1060 00000684 [D307000000000000] 
  1061 0000068C E9BE030000              	jmp .Lemit
  1062                                  
  1063                                  .Lchar_space:
  1064 00000691 48BF-                   	mov rdi, fmt_char_space
  1064 00000693 [D907000000000000] 
  1065 0000069B E9AF030000              	jmp .Lemit
  1066                                  
  1067                                  .Lclosure:
  1068 000006A0 4889FE                  	mov rsi, qword rdi
  1069 000006A3 48BF-                   	mov rdi, fmt_closure
  1069 000006A5 [EE07000000000000] 
  1070 000006AD 488B5601                	mov rdx, SOB_CLOSURE_ENV(rsi)
  1071 000006B1 488B4E09                	mov rcx, SOB_CLOSURE_CODE(rsi)
  1072 000006B5 E995030000              	jmp .Lemit
  1073                                  
  1074                                  .Linterned_symbol:
  1075 000006BA 488B7F01                	mov rdi, qword [rdi + 1] ; sob_string
  1076 000006BE BE01000000              	mov rsi, 1		 ; size = 1 byte
  1077 000006C3 488B5701                	mov rdx, qword [rdi + 1] ; length
  1078 000006C7 488D7F09                	lea rdi, [rdi + 1 + 8]	 ; actual characters
  1079 000006CB 488B0C25[00000000]      	mov rcx, qword [stdout]	 ; FILE *
  1080                                  	ENTER
    44 000006D3 C8000000            <1>  enter 0, 0
    45 000006D7 4883E4F0            <1>  and rsp, ~15
  1081 000006DB E8(00000000)            	call fwrite
  1082                                  	LEAVE
    49 000006E0 C9                  <1>  leave
  1083 000006E1 E97E030000              	jmp .Lend
  1084                                  
  1085                                  .Luninterned_symbol:
  1086 000006E6 488B7701                        mov rsi, qword [rdi + 1] ; gensym counter
  1087 000006EA 48BF-                           mov rdi, fmt_gensym
  1087 000006EC [E907000000000000] 
  1088 000006F4 E956030000                      jmp .Lemit
  1089                                  	
  1090                                  .Lpair:
  1091 000006F9 57                      	push rdi
  1092 000006FA 48BF-                   	mov rdi, fmt_lparen
  1092 000006FC [1A08000000000000] 
  1093 00000704 B800000000              	mov rax, 0
  1094                                          ENTER
    44 00000709 C8000000            <1>  enter 0, 0
    45 0000070D 4883E4F0            <1>  and rsp, ~15
  1095 00000711 E8(00000000)            	call printf
  1096                                          LEAVE
    49 00000716 C9                  <1>  leave
  1097 00000717 488B3C24                	mov rdi, qword [rsp] 	; pair
  1098 0000071B 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
  1099 0000071F E8ADFDFFFF              	call print_sexpr
  1100 00000724 5F                      	pop rdi 		; pair
  1101 00000725 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
  1102                                  .Lcdr:
  1103 00000729 8A07                    	mov al, byte [rdi]
  1104 0000072B 3C01                    	cmp al, T_nil
  1105 0000072D 7447                    	je .Lcdr_nil
  1106 0000072F 3C21                    	cmp al, T_pair
  1107 00000731 7462                    	je .Lcdr_pair
  1108 00000733 57                      	push rdi
  1109 00000734 48BF-                   	mov rdi, fmt_dotted_pair
  1109 00000736 [1C08000000000000] 
  1110 0000073E B800000000              	mov rax, 0
  1111                                          ENTER
    44 00000743 C8000000            <1>  enter 0, 0
    45 00000747 4883E4F0            <1>  and rsp, ~15
  1112 0000074B E8(00000000)            	call printf
  1113                                          LEAVE
    49 00000750 C9                  <1>  leave
  1114 00000751 5F                      	pop rdi
  1115 00000752 E87AFDFFFF              	call print_sexpr
  1116 00000757 48BF-                   	mov rdi, fmt_rparen
  1116 00000759 [2008000000000000] 
  1117 00000761 B800000000              	mov rax, 0
  1118                                          ENTER
    44 00000766 C8000000            <1>  enter 0, 0
    45 0000076A 4883E4F0            <1>  and rsp, ~15
  1119 0000076E E8(00000000)            	call printf
  1120                                          LEAVE
    49 00000773 C9                  <1>  leave
  1121 00000774 C9                      	leave
  1122 00000775 C3                      	ret
  1123                                  
  1124                                  .Lcdr_nil:
  1125 00000776 48BF-                   	mov rdi, fmt_rparen
  1125 00000778 [2008000000000000] 
  1126 00000780 B800000000              	mov rax, 0
  1127                                          ENTER
    44 00000785 C8000000            <1>  enter 0, 0
    45 00000789 4883E4F0            <1>  and rsp, ~15
  1128 0000078D E8(00000000)            	call printf
  1129                                          LEAVE
    49 00000792 C9                  <1>  leave
  1130 00000793 C9                      	leave
  1131 00000794 C3                      	ret
  1132                                  
  1133                                  .Lcdr_pair:
  1134 00000795 57                      	push rdi
  1135 00000796 48BF-                   	mov rdi, fmt_space
  1135 00000798 [2208000000000000] 
  1136 000007A0 B800000000              	mov rax, 0
  1137                                          ENTER
    44 000007A5 C8000000            <1>  enter 0, 0
    45 000007A9 4883E4F0            <1>  and rsp, ~15
  1138 000007AD E8(00000000)            	call printf
  1139                                          LEAVE
    49 000007B2 C9                  <1>  leave
  1140 000007B3 488B3C24                	mov rdi, qword [rsp]
  1141 000007B7 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
  1142 000007BB E811FDFFFF              	call print_sexpr
  1143 000007C0 5F                      	pop rdi
  1144 000007C1 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
  1145 000007C5 E95FFFFFFF              	jmp .Lcdr
  1146                                  
  1147                                  .Lvector:
  1148 000007CA 488B4701                	mov rax, qword [rdi + 1] ; length
  1149 000007CE 4883F800                	cmp rax, 0
  1150 000007D2 0F8484000000            	je .Lvector_empty
  1151 000007D8 57                      	push rdi
  1152 000007D9 48BF-                   	mov rdi, fmt_vector
  1152 000007DB [2808000000000000] 
  1153 000007E3 B800000000              	mov rax, 0
  1154                                          ENTER
    44 000007E8 C8000000            <1>  enter 0, 0
    45 000007EC 4883E4F0            <1>  and rsp, ~15
  1155 000007F0 E8(00000000)            	call printf
  1156                                          LEAVE
    49 000007F5 C9                  <1>  leave
  1157 000007F6 488B3C24                	mov rdi, qword [rsp]
  1158 000007FA FF7701                  	push qword [rdi + 1]
  1159 000007FD 6A01                    	push 1
  1160 000007FF 488B7F09                	mov rdi, qword [rdi + 1 + 8] ; v[0]
  1161 00000803 E8C9FCFFFF              	call print_sexpr
  1162                                  .Lvector_loop:
  1163                                  	; [rsp] index
  1164                                  	; [rsp + 8*1] limit
  1165                                  	; [rsp + 8*2] vector
  1166 00000808 488B0424                	mov rax, qword [rsp]
  1167 0000080C 483B442408              	cmp rax, qword [rsp + 8*1]
  1168 00000811 7436                    	je .Lvector_end
  1169 00000813 48BF-                   	mov rdi, fmt_space
  1169 00000815 [2208000000000000] 
  1170 0000081D B800000000              	mov rax, 0
  1171                                          ENTER
    44 00000822 C8000000            <1>  enter 0, 0
    45 00000826 4883E4F0            <1>  and rsp, ~15
  1172 0000082A E8(00000000)            	call printf
  1173                                          LEAVE
    49 0000082F C9                  <1>  leave
  1174 00000830 488B0424                	mov rax, qword [rsp]
  1175 00000834 488B5C2410              	mov rbx, qword [rsp + 8*2]
  1176 00000839 488B7CC309              	mov rdi, qword [rbx + 1 + 8 + 8 * rax] ; v[i]
  1177 0000083E E88EFCFFFF              	call print_sexpr
  1178 00000843 48FF0424                	inc qword [rsp]
  1179 00000847 EBBF                    	jmp .Lvector_loop
  1180                                  
  1181                                  .Lvector_end:
  1182 00000849 4883C418                	add rsp, 8*3
  1183 0000084D 48BF-                   	mov rdi, fmt_rparen
  1183 0000084F [2008000000000000] 
  1184 00000857 E9F3010000              	jmp .Lemit	
  1185                                  
  1186                                  .Lvector_empty:
  1187 0000085C 48BF-                   	mov rdi, fmt_empty_vector
  1187 0000085E [2408000000000000] 
  1188 00000866 E9E4010000              	jmp .Lemit
  1189                                  
  1190                                  .Lreal:
  1191 0000086B FF7701                  	push qword [rdi + 1]
  1192 0000086E F20F100424              	movsd xmm0, qword [rsp]
  1193 00000873 4883C408                	add rsp, 8*1
  1194 00000877 48BF-                   	mov rdi, fmt_real
  1194 00000879 [2B08000000000000] 
  1195 00000881 B801000000              	mov rax, 1
  1196                                  	ENTER
    44 00000886 C8000000            <1>  enter 0, 0
    45 0000088A 4883E4F0            <1>  and rsp, ~15
  1197 0000088E E8(00000000)            	call printf
  1198                                  	LEAVE
    49 00000893 C9                  <1>  leave
  1199 00000894 E9CB010000              	jmp .Lend
  1200                                  
  1201                                  .Lfraction:
  1202 00000899 488B7701                	mov rsi, qword [rdi + 1]
  1203 0000089D 488B5709                	mov rdx, qword [rdi + 1 + 8]
  1204 000008A1 4883FE00                	cmp rsi, 0
  1205 000008A5 7415                    	je .Lrat_zero
  1206 000008A7 4883FA01                	cmp rdx, 1
  1207 000008AB 741E                    	je .Lrat_int
  1208 000008AD 48BF-                   	mov rdi, fmt_fraction
  1208 000008AF [2E08000000000000] 
  1209 000008B7 E993010000              	jmp .Lemit
  1210                                  
  1211                                  .Lrat_zero:
  1212 000008BC 48BF-                   	mov rdi, fmt_zero
  1212 000008BE [3608000000000000] 
  1213 000008C6 E984010000              	jmp .Lemit
  1214                                  
  1215                                  .Lrat_int:
  1216 000008CB 48BF-                   	mov rdi, fmt_int
  1216 000008CD [3808000000000000] 
  1217 000008D5 E975010000              	jmp .Lemit
  1218                                  
  1219                                  .Linteger:
  1220 000008DA 488B7701                	mov rsi, qword [rdi + 1]
  1221 000008DE 48BF-                   	mov rdi, fmt_int
  1221 000008E0 [3808000000000000] 
  1222 000008E8 E962010000              	jmp .Lemit
  1223                                  
  1224                                  .Lstring:
  1225 000008ED 488D4709                	lea rax, [rdi + 1 + 8]
  1226 000008F1 50                      	push rax
  1227 000008F2 FF7701                  	push qword [rdi + 1]
  1228 000008F5 48BF-                   	mov rdi, fmt_dquote
  1228 000008F7 [8108000000000000] 
  1229 000008FF B800000000              	mov rax, 0
  1230                                  	ENTER
    44 00000904 C8000000            <1>  enter 0, 0
    45 00000908 4883E4F0            <1>  and rsp, ~15
  1231 0000090C E8(00000000)            	call printf
  1232                                  	LEAVE
    49 00000911 C9                  <1>  leave
  1233                                  .Lstring_loop:
  1234                                  	; qword [rsp]: limit
  1235                                  	; qword [rsp + 8*1]: char *
  1236 00000912 48833C2400              	cmp qword [rsp], 0
  1237 00000917 0F84EF000000            	je .Lstring_end
  1238 0000091D 488B442408              	mov rax, qword [rsp + 8*1]
  1239 00000922 8A00                    	mov al, byte [rax]
  1240 00000924 4825FF000000            	and rax, 255
  1241 0000092A 3C07                    	cmp al, 7
  1242 0000092C 745D                            je .Lstring_char_7
  1243 0000092E 3C08                            cmp al, 8
  1244 00000930 7465                            je .Lstring_char_8
  1245 00000932 3C09                            cmp al, 9
  1246 00000934 746D                            je .Lstring_char_9
  1247 00000936 3C0A                            cmp al, 10
  1248 00000938 7475                            je .Lstring_char_10
  1249 0000093A 3C0B                            cmp al, 11
  1250 0000093C 747D                            je .Lstring_char_11
  1251 0000093E 3C0C                            cmp al, 12
  1252 00000940 0F8481000000                    je .Lstring_char_12
  1253 00000946 3C0D                            cmp al, 13
  1254 00000948 0F8485000000                    je .Lstring_char_13
  1255 0000094E 3C22                            cmp al, 34
  1256 00000950 0F8489000000                    je .Lstring_char_34
  1257 00000956 3C5C                            cmp al, 92              ;         je .Lstring_char_92
  1259 00000958 3C20                            cmp al, ' '
  1260 0000095A 0F8C9A000000                    jl .Lstring_char_hex
  1261 00000960 48BF-                           mov rdi, fmt_string_char
  1261 00000962 [8308000000000000] 
  1262 0000096A 4889C6                          mov rsi, rax
  1263                                  .Lstring_char_emit:
  1264 0000096D B800000000                      mov rax, 0
  1265                                          ENTER
    44 00000972 C8000000            <1>  enter 0, 0
    45 00000976 4883E4F0            <1>  and rsp, ~15
  1266 0000097A E8(00000000)                    call printf
  1267                                          LEAVE
    49 0000097F C9                  <1>  leave
  1268 00000980 48FF0C24                        dec qword [rsp]
  1269 00000984 48FF442408                      inc qword [rsp + 8*1]
  1270 00000989 EB87                            jmp .Lstring_loop
  1271                                  
  1272                                  .Lstring_char_7:
  1273 0000098B 48BF-                           mov rdi, fmt_string_char_7
  1273 0000098D [8608000000000000] 
  1274 00000995 EBD6                            jmp .Lstring_char_emit
  1275                                  
  1276                                  .Lstring_char_8:
  1277 00000997 48BF-                           mov rdi, fmt_string_char_8
  1277 00000999 [8908000000000000] 
  1278 000009A1 EBCA                            jmp .Lstring_char_emit
  1279                                          
  1280                                  .Lstring_char_9:
  1281 000009A3 48BF-                           mov rdi, fmt_string_char_9
  1281 000009A5 [8C08000000000000] 
  1282 000009AD EBBE                            jmp .Lstring_char_emit
  1283                                  
  1284                                  .Lstring_char_10:
  1285 000009AF 48BF-                           mov rdi, fmt_string_char_10
  1285 000009B1 [8F08000000000000] 
  1286 000009B9 EBB2                            jmp .Lstring_char_emit
  1287                                  
  1288                                  .Lstring_char_11:
  1289 000009BB 48BF-                           mov rdi, fmt_string_char_11
  1289 000009BD [9208000000000000] 
  1290 000009C5 EBA6                            jmp .Lstring_char_emit
  1291                                  
  1292                                  .Lstring_char_12:
  1293 000009C7 48BF-                           mov rdi, fmt_string_char_12
  1293 000009C9 [9508000000000000] 
  1294 000009D1 EB9A                            jmp .Lstring_char_emit
  1295                                  
  1296                                  .Lstring_char_13:
  1297 000009D3 48BF-                           mov rdi, fmt_string_char_13
  1297 000009D5 [9808000000000000] 
  1298 000009DD EB8E                            jmp .Lstring_char_emit
  1299                                  
  1300                                  .Lstring_char_34:
  1301 000009DF 48BF-                           mov rdi, fmt_string_char_34
  1301 000009E1 [9B08000000000000] 
  1302 000009E9 EB82                            jmp .Lstring_char_emit
  1303                                  
  1304                                  .Lstring_char_92:
  1305 000009EB 48BF-                           mov rdi, fmt_string_char_92
  1305 000009ED [9E08000000000000] 
  1306 000009F5 E973FFFFFF                      jmp .Lstring_char_emit
  1307                                  
  1308                                  .Lstring_char_hex:
  1309 000009FA 48BF-                           mov rdi, fmt_string_char_hex
  1309 000009FC [A108000000000000] 
  1310 00000A04 4889C6                          mov rsi, rax
  1311 00000A07 E961FFFFFF                      jmp .Lstring_char_emit        
  1312                                  
  1313                                  .Lstring_end:
  1314 00000A0C 4883C410                	add rsp, 8 * 2
  1315 00000A10 48BF-                   	mov rdi, fmt_dquote
  1315 00000A12 [8108000000000000] 
  1316 00000A1A EB33                    	jmp .Lemit
  1317                                  
  1318                                  .Lunknown_sexpr_type:
  1319 00000A1C 48BE-                   	mov rsi, fmt_unknown_scheme_object_error
  1319 00000A1E [3C08000000000000] 
  1320 00000A26 4825FF000000            	and rax, 255
  1321 00000A2C 4889C2                  	mov rdx, rax
  1322 00000A2F 4889F9                  	mov rcx, rdi
  1323 00000A32 488B3C25[00000000]      	mov rdi, qword [stderr]
  1324 00000A3A B800000000              	mov rax, 0
  1325                                          ENTER
    44 00000A3F C8000000            <1>  enter 0, 0
    45 00000A43 4883E4F0            <1>  and rsp, ~15
  1326 00000A47 E8(00000000)            	call fprintf
  1327                                          LEAVE
    49 00000A4C C9                  <1>  leave
  1328 00000A4D C9                              leave
  1329 00000A4E C3                              ret
  1330                                  
  1331                                  .Lemit:
  1332 00000A4F B800000000              	mov rax, 0
  1333                                          ENTER
    44 00000A54 C8000000            <1>  enter 0, 0
    45 00000A58 4883E4F0            <1>  and rsp, ~15
  1334 00000A5C E8(00000000)            	call printf
  1335                                          LEAVE
    49 00000A61 C9                  <1>  leave
  1336 00000A62 EB00                    	jmp .Lend
  1337                                  
  1338                                  .Lend:
  1339                                  	LEAVE
    49 00000A64 C9                  <1>  leave
  1340 00000A65 C3                      	ret
  1341                                  
  1342                                  ;;; rdi: address of free variable
  1343                                  ;;; rsi: address of code-pointer
  1344                                  bind_primitive:
  1345 00000A66 C8000000                        enter 0, 0
  1346 00000A6A 57                              push rdi
  1347 00000A6B BF11000000                      mov rdi, (1 + 8 + 8)
  1348 00000A70 E8DBF7FFFF                      call malloc
  1349 00000A75 5F                              pop rdi
  1350 00000A76 C60004                          mov byte [rax], T_closure
  1351 00000A79 48C7400100000000                mov SOB_CLOSURE_ENV(rax), 0 ; dummy, lexical environment
  1352 00000A81 48897009                        mov SOB_CLOSURE_CODE(rax), rsi ; code pointer
  1353 00000A85 488907                          mov qword [rdi], rax
  1354 00000A88 48B8-                           mov rax, sob_void
  1354 00000A8A [0000000000000000] 
  1355 00000A92 C9                              leave
  1356 00000A93 C3                              ret
  1357                                  
  1358                                  L_code_ptr_ash:
  1359 00000A94 C8000000                        enter 0, 0
  1360 00000A98 48837D1802                      cmp COUNT, 2
  1361 00000A9D 0F8539140000                    jne L_error_arg_count_2
  1362 00000AA3 488B7D20                        mov rdi, PARAM(0)
  1363                                          assert_integer(rdi)
    53 00000AA7 803F11              <1>  cmp byte [%1], %2
    54 00000AAA 0F85CB140000        <1>  jne L_error_incorrect_type
  1364 00000AB0 488B4D28                        mov rcx, PARAM(1)
  1365                                          assert_integer(rcx)
    53 00000AB4 803911              <1>  cmp byte [%1], %2
    54 00000AB7 0F85BE140000        <1>  jne L_error_incorrect_type
  1366 00000ABD 488B7F01                        mov rdi, qword [rdi + 1]
  1367 00000AC1 488B4901                        mov rcx, qword [rcx + 1]
  1368 00000AC5 4883F900                        cmp rcx, 0
  1369 00000AC9 7C0F                            jl .L_negative
  1370                                  .L_loop_positive:
  1371 00000ACB 4883F900                        cmp rcx, 0
  1372 00000ACF 741B                            je .L_exit
  1373 00000AD1 48D3E7                          sal rdi, cl
  1374 00000AD4 48C1E908                        shr rcx, 8
  1375 00000AD8 EBF1                            jmp .L_loop_positive
  1376                                  .L_negative:
  1377 00000ADA 48F7D9                          neg rcx
  1378                                  .L_loop_negative:
  1379 00000ADD 4883F900                        cmp rcx, 0
  1380 00000AE1 7409                            je .L_exit
  1381 00000AE3 48D3FF                          sar rdi, cl
  1382 00000AE6 48C1E908                        shr rcx, 8
  1383 00000AEA EBF1                            jmp .L_loop_negative
  1384                                  .L_exit:
  1385 00000AEC E805130000                      call make_integer
  1386 00000AF1 C9                              leave
  1387 00000AF2 C22000                          ret AND_KILL_FRAME(2)
  1388                                  
  1389                                  L_code_ptr_logand:
  1390 00000AF5 C8000000                        enter 0, 0
  1391 00000AF9 48837D1802                      cmp COUNT, 2
  1392 00000AFE 0F85D8130000                    jne L_error_arg_count_2
  1393 00000B04 4C8B4520                        mov r8, PARAM(0)
  1394                                          assert_integer(r8)
    53 00000B08 41803811            <1>  cmp byte [%1], %2
    54 00000B0C 0F8569140000        <1>  jne L_error_incorrect_type
  1395 00000B12 4C8B4D28                        mov r9, PARAM(1)
  1396                                          assert_integer(r9)
    53 00000B16 41803911            <1>  cmp byte [%1], %2
    54 00000B1A 0F855B140000        <1>  jne L_error_incorrect_type
  1397 00000B20 498B7801                        mov rdi, qword [r8 + 1]
  1398 00000B24 49237901                        and rdi, qword [r9 + 1]
  1399 00000B28 E8C9120000                      call make_integer
  1400 00000B2D C9                              leave
  1401 00000B2E C22000                          ret AND_KILL_FRAME(2)
  1402                                  
  1403                                  L_code_ptr_logor:
  1404 00000B31 C8000000                        enter 0, 0
  1405 00000B35 48837D1802                      cmp COUNT, 2
  1406 00000B3A 0F859C130000                    jne L_error_arg_count_2
  1407 00000B40 4C8B4520                        mov r8, PARAM(0)
  1408                                          assert_integer(r8)
    53 00000B44 41803811            <1>  cmp byte [%1], %2
    54 00000B48 0F852D140000        <1>  jne L_error_incorrect_type
  1409 00000B4E 4C8B4D28                        mov r9, PARAM(1)
  1410                                          assert_integer(r9)
    53 00000B52 41803911            <1>  cmp byte [%1], %2
    54 00000B56 0F851F140000        <1>  jne L_error_incorrect_type
  1411 00000B5C 498B7801                        mov rdi, qword [r8 + 1]
  1412 00000B60 490B7901                        or rdi, qword [r9 + 1]
  1413 00000B64 E88D120000                      call make_integer
  1414 00000B69 C9                              leave
  1415 00000B6A C22000                          ret AND_KILL_FRAME(2)
  1416                                  
  1417                                  L_code_ptr_logxor:
  1418 00000B6D C8000000                        enter 0, 0
  1419 00000B71 48837D1802                      cmp COUNT, 2
  1420 00000B76 0F8560130000                    jne L_error_arg_count_2
  1421 00000B7C 4C8B4520                        mov r8, PARAM(0)
  1422                                          assert_integer(r8)
    53 00000B80 41803811            <1>  cmp byte [%1], %2
    54 00000B84 0F85F1130000        <1>  jne L_error_incorrect_type
  1423 00000B8A 4C8B4D28                        mov r9, PARAM(1)
  1424                                          assert_integer(r9)
    53 00000B8E 41803911            <1>  cmp byte [%1], %2
    54 00000B92 0F85E3130000        <1>  jne L_error_incorrect_type
  1425 00000B98 498B7801                        mov rdi, qword [r8 + 1]
  1426 00000B9C 49337901                        xor rdi, qword [r9 + 1]
  1427 00000BA0 E851120000                      call make_integer
  1428                                          LEAVE
    49 00000BA5 C9                  <1>  leave
  1429 00000BA6 C22000                          ret AND_KILL_FRAME(2)
  1430                                  
  1431                                  L_code_ptr_lognot:
  1432 00000BA9 C8000000                        enter 0, 0
  1433 00000BAD 48837D1801                      cmp COUNT, 1
  1434 00000BB2 0F85EF120000                    jne L_error_arg_count_1
  1435 00000BB8 4C8B4520                        mov r8, PARAM(0)
  1436                                          assert_integer(r8)
    53 00000BBC 41803811            <1>  cmp byte [%1], %2
    54 00000BC0 0F85B5130000        <1>  jne L_error_incorrect_type
  1437 00000BC6 498B7801                        mov rdi, qword [r8 + 1]
  1438 00000BCA 48F7D7                          not rdi
  1439 00000BCD E824120000                      call make_integer
  1440 00000BD2 C9                              leave
  1441 00000BD3 C21800                          ret AND_KILL_FRAME(1)
  1442                                  
  1443                                  L_code_ptr_bin_apply:
  1444                                      ;; Arguments:
  1445                                      ;; rdi = function to apply
  1446                                      ;; rsi = pointer to the list of arguments
  1447                                      
  1448                                      ;; 1. Save caller's registers
  1449 00000BD6 55                          push rbp
  1450 00000BD7 4889E5                      mov rbp, rsp
  1451 00000BDA 53                          push rbx
  1452                                  
  1453                                      ;; 2. Unpack the argument list
  1454 00000BDB 4889F3                      mov rbx, rsi       ;; rbx points to the start of the argument list
  1455 00000BDE B900000000                  mov rcx, 0         ;; rcx will count the number of arguments
  1456                                  
  1457                                  L_unpack_loop:
  1458 00000BE3 4883FB00                    cmp rbx, 0         ;; Check if we reached the end of the list (NULL)
  1459 00000BE7 740B                        je L_call_function ;; If yes, jump to function call
  1460 00000BE9 FF33                        push qword [rbx]   ;; Push the current argument onto the stack
  1461 00000BEB 488B5B08                    mov rbx, [rbx+8]   ;; Move to the next argument in the list
  1462 00000BEF 48FFC1                      inc rcx            ;; Increment the argument count
  1463 00000BF2 EBEF                        jmp L_unpack_loop  ;; Continue unpacking
  1464                                  
  1465                                  L_call_function:
  1466                                      ;; 3. Call the function
  1467 00000BF4 4889CF                      mov rdi, rcx       ;; First argument: number of arguments
  1468 00000BF7 FFD7                        call rdi           ;; Call the function
  1469                                  
  1470                                      ;; 4. Restore caller's registers and return
  1471 00000BF9 5B                          pop rbx
  1472 00000BFA 4889EC                      mov rsp, rbp
  1473 00000BFD 5D                          pop rbp
  1474 00000BFE C3                          ret
  1475                                  
  1476                                  L_code_ptr_is_null:
  1477 00000BFF C8000000                        enter 0, 0
  1478 00000C03 48837D1801                      cmp COUNT, 1
  1479 00000C08 0F8599120000                    jne L_error_arg_count_1
  1480 00000C0E 488B4520                        mov rax, PARAM(0)
  1481 00000C12 803801                          cmp byte [rax], T_nil
  1482 00000C15 750C                            jne .L_false
  1483 00000C17 48B8-                           mov rax, sob_boolean_true
  1483 00000C19 [0300000000000000] 
  1484 00000C21 EB0A                            jmp .L_end
  1485                                  .L_false:
  1486 00000C23 48B8-                           mov rax, sob_boolean_false
  1486 00000C25 [0200000000000000] 
  1487                                  .L_end:
  1488 00000C2D C9                              leave
  1489 00000C2E C21800                          ret AND_KILL_FRAME(1)
  1490                                  
  1491                                  L_code_ptr_is_pair:
  1492 00000C31 C8000000                        enter 0, 0
  1493 00000C35 48837D1801                      cmp COUNT, 1
  1494 00000C3A 0F8567120000                    jne L_error_arg_count_1
  1495 00000C40 488B4520                        mov rax, PARAM(0)
  1496 00000C44 803821                          cmp byte [rax], T_pair
  1497 00000C47 750C                            jne .L_false
  1498 00000C49 48B8-                           mov rax, sob_boolean_true
  1498 00000C4B [0300000000000000] 
  1499 00000C53 EB0A                            jmp .L_end
  1500                                  .L_false:
  1501 00000C55 48B8-                           mov rax, sob_boolean_false
  1501 00000C57 [0200000000000000] 
  1502                                  .L_end:
  1503 00000C5F C9                              leave
  1504 00000C60 C21800                          ret AND_KILL_FRAME(1)
  1505                                          
  1506                                  L_code_ptr_is_void:
  1507 00000C63 C8000000                        enter 0, 0
  1508 00000C67 48837D1801                      cmp COUNT, 1
  1509 00000C6C 0F8535120000                    jne L_error_arg_count_1
  1510 00000C72 488B4520                        mov rax, PARAM(0)
  1511 00000C76 803800                          cmp byte [rax], T_void
  1512 00000C79 750C                            jne .L_false
  1513 00000C7B 48B8-                           mov rax, sob_boolean_true
  1513 00000C7D [0300000000000000] 
  1514 00000C85 EB0A                            jmp .L_end
  1515                                  .L_false:
  1516 00000C87 48B8-                           mov rax, sob_boolean_false
  1516 00000C89 [0200000000000000] 
  1517                                  .L_end:
  1518 00000C91 C9                              leave
  1519 00000C92 C21800                          ret AND_KILL_FRAME(1)
  1520                                  
  1521                                  L_code_ptr_is_char:
  1522 00000C95 C8000000                        enter 0, 0
  1523 00000C99 48837D1801                      cmp COUNT, 1
  1524 00000C9E 0F8503120000                    jne L_error_arg_count_1
  1525 00000CA4 488B4520                        mov rax, PARAM(0)
  1526 00000CA8 803802                          cmp byte [rax], T_char
  1527 00000CAB 750C                            jne .L_false
  1528 00000CAD 48B8-                           mov rax, sob_boolean_true
  1528 00000CAF [0300000000000000] 
  1529 00000CB7 EB0A                            jmp .L_end
  1530                                  .L_false:
  1531 00000CB9 48B8-                           mov rax, sob_boolean_false
  1531 00000CBB [0200000000000000] 
  1532                                  .L_end:
  1533 00000CC3 C9                              leave
  1534 00000CC4 C21800                          ret AND_KILL_FRAME(1)
  1535                                  
  1536                                  L_code_ptr_is_string:
  1537 00000CC7 C8000000                        enter 0, 0
  1538 00000CCB 48837D1801                      cmp COUNT, 1
  1539 00000CD0 0F85D1110000                    jne L_error_arg_count_1
  1540 00000CD6 488B4520                        mov rax, PARAM(0)
  1541 00000CDA 803803                          cmp byte [rax], T_string
  1542 00000CDD 750C                            jne .L_false
  1543 00000CDF 48B8-                           mov rax, sob_boolean_true
  1543 00000CE1 [0300000000000000] 
  1544 00000CE9 EB0A                            jmp .L_end
  1545                                  .L_false:
  1546 00000CEB 48B8-                           mov rax, sob_boolean_false
  1546 00000CED [0200000000000000] 
  1547                                  .L_end:
  1548 00000CF5 C9                              leave
  1549 00000CF6 C21800                          ret AND_KILL_FRAME(1)
  1550                                  
  1551                                  L_code_ptr_is_symbol:
  1552 00000CF9 C8000000                        enter 0, 0
  1553 00000CFD 48837D1801                      cmp COUNT, 1
  1554 00000D02 0F859F110000                    jne L_error_arg_count_1
  1555 00000D08 4C8B4520                        mov r8, PARAM(0)
  1556 00000D0C 41802040                        and byte [r8], T_symbol
  1557 00000D10 740C                            jz .L_false
  1558 00000D12 48B8-                           mov rax, sob_boolean_true
  1558 00000D14 [0300000000000000] 
  1559 00000D1C EB0A                            jmp .L_exit
  1560                                  .L_false:
  1561 00000D1E 48B8-                           mov rax, sob_boolean_false
  1561 00000D20 [0200000000000000] 
  1562                                  .L_exit:
  1563 00000D28 C9                              leave
  1564 00000D29 C21800                          ret AND_KILL_FRAME(1)
  1565                                  
  1566                                  L_code_ptr_is_uninterned_symbol:
  1567 00000D2C C8000000                        enter 0, 0
  1568 00000D30 48837D1801                      cmp COUNT, 1
  1569 00000D35 0F856C110000                    jne L_error_arg_count_1
  1570 00000D3B 4C8B4520                        mov r8, PARAM(0)
  1571 00000D3F 41803842                        cmp byte [r8], T_uninterned_symbol
  1572 00000D43 750C                            jne .L_false
  1573 00000D45 48B8-                           mov rax, sob_boolean_true
  1573 00000D47 [0300000000000000] 
  1574 00000D4F EB0A                            jmp .L_exit
  1575                                  .L_false:
  1576 00000D51 48B8-                           mov rax, sob_boolean_false
  1576 00000D53 [0200000000000000] 
  1577                                  .L_exit:
  1578 00000D5B C9                              leave
  1579 00000D5C C21800                          ret AND_KILL_FRAME(1)
  1580                                  
  1581                                  L_code_ptr_is_interned_symbol:
  1582 00000D5F C8000000                        enter 0, 0
  1583 00000D63 48837D1801                      cmp COUNT, 1
  1584 00000D68 0F8539110000                    jne L_error_arg_count_1
  1585 00000D6E 488B4520                        mov rax, PARAM(0)
  1586 00000D72 803841                          cmp byte [rax], T_interned_symbol
  1587 00000D75 750C                            jne .L_false
  1588 00000D77 48B8-                           mov rax, sob_boolean_true
  1588 00000D79 [0300000000000000] 
  1589 00000D81 EB0A                            jmp .L_end
  1590                                  .L_false:
  1591 00000D83 48B8-                           mov rax, sob_boolean_false
  1591 00000D85 [0200000000000000] 
  1592                                  .L_end:
  1593 00000D8D C9                              leave
  1594 00000D8E C21800                          ret AND_KILL_FRAME(1)
  1595                                  
  1596                                  L_code_ptr_gensym:
  1597 00000D91 C8000000                        enter 0, 0
  1598 00000D95 48837D1800                      cmp COUNT, 0
  1599 00000D9A 0F85D2100000                    jne L_error_arg_count_0
  1600 00000DA0 48FF0425[A7080000]              inc qword [gensym_count]
  1601 00000DA8 BF09000000                      mov rdi, (1 + 8)
  1602 00000DAD E89EF4FFFF                      call malloc
  1603 00000DB2 C60042                          mov byte [rax], T_uninterned_symbol
  1604 00000DB5 488B0C25[A7080000]              mov rcx, qword [gensym_count]
  1605 00000DBD 48894801                        mov qword [rax + 1], rcx
  1606 00000DC1 C9                              leave
  1607 00000DC2 C21000                          ret AND_KILL_FRAME(0)
  1608                                  
  1609                                  L_code_ptr_is_vector:
  1610 00000DC5 C8000000                        enter 0, 0
  1611 00000DC9 48837D1801                      cmp COUNT, 1
  1612 00000DCE 0F85D3100000                    jne L_error_arg_count_1
  1613 00000DD4 488B4520                        mov rax, PARAM(0)
  1614 00000DD8 803822                          cmp byte [rax], T_vector
  1615 00000DDB 750C                            jne .L_false
  1616 00000DDD 48B8-                           mov rax, sob_boolean_true
  1616 00000DDF [0300000000000000] 
  1617 00000DE7 EB0A                            jmp .L_end
  1618                                  .L_false:
  1619 00000DE9 48B8-                           mov rax, sob_boolean_false
  1619 00000DEB [0200000000000000] 
  1620                                  .L_end:
  1621 00000DF3 C9                              leave
  1622 00000DF4 C21800                          ret AND_KILL_FRAME(1)
  1623                                  
  1624                                  L_code_ptr_is_closure:
  1625 00000DF7 C8000000                        enter 0, 0
  1626 00000DFB 48837D1801                      cmp COUNT, 1
  1627 00000E00 0F85A1100000                    jne L_error_arg_count_1
  1628 00000E06 488B4520                        mov rax, PARAM(0)
  1629 00000E0A 803804                          cmp byte [rax], T_closure
  1630 00000E0D 750C                            jne .L_false
  1631 00000E0F 48B8-                           mov rax, sob_boolean_true
  1631 00000E11 [0300000000000000] 
  1632 00000E19 EB0A                            jmp .L_end
  1633                                  .L_false:
  1634 00000E1B 48B8-                           mov rax, sob_boolean_false
  1634 00000E1D [0200000000000000] 
  1635                                  .L_end:
  1636 00000E25 C9                              leave
  1637 00000E26 C21800                          ret AND_KILL_FRAME(1)
  1638                                  
  1639                                  L_code_ptr_is_real:
  1640 00000E29 C8000000                        enter 0, 0
  1641 00000E2D 48837D1801                      cmp COUNT, 1
  1642 00000E32 0F856F100000                    jne L_error_arg_count_1
  1643 00000E38 488B4520                        mov rax, PARAM(0)
  1644 00000E3C 803813                          cmp byte [rax], T_real
  1645 00000E3F 750C                            jne .L_false
  1646 00000E41 48B8-                           mov rax, sob_boolean_true
  1646 00000E43 [0300000000000000] 
  1647 00000E4B EB0A                            jmp .L_end
  1648                                  .L_false:
  1649 00000E4D 48B8-                           mov rax, sob_boolean_false
  1649 00000E4F [0200000000000000] 
  1650                                  .L_end:
  1651 00000E57 C9                              leave
  1652 00000E58 C21800                          ret AND_KILL_FRAME(1)
  1653                                  
  1654                                  L_code_ptr_is_fraction:
  1655 00000E5B C8000000                        enter 0, 0
  1656 00000E5F 48837D1801                      cmp COUNT, 1
  1657 00000E64 0F853D100000                    jne L_error_arg_count_1
  1658 00000E6A 488B4520                        mov rax, PARAM(0)
  1659 00000E6E 803812                          cmp byte [rax], T_fraction
  1660 00000E71 750C                            jne .L_false
  1661 00000E73 48B8-                           mov rax, sob_boolean_true
  1661 00000E75 [0300000000000000] 
  1662 00000E7D EB0A                            jmp .L_end
  1663                                  .L_false:
  1664 00000E7F 48B8-                           mov rax, sob_boolean_false
  1664 00000E81 [0200000000000000] 
  1665                                  .L_end:
  1666 00000E89 C9                              leave
  1667 00000E8A C21800                          ret AND_KILL_FRAME(1)
  1668                                  
  1669                                  L_code_ptr_is_boolean:
  1670 00000E8D C8000000                        enter 0, 0
  1671 00000E91 48837D1801                      cmp COUNT, 1
  1672 00000E96 0F850B100000                    jne L_error_arg_count_1
  1673 00000E9C 488B4520                        mov rax, PARAM(0)
  1674 00000EA0 8A18                            mov bl, byte [rax]
  1675 00000EA2 80E308                          and bl, T_boolean
  1676 00000EA5 740C                            je .L_false
  1677 00000EA7 48B8-                           mov rax, sob_boolean_true
  1677 00000EA9 [0300000000000000] 
  1678 00000EB1 EB0A                            jmp .L_end
  1679                                  .L_false:
  1680 00000EB3 48B8-                           mov rax, sob_boolean_false
  1680 00000EB5 [0200000000000000] 
  1681                                  .L_end:
  1682 00000EBD C9                              leave
  1683 00000EBE C21800                          ret AND_KILL_FRAME(1)
  1684                                          
  1685                                  L_code_ptr_is_boolean_false:
  1686 00000EC1 C8000000                        enter 0, 0
  1687 00000EC5 48837D1801                      cmp COUNT, 1
  1688 00000ECA 0F85D70F0000                    jne L_error_arg_count_1
  1689 00000ED0 488B4520                        mov rax, PARAM(0)
  1690 00000ED4 8A18                            mov bl, byte [rax]
  1691 00000ED6 80FB09                          cmp bl, T_boolean_false
  1692 00000ED9 750C                            jne .L_false
  1693 00000EDB 48B8-                           mov rax, sob_boolean_true
  1693 00000EDD [0300000000000000] 
  1694 00000EE5 EB0A                            jmp .L_end
  1695                                  .L_false:
  1696 00000EE7 48B8-                           mov rax, sob_boolean_false
  1696 00000EE9 [0200000000000000] 
  1697                                  .L_end:
  1698 00000EF1 C9                              leave
  1699 00000EF2 C21800                          ret AND_KILL_FRAME(1)
  1700                                  
  1701                                  L_code_ptr_is_boolean_true:
  1702 00000EF5 C8000000                        enter 0, 0
  1703 00000EF9 48837D1801                      cmp COUNT, 1
  1704 00000EFE 0F85A30F0000                    jne L_error_arg_count_1
  1705 00000F04 488B4520                        mov rax, PARAM(0)
  1706 00000F08 8A18                            mov bl, byte [rax]
  1707 00000F0A 80FB0A                          cmp bl, T_boolean_true
  1708 00000F0D 750C                            jne .L_false
  1709 00000F0F 48B8-                           mov rax, sob_boolean_true
  1709 00000F11 [0300000000000000] 
  1710 00000F19 EB0A                            jmp .L_end
  1711                                  .L_false:
  1712 00000F1B 48B8-                           mov rax, sob_boolean_false
  1712 00000F1D [0200000000000000] 
  1713                                  .L_end:
  1714 00000F25 C9                              leave
  1715 00000F26 C21800                          ret AND_KILL_FRAME(1)
  1716                                  
  1717                                  L_code_ptr_is_number:
  1718 00000F29 C8000000                        enter 0, 0
  1719 00000F2D 48837D1801                      cmp COUNT, 1
  1720 00000F32 0F856F0F0000                    jne L_error_arg_count_1
  1721 00000F38 488B4520                        mov rax, PARAM(0)
  1722 00000F3C 8A18                            mov bl, byte [rax]
  1723 00000F3E 80E310                          and bl, T_number
  1724 00000F41 740C                            jz .L_false
  1725 00000F43 48B8-                           mov rax, sob_boolean_true
  1725 00000F45 [0300000000000000] 
  1726 00000F4D EB0A                            jmp .L_end
  1727                                  .L_false:
  1728 00000F4F 48B8-                           mov rax, sob_boolean_false
  1728 00000F51 [0200000000000000] 
  1729                                  .L_end:
  1730 00000F59 C9                              leave
  1731 00000F5A C21800                          ret AND_KILL_FRAME(1)
  1732                                          
  1733                                  L_code_ptr_is_collection:
  1734 00000F5D C8000000                        enter 0, 0
  1735 00000F61 48837D1801                      cmp COUNT, 1
  1736 00000F66 0F853B0F0000                    jne L_error_arg_count_1
  1737 00000F6C 488B4520                        mov rax, PARAM(0)
  1738 00000F70 8A18                            mov bl, byte [rax]
  1739 00000F72 80E320                          and bl, T_collection
  1740 00000F75 740C                            je .L_false
  1741 00000F77 48B8-                           mov rax, sob_boolean_true
  1741 00000F79 [0300000000000000] 
  1742 00000F81 EB0A                            jmp .L_end
  1743                                  .L_false:
  1744 00000F83 48B8-                           mov rax, sob_boolean_false
  1744 00000F85 [0200000000000000] 
  1745                                  .L_end:
  1746 00000F8D C9                              leave
  1747 00000F8E C21800                          ret AND_KILL_FRAME(1)
  1748                                  
  1749                                  L_code_ptr_cons:
  1750 00000F91 C8000000                        enter 0, 0
  1751 00000F95 48837D1802                      cmp COUNT, 2
  1752 00000F9A 0F853C0F0000                    jne L_error_arg_count_2
  1753 00000FA0 BF11000000                      mov rdi, (1 + 8 + 8)
  1754 00000FA5 E8A6F2FFFF                      call malloc
  1755 00000FAA C60021                          mov byte [rax], T_pair
  1756 00000FAD 488B5D20                        mov rbx, PARAM(0)
  1757 00000FB1 48895801                        mov SOB_PAIR_CAR(rax), rbx
  1758 00000FB5 488B5D28                        mov rbx, PARAM(1)
  1759 00000FB9 48895809                        mov SOB_PAIR_CDR(rax), rbx
  1760 00000FBD C9                              leave
  1761 00000FBE C22000                          ret AND_KILL_FRAME(2)
  1762                                  
  1763                                  L_code_ptr_display_sexpr:
  1764 00000FC1 C8000000                        enter 0, 0
  1765 00000FC5 48837D1801                      cmp COUNT, 1
  1766 00000FCA 0F85D70E0000                    jne L_error_arg_count_1
  1767 00000FD0 488B7D20                        mov rdi, PARAM(0)
  1768 00000FD4 E8F8F4FFFF                      call print_sexpr
  1769 00000FD9 48B8-                           mov rax, sob_void
  1769 00000FDB [0000000000000000] 
  1770 00000FE3 C9                              leave
  1771 00000FE4 C21800                          ret AND_KILL_FRAME(1)
  1772                                  
  1773                                  L_code_ptr_write_char:
  1774 00000FE7 C8000000                        enter 0, 0
  1775 00000FEB 48837D1801                      cmp COUNT, 1
  1776 00000FF0 0F85B10E0000                    jne L_error_arg_count_1
  1777 00000FF6 488B4520                        mov rax, PARAM(0)
  1778                                          assert_char(rax)
    53 00000FFA 803802              <1>  cmp byte [%1], %2
    54 00000FFD 0F85780F0000        <1>  jne L_error_incorrect_type
  1779 00001003 8A4001                          mov al, SOB_CHAR_VALUE(rax)
  1780 00001006 4825FF000000                    and rax, 255
  1781 0000100C 48BF-                           mov rdi, fmt_char
  1781 0000100E [AF08000000000000] 
  1782 00001016 4889C6                          mov rsi, rax
  1783 00001019 B800000000                      mov rax, 0
  1784                                          ENTER
    44 0000101E C8000000            <1>  enter 0, 0
    45 00001022 4883E4F0            <1>  and rsp, ~15
  1785 00001026 E8(00000000)                    call printf
  1786                                          LEAVE
    49 0000102B C9                  <1>  leave
  1787 0000102C 48B8-                           mov rax, sob_void
  1787 0000102E [0000000000000000] 
  1788 00001036 C9                              leave
  1789 00001037 C21800                          ret AND_KILL_FRAME(1)
  1790                                  
  1791                                  L_code_ptr_car:
  1792 0000103A C8000000                        enter 0, 0
  1793 0000103E 48837D1801                      cmp COUNT, 1
  1794 00001043 0F855E0E0000                    jne L_error_arg_count_1
  1795 00001049 488B4520                        mov rax, PARAM(0)
  1796                                          assert_pair(rax)
    53 0000104D 803821              <1>  cmp byte [%1], %2
    54 00001050 0F85250F0000        <1>  jne L_error_incorrect_type
  1797 00001056 488B4001                        mov rax, SOB_PAIR_CAR(rax)
  1798 0000105A C9                              leave
  1799 0000105B C21800                          ret AND_KILL_FRAME(1)
  1800                                          
  1801                                  L_code_ptr_cdr:
  1802 0000105E C8000000                        enter 0, 0
  1803 00001062 48837D1801                      cmp COUNT, 1
  1804 00001067 0F853A0E0000                    jne L_error_arg_count_1
  1805 0000106D 488B4520                        mov rax, PARAM(0)
  1806                                          assert_pair(rax)
    53 00001071 803821              <1>  cmp byte [%1], %2
    54 00001074 0F85010F0000        <1>  jne L_error_incorrect_type
  1807 0000107A 488B4009                        mov rax, SOB_PAIR_CDR(rax)
  1808 0000107E C9                              leave
  1809 0000107F C21800                          ret AND_KILL_FRAME(1)
  1810                                          
  1811                                  L_code_ptr_string_length:
  1812 00001082 C8000000                        enter 0, 0
  1813 00001086 48837D1801                      cmp COUNT, 1
  1814 0000108B 0F85160E0000                    jne L_error_arg_count_1
  1815 00001091 488B4520                        mov rax, PARAM(0)
  1816                                          assert_string(rax)
    53 00001095 803803              <1>  cmp byte [%1], %2
    54 00001098 0F85DD0E0000        <1>  jne L_error_incorrect_type
  1817 0000109E 488B7801                        mov rdi, SOB_STRING_LENGTH(rax)
  1818 000010A2 E84F0D0000                      call make_integer
  1819 000010A7 C9                              leave
  1820 000010A8 C21800                          ret AND_KILL_FRAME(1)
  1821                                  
  1822                                  L_code_ptr_vector_length:
  1823 000010AB C8000000                        enter 0, 0
  1824 000010AF 48837D1801                      cmp COUNT, 1
  1825 000010B4 0F85ED0D0000                    jne L_error_arg_count_1
  1826 000010BA 488B4520                        mov rax, PARAM(0)
  1827                                          assert_vector(rax)
    53 000010BE 803822              <1>  cmp byte [%1], %2
    54 000010C1 0F85B40E0000        <1>  jne L_error_incorrect_type
  1828 000010C7 488B7801                        mov rdi, SOB_VECTOR_LENGTH(rax)
  1829 000010CB E8260D0000                      call make_integer
  1830 000010D0 C9                              leave
  1831 000010D1 C21800                          ret AND_KILL_FRAME(1)
  1832                                  
  1833                                  L_code_ptr_real_to_integer:
  1834 000010D4 C8000000                        enter 0, 0
  1835 000010D8 48837D1801                      cmp COUNT, 1
  1836 000010DD 0F85C40D0000                    jne L_error_arg_count_1
  1837 000010E3 488B5D20                        mov rbx, PARAM(0)
  1838                                          assert_real(rbx)
    53 000010E7 803B13              <1>  cmp byte [%1], %2
    54 000010EA 0F858B0E0000        <1>  jne L_error_incorrect_type
  1839 000010F0 F20F104301                      movsd xmm0, qword [rbx + 1]
  1840 000010F5 F2480F2CF8                      cvttsd2si rdi, xmm0
  1841 000010FA E8F70C0000                      call make_integer
  1842 000010FF C9                              leave
  1843 00001100 C21800                          ret AND_KILL_FRAME(1)
  1844                                  
  1845                                  L_code_ptr_exit:
  1846 00001103 C8000000                        enter 0, 0
  1847 00001107 48837D1800                      cmp COUNT, 0
  1848 0000110C 0F85600D0000                    jne L_error_arg_count_0
  1849 00001112 B800000000                      mov rax, 0
  1850 00001117 E8(00000000)                    call exit
  1851                                  
  1852                                  L_code_ptr_integer_to_real:
  1853 0000111C C8000000                        enter 0, 0
  1854 00001120 48837D1801                      cmp COUNT, 1
  1855 00001125 0F857C0D0000                    jne L_error_arg_count_1
  1856 0000112B 488B4520                        mov rax, PARAM(0)
  1857                                          assert_integer(rax)
    53 0000112F 803811              <1>  cmp byte [%1], %2
    54 00001132 0F85430E0000        <1>  jne L_error_incorrect_type
  1858 00001138 FF7001                          push qword [rax + 1]
  1859 0000113B F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1860 00001141 E8980C0000                      call make_real
  1861 00001146 C9                              leave
  1862 00001147 C21800                          ret AND_KILL_FRAME(1)
  1863                                  
  1864                                  L_code_ptr_fraction_to_real:
  1865 0000114A C8000000                        enter 0, 0
  1866 0000114E 48837D1801                      cmp COUNT, 1
  1867 00001153 0F854E0D0000                    jne L_error_arg_count_1
  1868 00001159 488B4520                        mov rax, PARAM(0)
  1869                                          assert_fraction(rax)
    53 0000115D 803812              <1>  cmp byte [%1], %2
    54 00001160 0F85150E0000        <1>  jne L_error_incorrect_type
  1870 00001166 FF7001                          push qword [rax + 1]
  1871 00001169 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1872 0000116F FF7009                          push qword [rax + 1 + 8]
  1873 00001172 F2480F2A0C24                    cvtsi2sd xmm1, qword [rsp]
  1874 00001178 F20F5EC1                        divsd xmm0, xmm1
  1875 0000117C E85D0C0000                      call make_real
  1876 00001181 C9                              leave
  1877 00001182 C21800                          ret AND_KILL_FRAME(1)
  1878                                  
  1879                                  L_code_ptr_char_to_integer:
  1880 00001185 C8000000                        enter 0, 0
  1881 00001189 48837D1801                      cmp COUNT, 1
  1882 0000118E 0F85130D0000                    jne L_error_arg_count_1
  1883 00001194 488B4520                        mov rax, PARAM(0)
  1884                                          assert_char(rax)
    53 00001198 803802              <1>  cmp byte [%1], %2
    54 0000119B 0F85DA0D0000        <1>  jne L_error_incorrect_type
  1885 000011A1 8A4001                          mov al, byte [rax + 1]
  1886 000011A4 4825FF000000                    and rax, 255
  1887 000011AA 4889C7                          mov rdi, rax
  1888 000011AD E8440C0000                      call make_integer
  1889 000011B2 C9                              leave
  1890 000011B3 C21800                          ret AND_KILL_FRAME(1)
  1891                                  
  1892                                  L_code_ptr_integer_to_fraction:
  1893 000011B6 C8000000                        enter 0, 0
  1894 000011BA 48837D1801                      cmp COUNT, 1
  1895 000011BF 0F85E20C0000                    jne L_error_arg_count_1
  1896 000011C5 4C8B4520                        mov r8, PARAM(0)
  1897                                          assert_integer(r8)
    53 000011C9 41803811            <1>  cmp byte [%1], %2
    54 000011CD 0F85A80D0000        <1>  jne L_error_incorrect_type
  1898 000011D3 BF11000000                      mov rdi, (1 + 8 + 8)
  1899 000011D8 E873F0FFFF                      call malloc
  1900 000011DD 498B5801                        mov rbx, qword [r8 + 1]
  1901 000011E1 C60012                          mov byte [rax], T_fraction
  1902 000011E4 48895801                        mov qword [rax + 1], rbx
  1903 000011E8 48C7400901000000                mov qword [rax + 1 + 8], 1
  1904 000011F0 C9                              leave
  1905 000011F1 C21800                          ret AND_KILL_FRAME(1)
  1906                                  
  1907                                  L_code_ptr_integer_to_char:
  1908 000011F4 C8000000                        enter 0, 0
  1909 000011F8 48837D1801                      cmp COUNT, 1
  1910 000011FD 0F85A40C0000                    jne L_error_arg_count_1
  1911 00001203 488B4520                        mov rax, PARAM(0)
  1912                                          assert_integer(rax)
    53 00001207 803811              <1>  cmp byte [%1], %2
    54 0000120A 0F856B0D0000        <1>  jne L_error_incorrect_type
  1913 00001210 488B5801                        mov rbx, qword [rax + 1]
  1914 00001214 4883FB00                        cmp rbx, 0
  1915 00001218 0F8EF20B0000                    jle L_error_integer_range
  1916 0000121E 4881FB00010000                  cmp rbx, 256
  1917 00001225 0F8DE50B0000                    jge L_error_integer_range
  1918 0000122B BF02000000                      mov rdi, (1 + 1)
  1919 00001230 E81BF0FFFF                      call malloc
  1920 00001235 C60002                          mov byte [rax], T_char
  1921 00001238 885801                          mov byte [rax + 1], bl
  1922 0000123B C9                              leave
  1923 0000123C C21800                          ret AND_KILL_FRAME(1)
  1924                                  
  1925                                  L_code_ptr_trng:
  1926 0000123F C8000000                        enter 0, 0
  1927 00001243 48837D1800                      cmp COUNT, 0
  1928 00001248 0F85240C0000                    jne L_error_arg_count_0
  1929 0000124E 480FC7F7                        rdrand rdi
  1930 00001252 48D1EF                          shr rdi, 1
  1931 00001255 E89C0B0000                      call make_integer
  1932 0000125A C9                              leave
  1933 0000125B C21000                          ret AND_KILL_FRAME(0)
  1934                                  
  1935                                  L_code_ptr_is_zero:
  1936 0000125E C8000000                        enter 0, 0
  1937 00001262 48837D1801                      cmp COUNT, 1
  1938 00001267 0F853A0C0000                    jne L_error_arg_count_1
  1939 0000126D 488B4520                        mov rax, PARAM(0)
  1940 00001271 803811                          cmp byte [rax], T_integer
  1941 00001274 740F                            je .L_integer
  1942 00001276 803812                          cmp byte [rax], T_fraction
  1943 00001279 7413                            je .L_fraction
  1944 0000127B 803813                          cmp byte [rax], T_real
  1945 0000127E 7417                            je .L_real
  1946 00001280 E9F60C0000                      jmp L_error_incorrect_type
  1947                                  .L_integer:
  1948 00001285 4883780100                      cmp qword [rax + 1], 0
  1949 0000128A 7429                            je .L_zero
  1950 0000128C EB1B                            jmp .L_not_zero
  1951                                  .L_fraction:
  1952 0000128E 4883780100                      cmp qword [rax + 1], 0
  1953 00001293 7420                            je .L_zero
  1954 00001295 EB12                            jmp .L_not_zero
  1955                                  .L_real:
  1956 00001297 660FEFC0                        pxor xmm0, xmm0
  1957 0000129B FF7001                          push qword [rax + 1]
  1958 0000129E F20F100C24                      movsd xmm1, qword [rsp]
  1959 000012A3 660F2EC1                        ucomisd xmm0, xmm1
  1960 000012A7 740C                            je .L_zero
  1961                                  .L_not_zero:
  1962 000012A9 48B8-                           mov rax, sob_boolean_false
  1962 000012AB [0200000000000000] 
  1963 000012B3 EB0A                            jmp .L_end
  1964                                  .L_zero:
  1965 000012B5 48B8-                           mov rax, sob_boolean_true
  1965 000012B7 [0300000000000000] 
  1966                                  .L_end:
  1967 000012BF C9                              leave
  1968 000012C0 C21800                          ret AND_KILL_FRAME(1)
  1969                                  
  1970                                  L_code_ptr_is_integer:
  1971 000012C3 C8000000                        enter 0, 0
  1972 000012C7 48837D1801                      cmp COUNT, 1
  1973 000012CC 0F85D50B0000                    jne L_error_arg_count_1
  1974 000012D2 488B4520                        mov rax, PARAM(0)
  1975 000012D6 803811                          cmp byte [rax], T_integer
  1976 000012D9 750C                            jne .L_false
  1977 000012DB 48B8-                           mov rax, sob_boolean_true
  1977 000012DD [0300000000000000] 
  1978 000012E5 EB0A                            jmp .L_exit
  1979                                  .L_false:
  1980 000012E7 48B8-                           mov rax, sob_boolean_false
  1980 000012E9 [0200000000000000] 
  1981                                  .L_exit:
  1982 000012F1 C9                              leave
  1983 000012F2 C21800                          ret AND_KILL_FRAME(1)
  1984                                  
  1985                                  L_code_ptr_raw_bin_add_rr:
  1986 000012F5 C8000000                        enter 0, 0
  1987 000012F9 48837D1802                      cmp COUNT, 2
  1988 000012FE 0F85D80B0000                    jne L_error_arg_count_2
  1989 00001304 488B5D20                        mov rbx, PARAM(0)
  1990                                          assert_real(rbx)
    53 00001308 803B13              <1>  cmp byte [%1], %2
    54 0000130B 0F856A0C0000        <1>  jne L_error_incorrect_type
  1991 00001311 488B4D28                        mov rcx, PARAM(1)
  1992                                          assert_real(rcx)
    53 00001315 803913              <1>  cmp byte [%1], %2
    54 00001318 0F855D0C0000        <1>  jne L_error_incorrect_type
  1993 0000131E F20F104301                      movsd xmm0, qword [rbx + 1]
  1994 00001323 F20F104901                      movsd xmm1, qword [rcx + 1]
  1995 00001328 F20F58C1                        addsd xmm0, xmm1
  1996 0000132C E8AD0A0000                      call make_real
  1997 00001331 C9                              leave
  1998 00001332 C22000                          ret AND_KILL_FRAME(2)
  1999                                  
  2000                                  L_code_ptr_raw_bin_sub_rr:
  2001 00001335 C8000000                        enter 0, 0
  2002 00001339 48837D1802                      cmp COUNT, 2
  2003 0000133E 0F85980B0000                    jne L_error_arg_count_2
  2004 00001344 488B5D20                        mov rbx, PARAM(0)
  2005                                          assert_real(rbx)
    53 00001348 803B13              <1>  cmp byte [%1], %2
    54 0000134B 0F852A0C0000        <1>  jne L_error_incorrect_type
  2006 00001351 488B4D28                        mov rcx, PARAM(1)
  2007                                          assert_real(rcx)
    53 00001355 803913              <1>  cmp byte [%1], %2
    54 00001358 0F851D0C0000        <1>  jne L_error_incorrect_type
  2008 0000135E F20F104301                      movsd xmm0, qword [rbx + 1]
  2009 00001363 F20F104901                      movsd xmm1, qword [rcx + 1]
  2010 00001368 F20F5CC1                        subsd xmm0, xmm1
  2011 0000136C E86D0A0000                      call make_real
  2012 00001371 C9                              leave
  2013 00001372 C22000                          ret AND_KILL_FRAME(2)
  2014                                  
  2015                                  L_code_ptr_raw_bin_mul_rr:
  2016 00001375 C8000000                        enter 0, 0
  2017 00001379 48837D1802                      cmp COUNT, 2
  2018 0000137E 0F85580B0000                    jne L_error_arg_count_2
  2019 00001384 488B5D20                        mov rbx, PARAM(0)
  2020                                          assert_real(rbx)
    53 00001388 803B13              <1>  cmp byte [%1], %2
    54 0000138B 0F85EA0B0000        <1>  jne L_error_incorrect_type
  2021 00001391 488B4D28                        mov rcx, PARAM(1)
  2022                                          assert_real(rcx)
    53 00001395 803913              <1>  cmp byte [%1], %2
    54 00001398 0F85DD0B0000        <1>  jne L_error_incorrect_type
  2023 0000139E F20F104301                      movsd xmm0, qword [rbx + 1]
  2024 000013A3 F20F104901                      movsd xmm1, qword [rcx + 1]
  2025 000013A8 F20F59C1                        mulsd xmm0, xmm1
  2026 000013AC E82D0A0000                      call make_real
  2027 000013B1 C9                              leave
  2028 000013B2 C22000                          ret AND_KILL_FRAME(2)
  2029                                  
  2030                                  L_code_ptr_raw_bin_div_rr:
  2031 000013B5 C8000000                        enter 0, 0
  2032 000013B9 48837D1802                      cmp COUNT, 2
  2033 000013BE 0F85180B0000                    jne L_error_arg_count_2
  2034 000013C4 488B5D20                        mov rbx, PARAM(0)
  2035                                          assert_real(rbx)
    53 000013C8 803B13              <1>  cmp byte [%1], %2
    54 000013CB 0F85AA0B0000        <1>  jne L_error_incorrect_type
  2036 000013D1 488B4D28                        mov rcx, PARAM(1)
  2037                                          assert_real(rcx)
    53 000013D5 803913              <1>  cmp byte [%1], %2
    54 000013D8 0F859D0B0000        <1>  jne L_error_incorrect_type
  2038 000013DE F20F104301                      movsd xmm0, qword [rbx + 1]
  2039 000013E3 F20F104901                      movsd xmm1, qword [rcx + 1]
  2040 000013E8 660FEFD2                        pxor xmm2, xmm2
  2041 000013EC 660F2ECA                        ucomisd xmm1, xmm2
  2042 000013F0 0F84B60B0000                    je L_error_division_by_zero
  2043 000013F6 F20F5EC1                        divsd xmm0, xmm1
  2044 000013FA E8DF090000                      call make_real
  2045 000013FF C9                              leave
  2046 00001400 C22000                          ret AND_KILL_FRAME(2)
  2047                                  
  2048                                  L_code_ptr_raw_bin_add_zz:
  2049 00001403 C8000000                	enter 0, 0
  2050 00001407 48837D1802              	cmp COUNT, 2
  2051 0000140C 0F85CA0A0000            	jne L_error_arg_count_2
  2052 00001412 4C8B4520                	mov r8, PARAM(0)
  2053                                  	assert_integer(r8)
    53 00001416 41803811            <1>  cmp byte [%1], %2
    54 0000141A 0F855B0B0000        <1>  jne L_error_incorrect_type
  2054 00001420 4C8B4D28                	mov r9, PARAM(1)
  2055                                  	assert_integer(r9)
    53 00001424 41803911            <1>  cmp byte [%1], %2
    54 00001428 0F854D0B0000        <1>  jne L_error_incorrect_type
  2056 0000142E 498B7801                	mov rdi, qword [r8 + 1]
  2057 00001432 49037901                	add rdi, qword [r9 + 1]
  2058 00001436 E8BB090000              	call make_integer
  2059 0000143B C9                      	leave
  2060 0000143C C22000                  	ret AND_KILL_FRAME(2)
  2061                                  
  2062                                  L_code_ptr_raw_bin_add_qq:
  2063 0000143F C8000000                        enter 0, 0
  2064 00001443 48837D1802                      cmp COUNT, 2
  2065 00001448 0F858E0A0000                    jne L_error_arg_count_2
  2066 0000144E 4C8B4520                        mov r8, PARAM(0)
  2067                                          assert_fraction(r8)
    53 00001452 41803812            <1>  cmp byte [%1], %2
    54 00001456 0F851F0B0000        <1>  jne L_error_incorrect_type
  2068 0000145C 4C8B4D28                        mov r9, PARAM(1)
  2069                                          assert_fraction(r9)
    53 00001460 41803912            <1>  cmp byte [%1], %2
    54 00001464 0F85110B0000        <1>  jne L_error_incorrect_type
  2070 0000146A 498B4001                        mov rax, qword [r8 + 1] ; num1
  2071 0000146E 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  2072 00001472 4899                            cqo
  2073 00001474 48F7EB                          imul rbx
  2074 00001477 4889C6                          mov rsi, rax
  2075 0000147A 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2076 0000147E 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  2077 00001482 4899                            cqo
  2078 00001484 48F7EB                          imul rbx
  2079 00001487 4801C6                          add rsi, rax
  2080 0000148A 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2081 0000148E 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  2082 00001492 4899                            cqo
  2083 00001494 48F7EB                          imul rbx
  2084 00001497 4889C7                          mov rdi, rax
  2085 0000149A E8DE010000                      call normalize_fraction
  2086 0000149F C9                              leave
  2087 000014A0 C22000                          ret AND_KILL_FRAME(2)
  2088                                  
  2089                                  L_code_ptr_raw_bin_sub_zz:
  2090 000014A3 C8000000                	enter 0, 0
  2091 000014A7 48837D1802              	cmp COUNT, 2
  2092 000014AC 0F852A0A0000            	jne L_error_arg_count_2
  2093 000014B2 4C8B4520                	mov r8, PARAM(0)
  2094                                  	assert_integer(r8)
    53 000014B6 41803811            <1>  cmp byte [%1], %2
    54 000014BA 0F85BB0A0000        <1>  jne L_error_incorrect_type
  2095 000014C0 4C8B4D28                	mov r9, PARAM(1)
  2096                                  	assert_integer(r9)
    53 000014C4 41803911            <1>  cmp byte [%1], %2
    54 000014C8 0F85AD0A0000        <1>  jne L_error_incorrect_type
  2097 000014CE 498B7801                	mov rdi, qword [r8 + 1]
  2098 000014D2 492B7901                	sub rdi, qword [r9 + 1]
  2099 000014D6 E81B090000              	call make_integer
  2100 000014DB C9                      	leave
  2101 000014DC C22000                  	ret AND_KILL_FRAME(2)
  2102                                  
  2103                                  L_code_ptr_raw_bin_sub_qq:
  2104 000014DF C8000000                        enter 0, 0
  2105 000014E3 48837D1802                      cmp COUNT, 2
  2106 000014E8 0F85EE090000                    jne L_error_arg_count_2
  2107 000014EE 4C8B4520                        mov r8, PARAM(0)
  2108                                          assert_fraction(r8)
    53 000014F2 41803812            <1>  cmp byte [%1], %2
    54 000014F6 0F857F0A0000        <1>  jne L_error_incorrect_type
  2109 000014FC 4C8B4D28                        mov r9, PARAM(1)
  2110                                          assert_fraction(r9)
    53 00001500 41803912            <1>  cmp byte [%1], %2
    54 00001504 0F85710A0000        <1>  jne L_error_incorrect_type
  2111 0000150A 498B4001                        mov rax, qword [r8 + 1] ; num1
  2112 0000150E 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  2113 00001512 4899                            cqo
  2114 00001514 48F7EB                          imul rbx
  2115 00001517 4889C6                          mov rsi, rax
  2116 0000151A 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2117 0000151E 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  2118 00001522 4899                            cqo
  2119 00001524 48F7EB                          imul rbx
  2120 00001527 4829C6                          sub rsi, rax
  2121 0000152A 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2122 0000152E 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  2123 00001532 4899                            cqo
  2124 00001534 48F7EB                          imul rbx
  2125 00001537 4889C7                          mov rdi, rax
  2126 0000153A E83E010000                      call normalize_fraction
  2127 0000153F C9                              leave
  2128 00001540 C22000                          ret AND_KILL_FRAME(2)
  2129                                  
  2130                                  L_code_ptr_raw_bin_mul_zz:
  2131 00001543 C8000000                	enter 0, 0
  2132 00001547 48837D1802              	cmp COUNT, 2
  2133 0000154C 0F858A090000            	jne L_error_arg_count_2
  2134 00001552 4C8B4520                	mov r8, PARAM(0)
  2135                                  	assert_integer(r8)
    53 00001556 41803811            <1>  cmp byte [%1], %2
    54 0000155A 0F851B0A0000        <1>  jne L_error_incorrect_type
  2136 00001560 4C8B4D28                	mov r9, PARAM(1)
  2137                                  	assert_integer(r9)
    53 00001564 41803911            <1>  cmp byte [%1], %2
    54 00001568 0F850D0A0000        <1>  jne L_error_incorrect_type
  2138 0000156E 4899                    	cqo
  2139 00001570 498B4001                	mov rax, qword [r8 + 1]
  2140 00001574 49F76101                	mul qword [r9 + 1]
  2141 00001578 4889C7                  	mov rdi, rax
  2142 0000157B E876080000              	call make_integer
  2143 00001580 C9                      	leave
  2144 00001581 C22000                  	ret AND_KILL_FRAME(2)
  2145                                  
  2146                                  L_code_ptr_raw_bin_mul_qq:
  2147 00001584 C8000000                        enter 0, 0
  2148 00001588 48837D1802                      cmp COUNT, 2
  2149 0000158D 0F8549090000                    jne L_error_arg_count_2
  2150 00001593 4C8B4520                        mov r8, PARAM(0)
  2151                                          assert_fraction(r8)
    53 00001597 41803812            <1>  cmp byte [%1], %2
    54 0000159B 0F85DA090000        <1>  jne L_error_incorrect_type
  2152 000015A1 4C8B4D28                        mov r9, PARAM(1)
  2153                                          assert_fraction(r9)
    53 000015A5 41803912            <1>  cmp byte [%1], %2
    54 000015A9 0F85CC090000        <1>  jne L_error_incorrect_type
  2154 000015AF 498B4001                        mov rax, qword [r8 + 1] ; num1
  2155 000015B3 498B5901                        mov rbx, qword [r9 + 1] ; num2
  2156 000015B7 4899                            cqo
  2157 000015B9 48F7EB                          imul rbx
  2158 000015BC 4889C6                          mov rsi, rax
  2159 000015BF 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2160 000015C3 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  2161 000015C7 4899                            cqo
  2162 000015C9 48F7EB                          imul rbx
  2163 000015CC 4889C7                          mov rdi, rax
  2164 000015CF E8A9000000                      call normalize_fraction
  2165 000015D4 C9                              leave
  2166 000015D5 C22000                          ret AND_KILL_FRAME(2)
  2167                                          
  2168                                  L_code_ptr_raw_bin_div_zz:
  2169 000015D8 C8000000                	enter 0, 0
  2170 000015DC 48837D1802              	cmp COUNT, 2
  2171 000015E1 0F85F5080000            	jne L_error_arg_count_2
  2172 000015E7 4C8B4520                	mov r8, PARAM(0)
  2173                                  	assert_integer(r8)
    53 000015EB 41803811            <1>  cmp byte [%1], %2
    54 000015EF 0F8586090000        <1>  jne L_error_incorrect_type
  2174 000015F5 4C8B4D28                	mov r9, PARAM(1)
  2175                                  	assert_integer(r9)
    53 000015F9 41803911            <1>  cmp byte [%1], %2
    54 000015FD 0F8578090000        <1>  jne L_error_incorrect_type
  2176 00001603 498B7901                	mov rdi, qword [r9 + 1]
  2177 00001607 4883FF00                	cmp rdi, 0
  2178 0000160B 0F849B090000            	je L_error_division_by_zero
  2179 00001611 498B7001                	mov rsi, qword [r8 + 1]
  2180 00001615 E863000000              	call normalize_fraction
  2181 0000161A C9                      	leave
  2182 0000161B C22000                  	ret AND_KILL_FRAME(2)
  2183                                  
  2184                                  L_code_ptr_raw_bin_div_qq:
  2185 0000161E C8000000                        enter 0, 0
  2186 00001622 48837D1802                      cmp COUNT, 2
  2187 00001627 0F85AF080000                    jne L_error_arg_count_2
  2188 0000162D 4C8B4520                        mov r8, PARAM(0)
  2189                                          assert_fraction(r8)
    53 00001631 41803812            <1>  cmp byte [%1], %2
    54 00001635 0F8540090000        <1>  jne L_error_incorrect_type
  2190 0000163B 4C8B4D28                        mov r9, PARAM(1)
  2191                                          assert_fraction(r9)
    53 0000163F 41803912            <1>  cmp byte [%1], %2
    54 00001643 0F8532090000        <1>  jne L_error_incorrect_type
  2192 00001649 4983790100                      cmp qword [r9 + 1], 0
  2193 0000164E 0F8458090000                    je L_error_division_by_zero
  2194 00001654 498B4001                        mov rax, qword [r8 + 1] ; num1
  2195 00001658 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  2196 0000165C 4899                            cqo
  2197 0000165E 48F7EB                          imul rbx
  2198 00001661 4889C6                          mov rsi, rax
  2199 00001664 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2200 00001668 498B5901                        mov rbx, qword [r9 + 1] ; num2
  2201 0000166C 4899                            cqo
  2202 0000166E 48F7EB                          imul rbx
  2203 00001671 4889C7                          mov rdi, rax
  2204 00001674 E804000000                      call normalize_fraction
  2205 00001679 C9                              leave
  2206 0000167A C22000                          ret AND_KILL_FRAME(2)
  2207                                          
  2208                                  normalize_fraction:
  2209 0000167D 56                              push rsi
  2210 0000167E 57                              push rdi
  2211 0000167F E859000000                      call gcd
  2212 00001684 4889C3                          mov rbx, rax
  2213 00001687 58                              pop rax
  2214 00001688 4899                            cqo
  2215 0000168A 48F7FB                          idiv rbx
  2216 0000168D 4989C0                          mov r8, rax
  2217 00001690 58                              pop rax
  2218 00001691 4899                            cqo
  2219 00001693 48F7FB                          idiv rbx
  2220 00001696 4989C1                          mov r9, rax
  2221 00001699 4983F900                        cmp r9, 0
  2222 0000169D 741C                            je .L_zero
  2223 0000169F 4983F801                        cmp r8, 1
  2224 000016A3 7421                            je .L_int
  2225 000016A5 BF11000000                      mov rdi, (1 + 8 + 8)
  2226 000016AA E8A1EBFFFF                      call malloc
  2227 000016AF C60012                          mov byte [rax], T_fraction
  2228 000016B2 4C894801                        mov qword [rax + 1], r9
  2229 000016B6 4C894009                        mov qword [rax + 1 + 8], r8
  2230 000016BA C3                              ret
  2231                                  .L_zero:
  2232 000016BB BF00000000                      mov rdi, 0
  2233 000016C0 E831070000                      call make_integer
  2234 000016C5 C3                              ret
  2235                                  .L_int:
  2236 000016C6 4C89CF                          mov rdi, r9
  2237 000016C9 E828070000                      call make_integer
  2238 000016CE C3                              ret
  2239                                  
  2240                                  iabs:
  2241 000016CF 4889F8                          mov rax, rdi
  2242 000016D2 4883F800                        cmp rax, 0
  2243 000016D6 7C01                            jl .Lneg
  2244 000016D8 C3                              ret
  2245                                  .Lneg:
  2246 000016D9 48F7D8                          neg rax
  2247 000016DC C3                              ret
  2248                                  
  2249                                  gcd:
  2250 000016DD E8EDFFFFFF                      call iabs
  2251 000016E2 4889C3                          mov rbx, rax
  2252 000016E5 4889F7                          mov rdi, rsi
  2253 000016E8 E8E2FFFFFF                      call iabs
  2254 000016ED 4883F800                        cmp rax, 0
  2255 000016F1 7502                            jne .L0
  2256 000016F3 4893                            xchg rax, rbx
  2257                                  .L0:
  2258 000016F5 4883FB00                        cmp rbx, 0
  2259 000016F9 740C                            je .L1
  2260 000016FB 4899                            cqo
  2261 000016FD 48F7F3                          div rbx
  2262 00001700 4889D0                          mov rax, rdx
  2263 00001703 4893                            xchg rax, rbx
  2264 00001705 EBEE                            jmp .L0
  2265                                  .L1:
  2266 00001707 C3                              ret
  2267                                  
  2268                                  L_code_ptr_error:
  2269 00001708 C8000000                        enter 0, 0
  2270 0000170C 48837D1802                      cmp COUNT, 2
  2271 00001711 0F85C5070000                    jne L_error_arg_count_2
  2272 00001717 488B7520                        mov rsi, PARAM(0)
  2273                                          assert_interned_symbol(rsi)
    53 0000171B 803E41              <1>  cmp byte [%1], %2
    54 0000171E 0F8557080000        <1>  jne L_error_incorrect_type
  2274 00001724 488B7528                        mov rsi, PARAM(1)
  2275                                          assert_string(rsi)
    53 00001728 803E03              <1>  cmp byte [%1], %2
    54 0000172B 0F854A080000        <1>  jne L_error_incorrect_type
  2276 00001731 48BF-                           mov rdi, fmt_scheme_error_part_1
  2276 00001733 [0D0A000000000000] 
  2277 0000173B B800000000                      mov rax, 0
  2278                                          ENTER
    44 00001740 C8000000            <1>  enter 0, 0
    45 00001744 4883E4F0            <1>  and rsp, ~15
  2279 00001748 E8(00000000)                    call printf
  2280                                          LEAVE
    49 0000174D C9                  <1>  leave
  2281 0000174E 488B7D20                        mov rdi, PARAM(0)
  2282 00001752 E87AEDFFFF                      call print_sexpr
  2283 00001757 48BF-                           mov rdi, fmt_scheme_error_part_2
  2283 00001759 [210A000000000000] 
  2284 00001761 B800000000                      mov rax, 0
  2285                                          ENTER
    44 00001766 C8000000            <1>  enter 0, 0
    45 0000176A 4883E4F0            <1>  and rsp, ~15
  2286 0000176E E8(00000000)                    call printf
  2287                                          LEAVE
    49 00001773 C9                  <1>  leave
  2288 00001774 488B4528                        mov rax, PARAM(1)       ; sob_string
  2289 00001778 BE01000000                      mov rsi, 1              ; size = 1 byte
  2290 0000177D 488B5001                        mov rdx, qword [rax + 1] ; length
  2291 00001781 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
  2292 00001785 488B0C25[00000000]              mov rcx, qword [stdout]  ; FILE*
  2293                                  	ENTER
    44 0000178D C8000000            <1>  enter 0, 0
    45 00001791 4883E4F0            <1>  and rsp, ~15
  2294 00001795 E8(00000000)                    call fwrite
  2295                                  	LEAVE
    49 0000179A C9                  <1>  leave
  2296 0000179B 48BF-                           mov rdi, fmt_scheme_error_part_3
  2296 0000179D [630A000000000000] 
  2297 000017A5 B800000000                      mov rax, 0
  2298                                          ENTER
    44 000017AA C8000000            <1>  enter 0, 0
    45 000017AE 4883E4F0            <1>  and rsp, ~15
  2299 000017B2 E8(00000000)                    call printf
  2300                                          LEAVE
    49 000017B7 C9                  <1>  leave
  2301 000017B8 48C7C0F7FFFFFF                  mov rax, -9
  2302 000017BF E8(00000000)                    call exit
  2303                                  
  2304                                  L_code_ptr_raw_less_than_rr:
  2305 000017C4 C8000000                        enter 0, 0
  2306 000017C8 48837D1802                      cmp COUNT, 2
  2307 000017CD 0F8509070000                    jne L_error_arg_count_2
  2308 000017D3 488B7520                        mov rsi, PARAM(0)
  2309                                          assert_real(rsi)
    53 000017D7 803E13              <1>  cmp byte [%1], %2
    54 000017DA 0F859B070000        <1>  jne L_error_incorrect_type
  2310 000017E0 488B7D28                        mov rdi, PARAM(1)
  2311                                          assert_real(rdi)
    53 000017E4 803F13              <1>  cmp byte [%1], %2
    54 000017E7 0F858E070000        <1>  jne L_error_incorrect_type
  2312 000017ED F20F104601                      movsd xmm0, qword [rsi + 1]
  2313 000017F2 F20F104F01                      movsd xmm1, qword [rdi + 1]
  2314 000017F7 660F2FC1                        comisd xmm0, xmm1
  2315 000017FB 730C                            jae .L_false
  2316 000017FD 48B8-                           mov rax, sob_boolean_true
  2316 000017FF [0300000000000000] 
  2317 00001807 EB0A                            jmp .L_exit
  2318                                  .L_false:
  2319 00001809 48B8-                           mov rax, sob_boolean_false
  2319 0000180B [0200000000000000] 
  2320                                  .L_exit:
  2321 00001813 C9                              leave
  2322 00001814 C22000                          ret AND_KILL_FRAME(2)
  2323                                          
  2324                                  L_code_ptr_raw_less_than_zz:
  2325 00001817 C8000000                	enter 0, 0
  2326 0000181B 48837D1802              	cmp COUNT, 2
  2327 00001820 0F85B6060000            	jne L_error_arg_count_2
  2328 00001826 4C8B4520                	mov r8, PARAM(0)
  2329                                  	assert_integer(r8)
    53 0000182A 41803811            <1>  cmp byte [%1], %2
    54 0000182E 0F8547070000        <1>  jne L_error_incorrect_type
  2330 00001834 4C8B4D28                	mov r9, PARAM(1)
  2331                                  	assert_integer(r9)
    53 00001838 41803911            <1>  cmp byte [%1], %2
    54 0000183C 0F8539070000        <1>  jne L_error_incorrect_type
  2332 00001842 498B7801                	mov rdi, qword [r8 + 1]
  2333 00001846 493B7901                	cmp rdi, qword [r9 + 1]
  2334 0000184A 7D0C                    	jge .L_false
  2335 0000184C 48B8-                   	mov rax, sob_boolean_true
  2335 0000184E [0300000000000000] 
  2336 00001856 EB0A                    	jmp .L_exit
  2337                                  .L_false:
  2338 00001858 48B8-                   	mov rax, sob_boolean_false
  2338 0000185A [0200000000000000] 
  2339                                  .L_exit:
  2340 00001862 C9                      	leave
  2341 00001863 C22000                  	ret AND_KILL_FRAME(2)
  2342                                  
  2343                                  L_code_ptr_raw_less_than_qq:
  2344 00001866 C8000000                        enter 0, 0
  2345 0000186A 48837D1802                      cmp COUNT, 2
  2346 0000186F 0F8567060000                    jne L_error_arg_count_2
  2347 00001875 488B7520                        mov rsi, PARAM(0)
  2348                                          assert_fraction(rsi)
    53 00001879 803E12              <1>  cmp byte [%1], %2
    54 0000187C 0F85F9060000        <1>  jne L_error_incorrect_type
  2349 00001882 488B7D28                        mov rdi, PARAM(1)
  2350                                          assert_fraction(rdi)
    53 00001886 803F12              <1>  cmp byte [%1], %2
    54 00001889 0F85EC060000        <1>  jne L_error_incorrect_type
  2351 0000188F 488B4601                        mov rax, qword [rsi + 1] ; num1
  2352 00001893 4899                            cqo
  2353 00001895 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  2354 00001899 4889C1                          mov rcx, rax
  2355 0000189C 488B4609                        mov rax, qword [rsi + 1 + 8] ; den1
  2356 000018A0 4899                            cqo
  2357 000018A2 48F76F01                        imul qword [rdi + 1]          ; num2
  2358 000018A6 4829C1                          sub rcx, rax
  2359 000018A9 7D0C                            jge .L_false
  2360 000018AB 48B8-                           mov rax, sob_boolean_true
  2360 000018AD [0300000000000000] 
  2361 000018B5 EB0A                            jmp .L_exit
  2362                                  .L_false:
  2363 000018B7 48B8-                           mov rax, sob_boolean_false
  2363 000018B9 [0200000000000000] 
  2364                                  .L_exit:
  2365 000018C1 C9                              leave
  2366 000018C2 C22000                          ret AND_KILL_FRAME(2)
  2367                                  
  2368                                  L_code_ptr_raw_equal_rr:
  2369 000018C5 C8000000                        enter 0, 0
  2370 000018C9 48837D1802                      cmp COUNT, 2
  2371 000018CE 0F8508060000                    jne L_error_arg_count_2
  2372 000018D4 488B7520                        mov rsi, PARAM(0)
  2373                                          assert_real(rsi)
    53 000018D8 803E13              <1>  cmp byte [%1], %2
    54 000018DB 0F859A060000        <1>  jne L_error_incorrect_type
  2374 000018E1 488B7D28                        mov rdi, PARAM(1)
  2375                                          assert_real(rdi)
    53 000018E5 803F13              <1>  cmp byte [%1], %2
    54 000018E8 0F858D060000        <1>  jne L_error_incorrect_type
  2376 000018EE F20F104601                      movsd xmm0, qword [rsi + 1]
  2377 000018F3 F20F104F01                      movsd xmm1, qword [rdi + 1]
  2378 000018F8 660F2FC1                        comisd xmm0, xmm1
  2379 000018FC 750C                            jne .L_false
  2380 000018FE 48B8-                           mov rax, sob_boolean_true
  2380 00001900 [0300000000000000] 
  2381 00001908 EB0A                            jmp .L_exit
  2382                                  .L_false:
  2383 0000190A 48B8-                           mov rax, sob_boolean_false
  2383 0000190C [0200000000000000] 
  2384                                  .L_exit:
  2385 00001914 C9                              leave
  2386 00001915 C22000                          ret AND_KILL_FRAME(2)
  2387                                          
  2388                                  L_code_ptr_raw_equal_zz:
  2389 00001918 C8000000                	enter 0, 0
  2390 0000191C 48837D1802              	cmp COUNT, 2
  2391 00001921 0F85B5050000            	jne L_error_arg_count_2
  2392 00001927 4C8B4520                	mov r8, PARAM(0)
  2393                                  	assert_integer(r8)
    53 0000192B 41803811            <1>  cmp byte [%1], %2
    54 0000192F 0F8546060000        <1>  jne L_error_incorrect_type
  2394 00001935 4C8B4D28                	mov r9, PARAM(1)
  2395                                  	assert_integer(r9)
    53 00001939 41803911            <1>  cmp byte [%1], %2
    54 0000193D 0F8538060000        <1>  jne L_error_incorrect_type
  2396 00001943 498B7801                	mov rdi, qword [r8 + 1]
  2397 00001947 493B7901                	cmp rdi, qword [r9 + 1]
  2398 0000194B 750C                    	jne .L_false
  2399 0000194D 48B8-                   	mov rax, sob_boolean_true
  2399 0000194F [0300000000000000] 
  2400 00001957 EB0A                    	jmp .L_exit
  2401                                  .L_false:
  2402 00001959 48B8-                   	mov rax, sob_boolean_false
  2402 0000195B [0200000000000000] 
  2403                                  .L_exit:
  2404 00001963 C9                      	leave
  2405 00001964 C22000                  	ret AND_KILL_FRAME(2)
  2406                                  
  2407                                  L_code_ptr_raw_equal_qq:
  2408 00001967 C8000000                        enter 0, 0
  2409 0000196B 48837D1802                      cmp COUNT, 2
  2410 00001970 0F8566050000                    jne L_error_arg_count_2
  2411 00001976 488B7520                        mov rsi, PARAM(0)
  2412                                          assert_fraction(rsi)
    53 0000197A 803E12              <1>  cmp byte [%1], %2
    54 0000197D 0F85F8050000        <1>  jne L_error_incorrect_type
  2413 00001983 488B7D28                        mov rdi, PARAM(1)
  2414                                          assert_fraction(rdi)
    53 00001987 803F12              <1>  cmp byte [%1], %2
    54 0000198A 0F85EB050000        <1>  jne L_error_incorrect_type
  2415 00001990 488B4601                        mov rax, qword [rsi + 1] ; num1
  2416 00001994 4899                            cqo
  2417 00001996 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  2418 0000199A 4889C1                          mov rcx, rax
  2419 0000199D 488B4709                        mov rax, qword [rdi + 1 + 8] ; den1
  2420 000019A1 4899                            cqo
  2421 000019A3 48F76F01                        imul qword [rdi + 1]          ; num2
  2422 000019A7 4829C1                          sub rcx, rax
  2423 000019AA 750C                            jne .L_false
  2424 000019AC 48B8-                           mov rax, sob_boolean_true
  2424 000019AE [0300000000000000] 
  2425 000019B6 EB0A                            jmp .L_exit
  2426                                  .L_false:
  2427 000019B8 48B8-                           mov rax, sob_boolean_false
  2427 000019BA [0200000000000000] 
  2428                                  .L_exit:
  2429 000019C2 C9                              leave
  2430 000019C3 C22000                          ret AND_KILL_FRAME(2)
  2431                                  
  2432                                  L_code_ptr_quotient:
  2433 000019C6 C8000000                        enter 0, 0
  2434 000019CA 48837D1802                      cmp COUNT, 2
  2435 000019CF 0F8507050000                    jne L_error_arg_count_2
  2436 000019D5 488B7520                        mov rsi, PARAM(0)
  2437                                          assert_integer(rsi)
    53 000019D9 803E11              <1>  cmp byte [%1], %2
    54 000019DC 0F8599050000        <1>  jne L_error_incorrect_type
  2438 000019E2 488B7D28                        mov rdi, PARAM(1)
  2439                                          assert_integer(rdi)
    53 000019E6 803F11              <1>  cmp byte [%1], %2
    54 000019E9 0F858C050000        <1>  jne L_error_incorrect_type
  2440 000019EF 488B4601                        mov rax, qword [rsi + 1]
  2441 000019F3 488B5F01                        mov rbx, qword [rdi + 1]
  2442 000019F7 4883FB00                        cmp rbx, 0
  2443 000019FB 0F84AB050000                    je L_error_division_by_zero
  2444 00001A01 4899                            cqo
  2445 00001A03 48F7FB                          idiv rbx
  2446 00001A06 4889C7                          mov rdi, rax
  2447 00001A09 E8E8030000                      call make_integer
  2448 00001A0E C9                              leave
  2449 00001A0F C22000                          ret AND_KILL_FRAME(2)
  2450                                          
  2451                                  L_code_ptr_remainder:
  2452 00001A12 C8000000                        enter 0, 0
  2453 00001A16 48837D1802                      cmp COUNT, 2
  2454 00001A1B 0F85BB040000                    jne L_error_arg_count_2
  2455 00001A21 488B7520                        mov rsi, PARAM(0)
  2456                                          assert_integer(rsi)
    53 00001A25 803E11              <1>  cmp byte [%1], %2
    54 00001A28 0F854D050000        <1>  jne L_error_incorrect_type
  2457 00001A2E 488B7D28                        mov rdi, PARAM(1)
  2458                                          assert_integer(rdi)
    53 00001A32 803F11              <1>  cmp byte [%1], %2
    54 00001A35 0F8540050000        <1>  jne L_error_incorrect_type
  2459 00001A3B 488B4601                        mov rax, qword [rsi + 1]
  2460 00001A3F 488B5F01                        mov rbx, qword [rdi + 1]
  2461 00001A43 4883FB00                        cmp rbx, 0
  2462 00001A47 0F845F050000                    je L_error_division_by_zero
  2463 00001A4D 4899                            cqo
  2464 00001A4F 48F7FB                          idiv rbx
  2465 00001A52 4889D7                          mov rdi, rdx
  2466 00001A55 E89C030000                      call make_integer
  2467 00001A5A C9                              leave
  2468 00001A5B C22000                          ret AND_KILL_FRAME(2)
  2469                                  
  2470                                  L_code_ptr_set_car:
  2471 00001A5E C8000000                        enter 0, 0
  2472 00001A62 48837D1802                      cmp COUNT, 2
  2473 00001A67 0F856F040000                    jne L_error_arg_count_2
  2474 00001A6D 488B4520                        mov rax, PARAM(0)
  2475                                          assert_pair(rax)
    53 00001A71 803821              <1>  cmp byte [%1], %2
    54 00001A74 0F8501050000        <1>  jne L_error_incorrect_type
  2476 00001A7A 488B5D28                        mov rbx, PARAM(1)
  2477 00001A7E 48895801                        mov SOB_PAIR_CAR(rax), rbx
  2478 00001A82 48B8-                           mov rax, sob_void
  2478 00001A84 [0000000000000000] 
  2479 00001A8C C9                              leave
  2480 00001A8D C22000                          ret AND_KILL_FRAME(2)
  2481                                  
  2482                                  L_code_ptr_set_cdr:
  2483 00001A90 C8000000                        enter 0, 0
  2484 00001A94 48837D1802                      cmp COUNT, 2
  2485 00001A99 0F853D040000                    jne L_error_arg_count_2
  2486 00001A9F 488B4520                        mov rax, PARAM(0)
  2487                                          assert_pair(rax)
    53 00001AA3 803821              <1>  cmp byte [%1], %2
    54 00001AA6 0F85CF040000        <1>  jne L_error_incorrect_type
  2488 00001AAC 488B5D28                        mov rbx, PARAM(1)
  2489 00001AB0 48895809                        mov SOB_PAIR_CDR(rax), rbx
  2490 00001AB4 48B8-                           mov rax, sob_void
  2490 00001AB6 [0000000000000000] 
  2491 00001ABE C9                              leave
  2492 00001ABF C22000                          ret AND_KILL_FRAME(2)
  2493                                  
  2494                                  L_code_ptr_string_ref:
  2495 00001AC2 C8000000                        enter 0, 0
  2496 00001AC6 48837D1802                      cmp COUNT, 2
  2497 00001ACB 0F850B040000                    jne L_error_arg_count_2
  2498 00001AD1 488B7D20                        mov rdi, PARAM(0)
  2499                                          assert_string(rdi)
    53 00001AD5 803F03              <1>  cmp byte [%1], %2
    54 00001AD8 0F859D040000        <1>  jne L_error_incorrect_type
  2500 00001ADE 488B7528                        mov rsi, PARAM(1)
  2501                                          assert_integer(rsi)
    53 00001AE2 803E11              <1>  cmp byte [%1], %2
    54 00001AE5 0F8590040000        <1>  jne L_error_incorrect_type
  2502 00001AEB 488B5701                        mov rdx, qword [rdi + 1]
  2503 00001AEF 488B4E01                        mov rcx, qword [rsi + 1]
  2504 00001AF3 4839D1                          cmp rcx, rdx
  2505 00001AF6 0F8D14030000                    jge L_error_integer_range
  2506 00001AFC 4883F900                        cmp rcx, 0
  2507 00001B00 0F8C0A030000                    jl L_error_integer_range
  2508 00001B06 8A5C3909                        mov bl, byte [rdi + 1 + 8 + 1 * rcx]
  2509 00001B0A BF02000000                      mov rdi, 2
  2510 00001B0F E83CE7FFFF                      call malloc
  2511 00001B14 C60002                          mov byte [rax], T_char
  2512 00001B17 885801                          mov byte [rax + 1], bl
  2513 00001B1A C9                              leave
  2514 00001B1B C22000                          ret AND_KILL_FRAME(2)
  2515                                  
  2516                                  L_code_ptr_vector_ref:
  2517 00001B1E C8000000                        enter 0, 0
  2518 00001B22 48837D1802                      cmp COUNT, 2
  2519 00001B27 0F85AF030000                    jne L_error_arg_count_2
  2520 00001B2D 488B7D20                        mov rdi, PARAM(0)
  2521                                          assert_vector(rdi)
    53 00001B31 803F22              <1>  cmp byte [%1], %2
    54 00001B34 0F8541040000        <1>  jne L_error_incorrect_type
  2522 00001B3A 488B7528                        mov rsi, PARAM(1)
  2523                                          assert_integer(rsi)
    53 00001B3E 803E11              <1>  cmp byte [%1], %2
    54 00001B41 0F8534040000        <1>  jne L_error_incorrect_type
  2524 00001B47 488B5701                        mov rdx, qword [rdi + 1]
  2525 00001B4B 488B4E01                        mov rcx, qword [rsi + 1]
  2526 00001B4F 4839D1                          cmp rcx, rdx
  2527 00001B52 0F8DB8020000                    jge L_error_integer_range
  2528 00001B58 4883F900                        cmp rcx, 0
  2529 00001B5C 0F8CAE020000                    jl L_error_integer_range
  2530 00001B62 488B44CF09                      mov rax, [rdi + 1 + 8 + 8 * rcx]
  2531 00001B67 C9                              leave
  2532 00001B68 C22000                          ret AND_KILL_FRAME(2)
  2533                                  
  2534                                  L_code_ptr_vector_set:
  2535 00001B6B C8000000                        enter 0, 0
  2536 00001B6F 48837D1803                      cmp COUNT, 3
  2537 00001B74 0F85CC030000                    jne L_error_arg_count_3
  2538 00001B7A 488B7D20                        mov rdi, PARAM(0)
  2539                                          assert_vector(rdi)
    53 00001B7E 803F22              <1>  cmp byte [%1], %2
    54 00001B81 0F85F4030000        <1>  jne L_error_incorrect_type
  2540 00001B87 488B7528                        mov rsi, PARAM(1)
  2541                                          assert_integer(rsi)
    53 00001B8B 803E11              <1>  cmp byte [%1], %2
    54 00001B8E 0F85E7030000        <1>  jne L_error_incorrect_type
  2542 00001B94 488B5701                        mov rdx, qword [rdi + 1]
  2543 00001B98 488B4E01                        mov rcx, qword [rsi + 1]
  2544 00001B9C 4839D1                          cmp rcx, rdx
  2545 00001B9F 0F8D6B020000                    jge L_error_integer_range
  2546 00001BA5 4883F900                        cmp rcx, 0
  2547 00001BA9 0F8C61020000                    jl L_error_integer_range
  2548 00001BAF 488B4530                        mov rax, PARAM(2)
  2549 00001BB3 488944CF09                      mov qword [rdi + 1 + 8 + 8 * rcx], rax
  2550 00001BB8 48B8-                           mov rax, sob_void
  2550 00001BBA [0000000000000000] 
  2551 00001BC2 C9                              leave
  2552 00001BC3 C22800                          ret AND_KILL_FRAME(3)
  2553                                  
  2554                                  L_code_ptr_string_set:
  2555 00001BC6 C8000000                        enter 0, 0
  2556 00001BCA 48837D1803                      cmp COUNT, 3
  2557 00001BCF 0F8571030000                    jne L_error_arg_count_3
  2558 00001BD5 488B7D20                        mov rdi, PARAM(0)
  2559                                          assert_string(rdi)
    53 00001BD9 803F03              <1>  cmp byte [%1], %2
    54 00001BDC 0F8599030000        <1>  jne L_error_incorrect_type
  2560 00001BE2 488B7528                        mov rsi, PARAM(1)
  2561                                          assert_integer(rsi)
    53 00001BE6 803E11              <1>  cmp byte [%1], %2
    54 00001BE9 0F858C030000        <1>  jne L_error_incorrect_type
  2562 00001BEF 488B5701                        mov rdx, qword [rdi + 1]
  2563 00001BF3 488B4E01                        mov rcx, qword [rsi + 1]
  2564 00001BF7 4839D1                          cmp rcx, rdx
  2565 00001BFA 0F8D10020000                    jge L_error_integer_range
  2566 00001C00 4883F900                        cmp rcx, 0
  2567 00001C04 0F8C06020000                    jl L_error_integer_range
  2568 00001C0A 488B4530                        mov rax, PARAM(2)
  2569                                          assert_char(rax)
    53 00001C0E 803802              <1>  cmp byte [%1], %2
    54 00001C11 0F8564030000        <1>  jne L_error_incorrect_type
  2570 00001C17 8A4001                          mov al, byte [rax + 1]
  2571 00001C1A 88443909                        mov byte [rdi + 1 + 8 + 1 * rcx], al
  2572 00001C1E 48B8-                           mov rax, sob_void
  2572 00001C20 [0000000000000000] 
  2573 00001C28 C9                              leave
  2574 00001C29 C22800                          ret AND_KILL_FRAME(3)
  2575                                  
  2576                                  L_code_ptr_make_vector:
  2577 00001C2C C8000000                        enter 0, 0
  2578 00001C30 48837D1802                      cmp COUNT, 2
  2579 00001C35 0F85A1020000                    jne L_error_arg_count_2
  2580 00001C3B 488B4D20                        mov rcx, PARAM(0)
  2581                                          assert_integer(rcx)
    53 00001C3F 803911              <1>  cmp byte [%1], %2
    54 00001C42 0F8533030000        <1>  jne L_error_incorrect_type
  2582 00001C48 488B4901                        mov rcx, qword [rcx + 1]
  2583 00001C4C 4883F900                        cmp rcx, 0
  2584 00001C50 0F8CBA010000                    jl L_error_integer_range
  2585 00001C56 488B5528                        mov rdx, PARAM(1)
  2586 00001C5A 488D3CCD09000000                lea rdi, [1 + 8 + 8 * rcx]
  2587 00001C62 E8E9E5FFFF                      call malloc
  2588 00001C67 C60022                          mov byte [rax], T_vector
  2589 00001C6A 48894801                        mov qword [rax + 1], rcx
  2590 00001C6E 41B800000000                    mov r8, 0
  2591                                  .L0:
  2592 00001C74 4939C8                          cmp r8, rcx
  2593 00001C77 740A                            je .L1
  2594 00001C79 4A8954C009                      mov qword [rax + 1 + 8 + 8 * r8], rdx
  2595 00001C7E 49FFC0                          inc r8
  2596 00001C81 EBF1                            jmp .L0
  2597                                  .L1:
  2598 00001C83 C9                              leave
  2599 00001C84 C22000                          ret AND_KILL_FRAME(2)
  2600                                          
  2601                                  L_code_ptr_make_string:
  2602 00001C87 C8000000                        enter 0, 0
  2603 00001C8B 48837D1802                      cmp COUNT, 2
  2604 00001C90 0F8546020000                    jne L_error_arg_count_2
  2605 00001C96 488B4D20                        mov rcx, PARAM(0)
  2606                                          assert_integer(rcx)
    53 00001C9A 803911              <1>  cmp byte [%1], %2
    54 00001C9D 0F85D8020000        <1>  jne L_error_incorrect_type
  2607 00001CA3 488B4901                        mov rcx, qword [rcx + 1]
  2608 00001CA7 4883F900                        cmp rcx, 0
  2609 00001CAB 0F8C5F010000                    jl L_error_integer_range
  2610 00001CB1 488B5528                        mov rdx, PARAM(1)
  2611                                          assert_char(rdx)
    53 00001CB5 803A02              <1>  cmp byte [%1], %2
    54 00001CB8 0F85BD020000        <1>  jne L_error_incorrect_type
  2612 00001CBE 8A5201                          mov dl, byte [rdx + 1]
  2613 00001CC1 488D7909                        lea rdi, [1 + 8 + 1 * rcx]
  2614 00001CC5 E886E5FFFF                      call malloc
  2615 00001CCA C60003                          mov byte [rax], T_string
  2616 00001CCD 48894801                        mov qword [rax + 1], rcx
  2617 00001CD1 41B800000000                    mov r8, 0
  2618                                  .L0:
  2619 00001CD7 4939C8                          cmp r8, rcx
  2620 00001CDA 740A                            je .L1
  2621 00001CDC 4188540009                      mov byte [rax + 1 + 8 + 1 * r8], dl
  2622 00001CE1 49FFC0                          inc r8
  2623 00001CE4 EBF1                            jmp .L0
  2624                                  .L1:
  2625 00001CE6 C9                              leave
  2626 00001CE7 C22000                          ret AND_KILL_FRAME(2)
  2627                                  
  2628                                  L_code_ptr_numerator:
  2629 00001CEA C8000000                        enter 0, 0
  2630 00001CEE 48837D1801                      cmp COUNT, 1
  2631 00001CF3 0F85AE010000                    jne L_error_arg_count_1
  2632 00001CF9 488B4520                        mov rax, PARAM(0)
  2633                                          assert_fraction(rax)
    53 00001CFD 803812              <1>  cmp byte [%1], %2
    54 00001D00 0F8575020000        <1>  jne L_error_incorrect_type
  2634 00001D06 488B7801                        mov rdi, qword [rax + 1]
  2635 00001D0A E8E7000000                      call make_integer
  2636 00001D0F C9                              leave
  2637 00001D10 C21800                          ret AND_KILL_FRAME(1)
  2638                                          
  2639                                  L_code_ptr_denominator:
  2640 00001D13 C8000000                        enter 0, 0
  2641 00001D17 48837D1801                      cmp COUNT, 1
  2642 00001D1C 0F8585010000                    jne L_error_arg_count_1
  2643 00001D22 488B4520                        mov rax, PARAM(0)
  2644                                          assert_fraction(rax)
    53 00001D26 803812              <1>  cmp byte [%1], %2
    54 00001D29 0F854C020000        <1>  jne L_error_incorrect_type
  2645 00001D2F 488B7809                        mov rdi, qword [rax + 1 + 8]
  2646 00001D33 E8BE000000                      call make_integer
  2647 00001D38 C9                              leave
  2648 00001D39 C21800                          ret AND_KILL_FRAME(1)
  2649                                  
  2650                                  L_code_ptr_is_eq:
  2651 00001D3C C8000000                	enter 0, 0
  2652 00001D40 48837D1802              	cmp COUNT, 2
  2653 00001D45 0F8591010000            	jne L_error_arg_count_2
  2654 00001D4B 488B7D20                	mov rdi, PARAM(0)
  2655 00001D4F 488B7528                	mov rsi, PARAM(1)
  2656 00001D53 4839F7                  	cmp rdi, rsi
  2657 00001D56 746C                    	je .L_eq_true
  2658 00001D58 8A17                    	mov dl, byte [rdi]
  2659 00001D5A 3A16                    	cmp dl, byte [rsi]
  2660 00001D5C 7572                    	jne .L_eq_false
  2661 00001D5E 80FA02                  	cmp dl, T_char
  2662 00001D61 7459                    	je .L_char
  2663 00001D63 80FA41                  	cmp dl, T_interned_symbol
  2664 00001D66 7440                    	je .L_interned_symbol
  2665 00001D68 80FA42                          cmp dl, T_uninterned_symbol
  2666 00001D6B 7443                            je .L_uninterned_symbol
  2667 00001D6D 80FA13                  	cmp dl, T_real
  2668 00001D70 742E                    	je .L_real
  2669 00001D72 80FA12                  	cmp dl, T_fraction
  2670 00001D75 7413                    	je .L_fraction
  2671 00001D77 80FA11                          cmp dl, T_integer
  2672 00001D7A 7402                            je .L_integer
  2673 00001D7C EB52                    	jmp .L_eq_false
  2674                                  .L_integer:
  2675 00001D7E 488B4601                        mov rax, qword [rsi + 1]
  2676 00001D82 483B4701                        cmp rax, qword [rdi + 1]
  2677 00001D86 7548                            jne .L_eq_false
  2678 00001D88 EB3A                            jmp .L_eq_true
  2679                                  .L_fraction:
  2680 00001D8A 488B4601                	mov rax, qword [rsi + 1]
  2681 00001D8E 483B4701                	cmp rax, qword [rdi + 1]
  2682 00001D92 753C                    	jne .L_eq_false
  2683 00001D94 488B4609                	mov rax, qword [rsi + 1 + 8]
  2684 00001D98 483B4709                	cmp rax, qword [rdi + 1 + 8]
  2685 00001D9C 7532                    	jne .L_eq_false
  2686 00001D9E EB24                    	jmp .L_eq_true
  2687                                  .L_real:
  2688 00001DA0 488B4601                	mov rax, qword [rsi + 1]
  2689 00001DA4 483B4701                	cmp rax, qword [rdi + 1]
  2690                                  .L_interned_symbol:
  2691                                  	; never reached, because interned_symbols are static!
  2692                                  	; but I'm keeping it in case, I'll ever change
  2693                                  	; the implementation
  2694 00001DA8 488B4601                	mov rax, qword [rsi + 1]
  2695 00001DAC 483B4701                	cmp rax, qword [rdi + 1]
  2696                                  .L_uninterned_symbol:
  2697 00001DB0 4C8B4701                        mov r8, qword [rdi + 1]
  2698 00001DB4 4C3B4601                        cmp r8, qword [rsi + 1]
  2699 00001DB8 7516                            jne .L_eq_false
  2700 00001DBA EB08                            jmp .L_eq_true
  2701                                  .L_char:
  2702 00001DBC 8A5E01                  	mov bl, byte [rsi + 1]
  2703 00001DBF 3A5F01                  	cmp bl, byte [rdi + 1]
  2704 00001DC2 750C                    	jne .L_eq_false
  2705                                  .L_eq_true:
  2706 00001DC4 48B8-                   	mov rax, sob_boolean_true
  2706 00001DC6 [0300000000000000] 
  2707 00001DCE EB0A                    	jmp .L_eq_exit
  2708                                  .L_eq_false:
  2709 00001DD0 48B8-                   	mov rax, sob_boolean_false
  2709 00001DD2 [0200000000000000] 
  2710                                  .L_eq_exit:
  2711 00001DDA C9                      	leave
  2712 00001DDB C22000                  	ret AND_KILL_FRAME(2)
  2713                                  
  2714                                  make_real:
  2715 00001DDE C8000000                        enter 0, 0
  2716 00001DE2 BF09000000                      mov rdi, (1 + 8)
  2717 00001DE7 E864E4FFFF                      call malloc
  2718 00001DEC C60013                          mov byte [rax], T_real
  2719 00001DEF F20F114001                      movsd qword [rax + 1], xmm0
  2720 00001DF4 C9                              leave 
  2721 00001DF5 C3                              ret
  2722                                          
  2723                                  make_integer:
  2724 00001DF6 C8000000                        enter 0, 0
  2725 00001DFA 4889FE                          mov rsi, rdi
  2726 00001DFD BF09000000                      mov rdi, (1 + 8)
  2727 00001E02 E849E4FFFF                      call malloc
  2728 00001E07 C60011                          mov byte [rax], T_integer
  2729 00001E0A 48897001                        mov qword [rax + 1], rsi
  2730 00001E0E C9                              leave
  2731 00001E0F C3                              ret
  2732                                          
  2733                                  L_error_integer_range:
  2734 00001E10 488B3C25[00000000]              mov rdi, qword [stderr]
  2735 00001E18 48BE-                           mov rsi, fmt_integer_range
  2735 00001E1A [DA09000000000000] 
  2736 00001E22 B800000000                      mov rax, 0
  2737                                          ENTER
    44 00001E27 C8000000            <1>  enter 0, 0
    45 00001E2B 4883E4F0            <1>  and rsp, ~15
  2738 00001E2F E8(00000000)                    call fprintf
  2739                                          LEAVE
    49 00001E34 C9                  <1>  leave
  2740 00001E35 48C7C0FBFFFFFF                  mov rax, -5
  2741 00001E3C E8(00000000)                    call exit
  2742                                  
  2743                                  L_error_arg_negative:
  2744 00001E41 488B3C25[00000000]              mov rdi, qword [stderr]
  2745 00001E49 48BE-                           mov rsi, fmt_arg_negative
  2745 00001E4B [B208000000000000] 
  2746 00001E53 B800000000                      mov rax, 0
  2747                                          ENTER
    44 00001E58 C8000000            <1>  enter 0, 0
    45 00001E5C 4883E4F0            <1>  and rsp, ~15
  2748 00001E60 E8(00000000)                    call fprintf
  2749                                          LEAVE
    49 00001E65 C9                  <1>  leave
  2750 00001E66 48C7C0FDFFFFFF                  mov rax, -3
  2751 00001E6D E8(00000000)                    call exit
  2752                                  
  2753                                  L_error_arg_count_0:
  2754 00001E72 488B3C25[00000000]              mov rdi, qword [stderr]
  2755 00001E7A 48BE-                           mov rsi, fmt_arg_count_0
  2755 00001E7C [D808000000000000] 
  2756 00001E84 488B5518                        mov rdx, COUNT
  2757 00001E88 B800000000                      mov rax, 0
  2758                                          ENTER
    44 00001E8D C8000000            <1>  enter 0, 0
    45 00001E91 4883E4F0            <1>  and rsp, ~15
  2759 00001E95 E8(00000000)                    call fprintf
  2760                                          LEAVE
    49 00001E9A C9                  <1>  leave
  2761 00001E9B 48C7C0FDFFFFFF                  mov rax, -3
  2762 00001EA2 E8(00000000)                    call exit
  2763                                  
  2764                                  L_error_arg_count_1:
  2765 00001EA7 488B3C25[00000000]              mov rdi, qword [stderr]
  2766 00001EAF 48BE-                           mov rsi, fmt_arg_count_1
  2766 00001EB1 [0009000000000000] 
  2767 00001EB9 488B5518                        mov rdx, COUNT
  2768 00001EBD B800000000                      mov rax, 0
  2769                                          ENTER
    44 00001EC2 C8000000            <1>  enter 0, 0
    45 00001EC6 4883E4F0            <1>  and rsp, ~15
  2770 00001ECA E8(00000000)                    call fprintf
  2771                                          LEAVE
    49 00001ECF C9                  <1>  leave
  2772 00001ED0 48C7C0FDFFFFFF                  mov rax, -3
  2773 00001ED7 E8(00000000)                    call exit
  2774                                  
  2775                                  L_error_arg_count_2:
  2776 00001EDC 488B3C25[00000000]              mov rdi, qword [stderr]
  2777 00001EE4 48BE-                           mov rsi, fmt_arg_count_2
  2777 00001EE6 [6609000000000000] 
  2778 00001EEE 488B5518                        mov rdx, COUNT
  2779 00001EF2 B800000000                      mov rax, 0
  2780                                          ENTER
    44 00001EF7 C8000000            <1>  enter 0, 0
    45 00001EFB 4883E4F0            <1>  and rsp, ~15
  2781 00001EFF E8(00000000)                    call fprintf
  2782                                          LEAVE
    49 00001F04 C9                  <1>  leave
  2783 00001F05 48C7C0FDFFFFFF                  mov rax, -3
  2784 00001F0C E8(00000000)                    call exit
  2785                                  
  2786                                  L_error_arg_count_12:
  2787 00001F11 488B3C25[00000000]              mov rdi, qword [stderr]
  2788 00001F19 48BE-                           mov rsi, fmt_arg_count_12
  2788 00001F1B [2609000000000000] 
  2789 00001F23 488B5518                        mov rdx, COUNT
  2790 00001F27 B800000000                      mov rax, 0
  2791                                          ENTER
    44 00001F2C C8000000            <1>  enter 0, 0
    45 00001F30 4883E4F0            <1>  and rsp, ~15
  2792 00001F34 E8(00000000)                    call fprintf
  2793                                          LEAVE
    49 00001F39 C9                  <1>  leave
  2794 00001F3A 48C7C0FDFFFFFF                  mov rax, -3
  2795 00001F41 E8(00000000)                    call exit
  2796                                  
  2797                                  L_error_arg_count_3:
  2798 00001F46 488B3C25[00000000]              mov rdi, qword [stderr]
  2799 00001F4E 48BE-                           mov rsi, fmt_arg_count_3
  2799 00001F50 [8D09000000000000] 
  2800 00001F58 488B5518                        mov rdx, COUNT
  2801 00001F5C B800000000                      mov rax, 0
  2802                                          ENTER
    44 00001F61 C8000000            <1>  enter 0, 0
    45 00001F65 4883E4F0            <1>  and rsp, ~15
  2803 00001F69 E8(00000000)                    call fprintf
  2804                                          LEAVE
    49 00001F6E C9                  <1>  leave
  2805 00001F6F 48C7C0FDFFFFFF                  mov rax, -3
  2806 00001F76 E8(00000000)                    call exit
  2807                                          
  2808                                  L_error_incorrect_type:
  2809 00001F7B 488B3C25[00000000]              mov rdi, qword [stderr]
  2810 00001F83 48BE-                           mov rsi, fmt_type
  2810 00001F85 [B609000000000000] 
  2811 00001F8D B800000000                      mov rax, 0
  2812                                          ENTER
    44 00001F92 C8000000            <1>  enter 0, 0
    45 00001F96 4883E4F0            <1>  and rsp, ~15
  2813 00001F9A E8(00000000)                    call fprintf
  2814                                          LEAVE
    49 00001F9F C9                  <1>  leave
  2815 00001FA0 48C7C0FCFFFFFF                  mov rax, -4
  2816 00001FA7 E8(00000000)                    call exit
  2817                                  
  2818                                  L_error_division_by_zero:
  2819 00001FAC 488B3C25[00000000]              mov rdi, qword [stderr]
  2820 00001FB4 48BE-                           mov rsi, fmt_division_by_zero
  2820 00001FB6 [F709000000000000] 
  2821 00001FBE B800000000                      mov rax, 0
  2822                                          ENTER
    44 00001FC3 C8000000            <1>  enter 0, 0
    45 00001FC7 4883E4F0            <1>  and rsp, ~15
  2823 00001FCB E8(00000000)                    call fprintf
  2824                                          LEAVE
    49 00001FD0 C9                  <1>  leave
  2825 00001FD1 48C7C0F8FFFFFF                  mov rax, -8
  2826 00001FD8 E8(00000000)                    call exit
  2827                                  
  2828                                  section .data
  2829                                  gensym_count:
  2830 000008A7 0000000000000000                dq 0
  2831                                  fmt_char:
  2832 000008AF 256300                          db `%c\0`
  2833                                  fmt_arg_negative:
  2834 000008B2 212121205468652061-             db `!!! The argument cannot be negative.\n\0`
  2834 000008BB 7267756D656E742063-
  2834 000008C4 616E6E6F7420626520-
  2834 000008CD 6E656761746976652E-
  2834 000008D6 0A00               
  2835                                  fmt_arg_count_0:
  2836 000008D8 212121204578706563-             db `!!! Expecting zero arguments. Found %d\n\0`
  2836 000008E1 74696E67207A65726F-
  2836 000008EA 20617267756D656E74-
  2836 000008F3 732E20466F756E6420-
  2836 000008FC 25640A00           
  2837                                  fmt_arg_count_1:
  2838 00000900 212121204578706563-             db `!!! Expecting one argument. Found %d\n\0`
  2838 00000909 74696E67206F6E6520-
  2838 00000912 617267756D656E742E-
  2838 0000091B 20466F756E64202564-
  2838 00000924 0A00               
  2839                                  fmt_arg_count_12:
  2840 00000926 212121204578706563-             db `!!! Expecting one required and one optional argument. Found %d\n\0`
  2840 0000092F 74696E67206F6E6520-
  2840 00000938 726571756972656420-
  2840 00000941 616E64206F6E65206F-
  2840 0000094A 7074696F6E616C2061-
  2840 00000953 7267756D656E742E20-
  2840 0000095C 466F756E642025640A-
  2840 00000965 00                 
  2841                                  fmt_arg_count_2:
  2842 00000966 212121204578706563-             db `!!! Expecting two arguments. Found %d\n\0`
  2842 0000096F 74696E672074776F20-
  2842 00000978 617267756D656E7473-
  2842 00000981 2E20466F756E642025-
  2842 0000098A 640A00             
  2843                                  fmt_arg_count_3:
  2844 0000098D 212121204578706563-             db `!!! Expecting three arguments. Found %d\n\0`
  2844 00000996 74696E672074687265-
  2844 0000099F 6520617267756D656E-
  2844 000009A8 74732E20466F756E64-
  2844 000009B1 2025640A00         
  2845                                  fmt_type:
  2846 000009B6 2121212046756E6374-             db `!!! Function passed incorrect type\n\0`
  2846 000009BF 696F6E207061737365-
  2846 000009C8 6420696E636F727265-
  2846 000009D1 637420747970650A00 
  2847                                  fmt_integer_range:
  2848 000009DA 21212120496E636F72-             db `!!! Incorrect integer range\n\0`
  2848 000009E3 7265637420696E7465-
  2848 000009EC 6765722072616E6765-
  2848 000009F5 0A00               
  2849                                  fmt_division_by_zero:
  2850 000009F7 212121204469766973-             db `!!! Division by zero\n\0`
  2850 00000A00 696F6E206279207A65-
  2850 00000A09 726F0A00           
  2851                                  fmt_scheme_error_part_1:
  2852 00000A0D 0A2121212054686520-             db `\n!!! The procedure \0`
  2852 00000A16 70726F636564757265-
  2852 00000A1F 2000               
  2853                                  fmt_scheme_error_part_2:
  2854 00000A21 2061736B656420746F-             db ` asked to terminate the program\n`
  2854 00000A2A 207465726D696E6174-
  2854 00000A33 65207468652070726F-
  2854 00000A3C 6772616D0A         
  2855 00000A41 202020207769746820-             db `    with the following message:\n\n\0`
  2855 00000A4A 74686520666F6C6C6F-
  2855 00000A53 77696E67206D657373-
  2855 00000A5C 6167653A0A0A00     
  2856                                  fmt_scheme_error_part_3:
  2857 00000A63 0A0A476F6F64627965-             db `\n\nGoodbye!\n\n\0`
  2857 00000A6C 210A0A00           
