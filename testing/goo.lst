     1                                  ;;; prologue-1.asm
     2                                  ;;; The first part of the standard prologue for compiled programs
     3                                  ;;;
     4                                  ;;; Programmer: Mayer Goldberg, 2023
     5                                  
     6                                  %define T_void 				0
     7                                  %define T_nil 				1
     8                                  %define T_char 				2
     9                                  %define T_string 			3
    10                                  %define T_closure 			4
    11                                  %define T_undefined			5
    12                                  %define T_boolean 			8
    13                                  %define T_boolean_false 		(T_boolean | 1)
    14                                  %define T_boolean_true 			(T_boolean | 2)
    15                                  %define T_number 			16
    16                                  %define T_integer			(T_number | 1)
    17                                  %define T_fraction 			(T_number | 2)
    18                                  %define T_real 				(T_number | 3)
    19                                  %define T_collection 			32
    20                                  %define T_pair 				(T_collection | 1)
    21                                  %define T_vector 			(T_collection | 2)
    22                                  %define T_symbol 			64
    23                                  %define T_interned_symbol		(T_symbol | 1)
    24                                  %define T_uninterned_symbol		(T_symbol | 2)
    25                                  
    26                                  %define SOB_CHAR_VALUE(reg) 		byte [reg + 1]
    27                                  %define SOB_PAIR_CAR(reg)		qword [reg + 1]
    28                                  %define SOB_PAIR_CDR(reg)		qword [reg + 1 + 8]
    29                                  %define SOB_STRING_LENGTH(reg)		qword [reg + 1]
    30                                  %define SOB_VECTOR_LENGTH(reg)		qword [reg + 1]
    31                                  %define SOB_CLOSURE_ENV(reg)		qword [reg + 1]
    32                                  %define SOB_CLOSURE_CODE(reg)		qword [reg + 1 + 8]
    33                                  
    34                                  %define OLD_RBP 			qword [rbp]
    35                                  %define RET_ADDR 			qword [rbp + 8 * 1]
    36                                  %define ENV 				qword [rbp + 8 * 2]
    37                                  %define COUNT 				qword [rbp + 8 * 3]
    38                                  %define PARAM(n) 			qword [rbp + 8 * (4 + n)]
    39                                  %define AND_KILL_FRAME(n)		(8 * (2 + n))
    40                                  
    41                                  %define MAGIC				496351
    42                                  
    43                                  %macro ENTER 0
    44                                  	enter 0, 0
    45                                  	and rsp, ~15
    46                                  %endmacro
    47                                  
    48                                  %macro LEAVE 0
    49                                  	leave
    50                                  %endmacro
    51                                  
    52                                  %macro assert_type 2
    53                                          cmp byte [%1], %2
    54                                          jne L_error_incorrect_type
    55                                  %endmacro
    56                                  
    57                                  %define assert_void(reg)		assert_type reg, T_void
    58                                  %define assert_nil(reg)			assert_type reg, T_nil
    59                                  %define assert_char(reg)		assert_type reg, T_char
    60                                  %define assert_string(reg)		assert_type reg, T_string
    61                                  %define assert_symbol(reg)		assert_type reg, T_symbol
    62                                  %define assert_interned_symbol(reg)	assert_type reg, T_interned_symbol
    63                                  %define assert_uninterned_symbol(reg)	assert_type reg, T_uninterned_symbol
    64                                  %define assert_closure(reg)		assert_type reg, T_closure
    65                                  %define assert_boolean(reg)		assert_type reg, T_boolean
    66                                  %define assert_integer(reg)		assert_type reg, T_integer
    67                                  %define assert_fraction(reg)		assert_type reg, T_fraction
    68                                  %define assert_real(reg)		assert_type reg, T_real
    69                                  %define assert_pair(reg)		assert_type reg, T_pair
    70                                  %define assert_vector(reg)		assert_type reg, T_vector
    71                                  
    72                                  %define sob_void			(L_constants + 0)
    73                                  %define sob_nil				(L_constants + 1)
    74                                  %define sob_boolean_false		(L_constants + 2)
    75                                  %define sob_boolean_true		(L_constants + 3)
    76                                  %define sob_char_nul			(L_constants + 4)
    77                                  
    78                                  %define bytes(n)			(n)
    79                                  %define kbytes(n) 			(bytes(n) << 10)
    80                                  %define mbytes(n) 			(kbytes(n) << 10)
    81                                  %define gbytes(n) 			(mbytes(n) << 10)
    82                                  
    83                                  section .data
    84                                  L_constants:
    85                                  	; L_constants + 0:
    86 00000000 00                      	db T_void
    87                                  	; L_constants + 1:
    88 00000001 01                      	db T_nil
    89                                  	; L_constants + 2:
    90 00000002 09                      	db T_boolean_false
    91                                  	; L_constants + 3:
    92 00000003 0A                      	db T_boolean_true
    93                                  	; L_constants + 4:
    94 00000004 0200                    	db T_char, 0x00	; #\nul
    95                                  	; L_constants + 6:
    96 00000006 03                      	db T_string	; "null?"
    97 00000007 0500000000000000        	dq 5
    98 0000000F 6E756C6C3F              	db 0x6E, 0x75, 0x6C, 0x6C, 0x3F
    99                                  	; L_constants + 20:
   100 00000014 03                      	db T_string	; "pair?"
   101 00000015 0500000000000000        	dq 5
   102 0000001D 706169723F              	db 0x70, 0x61, 0x69, 0x72, 0x3F
   103                                  	; L_constants + 34:
   104 00000022 03                      	db T_string	; "void?"
   105 00000023 0500000000000000        	dq 5
   106 0000002B 766F69643F              	db 0x76, 0x6F, 0x69, 0x64, 0x3F
   107                                  	; L_constants + 48:
   108 00000030 03                      	db T_string	; "char?"
   109 00000031 0500000000000000        	dq 5
   110 00000039 636861723F              	db 0x63, 0x68, 0x61, 0x72, 0x3F
   111                                  	; L_constants + 62:
   112 0000003E 03                      	db T_string	; "string?"
   113 0000003F 0700000000000000        	dq 7
   114 00000047 737472696E673F          	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x3F
   115                                  	; L_constants + 78:
   116 0000004E 03                      	db T_string	; "interned-symbol?"
   117 0000004F 1000000000000000        	dq 16
   118 00000057 696E7465726E6564        	db 0x69, 0x6E, 0x74, 0x65, 0x72, 0x6E, 0x65, 0x64
   119 0000005F 2D73796D626F6C3F        	db 0x2D, 0x73, 0x79, 0x6D, 0x62, 0x6F, 0x6C, 0x3F
   120                                  	; L_constants + 103:
   121 00000067 03                      	db T_string	; "vector?"
   122 00000068 0700000000000000        	dq 7
   123 00000070 766563746F723F          	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x3F
   124                                  	; L_constants + 119:
   125 00000077 03                      	db T_string	; "procedure?"
   126 00000078 0A00000000000000        	dq 10
   127 00000080 70726F6365647572        	db 0x70, 0x72, 0x6F, 0x63, 0x65, 0x64, 0x75, 0x72
   128 00000088 653F                    	db 0x65, 0x3F
   129                                  	; L_constants + 138:
   130 0000008A 03                      	db T_string	; "real?"
   131 0000008B 0500000000000000        	dq 5
   132 00000093 7265616C3F              	db 0x72, 0x65, 0x61, 0x6C, 0x3F
   133                                  	; L_constants + 152:
   134 00000098 03                      	db T_string	; "fraction?"
   135 00000099 0900000000000000        	dq 9
   136 000000A1 6672616374696F6E        	db 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E
   137 000000A9 3F                      	db 0x3F
   138                                  	; L_constants + 170:
   139 000000AA 03                      	db T_string	; "boolean?"
   140 000000AB 0800000000000000        	dq 8
   141 000000B3 626F6F6C65616E3F        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x3F
   142                                  	; L_constants + 187:
   143 000000BB 03                      	db T_string	; "number?"
   144 000000BC 0700000000000000        	dq 7
   145 000000C4 6E756D6265723F          	db 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72, 0x3F
   146                                  	; L_constants + 203:
   147 000000CB 03                      	db T_string	; "collection?"
   148 000000CC 0B00000000000000        	dq 11
   149 000000D4 636F6C6C65637469        	db 0x63, 0x6F, 0x6C, 0x6C, 0x65, 0x63, 0x74, 0x69
   150 000000DC 6F6E3F                  	db 0x6F, 0x6E, 0x3F
   151                                  	; L_constants + 223:
   152 000000DF 03                      	db T_string	; "cons"
   153 000000E0 0400000000000000        	dq 4
   154 000000E8 636F6E73                	db 0x63, 0x6F, 0x6E, 0x73
   155                                  	; L_constants + 236:
   156 000000EC 03                      	db T_string	; "display-sexpr"
   157 000000ED 0D00000000000000        	dq 13
   158 000000F5 646973706C61792D        	db 0x64, 0x69, 0x73, 0x70, 0x6C, 0x61, 0x79, 0x2D
   159 000000FD 7365787072              	db 0x73, 0x65, 0x78, 0x70, 0x72
   160                                  	; L_constants + 258:
   161 00000102 03                      	db T_string	; "write-char"
   162 00000103 0A00000000000000        	dq 10
   163 0000010B 77726974652D6368        	db 0x77, 0x72, 0x69, 0x74, 0x65, 0x2D, 0x63, 0x68
   164 00000113 6172                    	db 0x61, 0x72
   165                                  	; L_constants + 277:
   166 00000115 03                      	db T_string	; "car"
   167 00000116 0300000000000000        	dq 3
   168 0000011E 636172                  	db 0x63, 0x61, 0x72
   169                                  	; L_constants + 289:
   170 00000121 03                      	db T_string	; "cdr"
   171 00000122 0300000000000000        	dq 3
   172 0000012A 636472                  	db 0x63, 0x64, 0x72
   173                                  	; L_constants + 301:
   174 0000012D 03                      	db T_string	; "string-length"
   175 0000012E 0D00000000000000        	dq 13
   176 00000136 737472696E672D6C        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x6C
   177 0000013E 656E677468              	db 0x65, 0x6E, 0x67, 0x74, 0x68
   178                                  	; L_constants + 323:
   179 00000143 03                      	db T_string	; "vector-length"
   180 00000144 0D00000000000000        	dq 13
   181 0000014C 766563746F722D6C        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x6C
   182 00000154 656E677468              	db 0x65, 0x6E, 0x67, 0x74, 0x68
   183                                  	; L_constants + 345:
   184 00000159 03                      	db T_string	; "real->integer"
   185 0000015A 0D00000000000000        	dq 13
   186 00000162 7265616C2D3E696E        	db 0x72, 0x65, 0x61, 0x6C, 0x2D, 0x3E, 0x69, 0x6E
   187 0000016A 7465676572              	db 0x74, 0x65, 0x67, 0x65, 0x72
   188                                  	; L_constants + 367:
   189 0000016F 03                      	db T_string	; "exit"
   190 00000170 0400000000000000        	dq 4
   191 00000178 65786974                	db 0x65, 0x78, 0x69, 0x74
   192                                  	; L_constants + 380:
   193 0000017C 03                      	db T_string	; "integer->real"
   194 0000017D 0D00000000000000        	dq 13
   195 00000185 696E74656765722D        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x2D
   196 0000018D 3E7265616C              	db 0x3E, 0x72, 0x65, 0x61, 0x6C
   197                                  	; L_constants + 402:
   198 00000192 03                      	db T_string	; "fraction->real"
   199 00000193 0E00000000000000        	dq 14
   200 0000019B 6672616374696F6E        	db 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E
   201 000001A3 2D3E7265616C            	db 0x2D, 0x3E, 0x72, 0x65, 0x61, 0x6C
   202                                  	; L_constants + 425:
   203 000001A9 03                      	db T_string	; "char->integer"
   204 000001AA 0D00000000000000        	dq 13
   205 000001B2 636861722D3E696E        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x3E, 0x69, 0x6E
   206 000001BA 7465676572              	db 0x74, 0x65, 0x67, 0x65, 0x72
   207                                  	; L_constants + 447:
   208 000001BF 03                      	db T_string	; "integer->char"
   209 000001C0 0D00000000000000        	dq 13
   210 000001C8 696E74656765722D        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x2D
   211 000001D0 3E63686172              	db 0x3E, 0x63, 0x68, 0x61, 0x72
   212                                  	; L_constants + 469:
   213 000001D5 03                      	db T_string	; "trng"
   214 000001D6 0400000000000000        	dq 4
   215 000001DE 74726E67                	db 0x74, 0x72, 0x6E, 0x67
   216                                  	; L_constants + 482:
   217 000001E2 03                      	db T_string	; "zero?"
   218 000001E3 0500000000000000        	dq 5
   219 000001EB 7A65726F3F              	db 0x7A, 0x65, 0x72, 0x6F, 0x3F
   220                                  	; L_constants + 496:
   221 000001F0 03                      	db T_string	; "integer?"
   222 000001F1 0800000000000000        	dq 8
   223 000001F9 696E74656765723F        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x3F
   224                                  	; L_constants + 513:
   225 00000201 03                      	db T_string	; "__bin-apply"
   226 00000202 0B00000000000000        	dq 11
   227 0000020A 5F5F62696E2D6170        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x70
   228 00000212 706C79                  	db 0x70, 0x6C, 0x79
   229                                  	; L_constants + 533:
   230 00000215 03                      	db T_string	; "__bin-add-rr"
   231 00000216 0C00000000000000        	dq 12
   232 0000021E 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   233 00000226 642D7272                	db 0x64, 0x2D, 0x72, 0x72
   234                                  	; L_constants + 554:
   235 0000022A 03                      	db T_string	; "__bin-sub-rr"
   236 0000022B 0C00000000000000        	dq 12
   237 00000233 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   238 0000023B 622D7272                	db 0x62, 0x2D, 0x72, 0x72
   239                                  	; L_constants + 575:
   240 0000023F 03                      	db T_string	; "__bin-mul-rr"
   241 00000240 0C00000000000000        	dq 12
   242 00000248 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   243 00000250 6C2D7272                	db 0x6C, 0x2D, 0x72, 0x72
   244                                  	; L_constants + 596:
   245 00000254 03                      	db T_string	; "__bin-div-rr"
   246 00000255 0C00000000000000        	dq 12
   247 0000025D 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   248 00000265 762D7272                	db 0x76, 0x2D, 0x72, 0x72
   249                                  	; L_constants + 617:
   250 00000269 03                      	db T_string	; "__bin-add-qq"
   251 0000026A 0C00000000000000        	dq 12
   252 00000272 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   253 0000027A 642D7171                	db 0x64, 0x2D, 0x71, 0x71
   254                                  	; L_constants + 638:
   255 0000027E 03                      	db T_string	; "__bin-sub-qq"
   256 0000027F 0C00000000000000        	dq 12
   257 00000287 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   258 0000028F 622D7171                	db 0x62, 0x2D, 0x71, 0x71
   259                                  	; L_constants + 659:
   260 00000293 03                      	db T_string	; "__bin-mul-qq"
   261 00000294 0C00000000000000        	dq 12
   262 0000029C 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   263 000002A4 6C2D7171                	db 0x6C, 0x2D, 0x71, 0x71
   264                                  	; L_constants + 680:
   265 000002A8 03                      	db T_string	; "__bin-div-qq"
   266 000002A9 0C00000000000000        	dq 12
   267 000002B1 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   268 000002B9 762D7171                	db 0x76, 0x2D, 0x71, 0x71
   269                                  	; L_constants + 701:
   270 000002BD 03                      	db T_string	; "__bin-add-zz"
   271 000002BE 0C00000000000000        	dq 12
   272 000002C6 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   273 000002CE 642D7A7A                	db 0x64, 0x2D, 0x7A, 0x7A
   274                                  	; L_constants + 722:
   275 000002D2 03                      	db T_string	; "__bin-sub-zz"
   276 000002D3 0C00000000000000        	dq 12
   277 000002DB 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   278 000002E3 622D7A7A                	db 0x62, 0x2D, 0x7A, 0x7A
   279                                  	; L_constants + 743:
   280 000002E7 03                      	db T_string	; "__bin-mul-zz"
   281 000002E8 0C00000000000000        	dq 12
   282 000002F0 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   283 000002F8 6C2D7A7A                	db 0x6C, 0x2D, 0x7A, 0x7A
   284                                  	; L_constants + 764:
   285 000002FC 03                      	db T_string	; "__bin-div-zz"
   286 000002FD 0C00000000000000        	dq 12
   287 00000305 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   288 0000030D 762D7A7A                	db 0x76, 0x2D, 0x7A, 0x7A
   289                                  	; L_constants + 785:
   290 00000311 03                      	db T_string	; "error"
   291 00000312 0500000000000000        	dq 5
   292 0000031A 6572726F72              	db 0x65, 0x72, 0x72, 0x6F, 0x72
   293                                  	; L_constants + 799:
   294 0000031F 03                      	db T_string	; "__bin-less-than-rr"
   295 00000320 1200000000000000        	dq 18
   296 00000328 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   297 00000330 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   298 00000338 7272                    	db 0x72, 0x72
   299                                  	; L_constants + 826:
   300 0000033A 03                      	db T_string	; "__bin-less-than-qq"
   301 0000033B 1200000000000000        	dq 18
   302 00000343 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   303 0000034B 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   304 00000353 7171                    	db 0x71, 0x71
   305                                  	; L_constants + 853:
   306 00000355 03                      	db T_string	; "__bin-less-than-zz"
   307 00000356 1200000000000000        	dq 18
   308 0000035E 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   309 00000366 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   310 0000036E 7A7A                    	db 0x7A, 0x7A
   311                                  	; L_constants + 880:
   312 00000370 03                      	db T_string	; "__bin-equal-rr"
   313 00000371 0E00000000000000        	dq 14
   314 00000379 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   315 00000381 75616C2D7272            	db 0x75, 0x61, 0x6C, 0x2D, 0x72, 0x72
   316                                  	; L_constants + 903:
   317 00000387 03                      	db T_string	; "__bin-equal-qq"
   318 00000388 0E00000000000000        	dq 14
   319 00000390 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   320 00000398 75616C2D7171            	db 0x75, 0x61, 0x6C, 0x2D, 0x71, 0x71
   321                                  	; L_constants + 926:
   322 0000039E 03                      	db T_string	; "__bin-equal-zz"
   323 0000039F 0E00000000000000        	dq 14
   324 000003A7 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   325 000003AF 75616C2D7A7A            	db 0x75, 0x61, 0x6C, 0x2D, 0x7A, 0x7A
   326                                  	; L_constants + 949:
   327 000003B5 03                      	db T_string	; "quotient"
   328 000003B6 0800000000000000        	dq 8
   329 000003BE 71756F7469656E74        	db 0x71, 0x75, 0x6F, 0x74, 0x69, 0x65, 0x6E, 0x74
   330                                  	; L_constants + 966:
   331 000003C6 03                      	db T_string	; "remainder"
   332 000003C7 0900000000000000        	dq 9
   333 000003CF 72656D61696E6465        	db 0x72, 0x65, 0x6D, 0x61, 0x69, 0x6E, 0x64, 0x65
   334 000003D7 72                      	db 0x72
   335                                  	; L_constants + 984:
   336 000003D8 03                      	db T_string	; "set-car!"
   337 000003D9 0800000000000000        	dq 8
   338 000003E1 7365742D63617221        	db 0x73, 0x65, 0x74, 0x2D, 0x63, 0x61, 0x72, 0x21
   339                                  	; L_constants + 1001:
   340 000003E9 03                      	db T_string	; "set-cdr!"
   341 000003EA 0800000000000000        	dq 8
   342 000003F2 7365742D63647221        	db 0x73, 0x65, 0x74, 0x2D, 0x63, 0x64, 0x72, 0x21
   343                                  	; L_constants + 1018:
   344 000003FA 03                      	db T_string	; "string-ref"
   345 000003FB 0A00000000000000        	dq 10
   346 00000403 737472696E672D72        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x72
   347 0000040B 6566                    	db 0x65, 0x66
   348                                  	; L_constants + 1037:
   349 0000040D 03                      	db T_string	; "vector-ref"
   350 0000040E 0A00000000000000        	dq 10
   351 00000416 766563746F722D72        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x72
   352 0000041E 6566                    	db 0x65, 0x66
   353                                  	; L_constants + 1056:
   354 00000420 03                      	db T_string	; "vector-set!"
   355 00000421 0B00000000000000        	dq 11
   356 00000429 766563746F722D73        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x73
   357 00000431 657421                  	db 0x65, 0x74, 0x21
   358                                  	; L_constants + 1076:
   359 00000434 03                      	db T_string	; "string-set!"
   360 00000435 0B00000000000000        	dq 11
   361 0000043D 737472696E672D73        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x73
   362 00000445 657421                  	db 0x65, 0x74, 0x21
   363                                  	; L_constants + 1096:
   364 00000448 03                      	db T_string	; "make-vector"
   365 00000449 0B00000000000000        	dq 11
   366 00000451 6D616B652D766563        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x76, 0x65, 0x63
   367 00000459 746F72                  	db 0x74, 0x6F, 0x72
   368                                  	; L_constants + 1116:
   369 0000045C 03                      	db T_string	; "make-string"
   370 0000045D 0B00000000000000        	dq 11
   371 00000465 6D616B652D737472        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x73, 0x74, 0x72
   372 0000046D 696E67                  	db 0x69, 0x6E, 0x67
   373                                  	; L_constants + 1136:
   374 00000470 03                      	db T_string	; "numerator"
   375 00000471 0900000000000000        	dq 9
   376 00000479 6E756D657261746F        	db 0x6E, 0x75, 0x6D, 0x65, 0x72, 0x61, 0x74, 0x6F
   377 00000481 72                      	db 0x72
   378                                  	; L_constants + 1154:
   379 00000482 03                      	db T_string	; "denominator"
   380 00000483 0B00000000000000        	dq 11
   381 0000048B 64656E6F6D696E61        	db 0x64, 0x65, 0x6E, 0x6F, 0x6D, 0x69, 0x6E, 0x61
   382 00000493 746F72                  	db 0x74, 0x6F, 0x72
   383                                  	; L_constants + 1174:
   384 00000496 03                      	db T_string	; "eq?"
   385 00000497 0300000000000000        	dq 3
   386 0000049F 65713F                  	db 0x65, 0x71, 0x3F
   387                                  	; L_constants + 1186:
   388 000004A2 03                      	db T_string	; "__integer-to-fracti...
   389 000004A3 1500000000000000        	dq 21
   390 000004AB 5F5F696E74656765        	db 0x5F, 0x5F, 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65
   391 000004B3 722D746F2D667261        	db 0x72, 0x2D, 0x74, 0x6F, 0x2D, 0x66, 0x72, 0x61
   392 000004BB 6374696F6E              	db 0x63, 0x74, 0x69, 0x6F, 0x6E
   393                                  	; L_constants + 1216:
   394 000004C0 03                      	db T_string	; "logand"
   395 000004C1 0600000000000000        	dq 6
   396 000004C9 6C6F67616E64            	db 0x6C, 0x6F, 0x67, 0x61, 0x6E, 0x64
   397                                  	; L_constants + 1231:
   398 000004CF 03                      	db T_string	; "logor"
   399 000004D0 0500000000000000        	dq 5
   400 000004D8 6C6F676F72              	db 0x6C, 0x6F, 0x67, 0x6F, 0x72
   401                                  	; L_constants + 1245:
   402 000004DD 03                      	db T_string	; "logxor"
   403 000004DE 0600000000000000        	dq 6
   404 000004E6 6C6F67786F72            	db 0x6C, 0x6F, 0x67, 0x78, 0x6F, 0x72
   405                                  	; L_constants + 1260:
   406 000004EC 03                      	db T_string	; "lognot"
   407 000004ED 0600000000000000        	dq 6
   408 000004F5 6C6F676E6F74            	db 0x6C, 0x6F, 0x67, 0x6E, 0x6F, 0x74
   409                                  	; L_constants + 1275:
   410 000004FB 03                      	db T_string	; "ash"
   411 000004FC 0300000000000000        	dq 3
   412 00000504 617368                  	db 0x61, 0x73, 0x68
   413                                  	; L_constants + 1287:
   414 00000507 03                      	db T_string	; "symbol?"
   415 00000508 0700000000000000        	dq 7
   416 00000510 73796D626F6C3F          	db 0x73, 0x79, 0x6D, 0x62, 0x6F, 0x6C, 0x3F
   417                                  	; L_constants + 1303:
   418 00000517 03                      	db T_string	; "uninterned-symbol?"
   419 00000518 1200000000000000        	dq 18
   420 00000520 756E696E7465726E        	db 0x75, 0x6E, 0x69, 0x6E, 0x74, 0x65, 0x72, 0x6E
   421 00000528 65642D73796D626F        	db 0x65, 0x64, 0x2D, 0x73, 0x79, 0x6D, 0x62, 0x6F
   422 00000530 6C3F                    	db 0x6C, 0x3F
   423                                  	; L_constants + 1330:
   424 00000532 03                      	db T_string	; "gensym?"
   425 00000533 0700000000000000        	dq 7
   426 0000053B 67656E73796D3F          	db 0x67, 0x65, 0x6E, 0x73, 0x79, 0x6D, 0x3F
   427                                  	; L_constants + 1346:
   428 00000542 03                      	db T_string	; "gensym"
   429 00000543 0600000000000000        	dq 6
   430 0000054B 67656E73796D            	db 0x67, 0x65, 0x6E, 0x73, 0x79, 0x6D
   431                                  	; L_constants + 1361:
   432 00000551 03                      	db T_string	; "frame"
   433 00000552 0500000000000000        	dq 5
   434 0000055A 6672616D65              	db 0x66, 0x72, 0x61, 0x6D, 0x65
   435                                  	; L_constants + 1375:
   436 0000055F 03                      	db T_string	; "break"
   437 00000560 0500000000000000        	dq 5
   438 00000568 627265616B              	db 0x62, 0x72, 0x65, 0x61, 0x6B
   439                                  	; L_constants + 1389:
   440 0000056D 03                      	db T_string	; "boolean-false?"
   441 0000056E 0E00000000000000        	dq 14
   442 00000576 626F6F6C65616E2D        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x2D
   443 0000057E 66616C73653F            	db 0x66, 0x61, 0x6C, 0x73, 0x65, 0x3F
   444                                  	; L_constants + 1412:
   445 00000584 03                      	db T_string	; "boolean-true?"
   446 00000585 0D00000000000000        	dq 13
   447 0000058D 626F6F6C65616E2D        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x2D
   448 00000595 747275653F              	db 0x74, 0x72, 0x75, 0x65, 0x3F
   449                                  	; L_constants + 1434:
   450 0000059A 03                      	db T_string	; "primitive?"
   451 0000059B 0A00000000000000        	dq 10
   452 000005A3 7072696D69746976        	db 0x70, 0x72, 0x69, 0x6D, 0x69, 0x74, 0x69, 0x76
   453 000005AB 653F                    	db 0x65, 0x3F
   454                                  	; L_constants + 1453:
   455 000005AD 03                      	db T_string	; "length"
   456 000005AE 0600000000000000        	dq 6
   457 000005B6 6C656E677468            	db 0x6C, 0x65, 0x6E, 0x67, 0x74, 0x68
   458                                  	; L_constants + 1468:
   459 000005BC 03                      	db T_string	; "make-list"
   460 000005BD 0900000000000000        	dq 9
   461 000005C5 6D616B652D6C6973        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x6C, 0x69, 0x73
   462 000005CD 74                      	db 0x74
   463                                  	; L_constants + 1486:
   464 000005CE 03                      	db T_string	; "return"
   465 000005CF 0600000000000000        	dq 6
   466 000005D7 72657475726E            	db 0x72, 0x65, 0x74, 0x75, 0x72, 0x6E
   467                                  	; L_constants + 1501:
   468 000005DD 03                      	db T_string	; "apply"
   469 000005DE 0500000000000000        	dq 5
   470 000005E6 6170706C79              	db 0x61, 0x70, 0x70, 0x6C, 0x79
   471                                  	; L_constants + 1515:
   472 000005EB 03                      	db T_string	; "+"
   473 000005EC 0100000000000000        	dq 1
   474 000005F4 2B                      	db 0x2B
   475                                  	; L_constants + 1525:
   476 000005F5 11                      	db T_integer	; 1
   477 000005F6 0100000000000000        	dq 1
   478                                  	; L_constants + 1534:
   479 000005FE 11                      	db T_integer	; 2
   480 000005FF 0200000000000000        	dq 2
   481                                  	; L_constants + 1543:
   482 00000607 11                      	db T_integer	; 3
   483 00000608 0300000000000000        	dq 3
   484                                  	; L_constants + 1552:
   485 00000610 21                      	db T_pair	; (3)
   486 00000611 [0706000000000000]-     	dq L_constants + 1543, L_constants + 1
   486 00000619 [0100000000000000] 
   487                                  	; L_constants + 1569:
   488 00000621 21                      	db T_pair	; (2 3)
   489 00000622 [FE05000000000000]-     	dq L_constants + 1534, L_constants + 1552
   489 0000062A [1006000000000000] 
   490                                  	; L_constants + 1586:
   491 00000632 21                      	db T_pair	; (1 2 3)
   492 00000633 [F505000000000000]-     	dq L_constants + 1525, L_constants + 1569
   492 0000063B [2106000000000000] 
   493                                  free_var_0:	; location of +
   494 00000643 [4B06000000000000]      	dq .undefined_object
   495                                  .undefined_object:
   496 0000064B 05                      	db T_undefined
   497 0000064C [EB05000000000000]      	dq L_constants + 1515
   498                                  
   499                                  free_var_1:	; location of apply
   500 00000654 [5C06000000000000]      	dq .undefined_object
   501                                  .undefined_object:
   502 0000065C 05                      	db T_undefined
   503 0000065D [DD05000000000000]      	dq L_constants + 1501
   504                                  
   505                                  
   506                                  extern printf, fprintf, stdout, stderr, fwrite, exit, putchar, getchar
   507                                  global main
   508                                  section .text
   509                                  main:
   510 00000000 C8000000                        enter 0, 0
   511 00000004 6A00                            push 0
   512 00000006 6A00                            push 0
   513 00000008 68[48000000]                    push Lend
   514 0000000D C8000000                        enter 0, 0
   515                                  
   516                                  	; preparing a non-tail-call
   517 00000011 48B8-                   	mov rax, L_constants + 1586
   517 00000013 [3206000000000000] 
   518 0000001B 50                      	push rax
   519 0000001C 488B0425[43060000]      	mov rax, qword [free_var_0]	; free var +
   520 00000024 803805                  	cmp byte [rax], T_undefined
   521 00000027 745D                    	je L_error_fvar_undefined
   522 00000029 50                      	push rax
   523 0000002A 6A02                    	push 2	; arg count
   524 0000002C 488B0425[54060000]      	mov rax, qword [free_var_1]	; free var apply
   525 00000034 803805                  	cmp byte [rax], T_undefined
   526 00000037 744D                    	je L_error_fvar_undefined
   527 00000039 803804                  	cmp byte [rax], T_closure
   528 0000003C 0F85C8000000            	jne L_error_non_closure
   529 00000042 FF7001                  	push SOB_CLOSURE_ENV(rax)
   530 00000045 FF5009                  	call SOB_CLOSURE_CODE(rax)
   531                                  Lend:
   532 00000048 4889C7                  	mov rdi, rax
   533 0000004B E8B8030000              	call print_sexpr_if_not_void
   534                                  
   535 00000050 48BF-                           mov rdi, fmt_memory_usage
   535 00000052 [FD06000000000000] 
   536 0000005A 488B3425[83070000]              mov rsi, qword [top_of_memory]
   537 00000062 4881EE[00000000]                sub rsi, memory
   538 00000069 B800000000                      mov rax, 0
   539                                          ENTER
    44 0000006E C8000000            <1>  enter 0, 0
    45 00000072 4883E4F0            <1>  and rsp, ~15
   540 00000076 E8(00000000)                    call printf
   541                                          LEAVE
    49 0000007B C9                  <1>  leave
   542 0000007C B800000000                      mov rax, 0
   543 00000081 E8(00000000)                    call exit
   544                                  
   545                                  L_error_fvar_undefined:
   546 00000086 50                              push rax
   547 00000087 488B3C25[00000000]              mov rdi, qword [stderr]  ; destination
   548 0000008F 48BE-                           mov rsi, fmt_undefined_free_var_1
   548 00000091 [6506000000000000] 
   549 00000099 B800000000                      mov rax, 0
   550                                          ENTER
    44 0000009E C8000000            <1>  enter 0, 0
    45 000000A2 4883E4F0            <1>  and rsp, ~15
   551 000000A6 E8(00000000)                    call fprintf
   552                                          LEAVE
    49 000000AB C9                  <1>  leave
   553 000000AC 58                              pop rax
   554 000000AD 488B4001                        mov rax, qword [rax + 1] ; string
   555 000000B1 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
   556 000000B5 BE01000000                      mov rsi, 1               ; sizeof(char)
   557 000000BA 488B5001                        mov rdx, qword [rax + 1] ; string-length
   558 000000BE 488B0C25[00000000]              mov rcx, qword [stderr]  ; destination
   559 000000C6 B800000000                      mov rax, 0
   560                                          ENTER
    44 000000CB C8000000            <1>  enter 0, 0
    45 000000CF 4883E4F0            <1>  and rsp, ~15
   561 000000D3 E8(00000000)                    call fwrite
   562                                          LEAVE
    49 000000D8 C9                  <1>  leave
   563 000000D9 488B3C25[00000000]              mov rdi, [stderr]       ; destination
   564 000000E1 48BE-                           mov rsi, fmt_undefined_free_var_2
   564 000000E3 [7C06000000000000] 
   565 000000EB B800000000                      mov rax, 0
   566                                          ENTER
    44 000000F0 C8000000            <1>  enter 0, 0
    45 000000F4 4883E4F0            <1>  and rsp, ~15
   567 000000F8 E8(00000000)                    call fprintf
   568                                          LEAVE
    49 000000FD C9                  <1>  leave
   569 000000FE 48C7C0F6FFFFFF                  mov rax, -10
   570 00000105 E8(00000000)                    call exit
   571                                  
   572                                  L_error_non_closure:
   573 0000010A 488B3C25[00000000]              mov rdi, qword [stderr]
   574 00000112 48BE-                           mov rsi, fmt_non_closure
   574 00000114 [3307000000000000] 
   575 0000011C B800000000                      mov rax, 0
   576                                          ENTER
    44 00000121 C8000000            <1>  enter 0, 0
    45 00000125 4883E4F0            <1>  and rsp, ~15
   577 00000129 E8(00000000)                    call fprintf
   578                                          LEAVE
    49 0000012E C9                  <1>  leave
   579 0000012F 48C7C0FEFFFFFF                  mov rax, -2
   580 00000136 E8(00000000)                    call exit
   581                                  
   582                                  L_error_improper_list:
   583 0000013B 488B3C25[00000000]      	mov rdi, qword [stderr]
   584 00000143 48BE-                   	mov rsi, fmt_error_improper_list
   584 00000145 [5B07000000000000] 
   585 0000014D B800000000              	mov rax, 0
   586                                          ENTER
    44 00000152 C8000000            <1>  enter 0, 0
    45 00000156 4883E4F0            <1>  and rsp, ~15
   587 0000015A E8(00000000)            	call fprintf
   588                                          LEAVE
    49 0000015F C9                  <1>  leave
   589 00000160 48C7C0F9FFFFFF          	mov rax, -7
   590 00000167 E8(00000000)            	call exit
   591                                  
   592                                  L_error_incorrect_arity_simple:
   593 0000016C 488B3C25[00000000]              mov rdi, qword [stderr]
   594 00000174 48BE-                           mov rsi, fmt_incorrect_arity_simple
   594 00000176 [9E06000000000000] 
   595 0000017E EB12                            jmp L_error_incorrect_arity_common
   596                                  L_error_incorrect_arity_opt:
   597 00000180 488B3C25[00000000]              mov rdi, qword [stderr]
   598 00000188 48BE-                           mov rsi, fmt_incorrect_arity_opt
   598 0000018A [C906000000000000] 
   599                                  L_error_incorrect_arity_common:
   600 00000192 5A                              pop rdx
   601 00000193 59                              pop rcx
   602 00000194 B800000000                      mov rax, 0
   603                                          ENTER
    44 00000199 C8000000            <1>  enter 0, 0
    45 0000019D 4883E4F0            <1>  and rsp, ~15
   604 000001A1 E8(00000000)                    call fprintf
   605                                          LEAVE
    49 000001A6 C9                  <1>  leave
   606 000001A7 48C7C0FAFFFFFF                  mov rax, -6
   607 000001AE E8(00000000)                    call exit
   608                                  
   609                                  section .data
   610                                  fmt_undefined_free_var_1:
   611 00000665 212121205468652066-             db `!!! The free variable \0`
   611 0000066E 726565207661726961-
   611 00000677 626C652000         
   612                                  fmt_undefined_free_var_2:
   613 0000067C 207761732075736564-             db ` was used before it was defined.\n\0`
   613 00000685 206265666F72652069-
   613 0000068E 742077617320646566-
   613 00000697 696E65642E0A00     
   614                                  fmt_incorrect_arity_simple:
   615 0000069E 212121204578706563-             db `!!! Expected %ld arguments, but given %ld\n\0`
   615 000006A7 74656420256C642061-
   615 000006B0 7267756D656E74732C-
   615 000006B9 206275742067697665-
   615 000006C2 6E20256C640A00     
   616                                  fmt_incorrect_arity_opt:
   617 000006C9 212121204578706563-             db `!!! Expected at least %ld arguments, but given %ld\n\0`
   617 000006D2 746564206174206C65-
   617 000006DB 61737420256C642061-
   617 000006E4 7267756D656E74732C-
   617 000006ED 206275742067697665-
   617 000006F6 6E20256C640A00     
   618                                  fmt_memory_usage:
   619 000006FD 0A2121212055736564-             db `\n!!! Used %ld bytes of dynamically-allocated memory\n\n\0`
   619 00000706 20256C642062797465-
   619 0000070F 73206F662064796E61-
   619 00000718 6D6963616C6C792D61-
   619 00000721 6C6C6F636174656420-
   619 0000072A 6D656D6F72790A0A00 
   620                                  fmt_non_closure:
   621 00000733 21212120417474656D-             db `!!! Attempting to apply a non-closure!\n\0`
   621 0000073C 7074696E6720746F20-
   621 00000745 6170706C792061206E-
   621 0000074E 6F6E2D636C6F737572-
   621 00000757 65210A00           
   622                                  fmt_error_improper_list:
   623 0000075B 212121205468652061-     	db `!!! The argument is not a proper list!\n\0`
   623 00000764 7267756D656E742069-
   623 0000076D 73206E6F7420612070-
   623 00000776 726F706572206C6973-
   623 0000077F 74210A00           
   624                                  
   625                                  section .bss
   626                                  memory:
   627 00000000 <res 40000000h>         	resb gbytes(1)
   628                                  
   629                                  section .data
   630                                  top_of_memory:
   631 00000783 [0000000000000000]              dq memory
   632                                  
   633                                  section .text
   634                                  malloc:
   635 000001B3 488B0425[83070000]              mov rax, qword [top_of_memory]
   636 000001BB 48013C25[83070000]              add qword [top_of_memory], rdi
   637 000001C3 C3                              ret
   638                                  
   639                                  L_code_ptr_return:
   640 000001C4 48837C241002            	cmp qword [rsp + 8*2], 2
   641 000001CA 0F856F1C0000            	jne L_error_arg_count_2
   642 000001D0 488B4C2418              	mov rcx, qword [rsp + 8*3]
   643                                  	assert_integer(rcx)
    53 000001D5 803911              <1>  cmp byte [%1], %2
    54 000001D8 0F85001D0000        <1>  jne L_error_incorrect_type
   644 000001DE 488B4901                	mov rcx, qword [rcx + 1]
   645 000001E2 4883F900                	cmp rcx, 0
   646 000001E6 0F8C871B0000            	jl L_error_integer_range
   647 000001EC 488B442420              	mov rax, qword [rsp + 8*4]
   648                                  .L0:
   649 000001F1 4883F900                        cmp rcx, 0
   650 000001F5 7409                            je .L1
   651 000001F7 488B6D00                	mov rbp, qword [rbp]
   652 000001FB 48FFC9                  	dec rcx
   653 000001FE 7FF1                    	jg .L0
   654                                  .L1:
   655 00000200 4889EC                  	mov rsp, rbp
   656 00000203 5D                      	pop rbp
   657 00000204 5B                              pop rbx
   658 00000205 488B4C2408                      mov rcx, qword [rsp + 8*1]
   659 0000020A 488D64CC10                      lea rsp, [rsp + 8*rcx + 8*2]
   660 0000020F FFE3                    	jmp rbx
   661                                  
   662                                  L_code_ptr_make_list:
   663 00000211 C8000000                	enter 0, 0
   664 00000215 48837D1801                      cmp COUNT, 1
   665 0000021A 740C                            je .L0
   666 0000021C 48837D1802                      cmp COUNT, 2
   667 00000221 7411                            je .L1
   668 00000223 E94C1C0000                      jmp L_error_arg_count_12
   669                                  .L0:
   670 00000228 49B9-                           mov r9, sob_void
   670 0000022A [0000000000000000] 
   671 00000232 EB04                            jmp .L2
   672                                  .L1:
   673 00000234 4C8B4D28                        mov r9, PARAM(1)
   674                                  .L2:
   675 00000238 488B4D20                        mov rcx, PARAM(0)
   676                                          assert_integer(rcx)
    53 0000023C 803911              <1>  cmp byte [%1], %2
    54 0000023F 0F85991C0000        <1>  jne L_error_incorrect_type
   677 00000245 488B4901                        mov rcx, qword [rcx + 1]
   678 00000249 4883F900                        cmp rcx, 0
   679 0000024D 0F8C511B0000                    jl L_error_arg_negative
   680 00000253 49B8-                           mov r8, sob_nil
   680 00000255 [0100000000000000] 
   681                                  .L3:
   682 0000025D 4883F900                        cmp rcx, 0
   683 00000261 7E1D                            jle .L4
   684 00000263 BF11000000                      mov rdi, 1 + 8 + 8
   685 00000268 E846FFFFFF                      call malloc
   686 0000026D C60021                          mov byte [rax], T_pair
   687 00000270 4C894801                        mov qword [rax + 1], r9
   688 00000274 4C894009                        mov qword [rax + 1 + 8], r8
   689 00000278 4989C0                          mov r8, rax
   690 0000027B 48FFC9                          dec rcx
   691 0000027E EBDD                            jmp .L3
   692                                  .L4:
   693 00000280 4C89C0                          mov rax, r8
   694 00000283 48837D1802                      cmp COUNT, 2
   695 00000288 7404                            je .L5
   696 0000028A C9                              leave
   697 0000028B C21800                          ret AND_KILL_FRAME(1)
   698                                  .L5:
   699 0000028E C9                      	leave
   700 0000028F C22000                  	ret AND_KILL_FRAME(2)
   701                                  
   702                                  L_code_ptr_is_primitive:
   703 00000292 C8000000                	enter 0, 0
   704 00000296 48837D1801              	cmp COUNT, 1
   705 0000029B 0F85691B0000            	jne L_error_arg_count_1
   706 000002A1 488B4520                	mov rax, PARAM(0)
   707                                  	assert_closure(rax)
    53 000002A5 803804              <1>  cmp byte [%1], %2
    54 000002A8 0F85301C0000        <1>  jne L_error_incorrect_type
   708 000002AE 4883780100              	cmp SOB_CLOSURE_ENV(rax), 0
   709 000002B3 750C                    	jne .L_false
   710 000002B5 48B8-                   	mov rax, sob_boolean_true
   710 000002B7 [0300000000000000] 
   711 000002BF EB0A                    	jmp .L_end
   712                                  .L_false:
   713 000002C1 48B8-                   	mov rax, sob_boolean_false
   713 000002C3 [0200000000000000] 
   714                                  .L_end:
   715 000002CB C9                      	leave
   716 000002CC C21800                  	ret AND_KILL_FRAME(1)
   717                                  
   718                                  L_code_ptr_length:
   719 000002CF C8000000                	enter 0, 0
   720 000002D3 48837D1801              	cmp COUNT, 1
   721 000002D8 0F852C1B0000            	jne L_error_arg_count_1
   722 000002DE 488B5D20                	mov rbx, PARAM(0)
   723 000002E2 BF00000000              	mov rdi, 0
   724                                  .L:
   725 000002E7 803B01                  	cmp byte [rbx], T_nil
   726 000002EA 7412                    	je .L_end
   727                                  	assert_pair(rbx)
    53 000002EC 803B21              <1>  cmp byte [%1], %2
    54 000002EF 0F85E91B0000        <1>  jne L_error_incorrect_type
   728 000002F5 488B5B09                	mov rbx, SOB_PAIR_CDR(rbx)
   729 000002F9 48FFC7                  	inc rdi
   730 000002FC EBE9                    	jmp .L
   731                                  .L_end:
   732 000002FE E8561A0000              	call make_integer
   733 00000303 C9                      	leave
   734 00000304 C21800                  	ret AND_KILL_FRAME(1)
   735                                  
   736                                  L_code_ptr_break:
   737 00000307 48837C241000                    cmp qword [rsp + 8 * 2], 0
   738 0000030D 0F85C21A0000                    jne L_error_arg_count_0
   739 00000313 CC                              int3
   740 00000314 48B8-                           mov rax, sob_void
   740 00000316 [0000000000000000] 
   741 0000031E C21000                          ret AND_KILL_FRAME(0)        
   742                                  
   743                                  L_code_ptr_frame:
   744 00000321 C8000000                        enter 0, 0
   745 00000325 48837D1800                      cmp COUNT, 0
   746 0000032A 0F85A51A0000                    jne L_error_arg_count_0
   747                                  
   748 00000330 48BF-                           mov rdi, fmt_frame
   748 00000332 [8B07000000000000] 
   749 0000033A 488B7500                        mov rsi, qword [rbp]    ; old rbp
   750 0000033E 488B5608                        mov rdx, qword [rsi + 8*1] ; ret addr
   751 00000342 488B4E10                        mov rcx, qword [rsi + 8*2] ; lexical environment
   752 00000346 4C8B4618                        mov r8, qword [rsi + 8*3] ; count
   753 0000034A 4C8D4E20                        lea r9, [rsi + 8*4]       ; address of argument 0
   754 0000034E 6A00                            push 0
   755 00000350 4151                            push r9
   756 00000352 4150                            push r8                   ; we'll use it when printing the params
   757 00000354 B800000000                      mov rax, 0
   758                                          
   759                                          ENTER
    44 00000359 C8000000            <1>  enter 0, 0
    45 0000035D 4883E4F0            <1>  and rsp, ~15
   760 00000361 E8(00000000)                    call printf
   761                                          LEAVE
    49 00000366 C9                  <1>  leave
   762                                  
   763                                  .L:
   764 00000367 488B0C24                        mov rcx, qword [rsp]
   765 0000036B 4883F900                        cmp rcx, 0
   766 0000036F 7467                            je .L_out
   767 00000371 48BF-                           mov rdi, fmt_frame_param_prefix
   767 00000373 [C407000000000000] 
   768 0000037B 488B742410                      mov rsi, qword [rsp + 8*2]
   769 00000380 B800000000                      mov rax, 0
   770                                          
   771                                          ENTER
    44 00000385 C8000000            <1>  enter 0, 0
    45 00000389 4883E4F0            <1>  and rsp, ~15
   772 0000038D E8(00000000)                    call printf
   773                                          LEAVE
    49 00000392 C9                  <1>  leave
   774                                  
   775 00000393 488B0C24                        mov rcx, qword [rsp]
   776 00000397 48FFC9                          dec rcx
   777 0000039A 48890C24                        mov qword [rsp], rcx    ; dec arg count
   778 0000039E 48FF442410                      inc qword [rsp + 8*2]   ; increment index of current arg
   779 000003A3 488B7C2408                      mov rdi, qword [rsp + 8*1] ; addr of addr current arg
   780 000003A8 4C8D4F08                        lea r9, [rdi + 8]          ; addr of next arg
   781 000003AC 4C894C2408                      mov qword [rsp + 8*1], r9  ; backup addr of next arg
   782 000003B1 488B3F                          mov rdi, qword [rdi]       ; addr of current arg
   783 000003B4 E87B000000                      call print_sexpr
   784 000003B9 48BF-                           mov rdi, fmt_newline
   784 000003BB [F007000000000000] 
   785 000003C3 B800000000                      mov rax, 0
   786                                          ENTER
    44 000003C8 C8000000            <1>  enter 0, 0
    45 000003CC 4883E4F0            <1>  and rsp, ~15
   787 000003D0 E8(00000000)                    call printf
   788                                          LEAVE
    49 000003D5 C9                  <1>  leave
   789 000003D6 EB8F                            jmp .L
   790                                  .L_out:
   791 000003D8 48BF-                           mov rdi, fmt_frame_continue
   791 000003DA [D507000000000000] 
   792 000003E2 B800000000                      mov rax, 0
   793                                          ENTER
    44 000003E7 C8000000            <1>  enter 0, 0
    45 000003EB 4883E4F0            <1>  and rsp, ~15
   794 000003EF E8(00000000)                    call printf
   795 000003F4 E8(00000000)                    call getchar
   796                                          LEAVE
    49 000003F9 C9                  <1>  leave
   797                                          
   798 000003FA 48B8-                           mov rax, sob_void
   798 000003FC [0000000000000000] 
   799 00000404 C9                              leave
   800 00000405 C21000                          ret AND_KILL_FRAME(0)
   801                                          
   802                                  print_sexpr_if_not_void:
   803 00000408 4881FF[00000000]        	cmp rdi, sob_void
   804 0000040F 7422                    	je .done
   805 00000411 E81E000000              	call print_sexpr
   806 00000416 48BF-                   	mov rdi, fmt_newline
   806 00000418 [F007000000000000] 
   807 00000420 B800000000              	mov rax, 0
   808                                  	ENTER
    44 00000425 C8000000            <1>  enter 0, 0
    45 00000429 4883E4F0            <1>  and rsp, ~15
   809 0000042D E8(00000000)            	call printf
   810                                  	LEAVE
    49 00000432 C9                  <1>  leave
   811                                  .done:
   812 00000433 C3                      	ret
   813                                  
   814                                  section .data
   815                                  fmt_frame:
   816 0000078B 524250203D2025703B-             db `RBP = %p; ret addr = %p; lex env = %p; param count = %d\n\0`
   816 00000794 207265742061646472-
   816 0000079D 203D2025703B206C65-
   816 000007A6 7820656E76203D2025-
   816 000007AF 703B20706172616D20-
   816 000007B8 636F756E74203D2025-
   816 000007C1 640A00             
   817                                  fmt_frame_param_prefix:
   818 000007C4 3D3D5B706172616D20-             db `==[param %d]==> \0`
   818 000007CD 25645D3D3D3E2000   
   819                                  fmt_frame_continue:
   820 000007D5 486974203C456E7465-             db `Hit <Enter> to continue...\0`
   820 000007DE 723E20746F20636F6E-
   820 000007E7 74696E75652E2E2E00 
   821                                  fmt_newline:
   822 000007F0 0A00                    	db `\n\0`
   823                                  fmt_void:
   824 000007F2 233C766F69643E00        	db `#<void>\0`
   825                                  fmt_nil:
   826 000007FA 282900                  	db `()\0`
   827                                  fmt_boolean_false:
   828 000007FD 236600                  	db `#f\0`
   829                                  fmt_boolean_true:
   830 00000800 237400                  	db `#t\0`
   831                                  fmt_char_backslash:
   832 00000803 235C5C00                	db `#\\\\\0`
   833                                  fmt_char_dquote:
   834 00000807 235C2200                	db `#\\"\0`
   835                                  fmt_char_simple:
   836 0000080B 235C256300              	db `#\\%c\0`
   837                                  fmt_char_null:
   838 00000810 235C6E756C00            	db `#\\nul\0`
   839                                  fmt_char_bell:
   840 00000816 235C62656C6C00          	db `#\\bell\0`
   841                                  fmt_char_backspace:
   842 0000081D 235C6261636B737061-     	db `#\\backspace\0`
   842 00000826 636500             
   843                                  fmt_char_tab:
   844 00000829 235C74616200            	db `#\\tab\0`
   845                                  fmt_char_newline:
   846 0000082F 235C6E65776C696E65-     	db `#\\newline\0`
   846 00000838 00                 
   847                                  fmt_char_formfeed:
   848 00000839 235C7061676500          	db `#\\page\0`
   849                                  fmt_char_return:
   850 00000840 235C72657475726E00      	db `#\\return\0`
   851                                  fmt_char_escape:
   852 00000849 235C65736300            	db `#\\esc\0`
   853                                  fmt_char_space:
   854 0000084F 235C737061636500        	db `#\\space\0`
   855                                  fmt_char_hex:
   856 00000857 235C782530325800        	db `#\\x%02X\0`
   857                                  fmt_gensym:
   858 0000085F 47256C6400                      db `G%ld\0`
   859                                  fmt_closure:
   860 00000864 233C636C6F73757265-     	db `#<closure at 0x%08X env=0x%08X code=0x%08X>\0`
   860 0000086D 206174203078253038-
   860 00000876 5820656E763D307825-
   860 0000087F 30385820636F64653D-
   860 00000888 3078253038583E00   
   861                                  fmt_lparen:
   862 00000890 2800                    	db `(\0`
   863                                  fmt_dotted_pair:
   864 00000892 202E2000                	db ` . \0`
   865                                  fmt_rparen:
   866 00000896 2900                    	db `)\0`
   867                                  fmt_space:
   868 00000898 2000                    	db ` \0`
   869                                  fmt_empty_vector:
   870 0000089A 23282900                	db `#()\0`
   871                                  fmt_vector:
   872 0000089E 232800                  	db `#(\0`
   873                                  fmt_real:
   874 000008A1 256600                  	db `%f\0`
   875                                  fmt_fraction:
   876 000008A4 256C642F256C6400        	db `%ld/%ld\0`
   877                                  fmt_zero:
   878 000008AC 3000                    	db `0\0`
   879                                  fmt_int:
   880 000008AE 256C6400                	db `%ld\0`
   881                                  fmt_unknown_scheme_object_error:
   882 000008B2 0A0A21212120457272-     	db `\n\n!!! Error: Unknown Scheme-object (RTTI 0x%02X) `
   882 000008BB 6F723A20556E6B6E6F-
   882 000008C4 776E20536368656D65-
   882 000008CD 2D6F626A6563742028-
   882 000008D6 525454492030782530-
   882 000008DF 32582920           
   883 000008E3 617420616464726573-     	db `at address 0x%08X\n\n\0`
   883 000008EC 73203078253038580A-
   883 000008F5 0A00               
   884                                  fmt_dquote:
   885 000008F7 2200                    	db `\"\0`
   886                                  fmt_string_char:
   887 000008F9 256300                          db `%c\0`
   888                                  fmt_string_char_7:
   889 000008FC 5C6100                          db `\\a\0`
   890                                  fmt_string_char_8:
   891 000008FF 5C6200                          db `\\b\0`
   892                                  fmt_string_char_9:
   893 00000902 5C7400                          db `\\t\0`
   894                                  fmt_string_char_10:
   895 00000905 5C6E00                          db `\\n\0`
   896                                  fmt_string_char_11:
   897 00000908 5C7600                          db `\\v\0`
   898                                  fmt_string_char_12:
   899 0000090B 5C6600                          db `\\f\0`
   900                                  fmt_string_char_13:
   901 0000090E 5C7200                          db `\\r\0`
   902                                  fmt_string_char_34:
   903 00000911 5C2200                          db `\\"\0`
   904                                  fmt_string_char_92:
   905 00000914 5C5C00                          db `\\\\\0`
   906                                  fmt_string_char_hex:
   907 00000917 5C7825583B00                    db `\\x%X;\0`
   908                                  
   909                                  section .text
   910                                  
   911                                  print_sexpr:
   912 00000434 C8000000                	enter 0, 0
   913 00000438 8A07                    	mov al, byte [rdi]
   914 0000043A 3C00                    	cmp al, T_void
   915 0000043C 7465                    	je .Lvoid
   916 0000043E 3C01                    	cmp al, T_nil
   917 00000440 7470                    	je .Lnil
   918 00000442 3C09                    	cmp al, T_boolean_false
   919 00000444 747B                    	je .Lboolean_false
   920 00000446 3C0A                    	cmp al, T_boolean_true
   921 00000448 0F8482000000            	je .Lboolean_true
   922 0000044E 3C02                    	cmp al, T_char
   923 00000450 0F8489000000            	je .Lchar
   924 00000456 3C41                    	cmp al, T_interned_symbol
   925 00000458 0F84BF010000            	je .Linterned_symbol
   926 0000045E 3C42                            cmp al, T_uninterned_symbol
   927 00000460 0F84E3010000                    je .Luninterned_symbol
   928 00000466 3C21                    	cmp al, T_pair
   929 00000468 0F84EE010000            	je .Lpair
   930 0000046E 3C22                    	cmp al, T_vector
   931 00000470 0F84B7020000            	je .Lvector
   932 00000476 3C04                    	cmp al, T_closure
   933 00000478 0F8485010000            	je .Lclosure
   934 0000047E 3C13                    	cmp al, T_real
   935 00000480 0F8448030000            	je .Lreal
   936 00000486 3C12                    	cmp al, T_fraction
   937 00000488 0F846E030000            	je .Lfraction
   938 0000048E 3C11                    	cmp al, T_integer
   939 00000490 0F84A7030000            	je .Linteger
   940 00000496 3C03                    	cmp al, T_string
   941 00000498 0F84B2030000            	je .Lstring
   942                                  
   943 0000049E E9DC040000              	jmp .Lunknown_sexpr_type
   944                                  
   945                                  .Lvoid:
   946 000004A3 48BF-                   	mov rdi, fmt_void
   946 000004A5 [F207000000000000] 
   947 000004AD E900050000              	jmp .Lemit
   948                                  
   949                                  .Lnil:
   950 000004B2 48BF-                   	mov rdi, fmt_nil
   950 000004B4 [FA07000000000000] 
   951 000004BC E9F1040000              	jmp .Lemit
   952                                  
   953                                  .Lboolean_false:
   954 000004C1 48BF-                   	mov rdi, fmt_boolean_false
   954 000004C3 [FD07000000000000] 
   955 000004CB E9E2040000              	jmp .Lemit
   956                                  
   957                                  .Lboolean_true:
   958 000004D0 48BF-                   	mov rdi, fmt_boolean_true
   958 000004D2 [0008000000000000] 
   959 000004DA E9D3040000              	jmp .Lemit
   960                                  
   961                                  .Lchar:
   962 000004DF 8A4701                  	mov al, byte [rdi + 1]
   963 000004E2 3C20                    	cmp al, ' '
   964 000004E4 7E20                    	jle .Lchar_whitespace
   965 000004E6 3C5C                    	cmp al, 92 		; backslash
   966 000004E8 7474                    	je .Lchar_backslash
   967 000004EA 3C22                    	cmp al, '"'
   968 000004EC 747F                    	je .Lchar_dquote
   969 000004EE 4825FF000000            	and rax, 255
   970 000004F4 48BF-                   	mov rdi, fmt_char_simple
   970 000004F6 [0B08000000000000] 
   971 000004FE 4889C6                  	mov rsi, rax
   972 00000501 E9AC040000              	jmp .Lemit
   973                                  
   974                                  .Lchar_whitespace:
   975 00000506 3C00                    	cmp al, 0
   976 00000508 7472                    	je .Lchar_null
   977 0000050A 3C07                    	cmp al, 7
   978 0000050C 747D                    	je .Lchar_bell
   979 0000050E 3C08                    	cmp al, 8
   980 00000510 0F8484000000            	je .Lchar_backspace
   981 00000516 3C09                    	cmp al, 9
   982 00000518 0F848B000000            	je .Lchar_tab
   983 0000051E 3C0A                    	cmp al, 10
   984 00000520 0F8492000000            	je .Lchar_newline
   985 00000526 3C0C                    	cmp al, 12
   986 00000528 0F8499000000            	je .Lchar_formfeed
   987 0000052E 3C0D                    	cmp al, 13
   988 00000530 0F84A0000000            	je .Lchar_return
   989 00000536 3C1B                    	cmp al, 27
   990 00000538 0F84A7000000            	je .Lchar_escape
   991 0000053E 4825FF000000            	and rax, 255
   992 00000544 3C20                    	cmp al, ' '
   993 00000546 0F84A8000000            	je .Lchar_space
   994 0000054C 48BF-                   	mov rdi, fmt_char_hex
   994 0000054E [5708000000000000] 
   995 00000556 4889C6                  	mov rsi, rax
   996 00000559 E954040000              	jmp .Lemit	
   997                                  
   998                                  .Lchar_backslash:
   999 0000055E 48BF-                   	mov rdi, fmt_char_backslash
   999 00000560 [0308000000000000] 
  1000 00000568 E945040000              	jmp .Lemit
  1001                                  
  1002                                  .Lchar_dquote:
  1003 0000056D 48BF-                   	mov rdi, fmt_char_dquote
  1003 0000056F [0708000000000000] 
  1004 00000577 E936040000              	jmp .Lemit
  1005                                  
  1006                                  .Lchar_null:
  1007 0000057C 48BF-                   	mov rdi, fmt_char_null
  1007 0000057E [1008000000000000] 
  1008 00000586 E927040000              	jmp .Lemit
  1009                                  
  1010                                  .Lchar_bell:
  1011 0000058B 48BF-                   	mov rdi, fmt_char_bell
  1011 0000058D [1608000000000000] 
  1012 00000595 E918040000              	jmp .Lemit
  1013                                  
  1014                                  .Lchar_backspace:
  1015 0000059A 48BF-                   	mov rdi, fmt_char_backspace
  1015 0000059C [1D08000000000000] 
  1016 000005A4 E909040000              	jmp .Lemit
  1017                                  
  1018                                  .Lchar_tab:
  1019 000005A9 48BF-                   	mov rdi, fmt_char_tab
  1019 000005AB [2908000000000000] 
  1020 000005B3 E9FA030000              	jmp .Lemit
  1021                                  
  1022                                  .Lchar_newline:
  1023 000005B8 48BF-                   	mov rdi, fmt_char_newline
  1023 000005BA [2F08000000000000] 
  1024 000005C2 E9EB030000              	jmp .Lemit
  1025                                  
  1026                                  .Lchar_formfeed:
  1027 000005C7 48BF-                   	mov rdi, fmt_char_formfeed
  1027 000005C9 [3908000000000000] 
  1028 000005D1 E9DC030000              	jmp .Lemit
  1029                                  
  1030                                  .Lchar_return:
  1031 000005D6 48BF-                   	mov rdi, fmt_char_return
  1031 000005D8 [4008000000000000] 
  1032 000005E0 E9CD030000              	jmp .Lemit
  1033                                  
  1034                                  .Lchar_escape:
  1035 000005E5 48BF-                   	mov rdi, fmt_char_escape
  1035 000005E7 [4908000000000000] 
  1036 000005EF E9BE030000              	jmp .Lemit
  1037                                  
  1038                                  .Lchar_space:
  1039 000005F4 48BF-                   	mov rdi, fmt_char_space
  1039 000005F6 [4F08000000000000] 
  1040 000005FE E9AF030000              	jmp .Lemit
  1041                                  
  1042                                  .Lclosure:
  1043 00000603 4889FE                  	mov rsi, qword rdi
  1044 00000606 48BF-                   	mov rdi, fmt_closure
  1044 00000608 [6408000000000000] 
  1045 00000610 488B5601                	mov rdx, SOB_CLOSURE_ENV(rsi)
  1046 00000614 488B4E09                	mov rcx, SOB_CLOSURE_CODE(rsi)
  1047 00000618 E995030000              	jmp .Lemit
  1048                                  
  1049                                  .Linterned_symbol:
  1050 0000061D 488B7F01                	mov rdi, qword [rdi + 1] ; sob_string
  1051 00000621 BE01000000              	mov rsi, 1		 ; size = 1 byte
  1052 00000626 488B5701                	mov rdx, qword [rdi + 1] ; length
  1053 0000062A 488D7F09                	lea rdi, [rdi + 1 + 8]	 ; actual characters
  1054 0000062E 488B0C25[00000000]      	mov rcx, qword [stdout]	 ; FILE *
  1055                                  	ENTER
    44 00000636 C8000000            <1>  enter 0, 0
    45 0000063A 4883E4F0            <1>  and rsp, ~15
  1056 0000063E E8(00000000)            	call fwrite
  1057                                  	LEAVE
    49 00000643 C9                  <1>  leave
  1058 00000644 E97E030000              	jmp .Lend
  1059                                  
  1060                                  .Luninterned_symbol:
  1061 00000649 488B7701                        mov rsi, qword [rdi + 1] ; gensym counter
  1062 0000064D 48BF-                           mov rdi, fmt_gensym
  1062 0000064F [5F08000000000000] 
  1063 00000657 E956030000                      jmp .Lemit
  1064                                  	
  1065                                  .Lpair:
  1066 0000065C 57                      	push rdi
  1067 0000065D 48BF-                   	mov rdi, fmt_lparen
  1067 0000065F [9008000000000000] 
  1068 00000667 B800000000              	mov rax, 0
  1069                                          ENTER
    44 0000066C C8000000            <1>  enter 0, 0
    45 00000670 4883E4F0            <1>  and rsp, ~15
  1070 00000674 E8(00000000)            	call printf
  1071                                          LEAVE
    49 00000679 C9                  <1>  leave
  1072 0000067A 488B3C24                	mov rdi, qword [rsp] 	; pair
  1073 0000067E 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
  1074 00000682 E8ADFDFFFF              	call print_sexpr
  1075 00000687 5F                      	pop rdi 		; pair
  1076 00000688 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
  1077                                  .Lcdr:
  1078 0000068C 8A07                    	mov al, byte [rdi]
  1079 0000068E 3C01                    	cmp al, T_nil
  1080 00000690 7447                    	je .Lcdr_nil
  1081 00000692 3C21                    	cmp al, T_pair
  1082 00000694 7462                    	je .Lcdr_pair
  1083 00000696 57                      	push rdi
  1084 00000697 48BF-                   	mov rdi, fmt_dotted_pair
  1084 00000699 [9208000000000000] 
  1085 000006A1 B800000000              	mov rax, 0
  1086                                          ENTER
    44 000006A6 C8000000            <1>  enter 0, 0
    45 000006AA 4883E4F0            <1>  and rsp, ~15
  1087 000006AE E8(00000000)            	call printf
  1088                                          LEAVE
    49 000006B3 C9                  <1>  leave
  1089 000006B4 5F                      	pop rdi
  1090 000006B5 E87AFDFFFF              	call print_sexpr
  1091 000006BA 48BF-                   	mov rdi, fmt_rparen
  1091 000006BC [9608000000000000] 
  1092 000006C4 B800000000              	mov rax, 0
  1093                                          ENTER
    44 000006C9 C8000000            <1>  enter 0, 0
    45 000006CD 4883E4F0            <1>  and rsp, ~15
  1094 000006D1 E8(00000000)            	call printf
  1095                                          LEAVE
    49 000006D6 C9                  <1>  leave
  1096 000006D7 C9                      	leave
  1097 000006D8 C3                      	ret
  1098                                  
  1099                                  .Lcdr_nil:
  1100 000006D9 48BF-                   	mov rdi, fmt_rparen
  1100 000006DB [9608000000000000] 
  1101 000006E3 B800000000              	mov rax, 0
  1102                                          ENTER
    44 000006E8 C8000000            <1>  enter 0, 0
    45 000006EC 4883E4F0            <1>  and rsp, ~15
  1103 000006F0 E8(00000000)            	call printf
  1104                                          LEAVE
    49 000006F5 C9                  <1>  leave
  1105 000006F6 C9                      	leave
  1106 000006F7 C3                      	ret
  1107                                  
  1108                                  .Lcdr_pair:
  1109 000006F8 57                      	push rdi
  1110 000006F9 48BF-                   	mov rdi, fmt_space
  1110 000006FB [9808000000000000] 
  1111 00000703 B800000000              	mov rax, 0
  1112                                          ENTER
    44 00000708 C8000000            <1>  enter 0, 0
    45 0000070C 4883E4F0            <1>  and rsp, ~15
  1113 00000710 E8(00000000)            	call printf
  1114                                          LEAVE
    49 00000715 C9                  <1>  leave
  1115 00000716 488B3C24                	mov rdi, qword [rsp]
  1116 0000071A 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
  1117 0000071E E811FDFFFF              	call print_sexpr
  1118 00000723 5F                      	pop rdi
  1119 00000724 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
  1120 00000728 E95FFFFFFF              	jmp .Lcdr
  1121                                  
  1122                                  .Lvector:
  1123 0000072D 488B4701                	mov rax, qword [rdi + 1] ; length
  1124 00000731 4883F800                	cmp rax, 0
  1125 00000735 0F8484000000            	je .Lvector_empty
  1126 0000073B 57                      	push rdi
  1127 0000073C 48BF-                   	mov rdi, fmt_vector
  1127 0000073E [9E08000000000000] 
  1128 00000746 B800000000              	mov rax, 0
  1129                                          ENTER
    44 0000074B C8000000            <1>  enter 0, 0
    45 0000074F 4883E4F0            <1>  and rsp, ~15
  1130 00000753 E8(00000000)            	call printf
  1131                                          LEAVE
    49 00000758 C9                  <1>  leave
  1132 00000759 488B3C24                	mov rdi, qword [rsp]
  1133 0000075D FF7701                  	push qword [rdi + 1]
  1134 00000760 6A01                    	push 1
  1135 00000762 488B7F09                	mov rdi, qword [rdi + 1 + 8] ; v[0]
  1136 00000766 E8C9FCFFFF              	call print_sexpr
  1137                                  .Lvector_loop:
  1138                                  	; [rsp] index
  1139                                  	; [rsp + 8*1] limit
  1140                                  	; [rsp + 8*2] vector
  1141 0000076B 488B0424                	mov rax, qword [rsp]
  1142 0000076F 483B442408              	cmp rax, qword [rsp + 8*1]
  1143 00000774 7436                    	je .Lvector_end
  1144 00000776 48BF-                   	mov rdi, fmt_space
  1144 00000778 [9808000000000000] 
  1145 00000780 B800000000              	mov rax, 0
  1146                                          ENTER
    44 00000785 C8000000            <1>  enter 0, 0
    45 00000789 4883E4F0            <1>  and rsp, ~15
  1147 0000078D E8(00000000)            	call printf
  1148                                          LEAVE
    49 00000792 C9                  <1>  leave
  1149 00000793 488B0424                	mov rax, qword [rsp]
  1150 00000797 488B5C2410              	mov rbx, qword [rsp + 8*2]
  1151 0000079C 488B7CC309              	mov rdi, qword [rbx + 1 + 8 + 8 * rax] ; v[i]
  1152 000007A1 E88EFCFFFF              	call print_sexpr
  1153 000007A6 48FF0424                	inc qword [rsp]
  1154 000007AA EBBF                    	jmp .Lvector_loop
  1155                                  
  1156                                  .Lvector_end:
  1157 000007AC 4883C418                	add rsp, 8*3
  1158 000007B0 48BF-                   	mov rdi, fmt_rparen
  1158 000007B2 [9608000000000000] 
  1159 000007BA E9F3010000              	jmp .Lemit	
  1160                                  
  1161                                  .Lvector_empty:
  1162 000007BF 48BF-                   	mov rdi, fmt_empty_vector
  1162 000007C1 [9A08000000000000] 
  1163 000007C9 E9E4010000              	jmp .Lemit
  1164                                  
  1165                                  .Lreal:
  1166 000007CE FF7701                  	push qword [rdi + 1]
  1167 000007D1 F20F100424              	movsd xmm0, qword [rsp]
  1168 000007D6 4883C408                	add rsp, 8*1
  1169 000007DA 48BF-                   	mov rdi, fmt_real
  1169 000007DC [A108000000000000] 
  1170 000007E4 B801000000              	mov rax, 1
  1171                                  	ENTER
    44 000007E9 C8000000            <1>  enter 0, 0
    45 000007ED 4883E4F0            <1>  and rsp, ~15
  1172 000007F1 E8(00000000)            	call printf
  1173                                  	LEAVE
    49 000007F6 C9                  <1>  leave
  1174 000007F7 E9CB010000              	jmp .Lend
  1175                                  
  1176                                  .Lfraction:
  1177 000007FC 488B7701                	mov rsi, qword [rdi + 1]
  1178 00000800 488B5709                	mov rdx, qword [rdi + 1 + 8]
  1179 00000804 4883FE00                	cmp rsi, 0
  1180 00000808 7415                    	je .Lrat_zero
  1181 0000080A 4883FA01                	cmp rdx, 1
  1182 0000080E 741E                    	je .Lrat_int
  1183 00000810 48BF-                   	mov rdi, fmt_fraction
  1183 00000812 [A408000000000000] 
  1184 0000081A E993010000              	jmp .Lemit
  1185                                  
  1186                                  .Lrat_zero:
  1187 0000081F 48BF-                   	mov rdi, fmt_zero
  1187 00000821 [AC08000000000000] 
  1188 00000829 E984010000              	jmp .Lemit
  1189                                  
  1190                                  .Lrat_int:
  1191 0000082E 48BF-                   	mov rdi, fmt_int
  1191 00000830 [AE08000000000000] 
  1192 00000838 E975010000              	jmp .Lemit
  1193                                  
  1194                                  .Linteger:
  1195 0000083D 488B7701                	mov rsi, qword [rdi + 1]
  1196 00000841 48BF-                   	mov rdi, fmt_int
  1196 00000843 [AE08000000000000] 
  1197 0000084B E962010000              	jmp .Lemit
  1198                                  
  1199                                  .Lstring:
  1200 00000850 488D4709                	lea rax, [rdi + 1 + 8]
  1201 00000854 50                      	push rax
  1202 00000855 FF7701                  	push qword [rdi + 1]
  1203 00000858 48BF-                   	mov rdi, fmt_dquote
  1203 0000085A [F708000000000000] 
  1204 00000862 B800000000              	mov rax, 0
  1205                                  	ENTER
    44 00000867 C8000000            <1>  enter 0, 0
    45 0000086B 4883E4F0            <1>  and rsp, ~15
  1206 0000086F E8(00000000)            	call printf
  1207                                  	LEAVE
    49 00000874 C9                  <1>  leave
  1208                                  .Lstring_loop:
  1209                                  	; qword [rsp]: limit
  1210                                  	; qword [rsp + 8*1]: char *
  1211 00000875 48833C2400              	cmp qword [rsp], 0
  1212 0000087A 0F84EF000000            	je .Lstring_end
  1213 00000880 488B442408              	mov rax, qword [rsp + 8*1]
  1214 00000885 8A00                    	mov al, byte [rax]
  1215 00000887 4825FF000000            	and rax, 255
  1216 0000088D 3C07                    	cmp al, 7
  1217 0000088F 745D                            je .Lstring_char_7
  1218 00000891 3C08                            cmp al, 8
  1219 00000893 7465                            je .Lstring_char_8
  1220 00000895 3C09                            cmp al, 9
  1221 00000897 746D                            je .Lstring_char_9
  1222 00000899 3C0A                            cmp al, 10
  1223 0000089B 7475                            je .Lstring_char_10
  1224 0000089D 3C0B                            cmp al, 11
  1225 0000089F 747D                            je .Lstring_char_11
  1226 000008A1 3C0C                            cmp al, 12
  1227 000008A3 0F8481000000                    je .Lstring_char_12
  1228 000008A9 3C0D                            cmp al, 13
  1229 000008AB 0F8485000000                    je .Lstring_char_13
  1230 000008B1 3C22                            cmp al, 34
  1231 000008B3 0F8489000000                    je .Lstring_char_34
  1232 000008B9 3C5C                            cmp al, 92              ;         je .Lstring_char_92
  1234 000008BB 3C20                            cmp al, ' '
  1235 000008BD 0F8C9A000000                    jl .Lstring_char_hex
  1236 000008C3 48BF-                           mov rdi, fmt_string_char
  1236 000008C5 [F908000000000000] 
  1237 000008CD 4889C6                          mov rsi, rax
  1238                                  .Lstring_char_emit:
  1239 000008D0 B800000000                      mov rax, 0
  1240                                          ENTER
    44 000008D5 C8000000            <1>  enter 0, 0
    45 000008D9 4883E4F0            <1>  and rsp, ~15
  1241 000008DD E8(00000000)                    call printf
  1242                                          LEAVE
    49 000008E2 C9                  <1>  leave
  1243 000008E3 48FF0C24                        dec qword [rsp]
  1244 000008E7 48FF442408                      inc qword [rsp + 8*1]
  1245 000008EC EB87                            jmp .Lstring_loop
  1246                                  
  1247                                  .Lstring_char_7:
  1248 000008EE 48BF-                           mov rdi, fmt_string_char_7
  1248 000008F0 [FC08000000000000] 
  1249 000008F8 EBD6                            jmp .Lstring_char_emit
  1250                                  
  1251                                  .Lstring_char_8:
  1252 000008FA 48BF-                           mov rdi, fmt_string_char_8
  1252 000008FC [FF08000000000000] 
  1253 00000904 EBCA                            jmp .Lstring_char_emit
  1254                                          
  1255                                  .Lstring_char_9:
  1256 00000906 48BF-                           mov rdi, fmt_string_char_9
  1256 00000908 [0209000000000000] 
  1257 00000910 EBBE                            jmp .Lstring_char_emit
  1258                                  
  1259                                  .Lstring_char_10:
  1260 00000912 48BF-                           mov rdi, fmt_string_char_10
  1260 00000914 [0509000000000000] 
  1261 0000091C EBB2                            jmp .Lstring_char_emit
  1262                                  
  1263                                  .Lstring_char_11:
  1264 0000091E 48BF-                           mov rdi, fmt_string_char_11
  1264 00000920 [0809000000000000] 
  1265 00000928 EBA6                            jmp .Lstring_char_emit
  1266                                  
  1267                                  .Lstring_char_12:
  1268 0000092A 48BF-                           mov rdi, fmt_string_char_12
  1268 0000092C [0B09000000000000] 
  1269 00000934 EB9A                            jmp .Lstring_char_emit
  1270                                  
  1271                                  .Lstring_char_13:
  1272 00000936 48BF-                           mov rdi, fmt_string_char_13
  1272 00000938 [0E09000000000000] 
  1273 00000940 EB8E                            jmp .Lstring_char_emit
  1274                                  
  1275                                  .Lstring_char_34:
  1276 00000942 48BF-                           mov rdi, fmt_string_char_34
  1276 00000944 [1109000000000000] 
  1277 0000094C EB82                            jmp .Lstring_char_emit
  1278                                  
  1279                                  .Lstring_char_92:
  1280 0000094E 48BF-                           mov rdi, fmt_string_char_92
  1280 00000950 [1409000000000000] 
  1281 00000958 E973FFFFFF                      jmp .Lstring_char_emit
  1282                                  
  1283                                  .Lstring_char_hex:
  1284 0000095D 48BF-                           mov rdi, fmt_string_char_hex
  1284 0000095F [1709000000000000] 
  1285 00000967 4889C6                          mov rsi, rax
  1286 0000096A E961FFFFFF                      jmp .Lstring_char_emit        
  1287                                  
  1288                                  .Lstring_end:
  1289 0000096F 4883C410                	add rsp, 8 * 2
  1290 00000973 48BF-                   	mov rdi, fmt_dquote
  1290 00000975 [F708000000000000] 
  1291 0000097D EB33                    	jmp .Lemit
  1292                                  
  1293                                  .Lunknown_sexpr_type:
  1294 0000097F 48BE-                   	mov rsi, fmt_unknown_scheme_object_error
  1294 00000981 [B208000000000000] 
  1295 00000989 4825FF000000            	and rax, 255
  1296 0000098F 4889C2                  	mov rdx, rax
  1297 00000992 4889F9                  	mov rcx, rdi
  1298 00000995 488B3C25[00000000]      	mov rdi, qword [stderr]
  1299 0000099D B800000000              	mov rax, 0
  1300                                          ENTER
    44 000009A2 C8000000            <1>  enter 0, 0
    45 000009A6 4883E4F0            <1>  and rsp, ~15
  1301 000009AA E8(00000000)            	call fprintf
  1302                                          LEAVE
    49 000009AF C9                  <1>  leave
  1303 000009B0 C9                              leave
  1304 000009B1 C3                              ret
  1305                                  
  1306                                  .Lemit:
  1307 000009B2 B800000000              	mov rax, 0
  1308                                          ENTER
    44 000009B7 C8000000            <1>  enter 0, 0
    45 000009BB 4883E4F0            <1>  and rsp, ~15
  1309 000009BF E8(00000000)            	call printf
  1310                                          LEAVE
    49 000009C4 C9                  <1>  leave
  1311 000009C5 EB00                    	jmp .Lend
  1312                                  
  1313                                  .Lend:
  1314                                  	LEAVE
    49 000009C7 C9                  <1>  leave
  1315 000009C8 C3                      	ret
  1316                                  
  1317                                  ;;; rdi: address of free variable
  1318                                  ;;; rsi: address of code-pointer
  1319                                  bind_primitive:
  1320 000009C9 C8000000                        enter 0, 0
  1321 000009CD 57                              push rdi
  1322 000009CE BF11000000                      mov rdi, (1 + 8 + 8)
  1323 000009D3 E8DBF7FFFF                      call malloc
  1324 000009D8 5F                              pop rdi
  1325 000009D9 C60004                          mov byte [rax], T_closure
  1326 000009DC 48C7400100000000                mov SOB_CLOSURE_ENV(rax), 0 ; dummy, lexical environment
  1327 000009E4 48897009                        mov SOB_CLOSURE_CODE(rax), rsi ; code pointer
  1328 000009E8 488907                          mov qword [rdi], rax
  1329 000009EB 48B8-                           mov rax, sob_void
  1329 000009ED [0000000000000000] 
  1330 000009F5 C9                              leave
  1331 000009F6 C3                              ret
  1332                                  
  1333                                  L_code_ptr_ash:
  1334 000009F7 C8000000                        enter 0, 0
  1335 000009FB 48837D1802                      cmp COUNT, 2
  1336 00000A00 0F8539140000                    jne L_error_arg_count_2
  1337 00000A06 488B7D20                        mov rdi, PARAM(0)
  1338                                          assert_integer(rdi)
    53 00000A0A 803F11              <1>  cmp byte [%1], %2
    54 00000A0D 0F85CB140000        <1>  jne L_error_incorrect_type
  1339 00000A13 488B4D28                        mov rcx, PARAM(1)
  1340                                          assert_integer(rcx)
    53 00000A17 803911              <1>  cmp byte [%1], %2
    54 00000A1A 0F85BE140000        <1>  jne L_error_incorrect_type
  1341 00000A20 488B7F01                        mov rdi, qword [rdi + 1]
  1342 00000A24 488B4901                        mov rcx, qword [rcx + 1]
  1343 00000A28 4883F900                        cmp rcx, 0
  1344 00000A2C 7C0F                            jl .L_negative
  1345                                  .L_loop_positive:
  1346 00000A2E 4883F900                        cmp rcx, 0
  1347 00000A32 741B                            je .L_exit
  1348 00000A34 48D3E7                          sal rdi, cl
  1349 00000A37 48C1E908                        shr rcx, 8
  1350 00000A3B EBF1                            jmp .L_loop_positive
  1351                                  .L_negative:
  1352 00000A3D 48F7D9                          neg rcx
  1353                                  .L_loop_negative:
  1354 00000A40 4883F900                        cmp rcx, 0
  1355 00000A44 7409                            je .L_exit
  1356 00000A46 48D3FF                          sar rdi, cl
  1357 00000A49 48C1E908                        shr rcx, 8
  1358 00000A4D EBF1                            jmp .L_loop_negative
  1359                                  .L_exit:
  1360 00000A4F E805130000                      call make_integer
  1361 00000A54 C9                              leave
  1362 00000A55 C22000                          ret AND_KILL_FRAME(2)
  1363                                  
  1364                                  L_code_ptr_logand:
  1365 00000A58 C8000000                        enter 0, 0
  1366 00000A5C 48837D1802                      cmp COUNT, 2
  1367 00000A61 0F85D8130000                    jne L_error_arg_count_2
  1368 00000A67 4C8B4520                        mov r8, PARAM(0)
  1369                                          assert_integer(r8)
    53 00000A6B 41803811            <1>  cmp byte [%1], %2
    54 00000A6F 0F8569140000        <1>  jne L_error_incorrect_type
  1370 00000A75 4C8B4D28                        mov r9, PARAM(1)
  1371                                          assert_integer(r9)
    53 00000A79 41803911            <1>  cmp byte [%1], %2
    54 00000A7D 0F855B140000        <1>  jne L_error_incorrect_type
  1372 00000A83 498B7801                        mov rdi, qword [r8 + 1]
  1373 00000A87 49237901                        and rdi, qword [r9 + 1]
  1374 00000A8B E8C9120000                      call make_integer
  1375 00000A90 C9                              leave
  1376 00000A91 C22000                          ret AND_KILL_FRAME(2)
  1377                                  
  1378                                  L_code_ptr_logor:
  1379 00000A94 C8000000                        enter 0, 0
  1380 00000A98 48837D1802                      cmp COUNT, 2
  1381 00000A9D 0F859C130000                    jne L_error_arg_count_2
  1382 00000AA3 4C8B4520                        mov r8, PARAM(0)
  1383                                          assert_integer(r8)
    53 00000AA7 41803811            <1>  cmp byte [%1], %2
    54 00000AAB 0F852D140000        <1>  jne L_error_incorrect_type
  1384 00000AB1 4C8B4D28                        mov r9, PARAM(1)
  1385                                          assert_integer(r9)
    53 00000AB5 41803911            <1>  cmp byte [%1], %2
    54 00000AB9 0F851F140000        <1>  jne L_error_incorrect_type
  1386 00000ABF 498B7801                        mov rdi, qword [r8 + 1]
  1387 00000AC3 490B7901                        or rdi, qword [r9 + 1]
  1388 00000AC7 E88D120000                      call make_integer
  1389 00000ACC C9                              leave
  1390 00000ACD C22000                          ret AND_KILL_FRAME(2)
  1391                                  
  1392                                  L_code_ptr_logxor:
  1393 00000AD0 C8000000                        enter 0, 0
  1394 00000AD4 48837D1802                      cmp COUNT, 2
  1395 00000AD9 0F8560130000                    jne L_error_arg_count_2
  1396 00000ADF 4C8B4520                        mov r8, PARAM(0)
  1397                                          assert_integer(r8)
    53 00000AE3 41803811            <1>  cmp byte [%1], %2
    54 00000AE7 0F85F1130000        <1>  jne L_error_incorrect_type
  1398 00000AED 4C8B4D28                        mov r9, PARAM(1)
  1399                                          assert_integer(r9)
    53 00000AF1 41803911            <1>  cmp byte [%1], %2
    54 00000AF5 0F85E3130000        <1>  jne L_error_incorrect_type
  1400 00000AFB 498B7801                        mov rdi, qword [r8 + 1]
  1401 00000AFF 49337901                        xor rdi, qword [r9 + 1]
  1402 00000B03 E851120000                      call make_integer
  1403                                          LEAVE
    49 00000B08 C9                  <1>  leave
  1404 00000B09 C22000                          ret AND_KILL_FRAME(2)
  1405                                  
  1406                                  L_code_ptr_lognot:
  1407 00000B0C C8000000                        enter 0, 0
  1408 00000B10 48837D1801                      cmp COUNT, 1
  1409 00000B15 0F85EF120000                    jne L_error_arg_count_1
  1410 00000B1B 4C8B4520                        mov r8, PARAM(0)
  1411                                          assert_integer(r8)
    53 00000B1F 41803811            <1>  cmp byte [%1], %2
    54 00000B23 0F85B5130000        <1>  jne L_error_incorrect_type
  1412 00000B29 498B7801                        mov rdi, qword [r8 + 1]
  1413 00000B2D 48F7D7                          not rdi
  1414 00000B30 E824120000                      call make_integer
  1415 00000B35 C9                              leave
  1416 00000B36 C21800                          ret AND_KILL_FRAME(1)
  1417                                  
  1418                                  L_code_ptr_bin_apply:
  1419                                      ;; Arguments:
  1420                                      ;; rdi = function to apply
  1421                                      ;; rsi = pointer to the list of arguments
  1422                                      
  1423                                      ;; 1. Save caller's registers
  1424 00000B39 55                          push rbp
  1425 00000B3A 4889E5                      mov rbp, rsp
  1426 00000B3D 53                          push rbx
  1427                                  
  1428                                      ;; 2. Unpack the argument list
  1429 00000B3E 4889F3                      mov rbx, rsi       ;; rbx points to the start of the argument list
  1430 00000B41 B900000000                  mov rcx, 0         ;; rcx will count the number of arguments
  1431                                  
  1432                                  L_unpack_loop:
  1433 00000B46 4883FB00                    cmp rbx, 0         ;; Check if we reached the end of the list (NULL)
  1434 00000B4A 740B                        je L_call_function ;; If yes, jump to function call
  1435 00000B4C FF33                        push qword [rbx]   ;; Push the current argument onto the stack
  1436 00000B4E 488B5B08                    mov rbx, [rbx+8]   ;; Move to the next argument in the list
  1437 00000B52 48FFC1                      inc rcx            ;; Increment the argument count
  1438 00000B55 EBEF                        jmp L_unpack_loop  ;; Continue unpacking
  1439                                  
  1440                                  L_call_function:
  1441                                      ;; 3. Call the function
  1442 00000B57 4889CF                      mov rdi, rcx       ;; First argument: number of arguments
  1443 00000B5A FFD7                        call rdi           ;; Call the function
  1444                                  
  1445                                      ;; 4. Restore caller's registers and return
  1446 00000B5C 5B                          pop rbx
  1447 00000B5D 4889EC                      mov rsp, rbp
  1448 00000B60 5D                          pop rbp
  1449 00000B61 C3                          ret
  1450                                  
  1451                                  L_code_ptr_is_null:
  1452 00000B62 C8000000                        enter 0, 0
  1453 00000B66 48837D1801                      cmp COUNT, 1
  1454 00000B6B 0F8599120000                    jne L_error_arg_count_1
  1455 00000B71 488B4520                        mov rax, PARAM(0)
  1456 00000B75 803801                          cmp byte [rax], T_nil
  1457 00000B78 750C                            jne .L_false
  1458 00000B7A 48B8-                           mov rax, sob_boolean_true
  1458 00000B7C [0300000000000000] 
  1459 00000B84 EB0A                            jmp .L_end
  1460                                  .L_false:
  1461 00000B86 48B8-                           mov rax, sob_boolean_false
  1461 00000B88 [0200000000000000] 
  1462                                  .L_end:
  1463 00000B90 C9                              leave
  1464 00000B91 C21800                          ret AND_KILL_FRAME(1)
  1465                                  
  1466                                  L_code_ptr_is_pair:
  1467 00000B94 C8000000                        enter 0, 0
  1468 00000B98 48837D1801                      cmp COUNT, 1
  1469 00000B9D 0F8567120000                    jne L_error_arg_count_1
  1470 00000BA3 488B4520                        mov rax, PARAM(0)
  1471 00000BA7 803821                          cmp byte [rax], T_pair
  1472 00000BAA 750C                            jne .L_false
  1473 00000BAC 48B8-                           mov rax, sob_boolean_true
  1473 00000BAE [0300000000000000] 
  1474 00000BB6 EB0A                            jmp .L_end
  1475                                  .L_false:
  1476 00000BB8 48B8-                           mov rax, sob_boolean_false
  1476 00000BBA [0200000000000000] 
  1477                                  .L_end:
  1478 00000BC2 C9                              leave
  1479 00000BC3 C21800                          ret AND_KILL_FRAME(1)
  1480                                          
  1481                                  L_code_ptr_is_void:
  1482 00000BC6 C8000000                        enter 0, 0
  1483 00000BCA 48837D1801                      cmp COUNT, 1
  1484 00000BCF 0F8535120000                    jne L_error_arg_count_1
  1485 00000BD5 488B4520                        mov rax, PARAM(0)
  1486 00000BD9 803800                          cmp byte [rax], T_void
  1487 00000BDC 750C                            jne .L_false
  1488 00000BDE 48B8-                           mov rax, sob_boolean_true
  1488 00000BE0 [0300000000000000] 
  1489 00000BE8 EB0A                            jmp .L_end
  1490                                  .L_false:
  1491 00000BEA 48B8-                           mov rax, sob_boolean_false
  1491 00000BEC [0200000000000000] 
  1492                                  .L_end:
  1493 00000BF4 C9                              leave
  1494 00000BF5 C21800                          ret AND_KILL_FRAME(1)
  1495                                  
  1496                                  L_code_ptr_is_char:
  1497 00000BF8 C8000000                        enter 0, 0
  1498 00000BFC 48837D1801                      cmp COUNT, 1
  1499 00000C01 0F8503120000                    jne L_error_arg_count_1
  1500 00000C07 488B4520                        mov rax, PARAM(0)
  1501 00000C0B 803802                          cmp byte [rax], T_char
  1502 00000C0E 750C                            jne .L_false
  1503 00000C10 48B8-                           mov rax, sob_boolean_true
  1503 00000C12 [0300000000000000] 
  1504 00000C1A EB0A                            jmp .L_end
  1505                                  .L_false:
  1506 00000C1C 48B8-                           mov rax, sob_boolean_false
  1506 00000C1E [0200000000000000] 
  1507                                  .L_end:
  1508 00000C26 C9                              leave
  1509 00000C27 C21800                          ret AND_KILL_FRAME(1)
  1510                                  
  1511                                  L_code_ptr_is_string:
  1512 00000C2A C8000000                        enter 0, 0
  1513 00000C2E 48837D1801                      cmp COUNT, 1
  1514 00000C33 0F85D1110000                    jne L_error_arg_count_1
  1515 00000C39 488B4520                        mov rax, PARAM(0)
  1516 00000C3D 803803                          cmp byte [rax], T_string
  1517 00000C40 750C                            jne .L_false
  1518 00000C42 48B8-                           mov rax, sob_boolean_true
  1518 00000C44 [0300000000000000] 
  1519 00000C4C EB0A                            jmp .L_end
  1520                                  .L_false:
  1521 00000C4E 48B8-                           mov rax, sob_boolean_false
  1521 00000C50 [0200000000000000] 
  1522                                  .L_end:
  1523 00000C58 C9                              leave
  1524 00000C59 C21800                          ret AND_KILL_FRAME(1)
  1525                                  
  1526                                  L_code_ptr_is_symbol:
  1527 00000C5C C8000000                        enter 0, 0
  1528 00000C60 48837D1801                      cmp COUNT, 1
  1529 00000C65 0F859F110000                    jne L_error_arg_count_1
  1530 00000C6B 4C8B4520                        mov r8, PARAM(0)
  1531 00000C6F 41802040                        and byte [r8], T_symbol
  1532 00000C73 740C                            jz .L_false
  1533 00000C75 48B8-                           mov rax, sob_boolean_true
  1533 00000C77 [0300000000000000] 
  1534 00000C7F EB0A                            jmp .L_exit
  1535                                  .L_false:
  1536 00000C81 48B8-                           mov rax, sob_boolean_false
  1536 00000C83 [0200000000000000] 
  1537                                  .L_exit:
  1538 00000C8B C9                              leave
  1539 00000C8C C21800                          ret AND_KILL_FRAME(1)
  1540                                  
  1541                                  L_code_ptr_is_uninterned_symbol:
  1542 00000C8F C8000000                        enter 0, 0
  1543 00000C93 48837D1801                      cmp COUNT, 1
  1544 00000C98 0F856C110000                    jne L_error_arg_count_1
  1545 00000C9E 4C8B4520                        mov r8, PARAM(0)
  1546 00000CA2 41803842                        cmp byte [r8], T_uninterned_symbol
  1547 00000CA6 750C                            jne .L_false
  1548 00000CA8 48B8-                           mov rax, sob_boolean_true
  1548 00000CAA [0300000000000000] 
  1549 00000CB2 EB0A                            jmp .L_exit
  1550                                  .L_false:
  1551 00000CB4 48B8-                           mov rax, sob_boolean_false
  1551 00000CB6 [0200000000000000] 
  1552                                  .L_exit:
  1553 00000CBE C9                              leave
  1554 00000CBF C21800                          ret AND_KILL_FRAME(1)
  1555                                  
  1556                                  L_code_ptr_is_interned_symbol:
  1557 00000CC2 C8000000                        enter 0, 0
  1558 00000CC6 48837D1801                      cmp COUNT, 1
  1559 00000CCB 0F8539110000                    jne L_error_arg_count_1
  1560 00000CD1 488B4520                        mov rax, PARAM(0)
  1561 00000CD5 803841                          cmp byte [rax], T_interned_symbol
  1562 00000CD8 750C                            jne .L_false
  1563 00000CDA 48B8-                           mov rax, sob_boolean_true
  1563 00000CDC [0300000000000000] 
  1564 00000CE4 EB0A                            jmp .L_end
  1565                                  .L_false:
  1566 00000CE6 48B8-                           mov rax, sob_boolean_false
  1566 00000CE8 [0200000000000000] 
  1567                                  .L_end:
  1568 00000CF0 C9                              leave
  1569 00000CF1 C21800                          ret AND_KILL_FRAME(1)
  1570                                  
  1571                                  L_code_ptr_gensym:
  1572 00000CF4 C8000000                        enter 0, 0
  1573 00000CF8 48837D1800                      cmp COUNT, 0
  1574 00000CFD 0F85D2100000                    jne L_error_arg_count_0
  1575 00000D03 48FF0425[1D090000]              inc qword [gensym_count]
  1576 00000D0B BF09000000                      mov rdi, (1 + 8)
  1577 00000D10 E89EF4FFFF                      call malloc
  1578 00000D15 C60042                          mov byte [rax], T_uninterned_symbol
  1579 00000D18 488B0C25[1D090000]              mov rcx, qword [gensym_count]
  1580 00000D20 48894801                        mov qword [rax + 1], rcx
  1581 00000D24 C9                              leave
  1582 00000D25 C21000                          ret AND_KILL_FRAME(0)
  1583                                  
  1584                                  L_code_ptr_is_vector:
  1585 00000D28 C8000000                        enter 0, 0
  1586 00000D2C 48837D1801                      cmp COUNT, 1
  1587 00000D31 0F85D3100000                    jne L_error_arg_count_1
  1588 00000D37 488B4520                        mov rax, PARAM(0)
  1589 00000D3B 803822                          cmp byte [rax], T_vector
  1590 00000D3E 750C                            jne .L_false
  1591 00000D40 48B8-                           mov rax, sob_boolean_true
  1591 00000D42 [0300000000000000] 
  1592 00000D4A EB0A                            jmp .L_end
  1593                                  .L_false:
  1594 00000D4C 48B8-                           mov rax, sob_boolean_false
  1594 00000D4E [0200000000000000] 
  1595                                  .L_end:
  1596 00000D56 C9                              leave
  1597 00000D57 C21800                          ret AND_KILL_FRAME(1)
  1598                                  
  1599                                  L_code_ptr_is_closure:
  1600 00000D5A C8000000                        enter 0, 0
  1601 00000D5E 48837D1801                      cmp COUNT, 1
  1602 00000D63 0F85A1100000                    jne L_error_arg_count_1
  1603 00000D69 488B4520                        mov rax, PARAM(0)
  1604 00000D6D 803804                          cmp byte [rax], T_closure
  1605 00000D70 750C                            jne .L_false
  1606 00000D72 48B8-                           mov rax, sob_boolean_true
  1606 00000D74 [0300000000000000] 
  1607 00000D7C EB0A                            jmp .L_end
  1608                                  .L_false:
  1609 00000D7E 48B8-                           mov rax, sob_boolean_false
  1609 00000D80 [0200000000000000] 
  1610                                  .L_end:
  1611 00000D88 C9                              leave
  1612 00000D89 C21800                          ret AND_KILL_FRAME(1)
  1613                                  
  1614                                  L_code_ptr_is_real:
  1615 00000D8C C8000000                        enter 0, 0
  1616 00000D90 48837D1801                      cmp COUNT, 1
  1617 00000D95 0F856F100000                    jne L_error_arg_count_1
  1618 00000D9B 488B4520                        mov rax, PARAM(0)
  1619 00000D9F 803813                          cmp byte [rax], T_real
  1620 00000DA2 750C                            jne .L_false
  1621 00000DA4 48B8-                           mov rax, sob_boolean_true
  1621 00000DA6 [0300000000000000] 
  1622 00000DAE EB0A                            jmp .L_end
  1623                                  .L_false:
  1624 00000DB0 48B8-                           mov rax, sob_boolean_false
  1624 00000DB2 [0200000000000000] 
  1625                                  .L_end:
  1626 00000DBA C9                              leave
  1627 00000DBB C21800                          ret AND_KILL_FRAME(1)
  1628                                  
  1629                                  L_code_ptr_is_fraction:
  1630 00000DBE C8000000                        enter 0, 0
  1631 00000DC2 48837D1801                      cmp COUNT, 1
  1632 00000DC7 0F853D100000                    jne L_error_arg_count_1
  1633 00000DCD 488B4520                        mov rax, PARAM(0)
  1634 00000DD1 803812                          cmp byte [rax], T_fraction
  1635 00000DD4 750C                            jne .L_false
  1636 00000DD6 48B8-                           mov rax, sob_boolean_true
  1636 00000DD8 [0300000000000000] 
  1637 00000DE0 EB0A                            jmp .L_end
  1638                                  .L_false:
  1639 00000DE2 48B8-                           mov rax, sob_boolean_false
  1639 00000DE4 [0200000000000000] 
  1640                                  .L_end:
  1641 00000DEC C9                              leave
  1642 00000DED C21800                          ret AND_KILL_FRAME(1)
  1643                                  
  1644                                  L_code_ptr_is_boolean:
  1645 00000DF0 C8000000                        enter 0, 0
  1646 00000DF4 48837D1801                      cmp COUNT, 1
  1647 00000DF9 0F850B100000                    jne L_error_arg_count_1
  1648 00000DFF 488B4520                        mov rax, PARAM(0)
  1649 00000E03 8A18                            mov bl, byte [rax]
  1650 00000E05 80E308                          and bl, T_boolean
  1651 00000E08 740C                            je .L_false
  1652 00000E0A 48B8-                           mov rax, sob_boolean_true
  1652 00000E0C [0300000000000000] 
  1653 00000E14 EB0A                            jmp .L_end
  1654                                  .L_false:
  1655 00000E16 48B8-                           mov rax, sob_boolean_false
  1655 00000E18 [0200000000000000] 
  1656                                  .L_end:
  1657 00000E20 C9                              leave
  1658 00000E21 C21800                          ret AND_KILL_FRAME(1)
  1659                                          
  1660                                  L_code_ptr_is_boolean_false:
  1661 00000E24 C8000000                        enter 0, 0
  1662 00000E28 48837D1801                      cmp COUNT, 1
  1663 00000E2D 0F85D70F0000                    jne L_error_arg_count_1
  1664 00000E33 488B4520                        mov rax, PARAM(0)
  1665 00000E37 8A18                            mov bl, byte [rax]
  1666 00000E39 80FB09                          cmp bl, T_boolean_false
  1667 00000E3C 750C                            jne .L_false
  1668 00000E3E 48B8-                           mov rax, sob_boolean_true
  1668 00000E40 [0300000000000000] 
  1669 00000E48 EB0A                            jmp .L_end
  1670                                  .L_false:
  1671 00000E4A 48B8-                           mov rax, sob_boolean_false
  1671 00000E4C [0200000000000000] 
  1672                                  .L_end:
  1673 00000E54 C9                              leave
  1674 00000E55 C21800                          ret AND_KILL_FRAME(1)
  1675                                  
  1676                                  L_code_ptr_is_boolean_true:
  1677 00000E58 C8000000                        enter 0, 0
  1678 00000E5C 48837D1801                      cmp COUNT, 1
  1679 00000E61 0F85A30F0000                    jne L_error_arg_count_1
  1680 00000E67 488B4520                        mov rax, PARAM(0)
  1681 00000E6B 8A18                            mov bl, byte [rax]
  1682 00000E6D 80FB0A                          cmp bl, T_boolean_true
  1683 00000E70 750C                            jne .L_false
  1684 00000E72 48B8-                           mov rax, sob_boolean_true
  1684 00000E74 [0300000000000000] 
  1685 00000E7C EB0A                            jmp .L_end
  1686                                  .L_false:
  1687 00000E7E 48B8-                           mov rax, sob_boolean_false
  1687 00000E80 [0200000000000000] 
  1688                                  .L_end:
  1689 00000E88 C9                              leave
  1690 00000E89 C21800                          ret AND_KILL_FRAME(1)
  1691                                  
  1692                                  L_code_ptr_is_number:
  1693 00000E8C C8000000                        enter 0, 0
  1694 00000E90 48837D1801                      cmp COUNT, 1
  1695 00000E95 0F856F0F0000                    jne L_error_arg_count_1
  1696 00000E9B 488B4520                        mov rax, PARAM(0)
  1697 00000E9F 8A18                            mov bl, byte [rax]
  1698 00000EA1 80E310                          and bl, T_number
  1699 00000EA4 740C                            jz .L_false
  1700 00000EA6 48B8-                           mov rax, sob_boolean_true
  1700 00000EA8 [0300000000000000] 
  1701 00000EB0 EB0A                            jmp .L_end
  1702                                  .L_false:
  1703 00000EB2 48B8-                           mov rax, sob_boolean_false
  1703 00000EB4 [0200000000000000] 
  1704                                  .L_end:
  1705 00000EBC C9                              leave
  1706 00000EBD C21800                          ret AND_KILL_FRAME(1)
  1707                                          
  1708                                  L_code_ptr_is_collection:
  1709 00000EC0 C8000000                        enter 0, 0
  1710 00000EC4 48837D1801                      cmp COUNT, 1
  1711 00000EC9 0F853B0F0000                    jne L_error_arg_count_1
  1712 00000ECF 488B4520                        mov rax, PARAM(0)
  1713 00000ED3 8A18                            mov bl, byte [rax]
  1714 00000ED5 80E320                          and bl, T_collection
  1715 00000ED8 740C                            je .L_false
  1716 00000EDA 48B8-                           mov rax, sob_boolean_true
  1716 00000EDC [0300000000000000] 
  1717 00000EE4 EB0A                            jmp .L_end
  1718                                  .L_false:
  1719 00000EE6 48B8-                           mov rax, sob_boolean_false
  1719 00000EE8 [0200000000000000] 
  1720                                  .L_end:
  1721 00000EF0 C9                              leave
  1722 00000EF1 C21800                          ret AND_KILL_FRAME(1)
  1723                                  
  1724                                  L_code_ptr_cons:
  1725 00000EF4 C8000000                        enter 0, 0
  1726 00000EF8 48837D1802                      cmp COUNT, 2
  1727 00000EFD 0F853C0F0000                    jne L_error_arg_count_2
  1728 00000F03 BF11000000                      mov rdi, (1 + 8 + 8)
  1729 00000F08 E8A6F2FFFF                      call malloc
  1730 00000F0D C60021                          mov byte [rax], T_pair
  1731 00000F10 488B5D20                        mov rbx, PARAM(0)
  1732 00000F14 48895801                        mov SOB_PAIR_CAR(rax), rbx
  1733 00000F18 488B5D28                        mov rbx, PARAM(1)
  1734 00000F1C 48895809                        mov SOB_PAIR_CDR(rax), rbx
  1735 00000F20 C9                              leave
  1736 00000F21 C22000                          ret AND_KILL_FRAME(2)
  1737                                  
  1738                                  L_code_ptr_display_sexpr:
  1739 00000F24 C8000000                        enter 0, 0
  1740 00000F28 48837D1801                      cmp COUNT, 1
  1741 00000F2D 0F85D70E0000                    jne L_error_arg_count_1
  1742 00000F33 488B7D20                        mov rdi, PARAM(0)
  1743 00000F37 E8F8F4FFFF                      call print_sexpr
  1744 00000F3C 48B8-                           mov rax, sob_void
  1744 00000F3E [0000000000000000] 
  1745 00000F46 C9                              leave
  1746 00000F47 C21800                          ret AND_KILL_FRAME(1)
  1747                                  
  1748                                  L_code_ptr_write_char:
  1749 00000F4A C8000000                        enter 0, 0
  1750 00000F4E 48837D1801                      cmp COUNT, 1
  1751 00000F53 0F85B10E0000                    jne L_error_arg_count_1
  1752 00000F59 488B4520                        mov rax, PARAM(0)
  1753                                          assert_char(rax)
    53 00000F5D 803802              <1>  cmp byte [%1], %2
    54 00000F60 0F85780F0000        <1>  jne L_error_incorrect_type
  1754 00000F66 8A4001                          mov al, SOB_CHAR_VALUE(rax)
  1755 00000F69 4825FF000000                    and rax, 255
  1756 00000F6F 48BF-                           mov rdi, fmt_char
  1756 00000F71 [2509000000000000] 
  1757 00000F79 4889C6                          mov rsi, rax
  1758 00000F7C B800000000                      mov rax, 0
  1759                                          ENTER
    44 00000F81 C8000000            <1>  enter 0, 0
    45 00000F85 4883E4F0            <1>  and rsp, ~15
  1760 00000F89 E8(00000000)                    call printf
  1761                                          LEAVE
    49 00000F8E C9                  <1>  leave
  1762 00000F8F 48B8-                           mov rax, sob_void
  1762 00000F91 [0000000000000000] 
  1763 00000F99 C9                              leave
  1764 00000F9A C21800                          ret AND_KILL_FRAME(1)
  1765                                  
  1766                                  L_code_ptr_car:
  1767 00000F9D C8000000                        enter 0, 0
  1768 00000FA1 48837D1801                      cmp COUNT, 1
  1769 00000FA6 0F855E0E0000                    jne L_error_arg_count_1
  1770 00000FAC 488B4520                        mov rax, PARAM(0)
  1771                                          assert_pair(rax)
    53 00000FB0 803821              <1>  cmp byte [%1], %2
    54 00000FB3 0F85250F0000        <1>  jne L_error_incorrect_type
  1772 00000FB9 488B4001                        mov rax, SOB_PAIR_CAR(rax)
  1773 00000FBD C9                              leave
  1774 00000FBE C21800                          ret AND_KILL_FRAME(1)
  1775                                          
  1776                                  L_code_ptr_cdr:
  1777 00000FC1 C8000000                        enter 0, 0
  1778 00000FC5 48837D1801                      cmp COUNT, 1
  1779 00000FCA 0F853A0E0000                    jne L_error_arg_count_1
  1780 00000FD0 488B4520                        mov rax, PARAM(0)
  1781                                          assert_pair(rax)
    53 00000FD4 803821              <1>  cmp byte [%1], %2
    54 00000FD7 0F85010F0000        <1>  jne L_error_incorrect_type
  1782 00000FDD 488B4009                        mov rax, SOB_PAIR_CDR(rax)
  1783 00000FE1 C9                              leave
  1784 00000FE2 C21800                          ret AND_KILL_FRAME(1)
  1785                                          
  1786                                  L_code_ptr_string_length:
  1787 00000FE5 C8000000                        enter 0, 0
  1788 00000FE9 48837D1801                      cmp COUNT, 1
  1789 00000FEE 0F85160E0000                    jne L_error_arg_count_1
  1790 00000FF4 488B4520                        mov rax, PARAM(0)
  1791                                          assert_string(rax)
    53 00000FF8 803803              <1>  cmp byte [%1], %2
    54 00000FFB 0F85DD0E0000        <1>  jne L_error_incorrect_type
  1792 00001001 488B7801                        mov rdi, SOB_STRING_LENGTH(rax)
  1793 00001005 E84F0D0000                      call make_integer
  1794 0000100A C9                              leave
  1795 0000100B C21800                          ret AND_KILL_FRAME(1)
  1796                                  
  1797                                  L_code_ptr_vector_length:
  1798 0000100E C8000000                        enter 0, 0
  1799 00001012 48837D1801                      cmp COUNT, 1
  1800 00001017 0F85ED0D0000                    jne L_error_arg_count_1
  1801 0000101D 488B4520                        mov rax, PARAM(0)
  1802                                          assert_vector(rax)
    53 00001021 803822              <1>  cmp byte [%1], %2
    54 00001024 0F85B40E0000        <1>  jne L_error_incorrect_type
  1803 0000102A 488B7801                        mov rdi, SOB_VECTOR_LENGTH(rax)
  1804 0000102E E8260D0000                      call make_integer
  1805 00001033 C9                              leave
  1806 00001034 C21800                          ret AND_KILL_FRAME(1)
  1807                                  
  1808                                  L_code_ptr_real_to_integer:
  1809 00001037 C8000000                        enter 0, 0
  1810 0000103B 48837D1801                      cmp COUNT, 1
  1811 00001040 0F85C40D0000                    jne L_error_arg_count_1
  1812 00001046 488B5D20                        mov rbx, PARAM(0)
  1813                                          assert_real(rbx)
    53 0000104A 803B13              <1>  cmp byte [%1], %2
    54 0000104D 0F858B0E0000        <1>  jne L_error_incorrect_type
  1814 00001053 F20F104301                      movsd xmm0, qword [rbx + 1]
  1815 00001058 F2480F2CF8                      cvttsd2si rdi, xmm0
  1816 0000105D E8F70C0000                      call make_integer
  1817 00001062 C9                              leave
  1818 00001063 C21800                          ret AND_KILL_FRAME(1)
  1819                                  
  1820                                  L_code_ptr_exit:
  1821 00001066 C8000000                        enter 0, 0
  1822 0000106A 48837D1800                      cmp COUNT, 0
  1823 0000106F 0F85600D0000                    jne L_error_arg_count_0
  1824 00001075 B800000000                      mov rax, 0
  1825 0000107A E8(00000000)                    call exit
  1826                                  
  1827                                  L_code_ptr_integer_to_real:
  1828 0000107F C8000000                        enter 0, 0
  1829 00001083 48837D1801                      cmp COUNT, 1
  1830 00001088 0F857C0D0000                    jne L_error_arg_count_1
  1831 0000108E 488B4520                        mov rax, PARAM(0)
  1832                                          assert_integer(rax)
    53 00001092 803811              <1>  cmp byte [%1], %2
    54 00001095 0F85430E0000        <1>  jne L_error_incorrect_type
  1833 0000109B FF7001                          push qword [rax + 1]
  1834 0000109E F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1835 000010A4 E8980C0000                      call make_real
  1836 000010A9 C9                              leave
  1837 000010AA C21800                          ret AND_KILL_FRAME(1)
  1838                                  
  1839                                  L_code_ptr_fraction_to_real:
  1840 000010AD C8000000                        enter 0, 0
  1841 000010B1 48837D1801                      cmp COUNT, 1
  1842 000010B6 0F854E0D0000                    jne L_error_arg_count_1
  1843 000010BC 488B4520                        mov rax, PARAM(0)
  1844                                          assert_fraction(rax)
    53 000010C0 803812              <1>  cmp byte [%1], %2
    54 000010C3 0F85150E0000        <1>  jne L_error_incorrect_type
  1845 000010C9 FF7001                          push qword [rax + 1]
  1846 000010CC F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1847 000010D2 FF7009                          push qword [rax + 1 + 8]
  1848 000010D5 F2480F2A0C24                    cvtsi2sd xmm1, qword [rsp]
  1849 000010DB F20F5EC1                        divsd xmm0, xmm1
  1850 000010DF E85D0C0000                      call make_real
  1851 000010E4 C9                              leave
  1852 000010E5 C21800                          ret AND_KILL_FRAME(1)
  1853                                  
  1854                                  L_code_ptr_char_to_integer:
  1855 000010E8 C8000000                        enter 0, 0
  1856 000010EC 48837D1801                      cmp COUNT, 1
  1857 000010F1 0F85130D0000                    jne L_error_arg_count_1
  1858 000010F7 488B4520                        mov rax, PARAM(0)
  1859                                          assert_char(rax)
    53 000010FB 803802              <1>  cmp byte [%1], %2
    54 000010FE 0F85DA0D0000        <1>  jne L_error_incorrect_type
  1860 00001104 8A4001                          mov al, byte [rax + 1]
  1861 00001107 4825FF000000                    and rax, 255
  1862 0000110D 4889C7                          mov rdi, rax
  1863 00001110 E8440C0000                      call make_integer
  1864 00001115 C9                              leave
  1865 00001116 C21800                          ret AND_KILL_FRAME(1)
  1866                                  
  1867                                  L_code_ptr_integer_to_fraction:
  1868 00001119 C8000000                        enter 0, 0
  1869 0000111D 48837D1801                      cmp COUNT, 1
  1870 00001122 0F85E20C0000                    jne L_error_arg_count_1
  1871 00001128 4C8B4520                        mov r8, PARAM(0)
  1872                                          assert_integer(r8)
    53 0000112C 41803811            <1>  cmp byte [%1], %2
    54 00001130 0F85A80D0000        <1>  jne L_error_incorrect_type
  1873 00001136 BF11000000                      mov rdi, (1 + 8 + 8)
  1874 0000113B E873F0FFFF                      call malloc
  1875 00001140 498B5801                        mov rbx, qword [r8 + 1]
  1876 00001144 C60012                          mov byte [rax], T_fraction
  1877 00001147 48895801                        mov qword [rax + 1], rbx
  1878 0000114B 48C7400901000000                mov qword [rax + 1 + 8], 1
  1879 00001153 C9                              leave
  1880 00001154 C21800                          ret AND_KILL_FRAME(1)
  1881                                  
  1882                                  L_code_ptr_integer_to_char:
  1883 00001157 C8000000                        enter 0, 0
  1884 0000115B 48837D1801                      cmp COUNT, 1
  1885 00001160 0F85A40C0000                    jne L_error_arg_count_1
  1886 00001166 488B4520                        mov rax, PARAM(0)
  1887                                          assert_integer(rax)
    53 0000116A 803811              <1>  cmp byte [%1], %2
    54 0000116D 0F856B0D0000        <1>  jne L_error_incorrect_type
  1888 00001173 488B5801                        mov rbx, qword [rax + 1]
  1889 00001177 4883FB00                        cmp rbx, 0
  1890 0000117B 0F8EF20B0000                    jle L_error_integer_range
  1891 00001181 4881FB00010000                  cmp rbx, 256
  1892 00001188 0F8DE50B0000                    jge L_error_integer_range
  1893 0000118E BF02000000                      mov rdi, (1 + 1)
  1894 00001193 E81BF0FFFF                      call malloc
  1895 00001198 C60002                          mov byte [rax], T_char
  1896 0000119B 885801                          mov byte [rax + 1], bl
  1897 0000119E C9                              leave
  1898 0000119F C21800                          ret AND_KILL_FRAME(1)
  1899                                  
  1900                                  L_code_ptr_trng:
  1901 000011A2 C8000000                        enter 0, 0
  1902 000011A6 48837D1800                      cmp COUNT, 0
  1903 000011AB 0F85240C0000                    jne L_error_arg_count_0
  1904 000011B1 480FC7F7                        rdrand rdi
  1905 000011B5 48D1EF                          shr rdi, 1
  1906 000011B8 E89C0B0000                      call make_integer
  1907 000011BD C9                              leave
  1908 000011BE C21000                          ret AND_KILL_FRAME(0)
  1909                                  
  1910                                  L_code_ptr_is_zero:
  1911 000011C1 C8000000                        enter 0, 0
  1912 000011C5 48837D1801                      cmp COUNT, 1
  1913 000011CA 0F853A0C0000                    jne L_error_arg_count_1
  1914 000011D0 488B4520                        mov rax, PARAM(0)
  1915 000011D4 803811                          cmp byte [rax], T_integer
  1916 000011D7 740F                            je .L_integer
  1917 000011D9 803812                          cmp byte [rax], T_fraction
  1918 000011DC 7413                            je .L_fraction
  1919 000011DE 803813                          cmp byte [rax], T_real
  1920 000011E1 7417                            je .L_real
  1921 000011E3 E9F60C0000                      jmp L_error_incorrect_type
  1922                                  .L_integer:
  1923 000011E8 4883780100                      cmp qword [rax + 1], 0
  1924 000011ED 7429                            je .L_zero
  1925 000011EF EB1B                            jmp .L_not_zero
  1926                                  .L_fraction:
  1927 000011F1 4883780100                      cmp qword [rax + 1], 0
  1928 000011F6 7420                            je .L_zero
  1929 000011F8 EB12                            jmp .L_not_zero
  1930                                  .L_real:
  1931 000011FA 660FEFC0                        pxor xmm0, xmm0
  1932 000011FE FF7001                          push qword [rax + 1]
  1933 00001201 F20F100C24                      movsd xmm1, qword [rsp]
  1934 00001206 660F2EC1                        ucomisd xmm0, xmm1
  1935 0000120A 740C                            je .L_zero
  1936                                  .L_not_zero:
  1937 0000120C 48B8-                           mov rax, sob_boolean_false
  1937 0000120E [0200000000000000] 
  1938 00001216 EB0A                            jmp .L_end
  1939                                  .L_zero:
  1940 00001218 48B8-                           mov rax, sob_boolean_true
  1940 0000121A [0300000000000000] 
  1941                                  .L_end:
  1942 00001222 C9                              leave
  1943 00001223 C21800                          ret AND_KILL_FRAME(1)
  1944                                  
  1945                                  L_code_ptr_is_integer:
  1946 00001226 C8000000                        enter 0, 0
  1947 0000122A 48837D1801                      cmp COUNT, 1
  1948 0000122F 0F85D50B0000                    jne L_error_arg_count_1
  1949 00001235 488B4520                        mov rax, PARAM(0)
  1950 00001239 803811                          cmp byte [rax], T_integer
  1951 0000123C 750C                            jne .L_false
  1952 0000123E 48B8-                           mov rax, sob_boolean_true
  1952 00001240 [0300000000000000] 
  1953 00001248 EB0A                            jmp .L_exit
  1954                                  .L_false:
  1955 0000124A 48B8-                           mov rax, sob_boolean_false
  1955 0000124C [0200000000000000] 
  1956                                  .L_exit:
  1957 00001254 C9                              leave
  1958 00001255 C21800                          ret AND_KILL_FRAME(1)
  1959                                  
  1960                                  L_code_ptr_raw_bin_add_rr:
  1961 00001258 C8000000                        enter 0, 0
  1962 0000125C 48837D1802                      cmp COUNT, 2
  1963 00001261 0F85D80B0000                    jne L_error_arg_count_2
  1964 00001267 488B5D20                        mov rbx, PARAM(0)
  1965                                          assert_real(rbx)
    53 0000126B 803B13              <1>  cmp byte [%1], %2
    54 0000126E 0F856A0C0000        <1>  jne L_error_incorrect_type
  1966 00001274 488B4D28                        mov rcx, PARAM(1)
  1967                                          assert_real(rcx)
    53 00001278 803913              <1>  cmp byte [%1], %2
    54 0000127B 0F855D0C0000        <1>  jne L_error_incorrect_type
  1968 00001281 F20F104301                      movsd xmm0, qword [rbx + 1]
  1969 00001286 F20F104901                      movsd xmm1, qword [rcx + 1]
  1970 0000128B F20F58C1                        addsd xmm0, xmm1
  1971 0000128F E8AD0A0000                      call make_real
  1972 00001294 C9                              leave
  1973 00001295 C22000                          ret AND_KILL_FRAME(2)
  1974                                  
  1975                                  L_code_ptr_raw_bin_sub_rr:
  1976 00001298 C8000000                        enter 0, 0
  1977 0000129C 48837D1802                      cmp COUNT, 2
  1978 000012A1 0F85980B0000                    jne L_error_arg_count_2
  1979 000012A7 488B5D20                        mov rbx, PARAM(0)
  1980                                          assert_real(rbx)
    53 000012AB 803B13              <1>  cmp byte [%1], %2
    54 000012AE 0F852A0C0000        <1>  jne L_error_incorrect_type
  1981 000012B4 488B4D28                        mov rcx, PARAM(1)
  1982                                          assert_real(rcx)
    53 000012B8 803913              <1>  cmp byte [%1], %2
    54 000012BB 0F851D0C0000        <1>  jne L_error_incorrect_type
  1983 000012C1 F20F104301                      movsd xmm0, qword [rbx + 1]
  1984 000012C6 F20F104901                      movsd xmm1, qword [rcx + 1]
  1985 000012CB F20F5CC1                        subsd xmm0, xmm1
  1986 000012CF E86D0A0000                      call make_real
  1987 000012D4 C9                              leave
  1988 000012D5 C22000                          ret AND_KILL_FRAME(2)
  1989                                  
  1990                                  L_code_ptr_raw_bin_mul_rr:
  1991 000012D8 C8000000                        enter 0, 0
  1992 000012DC 48837D1802                      cmp COUNT, 2
  1993 000012E1 0F85580B0000                    jne L_error_arg_count_2
  1994 000012E7 488B5D20                        mov rbx, PARAM(0)
  1995                                          assert_real(rbx)
    53 000012EB 803B13              <1>  cmp byte [%1], %2
    54 000012EE 0F85EA0B0000        <1>  jne L_error_incorrect_type
  1996 000012F4 488B4D28                        mov rcx, PARAM(1)
  1997                                          assert_real(rcx)
    53 000012F8 803913              <1>  cmp byte [%1], %2
    54 000012FB 0F85DD0B0000        <1>  jne L_error_incorrect_type
  1998 00001301 F20F104301                      movsd xmm0, qword [rbx + 1]
  1999 00001306 F20F104901                      movsd xmm1, qword [rcx + 1]
  2000 0000130B F20F59C1                        mulsd xmm0, xmm1
  2001 0000130F E82D0A0000                      call make_real
  2002 00001314 C9                              leave
  2003 00001315 C22000                          ret AND_KILL_FRAME(2)
  2004                                  
  2005                                  L_code_ptr_raw_bin_div_rr:
  2006 00001318 C8000000                        enter 0, 0
  2007 0000131C 48837D1802                      cmp COUNT, 2
  2008 00001321 0F85180B0000                    jne L_error_arg_count_2
  2009 00001327 488B5D20                        mov rbx, PARAM(0)
  2010                                          assert_real(rbx)
    53 0000132B 803B13              <1>  cmp byte [%1], %2
    54 0000132E 0F85AA0B0000        <1>  jne L_error_incorrect_type
  2011 00001334 488B4D28                        mov rcx, PARAM(1)
  2012                                          assert_real(rcx)
    53 00001338 803913              <1>  cmp byte [%1], %2
    54 0000133B 0F859D0B0000        <1>  jne L_error_incorrect_type
  2013 00001341 F20F104301                      movsd xmm0, qword [rbx + 1]
  2014 00001346 F20F104901                      movsd xmm1, qword [rcx + 1]
  2015 0000134B 660FEFD2                        pxor xmm2, xmm2
  2016 0000134F 660F2ECA                        ucomisd xmm1, xmm2
  2017 00001353 0F84B60B0000                    je L_error_division_by_zero
  2018 00001359 F20F5EC1                        divsd xmm0, xmm1
  2019 0000135D E8DF090000                      call make_real
  2020 00001362 C9                              leave
  2021 00001363 C22000                          ret AND_KILL_FRAME(2)
  2022                                  
  2023                                  L_code_ptr_raw_bin_add_zz:
  2024 00001366 C8000000                	enter 0, 0
  2025 0000136A 48837D1802              	cmp COUNT, 2
  2026 0000136F 0F85CA0A0000            	jne L_error_arg_count_2
  2027 00001375 4C8B4520                	mov r8, PARAM(0)
  2028                                  	assert_integer(r8)
    53 00001379 41803811            <1>  cmp byte [%1], %2
    54 0000137D 0F855B0B0000        <1>  jne L_error_incorrect_type
  2029 00001383 4C8B4D28                	mov r9, PARAM(1)
  2030                                  	assert_integer(r9)
    53 00001387 41803911            <1>  cmp byte [%1], %2
    54 0000138B 0F854D0B0000        <1>  jne L_error_incorrect_type
  2031 00001391 498B7801                	mov rdi, qword [r8 + 1]
  2032 00001395 49037901                	add rdi, qword [r9 + 1]
  2033 00001399 E8BB090000              	call make_integer
  2034 0000139E C9                      	leave
  2035 0000139F C22000                  	ret AND_KILL_FRAME(2)
  2036                                  
  2037                                  L_code_ptr_raw_bin_add_qq:
  2038 000013A2 C8000000                        enter 0, 0
  2039 000013A6 48837D1802                      cmp COUNT, 2
  2040 000013AB 0F858E0A0000                    jne L_error_arg_count_2
  2041 000013B1 4C8B4520                        mov r8, PARAM(0)
  2042                                          assert_fraction(r8)
    53 000013B5 41803812            <1>  cmp byte [%1], %2
    54 000013B9 0F851F0B0000        <1>  jne L_error_incorrect_type
  2043 000013BF 4C8B4D28                        mov r9, PARAM(1)
  2044                                          assert_fraction(r9)
    53 000013C3 41803912            <1>  cmp byte [%1], %2
    54 000013C7 0F85110B0000        <1>  jne L_error_incorrect_type
  2045 000013CD 498B4001                        mov rax, qword [r8 + 1] ; num1
  2046 000013D1 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  2047 000013D5 4899                            cqo
  2048 000013D7 48F7EB                          imul rbx
  2049 000013DA 4889C6                          mov rsi, rax
  2050 000013DD 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2051 000013E1 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  2052 000013E5 4899                            cqo
  2053 000013E7 48F7EB                          imul rbx
  2054 000013EA 4801C6                          add rsi, rax
  2055 000013ED 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2056 000013F1 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  2057 000013F5 4899                            cqo
  2058 000013F7 48F7EB                          imul rbx
  2059 000013FA 4889C7                          mov rdi, rax
  2060 000013FD E8DE010000                      call normalize_fraction
  2061 00001402 C9                              leave
  2062 00001403 C22000                          ret AND_KILL_FRAME(2)
  2063                                  
  2064                                  L_code_ptr_raw_bin_sub_zz:
  2065 00001406 C8000000                	enter 0, 0
  2066 0000140A 48837D1802              	cmp COUNT, 2
  2067 0000140F 0F852A0A0000            	jne L_error_arg_count_2
  2068 00001415 4C8B4520                	mov r8, PARAM(0)
  2069                                  	assert_integer(r8)
    53 00001419 41803811            <1>  cmp byte [%1], %2
    54 0000141D 0F85BB0A0000        <1>  jne L_error_incorrect_type
  2070 00001423 4C8B4D28                	mov r9, PARAM(1)
  2071                                  	assert_integer(r9)
    53 00001427 41803911            <1>  cmp byte [%1], %2
    54 0000142B 0F85AD0A0000        <1>  jne L_error_incorrect_type
  2072 00001431 498B7801                	mov rdi, qword [r8 + 1]
  2073 00001435 492B7901                	sub rdi, qword [r9 + 1]
  2074 00001439 E81B090000              	call make_integer
  2075 0000143E C9                      	leave
  2076 0000143F C22000                  	ret AND_KILL_FRAME(2)
  2077                                  
  2078                                  L_code_ptr_raw_bin_sub_qq:
  2079 00001442 C8000000                        enter 0, 0
  2080 00001446 48837D1802                      cmp COUNT, 2
  2081 0000144B 0F85EE090000                    jne L_error_arg_count_2
  2082 00001451 4C8B4520                        mov r8, PARAM(0)
  2083                                          assert_fraction(r8)
    53 00001455 41803812            <1>  cmp byte [%1], %2
    54 00001459 0F857F0A0000        <1>  jne L_error_incorrect_type
  2084 0000145F 4C8B4D28                        mov r9, PARAM(1)
  2085                                          assert_fraction(r9)
    53 00001463 41803912            <1>  cmp byte [%1], %2
    54 00001467 0F85710A0000        <1>  jne L_error_incorrect_type
  2086 0000146D 498B4001                        mov rax, qword [r8 + 1] ; num1
  2087 00001471 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  2088 00001475 4899                            cqo
  2089 00001477 48F7EB                          imul rbx
  2090 0000147A 4889C6                          mov rsi, rax
  2091 0000147D 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2092 00001481 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  2093 00001485 4899                            cqo
  2094 00001487 48F7EB                          imul rbx
  2095 0000148A 4829C6                          sub rsi, rax
  2096 0000148D 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2097 00001491 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  2098 00001495 4899                            cqo
  2099 00001497 48F7EB                          imul rbx
  2100 0000149A 4889C7                          mov rdi, rax
  2101 0000149D E83E010000                      call normalize_fraction
  2102 000014A2 C9                              leave
  2103 000014A3 C22000                          ret AND_KILL_FRAME(2)
  2104                                  
  2105                                  L_code_ptr_raw_bin_mul_zz:
  2106 000014A6 C8000000                	enter 0, 0
  2107 000014AA 48837D1802              	cmp COUNT, 2
  2108 000014AF 0F858A090000            	jne L_error_arg_count_2
  2109 000014B5 4C8B4520                	mov r8, PARAM(0)
  2110                                  	assert_integer(r8)
    53 000014B9 41803811            <1>  cmp byte [%1], %2
    54 000014BD 0F851B0A0000        <1>  jne L_error_incorrect_type
  2111 000014C3 4C8B4D28                	mov r9, PARAM(1)
  2112                                  	assert_integer(r9)
    53 000014C7 41803911            <1>  cmp byte [%1], %2
    54 000014CB 0F850D0A0000        <1>  jne L_error_incorrect_type
  2113 000014D1 4899                    	cqo
  2114 000014D3 498B4001                	mov rax, qword [r8 + 1]
  2115 000014D7 49F76101                	mul qword [r9 + 1]
  2116 000014DB 4889C7                  	mov rdi, rax
  2117 000014DE E876080000              	call make_integer
  2118 000014E3 C9                      	leave
  2119 000014E4 C22000                  	ret AND_KILL_FRAME(2)
  2120                                  
  2121                                  L_code_ptr_raw_bin_mul_qq:
  2122 000014E7 C8000000                        enter 0, 0
  2123 000014EB 48837D1802                      cmp COUNT, 2
  2124 000014F0 0F8549090000                    jne L_error_arg_count_2
  2125 000014F6 4C8B4520                        mov r8, PARAM(0)
  2126                                          assert_fraction(r8)
    53 000014FA 41803812            <1>  cmp byte [%1], %2
    54 000014FE 0F85DA090000        <1>  jne L_error_incorrect_type
  2127 00001504 4C8B4D28                        mov r9, PARAM(1)
  2128                                          assert_fraction(r9)
    53 00001508 41803912            <1>  cmp byte [%1], %2
    54 0000150C 0F85CC090000        <1>  jne L_error_incorrect_type
  2129 00001512 498B4001                        mov rax, qword [r8 + 1] ; num1
  2130 00001516 498B5901                        mov rbx, qword [r9 + 1] ; num2
  2131 0000151A 4899                            cqo
  2132 0000151C 48F7EB                          imul rbx
  2133 0000151F 4889C6                          mov rsi, rax
  2134 00001522 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2135 00001526 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  2136 0000152A 4899                            cqo
  2137 0000152C 48F7EB                          imul rbx
  2138 0000152F 4889C7                          mov rdi, rax
  2139 00001532 E8A9000000                      call normalize_fraction
  2140 00001537 C9                              leave
  2141 00001538 C22000                          ret AND_KILL_FRAME(2)
  2142                                          
  2143                                  L_code_ptr_raw_bin_div_zz:
  2144 0000153B C8000000                	enter 0, 0
  2145 0000153F 48837D1802              	cmp COUNT, 2
  2146 00001544 0F85F5080000            	jne L_error_arg_count_2
  2147 0000154A 4C8B4520                	mov r8, PARAM(0)
  2148                                  	assert_integer(r8)
    53 0000154E 41803811            <1>  cmp byte [%1], %2
    54 00001552 0F8586090000        <1>  jne L_error_incorrect_type
  2149 00001558 4C8B4D28                	mov r9, PARAM(1)
  2150                                  	assert_integer(r9)
    53 0000155C 41803911            <1>  cmp byte [%1], %2
    54 00001560 0F8578090000        <1>  jne L_error_incorrect_type
  2151 00001566 498B7901                	mov rdi, qword [r9 + 1]
  2152 0000156A 4883FF00                	cmp rdi, 0
  2153 0000156E 0F849B090000            	je L_error_division_by_zero
  2154 00001574 498B7001                	mov rsi, qword [r8 + 1]
  2155 00001578 E863000000              	call normalize_fraction
  2156 0000157D C9                      	leave
  2157 0000157E C22000                  	ret AND_KILL_FRAME(2)
  2158                                  
  2159                                  L_code_ptr_raw_bin_div_qq:
  2160 00001581 C8000000                        enter 0, 0
  2161 00001585 48837D1802                      cmp COUNT, 2
  2162 0000158A 0F85AF080000                    jne L_error_arg_count_2
  2163 00001590 4C8B4520                        mov r8, PARAM(0)
  2164                                          assert_fraction(r8)
    53 00001594 41803812            <1>  cmp byte [%1], %2
    54 00001598 0F8540090000        <1>  jne L_error_incorrect_type
  2165 0000159E 4C8B4D28                        mov r9, PARAM(1)
  2166                                          assert_fraction(r9)
    53 000015A2 41803912            <1>  cmp byte [%1], %2
    54 000015A6 0F8532090000        <1>  jne L_error_incorrect_type
  2167 000015AC 4983790100                      cmp qword [r9 + 1], 0
  2168 000015B1 0F8458090000                    je L_error_division_by_zero
  2169 000015B7 498B4001                        mov rax, qword [r8 + 1] ; num1
  2170 000015BB 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  2171 000015BF 4899                            cqo
  2172 000015C1 48F7EB                          imul rbx
  2173 000015C4 4889C6                          mov rsi, rax
  2174 000015C7 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2175 000015CB 498B5901                        mov rbx, qword [r9 + 1] ; num2
  2176 000015CF 4899                            cqo
  2177 000015D1 48F7EB                          imul rbx
  2178 000015D4 4889C7                          mov rdi, rax
  2179 000015D7 E804000000                      call normalize_fraction
  2180 000015DC C9                              leave
  2181 000015DD C22000                          ret AND_KILL_FRAME(2)
  2182                                          
  2183                                  normalize_fraction:
  2184 000015E0 56                              push rsi
  2185 000015E1 57                              push rdi
  2186 000015E2 E859000000                      call gcd
  2187 000015E7 4889C3                          mov rbx, rax
  2188 000015EA 58                              pop rax
  2189 000015EB 4899                            cqo
  2190 000015ED 48F7FB                          idiv rbx
  2191 000015F0 4989C0                          mov r8, rax
  2192 000015F3 58                              pop rax
  2193 000015F4 4899                            cqo
  2194 000015F6 48F7FB                          idiv rbx
  2195 000015F9 4989C1                          mov r9, rax
  2196 000015FC 4983F900                        cmp r9, 0
  2197 00001600 741C                            je .L_zero
  2198 00001602 4983F801                        cmp r8, 1
  2199 00001606 7421                            je .L_int
  2200 00001608 BF11000000                      mov rdi, (1 + 8 + 8)
  2201 0000160D E8A1EBFFFF                      call malloc
  2202 00001612 C60012                          mov byte [rax], T_fraction
  2203 00001615 4C894801                        mov qword [rax + 1], r9
  2204 00001619 4C894009                        mov qword [rax + 1 + 8], r8
  2205 0000161D C3                              ret
  2206                                  .L_zero:
  2207 0000161E BF00000000                      mov rdi, 0
  2208 00001623 E831070000                      call make_integer
  2209 00001628 C3                              ret
  2210                                  .L_int:
  2211 00001629 4C89CF                          mov rdi, r9
  2212 0000162C E828070000                      call make_integer
  2213 00001631 C3                              ret
  2214                                  
  2215                                  iabs:
  2216 00001632 4889F8                          mov rax, rdi
  2217 00001635 4883F800                        cmp rax, 0
  2218 00001639 7C01                            jl .Lneg
  2219 0000163B C3                              ret
  2220                                  .Lneg:
  2221 0000163C 48F7D8                          neg rax
  2222 0000163F C3                              ret
  2223                                  
  2224                                  gcd:
  2225 00001640 E8EDFFFFFF                      call iabs
  2226 00001645 4889C3                          mov rbx, rax
  2227 00001648 4889F7                          mov rdi, rsi
  2228 0000164B E8E2FFFFFF                      call iabs
  2229 00001650 4883F800                        cmp rax, 0
  2230 00001654 7502                            jne .L0
  2231 00001656 4893                            xchg rax, rbx
  2232                                  .L0:
  2233 00001658 4883FB00                        cmp rbx, 0
  2234 0000165C 740C                            je .L1
  2235 0000165E 4899                            cqo
  2236 00001660 48F7F3                          div rbx
  2237 00001663 4889D0                          mov rax, rdx
  2238 00001666 4893                            xchg rax, rbx
  2239 00001668 EBEE                            jmp .L0
  2240                                  .L1:
  2241 0000166A C3                              ret
  2242                                  
  2243                                  L_code_ptr_error:
  2244 0000166B C8000000                        enter 0, 0
  2245 0000166F 48837D1802                      cmp COUNT, 2
  2246 00001674 0F85C5070000                    jne L_error_arg_count_2
  2247 0000167A 488B7520                        mov rsi, PARAM(0)
  2248                                          assert_interned_symbol(rsi)
    53 0000167E 803E41              <1>  cmp byte [%1], %2
    54 00001681 0F8557080000        <1>  jne L_error_incorrect_type
  2249 00001687 488B7528                        mov rsi, PARAM(1)
  2250                                          assert_string(rsi)
    53 0000168B 803E03              <1>  cmp byte [%1], %2
    54 0000168E 0F854A080000        <1>  jne L_error_incorrect_type
  2251 00001694 48BF-                           mov rdi, fmt_scheme_error_part_1
  2251 00001696 [830A000000000000] 
  2252 0000169E B800000000                      mov rax, 0
  2253                                          ENTER
    44 000016A3 C8000000            <1>  enter 0, 0
    45 000016A7 4883E4F0            <1>  and rsp, ~15
  2254 000016AB E8(00000000)                    call printf
  2255                                          LEAVE
    49 000016B0 C9                  <1>  leave
  2256 000016B1 488B7D20                        mov rdi, PARAM(0)
  2257 000016B5 E87AEDFFFF                      call print_sexpr
  2258 000016BA 48BF-                           mov rdi, fmt_scheme_error_part_2
  2258 000016BC [970A000000000000] 
  2259 000016C4 B800000000                      mov rax, 0
  2260                                          ENTER
    44 000016C9 C8000000            <1>  enter 0, 0
    45 000016CD 4883E4F0            <1>  and rsp, ~15
  2261 000016D1 E8(00000000)                    call printf
  2262                                          LEAVE
    49 000016D6 C9                  <1>  leave
  2263 000016D7 488B4528                        mov rax, PARAM(1)       ; sob_string
  2264 000016DB BE01000000                      mov rsi, 1              ; size = 1 byte
  2265 000016E0 488B5001                        mov rdx, qword [rax + 1] ; length
  2266 000016E4 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
  2267 000016E8 488B0C25[00000000]              mov rcx, qword [stdout]  ; FILE*
  2268                                  	ENTER
    44 000016F0 C8000000            <1>  enter 0, 0
    45 000016F4 4883E4F0            <1>  and rsp, ~15
  2269 000016F8 E8(00000000)                    call fwrite
  2270                                  	LEAVE
    49 000016FD C9                  <1>  leave
  2271 000016FE 48BF-                           mov rdi, fmt_scheme_error_part_3
  2271 00001700 [D90A000000000000] 
  2272 00001708 B800000000                      mov rax, 0
  2273                                          ENTER
    44 0000170D C8000000            <1>  enter 0, 0
    45 00001711 4883E4F0            <1>  and rsp, ~15
  2274 00001715 E8(00000000)                    call printf
  2275                                          LEAVE
    49 0000171A C9                  <1>  leave
  2276 0000171B 48C7C0F7FFFFFF                  mov rax, -9
  2277 00001722 E8(00000000)                    call exit
  2278                                  
  2279                                  L_code_ptr_raw_less_than_rr:
  2280 00001727 C8000000                        enter 0, 0
  2281 0000172B 48837D1802                      cmp COUNT, 2
  2282 00001730 0F8509070000                    jne L_error_arg_count_2
  2283 00001736 488B7520                        mov rsi, PARAM(0)
  2284                                          assert_real(rsi)
    53 0000173A 803E13              <1>  cmp byte [%1], %2
    54 0000173D 0F859B070000        <1>  jne L_error_incorrect_type
  2285 00001743 488B7D28                        mov rdi, PARAM(1)
  2286                                          assert_real(rdi)
    53 00001747 803F13              <1>  cmp byte [%1], %2
    54 0000174A 0F858E070000        <1>  jne L_error_incorrect_type
  2287 00001750 F20F104601                      movsd xmm0, qword [rsi + 1]
  2288 00001755 F20F104F01                      movsd xmm1, qword [rdi + 1]
  2289 0000175A 660F2FC1                        comisd xmm0, xmm1
  2290 0000175E 730C                            jae .L_false
  2291 00001760 48B8-                           mov rax, sob_boolean_true
  2291 00001762 [0300000000000000] 
  2292 0000176A EB0A                            jmp .L_exit
  2293                                  .L_false:
  2294 0000176C 48B8-                           mov rax, sob_boolean_false
  2294 0000176E [0200000000000000] 
  2295                                  .L_exit:
  2296 00001776 C9                              leave
  2297 00001777 C22000                          ret AND_KILL_FRAME(2)
  2298                                          
  2299                                  L_code_ptr_raw_less_than_zz:
  2300 0000177A C8000000                	enter 0, 0
  2301 0000177E 48837D1802              	cmp COUNT, 2
  2302 00001783 0F85B6060000            	jne L_error_arg_count_2
  2303 00001789 4C8B4520                	mov r8, PARAM(0)
  2304                                  	assert_integer(r8)
    53 0000178D 41803811            <1>  cmp byte [%1], %2
    54 00001791 0F8547070000        <1>  jne L_error_incorrect_type
  2305 00001797 4C8B4D28                	mov r9, PARAM(1)
  2306                                  	assert_integer(r9)
    53 0000179B 41803911            <1>  cmp byte [%1], %2
    54 0000179F 0F8539070000        <1>  jne L_error_incorrect_type
  2307 000017A5 498B7801                	mov rdi, qword [r8 + 1]
  2308 000017A9 493B7901                	cmp rdi, qword [r9 + 1]
  2309 000017AD 7D0C                    	jge .L_false
  2310 000017AF 48B8-                   	mov rax, sob_boolean_true
  2310 000017B1 [0300000000000000] 
  2311 000017B9 EB0A                    	jmp .L_exit
  2312                                  .L_false:
  2313 000017BB 48B8-                   	mov rax, sob_boolean_false
  2313 000017BD [0200000000000000] 
  2314                                  .L_exit:
  2315 000017C5 C9                      	leave
  2316 000017C6 C22000                  	ret AND_KILL_FRAME(2)
  2317                                  
  2318                                  L_code_ptr_raw_less_than_qq:
  2319 000017C9 C8000000                        enter 0, 0
  2320 000017CD 48837D1802                      cmp COUNT, 2
  2321 000017D2 0F8567060000                    jne L_error_arg_count_2
  2322 000017D8 488B7520                        mov rsi, PARAM(0)
  2323                                          assert_fraction(rsi)
    53 000017DC 803E12              <1>  cmp byte [%1], %2
    54 000017DF 0F85F9060000        <1>  jne L_error_incorrect_type
  2324 000017E5 488B7D28                        mov rdi, PARAM(1)
  2325                                          assert_fraction(rdi)
    53 000017E9 803F12              <1>  cmp byte [%1], %2
    54 000017EC 0F85EC060000        <1>  jne L_error_incorrect_type
  2326 000017F2 488B4601                        mov rax, qword [rsi + 1] ; num1
  2327 000017F6 4899                            cqo
  2328 000017F8 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  2329 000017FC 4889C1                          mov rcx, rax
  2330 000017FF 488B4609                        mov rax, qword [rsi + 1 + 8] ; den1
  2331 00001803 4899                            cqo
  2332 00001805 48F76F01                        imul qword [rdi + 1]          ; num2
  2333 00001809 4829C1                          sub rcx, rax
  2334 0000180C 7D0C                            jge .L_false
  2335 0000180E 48B8-                           mov rax, sob_boolean_true
  2335 00001810 [0300000000000000] 
  2336 00001818 EB0A                            jmp .L_exit
  2337                                  .L_false:
  2338 0000181A 48B8-                           mov rax, sob_boolean_false
  2338 0000181C [0200000000000000] 
  2339                                  .L_exit:
  2340 00001824 C9                              leave
  2341 00001825 C22000                          ret AND_KILL_FRAME(2)
  2342                                  
  2343                                  L_code_ptr_raw_equal_rr:
  2344 00001828 C8000000                        enter 0, 0
  2345 0000182C 48837D1802                      cmp COUNT, 2
  2346 00001831 0F8508060000                    jne L_error_arg_count_2
  2347 00001837 488B7520                        mov rsi, PARAM(0)
  2348                                          assert_real(rsi)
    53 0000183B 803E13              <1>  cmp byte [%1], %2
    54 0000183E 0F859A060000        <1>  jne L_error_incorrect_type
  2349 00001844 488B7D28                        mov rdi, PARAM(1)
  2350                                          assert_real(rdi)
    53 00001848 803F13              <1>  cmp byte [%1], %2
    54 0000184B 0F858D060000        <1>  jne L_error_incorrect_type
  2351 00001851 F20F104601                      movsd xmm0, qword [rsi + 1]
  2352 00001856 F20F104F01                      movsd xmm1, qword [rdi + 1]
  2353 0000185B 660F2FC1                        comisd xmm0, xmm1
  2354 0000185F 750C                            jne .L_false
  2355 00001861 48B8-                           mov rax, sob_boolean_true
  2355 00001863 [0300000000000000] 
  2356 0000186B EB0A                            jmp .L_exit
  2357                                  .L_false:
  2358 0000186D 48B8-                           mov rax, sob_boolean_false
  2358 0000186F [0200000000000000] 
  2359                                  .L_exit:
  2360 00001877 C9                              leave
  2361 00001878 C22000                          ret AND_KILL_FRAME(2)
  2362                                          
  2363                                  L_code_ptr_raw_equal_zz:
  2364 0000187B C8000000                	enter 0, 0
  2365 0000187F 48837D1802              	cmp COUNT, 2
  2366 00001884 0F85B5050000            	jne L_error_arg_count_2
  2367 0000188A 4C8B4520                	mov r8, PARAM(0)
  2368                                  	assert_integer(r8)
    53 0000188E 41803811            <1>  cmp byte [%1], %2
    54 00001892 0F8546060000        <1>  jne L_error_incorrect_type
  2369 00001898 4C8B4D28                	mov r9, PARAM(1)
  2370                                  	assert_integer(r9)
    53 0000189C 41803911            <1>  cmp byte [%1], %2
    54 000018A0 0F8538060000        <1>  jne L_error_incorrect_type
  2371 000018A6 498B7801                	mov rdi, qword [r8 + 1]
  2372 000018AA 493B7901                	cmp rdi, qword [r9 + 1]
  2373 000018AE 750C                    	jne .L_false
  2374 000018B0 48B8-                   	mov rax, sob_boolean_true
  2374 000018B2 [0300000000000000] 
  2375 000018BA EB0A                    	jmp .L_exit
  2376                                  .L_false:
  2377 000018BC 48B8-                   	mov rax, sob_boolean_false
  2377 000018BE [0200000000000000] 
  2378                                  .L_exit:
  2379 000018C6 C9                      	leave
  2380 000018C7 C22000                  	ret AND_KILL_FRAME(2)
  2381                                  
  2382                                  L_code_ptr_raw_equal_qq:
  2383 000018CA C8000000                        enter 0, 0
  2384 000018CE 48837D1802                      cmp COUNT, 2
  2385 000018D3 0F8566050000                    jne L_error_arg_count_2
  2386 000018D9 488B7520                        mov rsi, PARAM(0)
  2387                                          assert_fraction(rsi)
    53 000018DD 803E12              <1>  cmp byte [%1], %2
    54 000018E0 0F85F8050000        <1>  jne L_error_incorrect_type
  2388 000018E6 488B7D28                        mov rdi, PARAM(1)
  2389                                          assert_fraction(rdi)
    53 000018EA 803F12              <1>  cmp byte [%1], %2
    54 000018ED 0F85EB050000        <1>  jne L_error_incorrect_type
  2390 000018F3 488B4601                        mov rax, qword [rsi + 1] ; num1
  2391 000018F7 4899                            cqo
  2392 000018F9 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  2393 000018FD 4889C1                          mov rcx, rax
  2394 00001900 488B4709                        mov rax, qword [rdi + 1 + 8] ; den1
  2395 00001904 4899                            cqo
  2396 00001906 48F76F01                        imul qword [rdi + 1]          ; num2
  2397 0000190A 4829C1                          sub rcx, rax
  2398 0000190D 750C                            jne .L_false
  2399 0000190F 48B8-                           mov rax, sob_boolean_true
  2399 00001911 [0300000000000000] 
  2400 00001919 EB0A                            jmp .L_exit
  2401                                  .L_false:
  2402 0000191B 48B8-                           mov rax, sob_boolean_false
  2402 0000191D [0200000000000000] 
  2403                                  .L_exit:
  2404 00001925 C9                              leave
  2405 00001926 C22000                          ret AND_KILL_FRAME(2)
  2406                                  
  2407                                  L_code_ptr_quotient:
  2408 00001929 C8000000                        enter 0, 0
  2409 0000192D 48837D1802                      cmp COUNT, 2
  2410 00001932 0F8507050000                    jne L_error_arg_count_2
  2411 00001938 488B7520                        mov rsi, PARAM(0)
  2412                                          assert_integer(rsi)
    53 0000193C 803E11              <1>  cmp byte [%1], %2
    54 0000193F 0F8599050000        <1>  jne L_error_incorrect_type
  2413 00001945 488B7D28                        mov rdi, PARAM(1)
  2414                                          assert_integer(rdi)
    53 00001949 803F11              <1>  cmp byte [%1], %2
    54 0000194C 0F858C050000        <1>  jne L_error_incorrect_type
  2415 00001952 488B4601                        mov rax, qword [rsi + 1]
  2416 00001956 488B5F01                        mov rbx, qword [rdi + 1]
  2417 0000195A 4883FB00                        cmp rbx, 0
  2418 0000195E 0F84AB050000                    je L_error_division_by_zero
  2419 00001964 4899                            cqo
  2420 00001966 48F7FB                          idiv rbx
  2421 00001969 4889C7                          mov rdi, rax
  2422 0000196C E8E8030000                      call make_integer
  2423 00001971 C9                              leave
  2424 00001972 C22000                          ret AND_KILL_FRAME(2)
  2425                                          
  2426                                  L_code_ptr_remainder:
  2427 00001975 C8000000                        enter 0, 0
  2428 00001979 48837D1802                      cmp COUNT, 2
  2429 0000197E 0F85BB040000                    jne L_error_arg_count_2
  2430 00001984 488B7520                        mov rsi, PARAM(0)
  2431                                          assert_integer(rsi)
    53 00001988 803E11              <1>  cmp byte [%1], %2
    54 0000198B 0F854D050000        <1>  jne L_error_incorrect_type
  2432 00001991 488B7D28                        mov rdi, PARAM(1)
  2433                                          assert_integer(rdi)
    53 00001995 803F11              <1>  cmp byte [%1], %2
    54 00001998 0F8540050000        <1>  jne L_error_incorrect_type
  2434 0000199E 488B4601                        mov rax, qword [rsi + 1]
  2435 000019A2 488B5F01                        mov rbx, qword [rdi + 1]
  2436 000019A6 4883FB00                        cmp rbx, 0
  2437 000019AA 0F845F050000                    je L_error_division_by_zero
  2438 000019B0 4899                            cqo
  2439 000019B2 48F7FB                          idiv rbx
  2440 000019B5 4889D7                          mov rdi, rdx
  2441 000019B8 E89C030000                      call make_integer
  2442 000019BD C9                              leave
  2443 000019BE C22000                          ret AND_KILL_FRAME(2)
  2444                                  
  2445                                  L_code_ptr_set_car:
  2446 000019C1 C8000000                        enter 0, 0
  2447 000019C5 48837D1802                      cmp COUNT, 2
  2448 000019CA 0F856F040000                    jne L_error_arg_count_2
  2449 000019D0 488B4520                        mov rax, PARAM(0)
  2450                                          assert_pair(rax)
    53 000019D4 803821              <1>  cmp byte [%1], %2
    54 000019D7 0F8501050000        <1>  jne L_error_incorrect_type
  2451 000019DD 488B5D28                        mov rbx, PARAM(1)
  2452 000019E1 48895801                        mov SOB_PAIR_CAR(rax), rbx
  2453 000019E5 48B8-                           mov rax, sob_void
  2453 000019E7 [0000000000000000] 
  2454 000019EF C9                              leave
  2455 000019F0 C22000                          ret AND_KILL_FRAME(2)
  2456                                  
  2457                                  L_code_ptr_set_cdr:
  2458 000019F3 C8000000                        enter 0, 0
  2459 000019F7 48837D1802                      cmp COUNT, 2
  2460 000019FC 0F853D040000                    jne L_error_arg_count_2
  2461 00001A02 488B4520                        mov rax, PARAM(0)
  2462                                          assert_pair(rax)
    53 00001A06 803821              <1>  cmp byte [%1], %2
    54 00001A09 0F85CF040000        <1>  jne L_error_incorrect_type
  2463 00001A0F 488B5D28                        mov rbx, PARAM(1)
  2464 00001A13 48895809                        mov SOB_PAIR_CDR(rax), rbx
  2465 00001A17 48B8-                           mov rax, sob_void
  2465 00001A19 [0000000000000000] 
  2466 00001A21 C9                              leave
  2467 00001A22 C22000                          ret AND_KILL_FRAME(2)
  2468                                  
  2469                                  L_code_ptr_string_ref:
  2470 00001A25 C8000000                        enter 0, 0
  2471 00001A29 48837D1802                      cmp COUNT, 2
  2472 00001A2E 0F850B040000                    jne L_error_arg_count_2
  2473 00001A34 488B7D20                        mov rdi, PARAM(0)
  2474                                          assert_string(rdi)
    53 00001A38 803F03              <1>  cmp byte [%1], %2
    54 00001A3B 0F859D040000        <1>  jne L_error_incorrect_type
  2475 00001A41 488B7528                        mov rsi, PARAM(1)
  2476                                          assert_integer(rsi)
    53 00001A45 803E11              <1>  cmp byte [%1], %2
    54 00001A48 0F8590040000        <1>  jne L_error_incorrect_type
  2477 00001A4E 488B5701                        mov rdx, qword [rdi + 1]
  2478 00001A52 488B4E01                        mov rcx, qword [rsi + 1]
  2479 00001A56 4839D1                          cmp rcx, rdx
  2480 00001A59 0F8D14030000                    jge L_error_integer_range
  2481 00001A5F 4883F900                        cmp rcx, 0
  2482 00001A63 0F8C0A030000                    jl L_error_integer_range
  2483 00001A69 8A5C3909                        mov bl, byte [rdi + 1 + 8 + 1 * rcx]
  2484 00001A6D BF02000000                      mov rdi, 2
  2485 00001A72 E83CE7FFFF                      call malloc
  2486 00001A77 C60002                          mov byte [rax], T_char
  2487 00001A7A 885801                          mov byte [rax + 1], bl
  2488 00001A7D C9                              leave
  2489 00001A7E C22000                          ret AND_KILL_FRAME(2)
  2490                                  
  2491                                  L_code_ptr_vector_ref:
  2492 00001A81 C8000000                        enter 0, 0
  2493 00001A85 48837D1802                      cmp COUNT, 2
  2494 00001A8A 0F85AF030000                    jne L_error_arg_count_2
  2495 00001A90 488B7D20                        mov rdi, PARAM(0)
  2496                                          assert_vector(rdi)
    53 00001A94 803F22              <1>  cmp byte [%1], %2
    54 00001A97 0F8541040000        <1>  jne L_error_incorrect_type
  2497 00001A9D 488B7528                        mov rsi, PARAM(1)
  2498                                          assert_integer(rsi)
    53 00001AA1 803E11              <1>  cmp byte [%1], %2
    54 00001AA4 0F8534040000        <1>  jne L_error_incorrect_type
  2499 00001AAA 488B5701                        mov rdx, qword [rdi + 1]
  2500 00001AAE 488B4E01                        mov rcx, qword [rsi + 1]
  2501 00001AB2 4839D1                          cmp rcx, rdx
  2502 00001AB5 0F8DB8020000                    jge L_error_integer_range
  2503 00001ABB 4883F900                        cmp rcx, 0
  2504 00001ABF 0F8CAE020000                    jl L_error_integer_range
  2505 00001AC5 488B44CF09                      mov rax, [rdi + 1 + 8 + 8 * rcx]
  2506 00001ACA C9                              leave
  2507 00001ACB C22000                          ret AND_KILL_FRAME(2)
  2508                                  
  2509                                  L_code_ptr_vector_set:
  2510 00001ACE C8000000                        enter 0, 0
  2511 00001AD2 48837D1803                      cmp COUNT, 3
  2512 00001AD7 0F85CC030000                    jne L_error_arg_count_3
  2513 00001ADD 488B7D20                        mov rdi, PARAM(0)
  2514                                          assert_vector(rdi)
    53 00001AE1 803F22              <1>  cmp byte [%1], %2
    54 00001AE4 0F85F4030000        <1>  jne L_error_incorrect_type
  2515 00001AEA 488B7528                        mov rsi, PARAM(1)
  2516                                          assert_integer(rsi)
    53 00001AEE 803E11              <1>  cmp byte [%1], %2
    54 00001AF1 0F85E7030000        <1>  jne L_error_incorrect_type
  2517 00001AF7 488B5701                        mov rdx, qword [rdi + 1]
  2518 00001AFB 488B4E01                        mov rcx, qword [rsi + 1]
  2519 00001AFF 4839D1                          cmp rcx, rdx
  2520 00001B02 0F8D6B020000                    jge L_error_integer_range
  2521 00001B08 4883F900                        cmp rcx, 0
  2522 00001B0C 0F8C61020000                    jl L_error_integer_range
  2523 00001B12 488B4530                        mov rax, PARAM(2)
  2524 00001B16 488944CF09                      mov qword [rdi + 1 + 8 + 8 * rcx], rax
  2525 00001B1B 48B8-                           mov rax, sob_void
  2525 00001B1D [0000000000000000] 
  2526 00001B25 C9                              leave
  2527 00001B26 C22800                          ret AND_KILL_FRAME(3)
  2528                                  
  2529                                  L_code_ptr_string_set:
  2530 00001B29 C8000000                        enter 0, 0
  2531 00001B2D 48837D1803                      cmp COUNT, 3
  2532 00001B32 0F8571030000                    jne L_error_arg_count_3
  2533 00001B38 488B7D20                        mov rdi, PARAM(0)
  2534                                          assert_string(rdi)
    53 00001B3C 803F03              <1>  cmp byte [%1], %2
    54 00001B3F 0F8599030000        <1>  jne L_error_incorrect_type
  2535 00001B45 488B7528                        mov rsi, PARAM(1)
  2536                                          assert_integer(rsi)
    53 00001B49 803E11              <1>  cmp byte [%1], %2
    54 00001B4C 0F858C030000        <1>  jne L_error_incorrect_type
  2537 00001B52 488B5701                        mov rdx, qword [rdi + 1]
  2538 00001B56 488B4E01                        mov rcx, qword [rsi + 1]
  2539 00001B5A 4839D1                          cmp rcx, rdx
  2540 00001B5D 0F8D10020000                    jge L_error_integer_range
  2541 00001B63 4883F900                        cmp rcx, 0
  2542 00001B67 0F8C06020000                    jl L_error_integer_range
  2543 00001B6D 488B4530                        mov rax, PARAM(2)
  2544                                          assert_char(rax)
    53 00001B71 803802              <1>  cmp byte [%1], %2
    54 00001B74 0F8564030000        <1>  jne L_error_incorrect_type
  2545 00001B7A 8A4001                          mov al, byte [rax + 1]
  2546 00001B7D 88443909                        mov byte [rdi + 1 + 8 + 1 * rcx], al
  2547 00001B81 48B8-                           mov rax, sob_void
  2547 00001B83 [0000000000000000] 
  2548 00001B8B C9                              leave
  2549 00001B8C C22800                          ret AND_KILL_FRAME(3)
  2550                                  
  2551                                  L_code_ptr_make_vector:
  2552 00001B8F C8000000                        enter 0, 0
  2553 00001B93 48837D1802                      cmp COUNT, 2
  2554 00001B98 0F85A1020000                    jne L_error_arg_count_2
  2555 00001B9E 488B4D20                        mov rcx, PARAM(0)
  2556                                          assert_integer(rcx)
    53 00001BA2 803911              <1>  cmp byte [%1], %2
    54 00001BA5 0F8533030000        <1>  jne L_error_incorrect_type
  2557 00001BAB 488B4901                        mov rcx, qword [rcx + 1]
  2558 00001BAF 4883F900                        cmp rcx, 0
  2559 00001BB3 0F8CBA010000                    jl L_error_integer_range
  2560 00001BB9 488B5528                        mov rdx, PARAM(1)
  2561 00001BBD 488D3CCD09000000                lea rdi, [1 + 8 + 8 * rcx]
  2562 00001BC5 E8E9E5FFFF                      call malloc
  2563 00001BCA C60022                          mov byte [rax], T_vector
  2564 00001BCD 48894801                        mov qword [rax + 1], rcx
  2565 00001BD1 41B800000000                    mov r8, 0
  2566                                  .L0:
  2567 00001BD7 4939C8                          cmp r8, rcx
  2568 00001BDA 740A                            je .L1
  2569 00001BDC 4A8954C009                      mov qword [rax + 1 + 8 + 8 * r8], rdx
  2570 00001BE1 49FFC0                          inc r8
  2571 00001BE4 EBF1                            jmp .L0
  2572                                  .L1:
  2573 00001BE6 C9                              leave
  2574 00001BE7 C22000                          ret AND_KILL_FRAME(2)
  2575                                          
  2576                                  L_code_ptr_make_string:
  2577 00001BEA C8000000                        enter 0, 0
  2578 00001BEE 48837D1802                      cmp COUNT, 2
  2579 00001BF3 0F8546020000                    jne L_error_arg_count_2
  2580 00001BF9 488B4D20                        mov rcx, PARAM(0)
  2581                                          assert_integer(rcx)
    53 00001BFD 803911              <1>  cmp byte [%1], %2
    54 00001C00 0F85D8020000        <1>  jne L_error_incorrect_type
  2582 00001C06 488B4901                        mov rcx, qword [rcx + 1]
  2583 00001C0A 4883F900                        cmp rcx, 0
  2584 00001C0E 0F8C5F010000                    jl L_error_integer_range
  2585 00001C14 488B5528                        mov rdx, PARAM(1)
  2586                                          assert_char(rdx)
    53 00001C18 803A02              <1>  cmp byte [%1], %2
    54 00001C1B 0F85BD020000        <1>  jne L_error_incorrect_type
  2587 00001C21 8A5201                          mov dl, byte [rdx + 1]
  2588 00001C24 488D7909                        lea rdi, [1 + 8 + 1 * rcx]
  2589 00001C28 E886E5FFFF                      call malloc
  2590 00001C2D C60003                          mov byte [rax], T_string
  2591 00001C30 48894801                        mov qword [rax + 1], rcx
  2592 00001C34 41B800000000                    mov r8, 0
  2593                                  .L0:
  2594 00001C3A 4939C8                          cmp r8, rcx
  2595 00001C3D 740A                            je .L1
  2596 00001C3F 4188540009                      mov byte [rax + 1 + 8 + 1 * r8], dl
  2597 00001C44 49FFC0                          inc r8
  2598 00001C47 EBF1                            jmp .L0
  2599                                  .L1:
  2600 00001C49 C9                              leave
  2601 00001C4A C22000                          ret AND_KILL_FRAME(2)
  2602                                  
  2603                                  L_code_ptr_numerator:
  2604 00001C4D C8000000                        enter 0, 0
  2605 00001C51 48837D1801                      cmp COUNT, 1
  2606 00001C56 0F85AE010000                    jne L_error_arg_count_1
  2607 00001C5C 488B4520                        mov rax, PARAM(0)
  2608                                          assert_fraction(rax)
    53 00001C60 803812              <1>  cmp byte [%1], %2
    54 00001C63 0F8575020000        <1>  jne L_error_incorrect_type
  2609 00001C69 488B7801                        mov rdi, qword [rax + 1]
  2610 00001C6D E8E7000000                      call make_integer
  2611 00001C72 C9                              leave
  2612 00001C73 C21800                          ret AND_KILL_FRAME(1)
  2613                                          
  2614                                  L_code_ptr_denominator:
  2615 00001C76 C8000000                        enter 0, 0
  2616 00001C7A 48837D1801                      cmp COUNT, 1
  2617 00001C7F 0F8585010000                    jne L_error_arg_count_1
  2618 00001C85 488B4520                        mov rax, PARAM(0)
  2619                                          assert_fraction(rax)
    53 00001C89 803812              <1>  cmp byte [%1], %2
    54 00001C8C 0F854C020000        <1>  jne L_error_incorrect_type
  2620 00001C92 488B7809                        mov rdi, qword [rax + 1 + 8]
  2621 00001C96 E8BE000000                      call make_integer
  2622 00001C9B C9                              leave
  2623 00001C9C C21800                          ret AND_KILL_FRAME(1)
  2624                                  
  2625                                  L_code_ptr_is_eq:
  2626 00001C9F C8000000                	enter 0, 0
  2627 00001CA3 48837D1802              	cmp COUNT, 2
  2628 00001CA8 0F8591010000            	jne L_error_arg_count_2
  2629 00001CAE 488B7D20                	mov rdi, PARAM(0)
  2630 00001CB2 488B7528                	mov rsi, PARAM(1)
  2631 00001CB6 4839F7                  	cmp rdi, rsi
  2632 00001CB9 746C                    	je .L_eq_true
  2633 00001CBB 8A17                    	mov dl, byte [rdi]
  2634 00001CBD 3A16                    	cmp dl, byte [rsi]
  2635 00001CBF 7572                    	jne .L_eq_false
  2636 00001CC1 80FA02                  	cmp dl, T_char
  2637 00001CC4 7459                    	je .L_char
  2638 00001CC6 80FA41                  	cmp dl, T_interned_symbol
  2639 00001CC9 7440                    	je .L_interned_symbol
  2640 00001CCB 80FA42                          cmp dl, T_uninterned_symbol
  2641 00001CCE 7443                            je .L_uninterned_symbol
  2642 00001CD0 80FA13                  	cmp dl, T_real
  2643 00001CD3 742E                    	je .L_real
  2644 00001CD5 80FA12                  	cmp dl, T_fraction
  2645 00001CD8 7413                    	je .L_fraction
  2646 00001CDA 80FA11                          cmp dl, T_integer
  2647 00001CDD 7402                            je .L_integer
  2648 00001CDF EB52                    	jmp .L_eq_false
  2649                                  .L_integer:
  2650 00001CE1 488B4601                        mov rax, qword [rsi + 1]
  2651 00001CE5 483B4701                        cmp rax, qword [rdi + 1]
  2652 00001CE9 7548                            jne .L_eq_false
  2653 00001CEB EB3A                            jmp .L_eq_true
  2654                                  .L_fraction:
  2655 00001CED 488B4601                	mov rax, qword [rsi + 1]
  2656 00001CF1 483B4701                	cmp rax, qword [rdi + 1]
  2657 00001CF5 753C                    	jne .L_eq_false
  2658 00001CF7 488B4609                	mov rax, qword [rsi + 1 + 8]
  2659 00001CFB 483B4709                	cmp rax, qword [rdi + 1 + 8]
  2660 00001CFF 7532                    	jne .L_eq_false
  2661 00001D01 EB24                    	jmp .L_eq_true
  2662                                  .L_real:
  2663 00001D03 488B4601                	mov rax, qword [rsi + 1]
  2664 00001D07 483B4701                	cmp rax, qword [rdi + 1]
  2665                                  .L_interned_symbol:
  2666                                  	; never reached, because interned_symbols are static!
  2667                                  	; but I'm keeping it in case, I'll ever change
  2668                                  	; the implementation
  2669 00001D0B 488B4601                	mov rax, qword [rsi + 1]
  2670 00001D0F 483B4701                	cmp rax, qword [rdi + 1]
  2671                                  .L_uninterned_symbol:
  2672 00001D13 4C8B4701                        mov r8, qword [rdi + 1]
  2673 00001D17 4C3B4601                        cmp r8, qword [rsi + 1]
  2674 00001D1B 7516                            jne .L_eq_false
  2675 00001D1D EB08                            jmp .L_eq_true
  2676                                  .L_char:
  2677 00001D1F 8A5E01                  	mov bl, byte [rsi + 1]
  2678 00001D22 3A5F01                  	cmp bl, byte [rdi + 1]
  2679 00001D25 750C                    	jne .L_eq_false
  2680                                  .L_eq_true:
  2681 00001D27 48B8-                   	mov rax, sob_boolean_true
  2681 00001D29 [0300000000000000] 
  2682 00001D31 EB0A                    	jmp .L_eq_exit
  2683                                  .L_eq_false:
  2684 00001D33 48B8-                   	mov rax, sob_boolean_false
  2684 00001D35 [0200000000000000] 
  2685                                  .L_eq_exit:
  2686 00001D3D C9                      	leave
  2687 00001D3E C22000                  	ret AND_KILL_FRAME(2)
  2688                                  
  2689                                  make_real:
  2690 00001D41 C8000000                        enter 0, 0
  2691 00001D45 BF09000000                      mov rdi, (1 + 8)
  2692 00001D4A E864E4FFFF                      call malloc
  2693 00001D4F C60013                          mov byte [rax], T_real
  2694 00001D52 F20F114001                      movsd qword [rax + 1], xmm0
  2695 00001D57 C9                              leave 
  2696 00001D58 C3                              ret
  2697                                          
  2698                                  make_integer:
  2699 00001D59 C8000000                        enter 0, 0
  2700 00001D5D 4889FE                          mov rsi, rdi
  2701 00001D60 BF09000000                      mov rdi, (1 + 8)
  2702 00001D65 E849E4FFFF                      call malloc
  2703 00001D6A C60011                          mov byte [rax], T_integer
  2704 00001D6D 48897001                        mov qword [rax + 1], rsi
  2705 00001D71 C9                              leave
  2706 00001D72 C3                              ret
  2707                                          
  2708                                  L_error_integer_range:
  2709 00001D73 488B3C25[00000000]              mov rdi, qword [stderr]
  2710 00001D7B 48BE-                           mov rsi, fmt_integer_range
  2710 00001D7D [500A000000000000] 
  2711 00001D85 B800000000                      mov rax, 0
  2712                                          ENTER
    44 00001D8A C8000000            <1>  enter 0, 0
    45 00001D8E 4883E4F0            <1>  and rsp, ~15
  2713 00001D92 E8(00000000)                    call fprintf
  2714                                          LEAVE
    49 00001D97 C9                  <1>  leave
  2715 00001D98 48C7C0FBFFFFFF                  mov rax, -5
  2716 00001D9F E8(00000000)                    call exit
  2717                                  
  2718                                  L_error_arg_negative:
  2719 00001DA4 488B3C25[00000000]              mov rdi, qword [stderr]
  2720 00001DAC 48BE-                           mov rsi, fmt_arg_negative
  2720 00001DAE [2809000000000000] 
  2721 00001DB6 B800000000                      mov rax, 0
  2722                                          ENTER
    44 00001DBB C8000000            <1>  enter 0, 0
    45 00001DBF 4883E4F0            <1>  and rsp, ~15
  2723 00001DC3 E8(00000000)                    call fprintf
  2724                                          LEAVE
    49 00001DC8 C9                  <1>  leave
  2725 00001DC9 48C7C0FDFFFFFF                  mov rax, -3
  2726 00001DD0 E8(00000000)                    call exit
  2727                                  
  2728                                  L_error_arg_count_0:
  2729 00001DD5 488B3C25[00000000]              mov rdi, qword [stderr]
  2730 00001DDD 48BE-                           mov rsi, fmt_arg_count_0
  2730 00001DDF [4E09000000000000] 
  2731 00001DE7 488B5518                        mov rdx, COUNT
  2732 00001DEB B800000000                      mov rax, 0
  2733                                          ENTER
    44 00001DF0 C8000000            <1>  enter 0, 0
    45 00001DF4 4883E4F0            <1>  and rsp, ~15
  2734 00001DF8 E8(00000000)                    call fprintf
  2735                                          LEAVE
    49 00001DFD C9                  <1>  leave
  2736 00001DFE 48C7C0FDFFFFFF                  mov rax, -3
  2737 00001E05 E8(00000000)                    call exit
  2738                                  
  2739                                  L_error_arg_count_1:
  2740 00001E0A 488B3C25[00000000]              mov rdi, qword [stderr]
  2741 00001E12 48BE-                           mov rsi, fmt_arg_count_1
  2741 00001E14 [7609000000000000] 
  2742 00001E1C 488B5518                        mov rdx, COUNT
  2743 00001E20 B800000000                      mov rax, 0
  2744                                          ENTER
    44 00001E25 C8000000            <1>  enter 0, 0
    45 00001E29 4883E4F0            <1>  and rsp, ~15
  2745 00001E2D E8(00000000)                    call fprintf
  2746                                          LEAVE
    49 00001E32 C9                  <1>  leave
  2747 00001E33 48C7C0FDFFFFFF                  mov rax, -3
  2748 00001E3A E8(00000000)                    call exit
  2749                                  
  2750                                  L_error_arg_count_2:
  2751 00001E3F 488B3C25[00000000]              mov rdi, qword [stderr]
  2752 00001E47 48BE-                           mov rsi, fmt_arg_count_2
  2752 00001E49 [DC09000000000000] 
  2753 00001E51 488B5518                        mov rdx, COUNT
  2754 00001E55 B800000000                      mov rax, 0
  2755                                          ENTER
    44 00001E5A C8000000            <1>  enter 0, 0
    45 00001E5E 4883E4F0            <1>  and rsp, ~15
  2756 00001E62 E8(00000000)                    call fprintf
  2757                                          LEAVE
    49 00001E67 C9                  <1>  leave
  2758 00001E68 48C7C0FDFFFFFF                  mov rax, -3
  2759 00001E6F E8(00000000)                    call exit
  2760                                  
  2761                                  L_error_arg_count_12:
  2762 00001E74 488B3C25[00000000]              mov rdi, qword [stderr]
  2763 00001E7C 48BE-                           mov rsi, fmt_arg_count_12
  2763 00001E7E [9C09000000000000] 
  2764 00001E86 488B5518                        mov rdx, COUNT
  2765 00001E8A B800000000                      mov rax, 0
  2766                                          ENTER
    44 00001E8F C8000000            <1>  enter 0, 0
    45 00001E93 4883E4F0            <1>  and rsp, ~15
  2767 00001E97 E8(00000000)                    call fprintf
  2768                                          LEAVE
    49 00001E9C C9                  <1>  leave
  2769 00001E9D 48C7C0FDFFFFFF                  mov rax, -3
  2770 00001EA4 E8(00000000)                    call exit
  2771                                  
  2772                                  L_error_arg_count_3:
  2773 00001EA9 488B3C25[00000000]              mov rdi, qword [stderr]
  2774 00001EB1 48BE-                           mov rsi, fmt_arg_count_3
  2774 00001EB3 [030A000000000000] 
  2775 00001EBB 488B5518                        mov rdx, COUNT
  2776 00001EBF B800000000                      mov rax, 0
  2777                                          ENTER
    44 00001EC4 C8000000            <1>  enter 0, 0
    45 00001EC8 4883E4F0            <1>  and rsp, ~15
  2778 00001ECC E8(00000000)                    call fprintf
  2779                                          LEAVE
    49 00001ED1 C9                  <1>  leave
  2780 00001ED2 48C7C0FDFFFFFF                  mov rax, -3
  2781 00001ED9 E8(00000000)                    call exit
  2782                                          
  2783                                  L_error_incorrect_type:
  2784 00001EDE 488B3C25[00000000]              mov rdi, qword [stderr]
  2785 00001EE6 48BE-                           mov rsi, fmt_type
  2785 00001EE8 [2C0A000000000000] 
  2786 00001EF0 B800000000                      mov rax, 0
  2787                                          ENTER
    44 00001EF5 C8000000            <1>  enter 0, 0
    45 00001EF9 4883E4F0            <1>  and rsp, ~15
  2788 00001EFD E8(00000000)                    call fprintf
  2789                                          LEAVE
    49 00001F02 C9                  <1>  leave
  2790 00001F03 48C7C0FCFFFFFF                  mov rax, -4
  2791 00001F0A E8(00000000)                    call exit
  2792                                  
  2793                                  L_error_division_by_zero:
  2794 00001F0F 488B3C25[00000000]              mov rdi, qword [stderr]
  2795 00001F17 48BE-                           mov rsi, fmt_division_by_zero
  2795 00001F19 [6D0A000000000000] 
  2796 00001F21 B800000000                      mov rax, 0
  2797                                          ENTER
    44 00001F26 C8000000            <1>  enter 0, 0
    45 00001F2A 4883E4F0            <1>  and rsp, ~15
  2798 00001F2E E8(00000000)                    call fprintf
  2799                                          LEAVE
    49 00001F33 C9                  <1>  leave
  2800 00001F34 48C7C0F8FFFFFF                  mov rax, -8
  2801 00001F3B E8(00000000)                    call exit
  2802                                  
  2803                                  section .data
  2804                                  gensym_count:
  2805 0000091D 0000000000000000                dq 0
  2806                                  fmt_char:
  2807 00000925 256300                          db `%c\0`
  2808                                  fmt_arg_negative:
  2809 00000928 212121205468652061-             db `!!! The argument cannot be negative.\n\0`
  2809 00000931 7267756D656E742063-
  2809 0000093A 616E6E6F7420626520-
  2809 00000943 6E656761746976652E-
  2809 0000094C 0A00               
  2810                                  fmt_arg_count_0:
  2811 0000094E 212121204578706563-             db `!!! Expecting zero arguments. Found %d\n\0`
  2811 00000957 74696E67207A65726F-
  2811 00000960 20617267756D656E74-
  2811 00000969 732E20466F756E6420-
  2811 00000972 25640A00           
  2812                                  fmt_arg_count_1:
  2813 00000976 212121204578706563-             db `!!! Expecting one argument. Found %d\n\0`
  2813 0000097F 74696E67206F6E6520-
  2813 00000988 617267756D656E742E-
  2813 00000991 20466F756E64202564-
  2813 0000099A 0A00               
  2814                                  fmt_arg_count_12:
  2815 0000099C 212121204578706563-             db `!!! Expecting one required and one optional argument. Found %d\n\0`
  2815 000009A5 74696E67206F6E6520-
  2815 000009AE 726571756972656420-
  2815 000009B7 616E64206F6E65206F-
  2815 000009C0 7074696F6E616C2061-
  2815 000009C9 7267756D656E742E20-
  2815 000009D2 466F756E642025640A-
  2815 000009DB 00                 
  2816                                  fmt_arg_count_2:
  2817 000009DC 212121204578706563-             db `!!! Expecting two arguments. Found %d\n\0`
  2817 000009E5 74696E672074776F20-
  2817 000009EE 617267756D656E7473-
  2817 000009F7 2E20466F756E642025-
  2817 00000A00 640A00             
  2818                                  fmt_arg_count_3:
  2819 00000A03 212121204578706563-             db `!!! Expecting three arguments. Found %d\n\0`
  2819 00000A0C 74696E672074687265-
  2819 00000A15 6520617267756D656E-
  2819 00000A1E 74732E20466F756E64-
  2819 00000A27 2025640A00         
  2820                                  fmt_type:
  2821 00000A2C 2121212046756E6374-             db `!!! Function passed incorrect type\n\0`
  2821 00000A35 696F6E207061737365-
  2821 00000A3E 6420696E636F727265-
  2821 00000A47 637420747970650A00 
  2822                                  fmt_integer_range:
  2823 00000A50 21212120496E636F72-             db `!!! Incorrect integer range\n\0`
  2823 00000A59 7265637420696E7465-
  2823 00000A62 6765722072616E6765-
  2823 00000A6B 0A00               
  2824                                  fmt_division_by_zero:
  2825 00000A6D 212121204469766973-             db `!!! Division by zero\n\0`
  2825 00000A76 696F6E206279207A65-
  2825 00000A7F 726F0A00           
  2826                                  fmt_scheme_error_part_1:
  2827 00000A83 0A2121212054686520-             db `\n!!! The procedure \0`
  2827 00000A8C 70726F636564757265-
  2827 00000A95 2000               
  2828                                  fmt_scheme_error_part_2:
  2829 00000A97 2061736B656420746F-             db ` asked to terminate the program\n`
  2829 00000AA0 207465726D696E6174-
  2829 00000AA9 65207468652070726F-
  2829 00000AB2 6772616D0A         
  2830 00000AB7 202020207769746820-             db `    with the following message:\n\n\0`
  2830 00000AC0 74686520666F6C6C6F-
  2830 00000AC9 77696E67206D657373-
  2830 00000AD2 6167653A0A0A00     
  2831                                  fmt_scheme_error_part_3:
  2832 00000AD9 0A0A476F6F64627965-             db `\n\nGoodbye!\n\n\0`
  2832 00000AE2 210A0A00           
