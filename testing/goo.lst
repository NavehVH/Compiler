     1                                  ;;; prologue-1.asm
     2                                  ;;; The first part of the standard prologue for compiled programs
     3                                  ;;;
     4                                  ;;; Programmer: Mayer Goldberg, 2023
     5                                  
     6                                  %define T_void 				0
     7                                  %define T_nil 				1
     8                                  %define T_char 				2
     9                                  %define T_string 			3
    10                                  %define T_closure 			4
    11                                  %define T_undefined			5
    12                                  %define T_boolean 			8
    13                                  %define T_boolean_false 		(T_boolean | 1)
    14                                  %define T_boolean_true 			(T_boolean | 2)
    15                                  %define T_number 			16
    16                                  %define T_integer			(T_number | 1)
    17                                  %define T_fraction 			(T_number | 2)
    18                                  %define T_real 				(T_number | 3)
    19                                  %define T_collection 			32
    20                                  %define T_pair 				(T_collection | 1)
    21                                  %define T_vector 			(T_collection | 2)
    22                                  %define T_symbol 			64
    23                                  %define T_interned_symbol		(T_symbol | 1)
    24                                  %define T_uninterned_symbol		(T_symbol | 2)
    25                                  
    26                                  %define SOB_CHAR_VALUE(reg) 		byte [reg + 1]
    27                                  %define SOB_PAIR_CAR(reg)		qword [reg + 1]
    28                                  %define SOB_PAIR_CDR(reg)		qword [reg + 1 + 8]
    29                                  %define SOB_STRING_LENGTH(reg)		qword [reg + 1]
    30                                  %define SOB_VECTOR_LENGTH(reg)		qword [reg + 1]
    31                                  %define SOB_CLOSURE_ENV(reg)		qword [reg + 1]
    32                                  %define SOB_CLOSURE_CODE(reg)		qword [reg + 1 + 8]
    33                                  
    34                                  %define OLD_RBP 			qword [rbp]
    35                                  %define RET_ADDR 			qword [rbp + 8 * 1]
    36                                  %define ENV 				qword [rbp + 8 * 2]
    37                                  %define COUNT 				qword [rbp + 8 * 3]
    38                                  %define PARAM(n) 			qword [rbp + 8 * (4 + n)]
    39                                  %define AND_KILL_FRAME(n)		(8 * (2 + n))
    40                                  
    41                                  %define MAGIC				496351
    42                                  
    43                                  %macro ENTER 0
    44                                  	enter 0, 0
    45                                  	and rsp, ~15
    46                                  %endmacro
    47                                  
    48                                  %macro LEAVE 0
    49                                  	leave
    50                                  %endmacro
    51                                  
    52                                  %macro assert_type 2
    53                                          cmp byte [%1], %2
    54                                          jne L_error_incorrect_type
    55                                  %endmacro
    56                                  
    57                                  %define assert_void(reg)		assert_type reg, T_void
    58                                  %define assert_nil(reg)			assert_type reg, T_nil
    59                                  %define assert_char(reg)		assert_type reg, T_char
    60                                  %define assert_string(reg)		assert_type reg, T_string
    61                                  %define assert_symbol(reg)		assert_type reg, T_symbol
    62                                  %define assert_interned_symbol(reg)	assert_type reg, T_interned_symbol
    63                                  %define assert_uninterned_symbol(reg)	assert_type reg, T_uninterned_symbol
    64                                  %define assert_closure(reg)		assert_type reg, T_closure
    65                                  %define assert_boolean(reg)		assert_type reg, T_boolean
    66                                  %define assert_integer(reg)		assert_type reg, T_integer
    67                                  %define assert_fraction(reg)		assert_type reg, T_fraction
    68                                  %define assert_real(reg)		assert_type reg, T_real
    69                                  %define assert_pair(reg)		assert_type reg, T_pair
    70                                  %define assert_vector(reg)		assert_type reg, T_vector
    71                                  
    72                                  %define sob_void			(L_constants + 0)
    73                                  %define sob_nil				(L_constants + 1)
    74                                  %define sob_boolean_false		(L_constants + 2)
    75                                  %define sob_boolean_true		(L_constants + 3)
    76                                  %define sob_char_nul			(L_constants + 4)
    77                                  
    78                                  %define bytes(n)			(n)
    79                                  %define kbytes(n) 			(bytes(n) << 10)
    80                                  %define mbytes(n) 			(kbytes(n) << 10)
    81                                  %define gbytes(n) 			(mbytes(n) << 10)
    82                                  
    83                                  section .data
    84                                  L_constants:
    85                                  	; L_constants + 0:
    86 00000000 00                      	db T_void
    87                                  	; L_constants + 1:
    88 00000001 01                      	db T_nil
    89                                  	; L_constants + 2:
    90 00000002 09                      	db T_boolean_false
    91                                  	; L_constants + 3:
    92 00000003 0A                      	db T_boolean_true
    93                                  	; L_constants + 4:
    94 00000004 0200                    	db T_char, 0x00	; #\nul
    95                                  	; L_constants + 6:
    96 00000006 03                      	db T_string	; "null?"
    97 00000007 0500000000000000        	dq 5
    98 0000000F 6E756C6C3F              	db 0x6E, 0x75, 0x6C, 0x6C, 0x3F
    99                                  	; L_constants + 20:
   100 00000014 03                      	db T_string	; "pair?"
   101 00000015 0500000000000000        	dq 5
   102 0000001D 706169723F              	db 0x70, 0x61, 0x69, 0x72, 0x3F
   103                                  	; L_constants + 34:
   104 00000022 03                      	db T_string	; "void?"
   105 00000023 0500000000000000        	dq 5
   106 0000002B 766F69643F              	db 0x76, 0x6F, 0x69, 0x64, 0x3F
   107                                  	; L_constants + 48:
   108 00000030 03                      	db T_string	; "char?"
   109 00000031 0500000000000000        	dq 5
   110 00000039 636861723F              	db 0x63, 0x68, 0x61, 0x72, 0x3F
   111                                  	; L_constants + 62:
   112 0000003E 03                      	db T_string	; "string?"
   113 0000003F 0700000000000000        	dq 7
   114 00000047 737472696E673F          	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x3F
   115                                  	; L_constants + 78:
   116 0000004E 03                      	db T_string	; "interned-symbol?"
   117 0000004F 1000000000000000        	dq 16
   118 00000057 696E7465726E6564        	db 0x69, 0x6E, 0x74, 0x65, 0x72, 0x6E, 0x65, 0x64
   119 0000005F 2D73796D626F6C3F        	db 0x2D, 0x73, 0x79, 0x6D, 0x62, 0x6F, 0x6C, 0x3F
   120                                  	; L_constants + 103:
   121 00000067 03                      	db T_string	; "vector?"
   122 00000068 0700000000000000        	dq 7
   123 00000070 766563746F723F          	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x3F
   124                                  	; L_constants + 119:
   125 00000077 03                      	db T_string	; "procedure?"
   126 00000078 0A00000000000000        	dq 10
   127 00000080 70726F6365647572        	db 0x70, 0x72, 0x6F, 0x63, 0x65, 0x64, 0x75, 0x72
   128 00000088 653F                    	db 0x65, 0x3F
   129                                  	; L_constants + 138:
   130 0000008A 03                      	db T_string	; "real?"
   131 0000008B 0500000000000000        	dq 5
   132 00000093 7265616C3F              	db 0x72, 0x65, 0x61, 0x6C, 0x3F
   133                                  	; L_constants + 152:
   134 00000098 03                      	db T_string	; "fraction?"
   135 00000099 0900000000000000        	dq 9
   136 000000A1 6672616374696F6E        	db 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E
   137 000000A9 3F                      	db 0x3F
   138                                  	; L_constants + 170:
   139 000000AA 03                      	db T_string	; "boolean?"
   140 000000AB 0800000000000000        	dq 8
   141 000000B3 626F6F6C65616E3F        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x3F
   142                                  	; L_constants + 187:
   143 000000BB 03                      	db T_string	; "number?"
   144 000000BC 0700000000000000        	dq 7
   145 000000C4 6E756D6265723F          	db 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72, 0x3F
   146                                  	; L_constants + 203:
   147 000000CB 03                      	db T_string	; "collection?"
   148 000000CC 0B00000000000000        	dq 11
   149 000000D4 636F6C6C65637469        	db 0x63, 0x6F, 0x6C, 0x6C, 0x65, 0x63, 0x74, 0x69
   150 000000DC 6F6E3F                  	db 0x6F, 0x6E, 0x3F
   151                                  	; L_constants + 223:
   152 000000DF 03                      	db T_string	; "cons"
   153 000000E0 0400000000000000        	dq 4
   154 000000E8 636F6E73                	db 0x63, 0x6F, 0x6E, 0x73
   155                                  	; L_constants + 236:
   156 000000EC 03                      	db T_string	; "display-sexpr"
   157 000000ED 0D00000000000000        	dq 13
   158 000000F5 646973706C61792D        	db 0x64, 0x69, 0x73, 0x70, 0x6C, 0x61, 0x79, 0x2D
   159 000000FD 7365787072              	db 0x73, 0x65, 0x78, 0x70, 0x72
   160                                  	; L_constants + 258:
   161 00000102 03                      	db T_string	; "write-char"
   162 00000103 0A00000000000000        	dq 10
   163 0000010B 77726974652D6368        	db 0x77, 0x72, 0x69, 0x74, 0x65, 0x2D, 0x63, 0x68
   164 00000113 6172                    	db 0x61, 0x72
   165                                  	; L_constants + 277:
   166 00000115 03                      	db T_string	; "car"
   167 00000116 0300000000000000        	dq 3
   168 0000011E 636172                  	db 0x63, 0x61, 0x72
   169                                  	; L_constants + 289:
   170 00000121 03                      	db T_string	; "cdr"
   171 00000122 0300000000000000        	dq 3
   172 0000012A 636472                  	db 0x63, 0x64, 0x72
   173                                  	; L_constants + 301:
   174 0000012D 03                      	db T_string	; "string-length"
   175 0000012E 0D00000000000000        	dq 13
   176 00000136 737472696E672D6C        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x6C
   177 0000013E 656E677468              	db 0x65, 0x6E, 0x67, 0x74, 0x68
   178                                  	; L_constants + 323:
   179 00000143 03                      	db T_string	; "vector-length"
   180 00000144 0D00000000000000        	dq 13
   181 0000014C 766563746F722D6C        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x6C
   182 00000154 656E677468              	db 0x65, 0x6E, 0x67, 0x74, 0x68
   183                                  	; L_constants + 345:
   184 00000159 03                      	db T_string	; "real->integer"
   185 0000015A 0D00000000000000        	dq 13
   186 00000162 7265616C2D3E696E        	db 0x72, 0x65, 0x61, 0x6C, 0x2D, 0x3E, 0x69, 0x6E
   187 0000016A 7465676572              	db 0x74, 0x65, 0x67, 0x65, 0x72
   188                                  	; L_constants + 367:
   189 0000016F 03                      	db T_string	; "exit"
   190 00000170 0400000000000000        	dq 4
   191 00000178 65786974                	db 0x65, 0x78, 0x69, 0x74
   192                                  	; L_constants + 380:
   193 0000017C 03                      	db T_string	; "integer->real"
   194 0000017D 0D00000000000000        	dq 13
   195 00000185 696E74656765722D        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x2D
   196 0000018D 3E7265616C              	db 0x3E, 0x72, 0x65, 0x61, 0x6C
   197                                  	; L_constants + 402:
   198 00000192 03                      	db T_string	; "fraction->real"
   199 00000193 0E00000000000000        	dq 14
   200 0000019B 6672616374696F6E        	db 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E
   201 000001A3 2D3E7265616C            	db 0x2D, 0x3E, 0x72, 0x65, 0x61, 0x6C
   202                                  	; L_constants + 425:
   203 000001A9 03                      	db T_string	; "char->integer"
   204 000001AA 0D00000000000000        	dq 13
   205 000001B2 636861722D3E696E        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x3E, 0x69, 0x6E
   206 000001BA 7465676572              	db 0x74, 0x65, 0x67, 0x65, 0x72
   207                                  	; L_constants + 447:
   208 000001BF 03                      	db T_string	; "integer->char"
   209 000001C0 0D00000000000000        	dq 13
   210 000001C8 696E74656765722D        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x2D
   211 000001D0 3E63686172              	db 0x3E, 0x63, 0x68, 0x61, 0x72
   212                                  	; L_constants + 469:
   213 000001D5 03                      	db T_string	; "trng"
   214 000001D6 0400000000000000        	dq 4
   215 000001DE 74726E67                	db 0x74, 0x72, 0x6E, 0x67
   216                                  	; L_constants + 482:
   217 000001E2 03                      	db T_string	; "zero?"
   218 000001E3 0500000000000000        	dq 5
   219 000001EB 7A65726F3F              	db 0x7A, 0x65, 0x72, 0x6F, 0x3F
   220                                  	; L_constants + 496:
   221 000001F0 03                      	db T_string	; "integer?"
   222 000001F1 0800000000000000        	dq 8
   223 000001F9 696E74656765723F        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x3F
   224                                  	; L_constants + 513:
   225 00000201 03                      	db T_string	; "__bin-apply"
   226 00000202 0B00000000000000        	dq 11
   227 0000020A 5F5F62696E2D6170        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x70
   228 00000212 706C79                  	db 0x70, 0x6C, 0x79
   229                                  	; L_constants + 533:
   230 00000215 03                      	db T_string	; "__bin-add-rr"
   231 00000216 0C00000000000000        	dq 12
   232 0000021E 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   233 00000226 642D7272                	db 0x64, 0x2D, 0x72, 0x72
   234                                  	; L_constants + 554:
   235 0000022A 03                      	db T_string	; "__bin-sub-rr"
   236 0000022B 0C00000000000000        	dq 12
   237 00000233 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   238 0000023B 622D7272                	db 0x62, 0x2D, 0x72, 0x72
   239                                  	; L_constants + 575:
   240 0000023F 03                      	db T_string	; "__bin-mul-rr"
   241 00000240 0C00000000000000        	dq 12
   242 00000248 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   243 00000250 6C2D7272                	db 0x6C, 0x2D, 0x72, 0x72
   244                                  	; L_constants + 596:
   245 00000254 03                      	db T_string	; "__bin-div-rr"
   246 00000255 0C00000000000000        	dq 12
   247 0000025D 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   248 00000265 762D7272                	db 0x76, 0x2D, 0x72, 0x72
   249                                  	; L_constants + 617:
   250 00000269 03                      	db T_string	; "__bin-add-qq"
   251 0000026A 0C00000000000000        	dq 12
   252 00000272 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   253 0000027A 642D7171                	db 0x64, 0x2D, 0x71, 0x71
   254                                  	; L_constants + 638:
   255 0000027E 03                      	db T_string	; "__bin-sub-qq"
   256 0000027F 0C00000000000000        	dq 12
   257 00000287 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   258 0000028F 622D7171                	db 0x62, 0x2D, 0x71, 0x71
   259                                  	; L_constants + 659:
   260 00000293 03                      	db T_string	; "__bin-mul-qq"
   261 00000294 0C00000000000000        	dq 12
   262 0000029C 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   263 000002A4 6C2D7171                	db 0x6C, 0x2D, 0x71, 0x71
   264                                  	; L_constants + 680:
   265 000002A8 03                      	db T_string	; "__bin-div-qq"
   266 000002A9 0C00000000000000        	dq 12
   267 000002B1 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   268 000002B9 762D7171                	db 0x76, 0x2D, 0x71, 0x71
   269                                  	; L_constants + 701:
   270 000002BD 03                      	db T_string	; "__bin-add-zz"
   271 000002BE 0C00000000000000        	dq 12
   272 000002C6 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   273 000002CE 642D7A7A                	db 0x64, 0x2D, 0x7A, 0x7A
   274                                  	; L_constants + 722:
   275 000002D2 03                      	db T_string	; "__bin-sub-zz"
   276 000002D3 0C00000000000000        	dq 12
   277 000002DB 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   278 000002E3 622D7A7A                	db 0x62, 0x2D, 0x7A, 0x7A
   279                                  	; L_constants + 743:
   280 000002E7 03                      	db T_string	; "__bin-mul-zz"
   281 000002E8 0C00000000000000        	dq 12
   282 000002F0 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   283 000002F8 6C2D7A7A                	db 0x6C, 0x2D, 0x7A, 0x7A
   284                                  	; L_constants + 764:
   285 000002FC 03                      	db T_string	; "__bin-div-zz"
   286 000002FD 0C00000000000000        	dq 12
   287 00000305 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   288 0000030D 762D7A7A                	db 0x76, 0x2D, 0x7A, 0x7A
   289                                  	; L_constants + 785:
   290 00000311 03                      	db T_string	; "error"
   291 00000312 0500000000000000        	dq 5
   292 0000031A 6572726F72              	db 0x65, 0x72, 0x72, 0x6F, 0x72
   293                                  	; L_constants + 799:
   294 0000031F 03                      	db T_string	; "__bin-less-than-rr"
   295 00000320 1200000000000000        	dq 18
   296 00000328 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   297 00000330 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   298 00000338 7272                    	db 0x72, 0x72
   299                                  	; L_constants + 826:
   300 0000033A 03                      	db T_string	; "__bin-less-than-qq"
   301 0000033B 1200000000000000        	dq 18
   302 00000343 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   303 0000034B 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   304 00000353 7171                    	db 0x71, 0x71
   305                                  	; L_constants + 853:
   306 00000355 03                      	db T_string	; "__bin-less-than-zz"
   307 00000356 1200000000000000        	dq 18
   308 0000035E 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   309 00000366 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   310 0000036E 7A7A                    	db 0x7A, 0x7A
   311                                  	; L_constants + 880:
   312 00000370 03                      	db T_string	; "__bin-equal-rr"
   313 00000371 0E00000000000000        	dq 14
   314 00000379 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   315 00000381 75616C2D7272            	db 0x75, 0x61, 0x6C, 0x2D, 0x72, 0x72
   316                                  	; L_constants + 903:
   317 00000387 03                      	db T_string	; "__bin-equal-qq"
   318 00000388 0E00000000000000        	dq 14
   319 00000390 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   320 00000398 75616C2D7171            	db 0x75, 0x61, 0x6C, 0x2D, 0x71, 0x71
   321                                  	; L_constants + 926:
   322 0000039E 03                      	db T_string	; "__bin-equal-zz"
   323 0000039F 0E00000000000000        	dq 14
   324 000003A7 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   325 000003AF 75616C2D7A7A            	db 0x75, 0x61, 0x6C, 0x2D, 0x7A, 0x7A
   326                                  	; L_constants + 949:
   327 000003B5 03                      	db T_string	; "quotient"
   328 000003B6 0800000000000000        	dq 8
   329 000003BE 71756F7469656E74        	db 0x71, 0x75, 0x6F, 0x74, 0x69, 0x65, 0x6E, 0x74
   330                                  	; L_constants + 966:
   331 000003C6 03                      	db T_string	; "remainder"
   332 000003C7 0900000000000000        	dq 9
   333 000003CF 72656D61696E6465        	db 0x72, 0x65, 0x6D, 0x61, 0x69, 0x6E, 0x64, 0x65
   334 000003D7 72                      	db 0x72
   335                                  	; L_constants + 984:
   336 000003D8 03                      	db T_string	; "set-car!"
   337 000003D9 0800000000000000        	dq 8
   338 000003E1 7365742D63617221        	db 0x73, 0x65, 0x74, 0x2D, 0x63, 0x61, 0x72, 0x21
   339                                  	; L_constants + 1001:
   340 000003E9 03                      	db T_string	; "set-cdr!"
   341 000003EA 0800000000000000        	dq 8
   342 000003F2 7365742D63647221        	db 0x73, 0x65, 0x74, 0x2D, 0x63, 0x64, 0x72, 0x21
   343                                  	; L_constants + 1018:
   344 000003FA 03                      	db T_string	; "string-ref"
   345 000003FB 0A00000000000000        	dq 10
   346 00000403 737472696E672D72        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x72
   347 0000040B 6566                    	db 0x65, 0x66
   348                                  	; L_constants + 1037:
   349 0000040D 03                      	db T_string	; "vector-ref"
   350 0000040E 0A00000000000000        	dq 10
   351 00000416 766563746F722D72        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x72
   352 0000041E 6566                    	db 0x65, 0x66
   353                                  	; L_constants + 1056:
   354 00000420 03                      	db T_string	; "vector-set!"
   355 00000421 0B00000000000000        	dq 11
   356 00000429 766563746F722D73        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x73
   357 00000431 657421                  	db 0x65, 0x74, 0x21
   358                                  	; L_constants + 1076:
   359 00000434 03                      	db T_string	; "string-set!"
   360 00000435 0B00000000000000        	dq 11
   361 0000043D 737472696E672D73        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x73
   362 00000445 657421                  	db 0x65, 0x74, 0x21
   363                                  	; L_constants + 1096:
   364 00000448 03                      	db T_string	; "make-vector"
   365 00000449 0B00000000000000        	dq 11
   366 00000451 6D616B652D766563        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x76, 0x65, 0x63
   367 00000459 746F72                  	db 0x74, 0x6F, 0x72
   368                                  	; L_constants + 1116:
   369 0000045C 03                      	db T_string	; "make-string"
   370 0000045D 0B00000000000000        	dq 11
   371 00000465 6D616B652D737472        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x73, 0x74, 0x72
   372 0000046D 696E67                  	db 0x69, 0x6E, 0x67
   373                                  	; L_constants + 1136:
   374 00000470 03                      	db T_string	; "numerator"
   375 00000471 0900000000000000        	dq 9
   376 00000479 6E756D657261746F        	db 0x6E, 0x75, 0x6D, 0x65, 0x72, 0x61, 0x74, 0x6F
   377 00000481 72                      	db 0x72
   378                                  	; L_constants + 1154:
   379 00000482 03                      	db T_string	; "denominator"
   380 00000483 0B00000000000000        	dq 11
   381 0000048B 64656E6F6D696E61        	db 0x64, 0x65, 0x6E, 0x6F, 0x6D, 0x69, 0x6E, 0x61
   382 00000493 746F72                  	db 0x74, 0x6F, 0x72
   383                                  	; L_constants + 1174:
   384 00000496 03                      	db T_string	; "eq?"
   385 00000497 0300000000000000        	dq 3
   386 0000049F 65713F                  	db 0x65, 0x71, 0x3F
   387                                  	; L_constants + 1186:
   388 000004A2 03                      	db T_string	; "__integer-to-fracti...
   389 000004A3 1500000000000000        	dq 21
   390 000004AB 5F5F696E74656765        	db 0x5F, 0x5F, 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65
   391 000004B3 722D746F2D667261        	db 0x72, 0x2D, 0x74, 0x6F, 0x2D, 0x66, 0x72, 0x61
   392 000004BB 6374696F6E              	db 0x63, 0x74, 0x69, 0x6F, 0x6E
   393                                  	; L_constants + 1216:
   394 000004C0 03                      	db T_string	; "logand"
   395 000004C1 0600000000000000        	dq 6
   396 000004C9 6C6F67616E64            	db 0x6C, 0x6F, 0x67, 0x61, 0x6E, 0x64
   397                                  	; L_constants + 1231:
   398 000004CF 03                      	db T_string	; "logor"
   399 000004D0 0500000000000000        	dq 5
   400 000004D8 6C6F676F72              	db 0x6C, 0x6F, 0x67, 0x6F, 0x72
   401                                  	; L_constants + 1245:
   402 000004DD 03                      	db T_string	; "logxor"
   403 000004DE 0600000000000000        	dq 6
   404 000004E6 6C6F67786F72            	db 0x6C, 0x6F, 0x67, 0x78, 0x6F, 0x72
   405                                  	; L_constants + 1260:
   406 000004EC 03                      	db T_string	; "lognot"
   407 000004ED 0600000000000000        	dq 6
   408 000004F5 6C6F676E6F74            	db 0x6C, 0x6F, 0x67, 0x6E, 0x6F, 0x74
   409                                  	; L_constants + 1275:
   410 000004FB 03                      	db T_string	; "ash"
   411 000004FC 0300000000000000        	dq 3
   412 00000504 617368                  	db 0x61, 0x73, 0x68
   413                                  	; L_constants + 1287:
   414 00000507 03                      	db T_string	; "symbol?"
   415 00000508 0700000000000000        	dq 7
   416 00000510 73796D626F6C3F          	db 0x73, 0x79, 0x6D, 0x62, 0x6F, 0x6C, 0x3F
   417                                  	; L_constants + 1303:
   418 00000517 03                      	db T_string	; "uninterned-symbol?"
   419 00000518 1200000000000000        	dq 18
   420 00000520 756E696E7465726E        	db 0x75, 0x6E, 0x69, 0x6E, 0x74, 0x65, 0x72, 0x6E
   421 00000528 65642D73796D626F        	db 0x65, 0x64, 0x2D, 0x73, 0x79, 0x6D, 0x62, 0x6F
   422 00000530 6C3F                    	db 0x6C, 0x3F
   423                                  	; L_constants + 1330:
   424 00000532 03                      	db T_string	; "gensym?"
   425 00000533 0700000000000000        	dq 7
   426 0000053B 67656E73796D3F          	db 0x67, 0x65, 0x6E, 0x73, 0x79, 0x6D, 0x3F
   427                                  	; L_constants + 1346:
   428 00000542 03                      	db T_string	; "gensym"
   429 00000543 0600000000000000        	dq 6
   430 0000054B 67656E73796D            	db 0x67, 0x65, 0x6E, 0x73, 0x79, 0x6D
   431                                  	; L_constants + 1361:
   432 00000551 03                      	db T_string	; "frame"
   433 00000552 0500000000000000        	dq 5
   434 0000055A 6672616D65              	db 0x66, 0x72, 0x61, 0x6D, 0x65
   435                                  	; L_constants + 1375:
   436 0000055F 03                      	db T_string	; "break"
   437 00000560 0500000000000000        	dq 5
   438 00000568 627265616B              	db 0x62, 0x72, 0x65, 0x61, 0x6B
   439                                  	; L_constants + 1389:
   440 0000056D 03                      	db T_string	; "boolean-false?"
   441 0000056E 0E00000000000000        	dq 14
   442 00000576 626F6F6C65616E2D        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x2D
   443 0000057E 66616C73653F            	db 0x66, 0x61, 0x6C, 0x73, 0x65, 0x3F
   444                                  	; L_constants + 1412:
   445 00000584 03                      	db T_string	; "boolean-true?"
   446 00000585 0D00000000000000        	dq 13
   447 0000058D 626F6F6C65616E2D        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x2D
   448 00000595 747275653F              	db 0x74, 0x72, 0x75, 0x65, 0x3F
   449                                  	; L_constants + 1434:
   450 0000059A 03                      	db T_string	; "primitive?"
   451 0000059B 0A00000000000000        	dq 10
   452 000005A3 7072696D69746976        	db 0x70, 0x72, 0x69, 0x6D, 0x69, 0x74, 0x69, 0x76
   453 000005AB 653F                    	db 0x65, 0x3F
   454                                  	; L_constants + 1453:
   455 000005AD 03                      	db T_string	; "length"
   456 000005AE 0600000000000000        	dq 6
   457 000005B6 6C656E677468            	db 0x6C, 0x65, 0x6E, 0x67, 0x74, 0x68
   458                                  	; L_constants + 1468:
   459 000005BC 03                      	db T_string	; "make-list"
   460 000005BD 0900000000000000        	dq 9
   461 000005C5 6D616B652D6C6973        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x6C, 0x69, 0x73
   462 000005CD 74                      	db 0x74
   463                                  	; L_constants + 1486:
   464 000005CE 03                      	db T_string	; "return"
   465 000005CF 0600000000000000        	dq 6
   466 000005D7 72657475726E            	db 0x72, 0x65, 0x74, 0x75, 0x72, 0x6E
   467                                  	; L_constants + 1501:
   468 000005DD 11                      	db T_integer	; 10
   469 000005DE 0A00000000000000        	dq 10
   470                                  	; L_constants + 1510:
   471 000005E6 11                      	db T_integer	; 20
   472 000005E7 1400000000000000        	dq 20
   473                                  	; L_constants + 1519:
   474 000005EF 11                      	db T_integer	; 30
   475 000005F0 1E00000000000000        	dq 30
   476                                  	; L_constants + 1528:
   477 000005F8 11                      	db T_integer	; 40
   478 000005F9 2800000000000000        	dq 40
   479                                  
   480                                  
   481                                  extern printf, fprintf, stdout, stderr, fwrite, exit, putchar, getchar
   482                                  global main
   483                                  section .text
   484                                  main:
   485 00000000 C8000000                        enter 0, 0
   486 00000004 6A00                            push 0
   487 00000006 6A00                            push 0
   488 00000008 68[5B010000]                    push Lend
   489 0000000D C8000000                        enter 0, 0
   490                                  
   491                                  	; preparing a non-tail-call
   492 00000011 48B8-                   	mov rax, L_constants + 1528
   492 00000013 [F805000000000000] 
   493 0000001B 50                      	push rax
   494 0000001C 48B8-                   	mov rax, L_constants + 1519
   494 0000001E [EF05000000000000] 
   495 00000026 50                      	push rax
   496 00000027 48B8-                   	mov rax, L_constants + 1510
   496 00000029 [E605000000000000] 
   497 00000031 50                      	push rax
   498 00000032 48B8-                   	mov rax, L_constants + 1501
   498 00000034 [DD05000000000000] 
   499 0000003C 50                      	push rax
   500 0000003D 6A04                    	push 4	; arg count
   501 0000003F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   502 00000044 E87D020000              	call malloc
   503 00000049 50                      	push rax
   504 0000004A BF00000000              	mov rdi, 8 * 0	; new rib
   505 0000004F E872020000              	call malloc
   506 00000054 50                      	push rax
   507 00000055 BF08000000              	mov rdi, 8 * 1	; extended env
   508 0000005A E867020000              	call malloc
   509 0000005F 488B7D10                	mov rdi, ENV
   510 00000063 BE00000000              	mov rsi, 0
   511 00000068 BA01000000              	mov rdx, 1
   512                                  .L_lambda_opt_env_loop_0001:	; ext_env[i + 1] <-- env[i]
   513 0000006D 4883FE00                	cmp rsi, 0
   514 00000071 7410                    	je .L_lambda_opt_env_end_0001
   515 00000073 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
   516 00000077 48890CD0                	mov qword [rax + 8 * rdx], rcx
   517 0000007B 48FFC6                  	inc rsi
   518 0000007E 48FFC2                  	inc rdx
   519 00000081 EBEA                    	jmp .L_lambda_opt_env_loop_0001
   520                                  .L_lambda_opt_env_end_0001:
   521 00000083 5B                      	pop rbx
   522 00000084 BE00000000              	mov rsi, 0
   523                                  .L_lambda_opt_params_loop_0001:	; copy params
   524 00000089 4883FE00                	cmp rsi, 0
   525 0000008D 740E                    	je .L_lambda_opt_params_end_0001
   526 0000008F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   527 00000094 488914F3                	mov qword [rbx + 8 * rsi], rdx
   528 00000098 48FFC6                  	inc rsi
   529 0000009B EBEC                    	jmp .L_lambda_opt_params_loop_0001
   530                                  .L_lambda_opt_params_end_0001:
   531 0000009D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   532 000000A0 4889C3                  	mov rbx, rax
   533 000000A3 58                      	pop rax
   534 000000A4 C60004                  	mov byte [rax], T_closure
   535 000000A7 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   536 000000AB 48C74009[B8000000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0001
   537 000000B3 E994000000              	jmp .L_lambda_opt_end_0001
   538                                  .L_lambda_opt_code_0001:
   539                                  	; Load number of arguments from stack into r10
   540 000000B8 4C8B542410              	mov r10, qword [rsp + 8 * 2]         ; Total number of arguments into r10
   541 000000BD 4983FA02                	cmp r10, 2         ; Compare r10 (argument count) with required params
   542 000000C1 740D                    	je .L_lambda_opt_arity_check_exact_0001	; Jump if arity matches
   543 000000C3 7F1F                    	jg .L_lambda_opt_arity_check_more_0001	; Jump if more arguments passed
   544                                  	; If no match, jump to error
   545 000000C5 FF742410                	push qword [rsp + 8 * 2]	; Push actual argument count
   546 000000C9 6A02                    	push 2
   547 000000CB E9C3010000              	jmp L_error_incorrect_arity_opt
   548                                  .L_lambda_opt_arity_check_exact_0001:
   549                                  	; Exact match case: Add an empty list for optional arguments
   550 000000D0 4883EC08                	sub rsp, 8 * 1	; Allocate space for the empty list
   551 000000D4 48C70424[01000000]      	mov qword [rsp], sob_nil	; Place the empty list on the stack
   552 000000DC 488344241001            	add qword [rsp + 8 * 2], 1	; Increment the argument count (n)
   553 000000E2 EB5C                    	jmp .L_lambda_opt_stack_adjusted_0001
   554                                  .L_lambda_opt_arity_check_more_0001:
   555                                  	; Handle extra arguments by creating a list and adjusting the stack
   556 000000E4 4983EA02                	sub r10, 2         ; Calculate number of extra arguments
   557 000000E8 4C89D3                  	mov rbx, r10                         ; Save the number of extra arguments in rbx
   558 000000EB 488D4C2420              	lea rcx, [rsp + 8 * 4] ; rcx points to the first extra argument on the stack
   559 000000F0 48BA-                   	mov rdx, sob_nil                     ; Initialize rdx to nil for building the list
   559 000000F2 [0100000000000000] 
   560                                  .L_lambda_opt_stack_shrink_loop_0001:
   561 000000FA 4883FB00                	cmp rbx, 0                           ; Check if there are more arguments to process
   562 000000FE 744C                    	je .L_lambda_opt_end_0001               ; If no more arguments, finish the list
   563 00000100 488B39                  	mov rdi, qword [rcx]                 ; Load the current argument into rdi
   564 00000103 4883C108                	add rcx, 8                          ; Move rcx to the next argument (lower on the stack)
   565 00000107 4989C0                  	mov r8, rax                         ; Save closure in r8
   566 0000010A BF11000000              	mov rdi, (1 + 8 + 8)                ; Allocate memory for the new pair (T_PAIR + CAR + CDR)
   567 0000010F E8B2010000              	call malloc                         ; Allocate memory, result in rax
   568 00000114 C60021                  	mov byte [rax], T_pair              ; Mark as a pair
   569 00000117 48897801                	mov SOB_PAIR_CAR(rax), rdi          ; CAR: current argument
   570 0000011B 48895009                	mov SOB_PAIR_CDR(rax), rdx          ; CDR: current list
   571 0000011F 4889C2                  	mov rdx, rax                        ; Update rdx to point to the new list
   572 00000122 4C89C0                  	mov rax, r8                         ; Restore closure from r8 to rax
   573 00000125 48FFCB                  	dec rbx                              ; Decrement the counter
   574 00000128 4883FB00                	cmp rbx, 0                           ; Check if rbx (counter) is zero
   575 0000012C 75CC                    	jne .L_lambda_opt_stack_shrink_loop_0001               ; If not zero, continue processing the next argument
   576                                  	; Place the created list in the correct location on the stack
   577 0000012E 4889542430              	mov qword [rsp + 8 * (4 + 2)], rdx ; Store the list in the variadic parameter slot
   578                                  	; Update the argument count to reflect the adjusted stack
   579 00000133 41BA03000000            	mov r10, 3         ; Set r10 to the updated argument count (required params + 1)
   580 00000139 4C89542418              	mov qword [rsp + 8 * 3], r10        ; Update the argument count on the stack
   581 0000013E EB00                    	jmp .L_lambda_opt_stack_adjusted_0001               ; Continue to the next stage
   582                                  .L_lambda_opt_stack_adjusted_0001:
   583 00000140 C8000000                	enter 0, 0
   584 00000144 488B4530                	mov rax, PARAM(2)	; param c
   585 00000148 C9                      	leave
   586 00000149 C22000                  	ret AND_KILL_FRAME(2)
   587                                  .L_lambda_opt_end_0001:	; new closure is in rax
   588 0000014C 803804                  	cmp byte [rax], T_closure
   589 0000014F 0F85C8000000            	jne L_error_non_closure
   590 00000155 FF7001                  	push SOB_CLOSURE_ENV(rax)
   591 00000158 FF5009                  	call SOB_CLOSURE_CODE(rax)
   592                                  Lend:
   593 0000015B 4889C7                  	mov rdi, rax
   594 0000015E E8B8030000              	call print_sexpr_if_not_void
   595                                  
   596 00000163 48BF-                           mov rdi, fmt_memory_usage
   596 00000165 [9906000000000000] 
   597 0000016D 488B3425[1F070000]              mov rsi, qword [top_of_memory]
   598 00000175 4881EE[00000000]                sub rsi, memory
   599 0000017C B800000000                      mov rax, 0
   600                                          ENTER
    44 00000181 C8000000            <1>  enter 0, 0
    45 00000185 4883E4F0            <1>  and rsp, ~15
   601 00000189 E8(00000000)                    call printf
   602                                          LEAVE
    49 0000018E C9                  <1>  leave
   603 0000018F B800000000                      mov rax, 0
   604 00000194 E8(00000000)                    call exit
   605                                  
   606                                  L_error_fvar_undefined:
   607 00000199 50                              push rax
   608 0000019A 488B3C25[00000000]              mov rdi, qword [stderr]  ; destination
   609 000001A2 48BE-                           mov rsi, fmt_undefined_free_var_1
   609 000001A4 [0106000000000000] 
   610 000001AC B800000000                      mov rax, 0
   611                                          ENTER
    44 000001B1 C8000000            <1>  enter 0, 0
    45 000001B5 4883E4F0            <1>  and rsp, ~15
   612 000001B9 E8(00000000)                    call fprintf
   613                                          LEAVE
    49 000001BE C9                  <1>  leave
   614 000001BF 58                              pop rax
   615 000001C0 488B4001                        mov rax, qword [rax + 1] ; string
   616 000001C4 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
   617 000001C8 BE01000000                      mov rsi, 1               ; sizeof(char)
   618 000001CD 488B5001                        mov rdx, qword [rax + 1] ; string-length
   619 000001D1 488B0C25[00000000]              mov rcx, qword [stderr]  ; destination
   620 000001D9 B800000000                      mov rax, 0
   621                                          ENTER
    44 000001DE C8000000            <1>  enter 0, 0
    45 000001E2 4883E4F0            <1>  and rsp, ~15
   622 000001E6 E8(00000000)                    call fwrite
   623                                          LEAVE
    49 000001EB C9                  <1>  leave
   624 000001EC 488B3C25[00000000]              mov rdi, [stderr]       ; destination
   625 000001F4 48BE-                           mov rsi, fmt_undefined_free_var_2
   625 000001F6 [1806000000000000] 
   626 000001FE B800000000                      mov rax, 0
   627                                          ENTER
    44 00000203 C8000000            <1>  enter 0, 0
    45 00000207 4883E4F0            <1>  and rsp, ~15
   628 0000020B E8(00000000)                    call fprintf
   629                                          LEAVE
    49 00000210 C9                  <1>  leave
   630 00000211 48C7C0F6FFFFFF                  mov rax, -10
   631 00000218 E8(00000000)                    call exit
   632                                  
   633                                  L_error_non_closure:
   634 0000021D 488B3C25[00000000]              mov rdi, qword [stderr]
   635 00000225 48BE-                           mov rsi, fmt_non_closure
   635 00000227 [CF06000000000000] 
   636 0000022F B800000000                      mov rax, 0
   637                                          ENTER
    44 00000234 C8000000            <1>  enter 0, 0
    45 00000238 4883E4F0            <1>  and rsp, ~15
   638 0000023C E8(00000000)                    call fprintf
   639                                          LEAVE
    49 00000241 C9                  <1>  leave
   640 00000242 48C7C0FEFFFFFF                  mov rax, -2
   641 00000249 E8(00000000)                    call exit
   642                                  
   643                                  L_error_improper_list:
   644 0000024E 488B3C25[00000000]      	mov rdi, qword [stderr]
   645 00000256 48BE-                   	mov rsi, fmt_error_improper_list
   645 00000258 [F706000000000000] 
   646 00000260 B800000000              	mov rax, 0
   647                                          ENTER
    44 00000265 C8000000            <1>  enter 0, 0
    45 00000269 4883E4F0            <1>  and rsp, ~15
   648 0000026D E8(00000000)            	call fprintf
   649                                          LEAVE
    49 00000272 C9                  <1>  leave
   650 00000273 48C7C0F9FFFFFF          	mov rax, -7
   651 0000027A E8(00000000)            	call exit
   652                                  
   653                                  L_error_incorrect_arity_simple:
   654 0000027F 488B3C25[00000000]              mov rdi, qword [stderr]
   655 00000287 48BE-                           mov rsi, fmt_incorrect_arity_simple
   655 00000289 [3A06000000000000] 
   656 00000291 EB12                            jmp L_error_incorrect_arity_common
   657                                  L_error_incorrect_arity_opt:
   658 00000293 488B3C25[00000000]              mov rdi, qword [stderr]
   659 0000029B 48BE-                           mov rsi, fmt_incorrect_arity_opt
   659 0000029D [6506000000000000] 
   660                                  L_error_incorrect_arity_common:
   661 000002A5 5A                              pop rdx
   662 000002A6 59                              pop rcx
   663 000002A7 B800000000                      mov rax, 0
   664                                          ENTER
    44 000002AC C8000000            <1>  enter 0, 0
    45 000002B0 4883E4F0            <1>  and rsp, ~15
   665 000002B4 E8(00000000)                    call fprintf
   666                                          LEAVE
    49 000002B9 C9                  <1>  leave
   667 000002BA 48C7C0FAFFFFFF                  mov rax, -6
   668 000002C1 E8(00000000)                    call exit
   669                                  
   670                                  section .data
   671                                  fmt_undefined_free_var_1:
   672 00000601 212121205468652066-             db `!!! The free variable \0`
   672 0000060A 726565207661726961-
   672 00000613 626C652000         
   673                                  fmt_undefined_free_var_2:
   674 00000618 207761732075736564-             db ` was used before it was defined.\n\0`
   674 00000621 206265666F72652069-
   674 0000062A 742077617320646566-
   674 00000633 696E65642E0A00     
   675                                  fmt_incorrect_arity_simple:
   676 0000063A 212121204578706563-             db `!!! Expected %ld arguments, but given %ld\n\0`
   676 00000643 74656420256C642061-
   676 0000064C 7267756D656E74732C-
   676 00000655 206275742067697665-
   676 0000065E 6E20256C640A00     
   677                                  fmt_incorrect_arity_opt:
   678 00000665 212121204578706563-             db `!!! Expected at least %ld arguments, but given %ld\n\0`
   678 0000066E 746564206174206C65-
   678 00000677 61737420256C642061-
   678 00000680 7267756D656E74732C-
   678 00000689 206275742067697665-
   678 00000692 6E20256C640A00     
   679                                  fmt_memory_usage:
   680 00000699 0A2121212055736564-             db `\n!!! Used %ld bytes of dynamically-allocated memory\n\n\0`
   680 000006A2 20256C642062797465-
   680 000006AB 73206F662064796E61-
   680 000006B4 6D6963616C6C792D61-
   680 000006BD 6C6C6F636174656420-
   680 000006C6 6D656D6F72790A0A00 
   681                                  fmt_non_closure:
   682 000006CF 21212120417474656D-             db `!!! Attempting to apply a non-closure!\n\0`
   682 000006D8 7074696E6720746F20-
   682 000006E1 6170706C792061206E-
   682 000006EA 6F6E2D636C6F737572-
   682 000006F3 65210A00           
   683                                  fmt_error_improper_list:
   684 000006F7 212121205468652061-     	db `!!! The argument is not a proper list!\n\0`
   684 00000700 7267756D656E742069-
   684 00000709 73206E6F7420612070-
   684 00000712 726F706572206C6973-
   684 0000071B 74210A00           
   685                                  
   686                                  section .bss
   687                                  memory:
   688 00000000 <res 40000000h>         	resb gbytes(1)
   689                                  
   690                                  section .data
   691                                  top_of_memory:
   692 0000071F [0000000000000000]              dq memory
   693                                  
   694                                  section .text
   695                                  malloc:
   696 000002C6 488B0425[1F070000]              mov rax, qword [top_of_memory]
   697 000002CE 48013C25[1F070000]              add qword [top_of_memory], rdi
   698 000002D6 C3                              ret
   699                                  
   700                                  L_code_ptr_return:
   701 000002D7 48837C241002            	cmp qword [rsp + 8*2], 2
   702 000002DD 0F856F1C0000            	jne L_error_arg_count_2
   703 000002E3 488B4C2418              	mov rcx, qword [rsp + 8*3]
   704                                  	assert_integer(rcx)
    53 000002E8 803911              <1>  cmp byte [%1], %2
    54 000002EB 0F85001D0000        <1>  jne L_error_incorrect_type
   705 000002F1 488B4901                	mov rcx, qword [rcx + 1]
   706 000002F5 4883F900                	cmp rcx, 0
   707 000002F9 0F8C871B0000            	jl L_error_integer_range
   708 000002FF 488B442420              	mov rax, qword [rsp + 8*4]
   709                                  .L0:
   710 00000304 4883F900                        cmp rcx, 0
   711 00000308 7409                            je .L1
   712 0000030A 488B6D00                	mov rbp, qword [rbp]
   713 0000030E 48FFC9                  	dec rcx
   714 00000311 7FF1                    	jg .L0
   715                                  .L1:
   716 00000313 4889EC                  	mov rsp, rbp
   717 00000316 5D                      	pop rbp
   718 00000317 5B                              pop rbx
   719 00000318 488B4C2408                      mov rcx, qword [rsp + 8*1]
   720 0000031D 488D64CC10                      lea rsp, [rsp + 8*rcx + 8*2]
   721 00000322 FFE3                    	jmp rbx
   722                                  
   723                                  L_code_ptr_make_list:
   724 00000324 C8000000                	enter 0, 0
   725 00000328 48837D1801                      cmp COUNT, 1
   726 0000032D 740C                            je .L0
   727 0000032F 48837D1802                      cmp COUNT, 2
   728 00000334 7411                            je .L1
   729 00000336 E94C1C0000                      jmp L_error_arg_count_12
   730                                  .L0:
   731 0000033B 49B9-                           mov r9, sob_void
   731 0000033D [0000000000000000] 
   732 00000345 EB04                            jmp .L2
   733                                  .L1:
   734 00000347 4C8B4D28                        mov r9, PARAM(1)
   735                                  .L2:
   736 0000034B 488B4D20                        mov rcx, PARAM(0)
   737                                          assert_integer(rcx)
    53 0000034F 803911              <1>  cmp byte [%1], %2
    54 00000352 0F85991C0000        <1>  jne L_error_incorrect_type
   738 00000358 488B4901                        mov rcx, qword [rcx + 1]
   739 0000035C 4883F900                        cmp rcx, 0
   740 00000360 0F8C511B0000                    jl L_error_arg_negative
   741 00000366 49B8-                           mov r8, sob_nil
   741 00000368 [0100000000000000] 
   742                                  .L3:
   743 00000370 4883F900                        cmp rcx, 0
   744 00000374 7E1D                            jle .L4
   745 00000376 BF11000000                      mov rdi, 1 + 8 + 8
   746 0000037B E846FFFFFF                      call malloc
   747 00000380 C60021                          mov byte [rax], T_pair
   748 00000383 4C894801                        mov qword [rax + 1], r9
   749 00000387 4C894009                        mov qword [rax + 1 + 8], r8
   750 0000038B 4989C0                          mov r8, rax
   751 0000038E 48FFC9                          dec rcx
   752 00000391 EBDD                            jmp .L3
   753                                  .L4:
   754 00000393 4C89C0                          mov rax, r8
   755 00000396 48837D1802                      cmp COUNT, 2
   756 0000039B 7404                            je .L5
   757 0000039D C9                              leave
   758 0000039E C21800                          ret AND_KILL_FRAME(1)
   759                                  .L5:
   760 000003A1 C9                      	leave
   761 000003A2 C22000                  	ret AND_KILL_FRAME(2)
   762                                  
   763                                  L_code_ptr_is_primitive:
   764 000003A5 C8000000                	enter 0, 0
   765 000003A9 48837D1801              	cmp COUNT, 1
   766 000003AE 0F85691B0000            	jne L_error_arg_count_1
   767 000003B4 488B4520                	mov rax, PARAM(0)
   768                                  	assert_closure(rax)
    53 000003B8 803804              <1>  cmp byte [%1], %2
    54 000003BB 0F85301C0000        <1>  jne L_error_incorrect_type
   769 000003C1 4883780100              	cmp SOB_CLOSURE_ENV(rax), 0
   770 000003C6 750C                    	jne .L_false
   771 000003C8 48B8-                   	mov rax, sob_boolean_true
   771 000003CA [0300000000000000] 
   772 000003D2 EB0A                    	jmp .L_end
   773                                  .L_false:
   774 000003D4 48B8-                   	mov rax, sob_boolean_false
   774 000003D6 [0200000000000000] 
   775                                  .L_end:
   776 000003DE C9                      	leave
   777 000003DF C21800                  	ret AND_KILL_FRAME(1)
   778                                  
   779                                  L_code_ptr_length:
   780 000003E2 C8000000                	enter 0, 0
   781 000003E6 48837D1801              	cmp COUNT, 1
   782 000003EB 0F852C1B0000            	jne L_error_arg_count_1
   783 000003F1 488B5D20                	mov rbx, PARAM(0)
   784 000003F5 BF00000000              	mov rdi, 0
   785                                  .L:
   786 000003FA 803B01                  	cmp byte [rbx], T_nil
   787 000003FD 7412                    	je .L_end
   788                                  	assert_pair(rbx)
    53 000003FF 803B21              <1>  cmp byte [%1], %2
    54 00000402 0F85E91B0000        <1>  jne L_error_incorrect_type
   789 00000408 488B5B09                	mov rbx, SOB_PAIR_CDR(rbx)
   790 0000040C 48FFC7                  	inc rdi
   791 0000040F EBE9                    	jmp .L
   792                                  .L_end:
   793 00000411 E8561A0000              	call make_integer
   794 00000416 C9                      	leave
   795 00000417 C21800                  	ret AND_KILL_FRAME(1)
   796                                  
   797                                  L_code_ptr_break:
   798 0000041A 48837C241000                    cmp qword [rsp + 8 * 2], 0
   799 00000420 0F85C21A0000                    jne L_error_arg_count_0
   800 00000426 CC                              int3
   801 00000427 48B8-                           mov rax, sob_void
   801 00000429 [0000000000000000] 
   802 00000431 C21000                          ret AND_KILL_FRAME(0)        
   803                                  
   804                                  L_code_ptr_frame:
   805 00000434 C8000000                        enter 0, 0
   806 00000438 48837D1800                      cmp COUNT, 0
   807 0000043D 0F85A51A0000                    jne L_error_arg_count_0
   808                                  
   809 00000443 48BF-                           mov rdi, fmt_frame
   809 00000445 [2707000000000000] 
   810 0000044D 488B7500                        mov rsi, qword [rbp]    ; old rbp
   811 00000451 488B5608                        mov rdx, qword [rsi + 8*1] ; ret addr
   812 00000455 488B4E10                        mov rcx, qword [rsi + 8*2] ; lexical environment
   813 00000459 4C8B4618                        mov r8, qword [rsi + 8*3] ; count
   814 0000045D 4C8D4E20                        lea r9, [rsi + 8*4]       ; address of argument 0
   815 00000461 6A00                            push 0
   816 00000463 4151                            push r9
   817 00000465 4150                            push r8                   ; we'll use it when printing the params
   818 00000467 B800000000                      mov rax, 0
   819                                          
   820                                          ENTER
    44 0000046C C8000000            <1>  enter 0, 0
    45 00000470 4883E4F0            <1>  and rsp, ~15
   821 00000474 E8(00000000)                    call printf
   822                                          LEAVE
    49 00000479 C9                  <1>  leave
   823                                  
   824                                  .L:
   825 0000047A 488B0C24                        mov rcx, qword [rsp]
   826 0000047E 4883F900                        cmp rcx, 0
   827 00000482 7467                            je .L_out
   828 00000484 48BF-                           mov rdi, fmt_frame_param_prefix
   828 00000486 [6007000000000000] 
   829 0000048E 488B742410                      mov rsi, qword [rsp + 8*2]
   830 00000493 B800000000                      mov rax, 0
   831                                          
   832                                          ENTER
    44 00000498 C8000000            <1>  enter 0, 0
    45 0000049C 4883E4F0            <1>  and rsp, ~15
   833 000004A0 E8(00000000)                    call printf
   834                                          LEAVE
    49 000004A5 C9                  <1>  leave
   835                                  
   836 000004A6 488B0C24                        mov rcx, qword [rsp]
   837 000004AA 48FFC9                          dec rcx
   838 000004AD 48890C24                        mov qword [rsp], rcx    ; dec arg count
   839 000004B1 48FF442410                      inc qword [rsp + 8*2]   ; increment index of current arg
   840 000004B6 488B7C2408                      mov rdi, qword [rsp + 8*1] ; addr of addr current arg
   841 000004BB 4C8D4F08                        lea r9, [rdi + 8]          ; addr of next arg
   842 000004BF 4C894C2408                      mov qword [rsp + 8*1], r9  ; backup addr of next arg
   843 000004C4 488B3F                          mov rdi, qword [rdi]       ; addr of current arg
   844 000004C7 E87B000000                      call print_sexpr
   845 000004CC 48BF-                           mov rdi, fmt_newline
   845 000004CE [8C07000000000000] 
   846 000004D6 B800000000                      mov rax, 0
   847                                          ENTER
    44 000004DB C8000000            <1>  enter 0, 0
    45 000004DF 4883E4F0            <1>  and rsp, ~15
   848 000004E3 E8(00000000)                    call printf
   849                                          LEAVE
    49 000004E8 C9                  <1>  leave
   850 000004E9 EB8F                            jmp .L
   851                                  .L_out:
   852 000004EB 48BF-                           mov rdi, fmt_frame_continue
   852 000004ED [7107000000000000] 
   853 000004F5 B800000000                      mov rax, 0
   854                                          ENTER
    44 000004FA C8000000            <1>  enter 0, 0
    45 000004FE 4883E4F0            <1>  and rsp, ~15
   855 00000502 E8(00000000)                    call printf
   856 00000507 E8(00000000)                    call getchar
   857                                          LEAVE
    49 0000050C C9                  <1>  leave
   858                                          
   859 0000050D 48B8-                           mov rax, sob_void
   859 0000050F [0000000000000000] 
   860 00000517 C9                              leave
   861 00000518 C21000                          ret AND_KILL_FRAME(0)
   862                                          
   863                                  print_sexpr_if_not_void:
   864 0000051B 4881FF[00000000]        	cmp rdi, sob_void
   865 00000522 7422                    	je .done
   866 00000524 E81E000000              	call print_sexpr
   867 00000529 48BF-                   	mov rdi, fmt_newline
   867 0000052B [8C07000000000000] 
   868 00000533 B800000000              	mov rax, 0
   869                                  	ENTER
    44 00000538 C8000000            <1>  enter 0, 0
    45 0000053C 4883E4F0            <1>  and rsp, ~15
   870 00000540 E8(00000000)            	call printf
   871                                  	LEAVE
    49 00000545 C9                  <1>  leave
   872                                  .done:
   873 00000546 C3                      	ret
   874                                  
   875                                  section .data
   876                                  fmt_frame:
   877 00000727 524250203D2025703B-             db `RBP = %p; ret addr = %p; lex env = %p; param count = %d\n\0`
   877 00000730 207265742061646472-
   877 00000739 203D2025703B206C65-
   877 00000742 7820656E76203D2025-
   877 0000074B 703B20706172616D20-
   877 00000754 636F756E74203D2025-
   877 0000075D 640A00             
   878                                  fmt_frame_param_prefix:
   879 00000760 3D3D5B706172616D20-             db `==[param %d]==> \0`
   879 00000769 25645D3D3D3E2000   
   880                                  fmt_frame_continue:
   881 00000771 486974203C456E7465-             db `Hit <Enter> to continue...\0`
   881 0000077A 723E20746F20636F6E-
   881 00000783 74696E75652E2E2E00 
   882                                  fmt_newline:
   883 0000078C 0A00                    	db `\n\0`
   884                                  fmt_void:
   885 0000078E 233C766F69643E00        	db `#<void>\0`
   886                                  fmt_nil:
   887 00000796 282900                  	db `()\0`
   888                                  fmt_boolean_false:
   889 00000799 236600                  	db `#f\0`
   890                                  fmt_boolean_true:
   891 0000079C 237400                  	db `#t\0`
   892                                  fmt_char_backslash:
   893 0000079F 235C5C00                	db `#\\\\\0`
   894                                  fmt_char_dquote:
   895 000007A3 235C2200                	db `#\\"\0`
   896                                  fmt_char_simple:
   897 000007A7 235C256300              	db `#\\%c\0`
   898                                  fmt_char_null:
   899 000007AC 235C6E756C00            	db `#\\nul\0`
   900                                  fmt_char_bell:
   901 000007B2 235C62656C6C00          	db `#\\bell\0`
   902                                  fmt_char_backspace:
   903 000007B9 235C6261636B737061-     	db `#\\backspace\0`
   903 000007C2 636500             
   904                                  fmt_char_tab:
   905 000007C5 235C74616200            	db `#\\tab\0`
   906                                  fmt_char_newline:
   907 000007CB 235C6E65776C696E65-     	db `#\\newline\0`
   907 000007D4 00                 
   908                                  fmt_char_formfeed:
   909 000007D5 235C7061676500          	db `#\\page\0`
   910                                  fmt_char_return:
   911 000007DC 235C72657475726E00      	db `#\\return\0`
   912                                  fmt_char_escape:
   913 000007E5 235C65736300            	db `#\\esc\0`
   914                                  fmt_char_space:
   915 000007EB 235C737061636500        	db `#\\space\0`
   916                                  fmt_char_hex:
   917 000007F3 235C782530325800        	db `#\\x%02X\0`
   918                                  fmt_gensym:
   919 000007FB 47256C6400                      db `G%ld\0`
   920                                  fmt_closure:
   921 00000800 233C636C6F73757265-     	db `#<closure at 0x%08X env=0x%08X code=0x%08X>\0`
   921 00000809 206174203078253038-
   921 00000812 5820656E763D307825-
   921 0000081B 30385820636F64653D-
   921 00000824 3078253038583E00   
   922                                  fmt_lparen:
   923 0000082C 2800                    	db `(\0`
   924                                  fmt_dotted_pair:
   925 0000082E 202E2000                	db ` . \0`
   926                                  fmt_rparen:
   927 00000832 2900                    	db `)\0`
   928                                  fmt_space:
   929 00000834 2000                    	db ` \0`
   930                                  fmt_empty_vector:
   931 00000836 23282900                	db `#()\0`
   932                                  fmt_vector:
   933 0000083A 232800                  	db `#(\0`
   934                                  fmt_real:
   935 0000083D 256600                  	db `%f\0`
   936                                  fmt_fraction:
   937 00000840 256C642F256C6400        	db `%ld/%ld\0`
   938                                  fmt_zero:
   939 00000848 3000                    	db `0\0`
   940                                  fmt_int:
   941 0000084A 256C6400                	db `%ld\0`
   942                                  fmt_unknown_scheme_object_error:
   943 0000084E 0A0A21212120457272-     	db `\n\n!!! Error: Unknown Scheme-object (RTTI 0x%02X) `
   943 00000857 6F723A20556E6B6E6F-
   943 00000860 776E20536368656D65-
   943 00000869 2D6F626A6563742028-
   943 00000872 525454492030782530-
   943 0000087B 32582920           
   944 0000087F 617420616464726573-     	db `at address 0x%08X\n\n\0`
   944 00000888 73203078253038580A-
   944 00000891 0A00               
   945                                  fmt_dquote:
   946 00000893 2200                    	db `\"\0`
   947                                  fmt_string_char:
   948 00000895 256300                          db `%c\0`
   949                                  fmt_string_char_7:
   950 00000898 5C6100                          db `\\a\0`
   951                                  fmt_string_char_8:
   952 0000089B 5C6200                          db `\\b\0`
   953                                  fmt_string_char_9:
   954 0000089E 5C7400                          db `\\t\0`
   955                                  fmt_string_char_10:
   956 000008A1 5C6E00                          db `\\n\0`
   957                                  fmt_string_char_11:
   958 000008A4 5C7600                          db `\\v\0`
   959                                  fmt_string_char_12:
   960 000008A7 5C6600                          db `\\f\0`
   961                                  fmt_string_char_13:
   962 000008AA 5C7200                          db `\\r\0`
   963                                  fmt_string_char_34:
   964 000008AD 5C2200                          db `\\"\0`
   965                                  fmt_string_char_92:
   966 000008B0 5C5C00                          db `\\\\\0`
   967                                  fmt_string_char_hex:
   968 000008B3 5C7825583B00                    db `\\x%X;\0`
   969                                  
   970                                  section .text
   971                                  
   972                                  print_sexpr:
   973 00000547 C8000000                	enter 0, 0
   974 0000054B 8A07                    	mov al, byte [rdi]
   975 0000054D 3C00                    	cmp al, T_void
   976 0000054F 7465                    	je .Lvoid
   977 00000551 3C01                    	cmp al, T_nil
   978 00000553 7470                    	je .Lnil
   979 00000555 3C09                    	cmp al, T_boolean_false
   980 00000557 747B                    	je .Lboolean_false
   981 00000559 3C0A                    	cmp al, T_boolean_true
   982 0000055B 0F8482000000            	je .Lboolean_true
   983 00000561 3C02                    	cmp al, T_char
   984 00000563 0F8489000000            	je .Lchar
   985 00000569 3C41                    	cmp al, T_interned_symbol
   986 0000056B 0F84BF010000            	je .Linterned_symbol
   987 00000571 3C42                            cmp al, T_uninterned_symbol
   988 00000573 0F84E3010000                    je .Luninterned_symbol
   989 00000579 3C21                    	cmp al, T_pair
   990 0000057B 0F84EE010000            	je .Lpair
   991 00000581 3C22                    	cmp al, T_vector
   992 00000583 0F84B7020000            	je .Lvector
   993 00000589 3C04                    	cmp al, T_closure
   994 0000058B 0F8485010000            	je .Lclosure
   995 00000591 3C13                    	cmp al, T_real
   996 00000593 0F8448030000            	je .Lreal
   997 00000599 3C12                    	cmp al, T_fraction
   998 0000059B 0F846E030000            	je .Lfraction
   999 000005A1 3C11                    	cmp al, T_integer
  1000 000005A3 0F84A7030000            	je .Linteger
  1001 000005A9 3C03                    	cmp al, T_string
  1002 000005AB 0F84B2030000            	je .Lstring
  1003                                  
  1004 000005B1 E9DC040000              	jmp .Lunknown_sexpr_type
  1005                                  
  1006                                  .Lvoid:
  1007 000005B6 48BF-                   	mov rdi, fmt_void
  1007 000005B8 [8E07000000000000] 
  1008 000005C0 E900050000              	jmp .Lemit
  1009                                  
  1010                                  .Lnil:
  1011 000005C5 48BF-                   	mov rdi, fmt_nil
  1011 000005C7 [9607000000000000] 
  1012 000005CF E9F1040000              	jmp .Lemit
  1013                                  
  1014                                  .Lboolean_false:
  1015 000005D4 48BF-                   	mov rdi, fmt_boolean_false
  1015 000005D6 [9907000000000000] 
  1016 000005DE E9E2040000              	jmp .Lemit
  1017                                  
  1018                                  .Lboolean_true:
  1019 000005E3 48BF-                   	mov rdi, fmt_boolean_true
  1019 000005E5 [9C07000000000000] 
  1020 000005ED E9D3040000              	jmp .Lemit
  1021                                  
  1022                                  .Lchar:
  1023 000005F2 8A4701                  	mov al, byte [rdi + 1]
  1024 000005F5 3C20                    	cmp al, ' '
  1025 000005F7 7E20                    	jle .Lchar_whitespace
  1026 000005F9 3C5C                    	cmp al, 92 		; backslash
  1027 000005FB 7474                    	je .Lchar_backslash
  1028 000005FD 3C22                    	cmp al, '"'
  1029 000005FF 747F                    	je .Lchar_dquote
  1030 00000601 4825FF000000            	and rax, 255
  1031 00000607 48BF-                   	mov rdi, fmt_char_simple
  1031 00000609 [A707000000000000] 
  1032 00000611 4889C6                  	mov rsi, rax
  1033 00000614 E9AC040000              	jmp .Lemit
  1034                                  
  1035                                  .Lchar_whitespace:
  1036 00000619 3C00                    	cmp al, 0
  1037 0000061B 7472                    	je .Lchar_null
  1038 0000061D 3C07                    	cmp al, 7
  1039 0000061F 747D                    	je .Lchar_bell
  1040 00000621 3C08                    	cmp al, 8
  1041 00000623 0F8484000000            	je .Lchar_backspace
  1042 00000629 3C09                    	cmp al, 9
  1043 0000062B 0F848B000000            	je .Lchar_tab
  1044 00000631 3C0A                    	cmp al, 10
  1045 00000633 0F8492000000            	je .Lchar_newline
  1046 00000639 3C0C                    	cmp al, 12
  1047 0000063B 0F8499000000            	je .Lchar_formfeed
  1048 00000641 3C0D                    	cmp al, 13
  1049 00000643 0F84A0000000            	je .Lchar_return
  1050 00000649 3C1B                    	cmp al, 27
  1051 0000064B 0F84A7000000            	je .Lchar_escape
  1052 00000651 4825FF000000            	and rax, 255
  1053 00000657 3C20                    	cmp al, ' '
  1054 00000659 0F84A8000000            	je .Lchar_space
  1055 0000065F 48BF-                   	mov rdi, fmt_char_hex
  1055 00000661 [F307000000000000] 
  1056 00000669 4889C6                  	mov rsi, rax
  1057 0000066C E954040000              	jmp .Lemit	
  1058                                  
  1059                                  .Lchar_backslash:
  1060 00000671 48BF-                   	mov rdi, fmt_char_backslash
  1060 00000673 [9F07000000000000] 
  1061 0000067B E945040000              	jmp .Lemit
  1062                                  
  1063                                  .Lchar_dquote:
  1064 00000680 48BF-                   	mov rdi, fmt_char_dquote
  1064 00000682 [A307000000000000] 
  1065 0000068A E936040000              	jmp .Lemit
  1066                                  
  1067                                  .Lchar_null:
  1068 0000068F 48BF-                   	mov rdi, fmt_char_null
  1068 00000691 [AC07000000000000] 
  1069 00000699 E927040000              	jmp .Lemit
  1070                                  
  1071                                  .Lchar_bell:
  1072 0000069E 48BF-                   	mov rdi, fmt_char_bell
  1072 000006A0 [B207000000000000] 
  1073 000006A8 E918040000              	jmp .Lemit
  1074                                  
  1075                                  .Lchar_backspace:
  1076 000006AD 48BF-                   	mov rdi, fmt_char_backspace
  1076 000006AF [B907000000000000] 
  1077 000006B7 E909040000              	jmp .Lemit
  1078                                  
  1079                                  .Lchar_tab:
  1080 000006BC 48BF-                   	mov rdi, fmt_char_tab
  1080 000006BE [C507000000000000] 
  1081 000006C6 E9FA030000              	jmp .Lemit
  1082                                  
  1083                                  .Lchar_newline:
  1084 000006CB 48BF-                   	mov rdi, fmt_char_newline
  1084 000006CD [CB07000000000000] 
  1085 000006D5 E9EB030000              	jmp .Lemit
  1086                                  
  1087                                  .Lchar_formfeed:
  1088 000006DA 48BF-                   	mov rdi, fmt_char_formfeed
  1088 000006DC [D507000000000000] 
  1089 000006E4 E9DC030000              	jmp .Lemit
  1090                                  
  1091                                  .Lchar_return:
  1092 000006E9 48BF-                   	mov rdi, fmt_char_return
  1092 000006EB [DC07000000000000] 
  1093 000006F3 E9CD030000              	jmp .Lemit
  1094                                  
  1095                                  .Lchar_escape:
  1096 000006F8 48BF-                   	mov rdi, fmt_char_escape
  1096 000006FA [E507000000000000] 
  1097 00000702 E9BE030000              	jmp .Lemit
  1098                                  
  1099                                  .Lchar_space:
  1100 00000707 48BF-                   	mov rdi, fmt_char_space
  1100 00000709 [EB07000000000000] 
  1101 00000711 E9AF030000              	jmp .Lemit
  1102                                  
  1103                                  .Lclosure:
  1104 00000716 4889FE                  	mov rsi, qword rdi
  1105 00000719 48BF-                   	mov rdi, fmt_closure
  1105 0000071B [0008000000000000] 
  1106 00000723 488B5601                	mov rdx, SOB_CLOSURE_ENV(rsi)
  1107 00000727 488B4E09                	mov rcx, SOB_CLOSURE_CODE(rsi)
  1108 0000072B E995030000              	jmp .Lemit
  1109                                  
  1110                                  .Linterned_symbol:
  1111 00000730 488B7F01                	mov rdi, qword [rdi + 1] ; sob_string
  1112 00000734 BE01000000              	mov rsi, 1		 ; size = 1 byte
  1113 00000739 488B5701                	mov rdx, qword [rdi + 1] ; length
  1114 0000073D 488D7F09                	lea rdi, [rdi + 1 + 8]	 ; actual characters
  1115 00000741 488B0C25[00000000]      	mov rcx, qword [stdout]	 ; FILE *
  1116                                  	ENTER
    44 00000749 C8000000            <1>  enter 0, 0
    45 0000074D 4883E4F0            <1>  and rsp, ~15
  1117 00000751 E8(00000000)            	call fwrite
  1118                                  	LEAVE
    49 00000756 C9                  <1>  leave
  1119 00000757 E97E030000              	jmp .Lend
  1120                                  
  1121                                  .Luninterned_symbol:
  1122 0000075C 488B7701                        mov rsi, qword [rdi + 1] ; gensym counter
  1123 00000760 48BF-                           mov rdi, fmt_gensym
  1123 00000762 [FB07000000000000] 
  1124 0000076A E956030000                      jmp .Lemit
  1125                                  	
  1126                                  .Lpair:
  1127 0000076F 57                      	push rdi
  1128 00000770 48BF-                   	mov rdi, fmt_lparen
  1128 00000772 [2C08000000000000] 
  1129 0000077A B800000000              	mov rax, 0
  1130                                          ENTER
    44 0000077F C8000000            <1>  enter 0, 0
    45 00000783 4883E4F0            <1>  and rsp, ~15
  1131 00000787 E8(00000000)            	call printf
  1132                                          LEAVE
    49 0000078C C9                  <1>  leave
  1133 0000078D 488B3C24                	mov rdi, qword [rsp] 	; pair
  1134 00000791 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
  1135 00000795 E8ADFDFFFF              	call print_sexpr
  1136 0000079A 5F                      	pop rdi 		; pair
  1137 0000079B 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
  1138                                  .Lcdr:
  1139 0000079F 8A07                    	mov al, byte [rdi]
  1140 000007A1 3C01                    	cmp al, T_nil
  1141 000007A3 7447                    	je .Lcdr_nil
  1142 000007A5 3C21                    	cmp al, T_pair
  1143 000007A7 7462                    	je .Lcdr_pair
  1144 000007A9 57                      	push rdi
  1145 000007AA 48BF-                   	mov rdi, fmt_dotted_pair
  1145 000007AC [2E08000000000000] 
  1146 000007B4 B800000000              	mov rax, 0
  1147                                          ENTER
    44 000007B9 C8000000            <1>  enter 0, 0
    45 000007BD 4883E4F0            <1>  and rsp, ~15
  1148 000007C1 E8(00000000)            	call printf
  1149                                          LEAVE
    49 000007C6 C9                  <1>  leave
  1150 000007C7 5F                      	pop rdi
  1151 000007C8 E87AFDFFFF              	call print_sexpr
  1152 000007CD 48BF-                   	mov rdi, fmt_rparen
  1152 000007CF [3208000000000000] 
  1153 000007D7 B800000000              	mov rax, 0
  1154                                          ENTER
    44 000007DC C8000000            <1>  enter 0, 0
    45 000007E0 4883E4F0            <1>  and rsp, ~15
  1155 000007E4 E8(00000000)            	call printf
  1156                                          LEAVE
    49 000007E9 C9                  <1>  leave
  1157 000007EA C9                      	leave
  1158 000007EB C3                      	ret
  1159                                  
  1160                                  .Lcdr_nil:
  1161 000007EC 48BF-                   	mov rdi, fmt_rparen
  1161 000007EE [3208000000000000] 
  1162 000007F6 B800000000              	mov rax, 0
  1163                                          ENTER
    44 000007FB C8000000            <1>  enter 0, 0
    45 000007FF 4883E4F0            <1>  and rsp, ~15
  1164 00000803 E8(00000000)            	call printf
  1165                                          LEAVE
    49 00000808 C9                  <1>  leave
  1166 00000809 C9                      	leave
  1167 0000080A C3                      	ret
  1168                                  
  1169                                  .Lcdr_pair:
  1170 0000080B 57                      	push rdi
  1171 0000080C 48BF-                   	mov rdi, fmt_space
  1171 0000080E [3408000000000000] 
  1172 00000816 B800000000              	mov rax, 0
  1173                                          ENTER
    44 0000081B C8000000            <1>  enter 0, 0
    45 0000081F 4883E4F0            <1>  and rsp, ~15
  1174 00000823 E8(00000000)            	call printf
  1175                                          LEAVE
    49 00000828 C9                  <1>  leave
  1176 00000829 488B3C24                	mov rdi, qword [rsp]
  1177 0000082D 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
  1178 00000831 E811FDFFFF              	call print_sexpr
  1179 00000836 5F                      	pop rdi
  1180 00000837 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
  1181 0000083B E95FFFFFFF              	jmp .Lcdr
  1182                                  
  1183                                  .Lvector:
  1184 00000840 488B4701                	mov rax, qword [rdi + 1] ; length
  1185 00000844 4883F800                	cmp rax, 0
  1186 00000848 0F8484000000            	je .Lvector_empty
  1187 0000084E 57                      	push rdi
  1188 0000084F 48BF-                   	mov rdi, fmt_vector
  1188 00000851 [3A08000000000000] 
  1189 00000859 B800000000              	mov rax, 0
  1190                                          ENTER
    44 0000085E C8000000            <1>  enter 0, 0
    45 00000862 4883E4F0            <1>  and rsp, ~15
  1191 00000866 E8(00000000)            	call printf
  1192                                          LEAVE
    49 0000086B C9                  <1>  leave
  1193 0000086C 488B3C24                	mov rdi, qword [rsp]
  1194 00000870 FF7701                  	push qword [rdi + 1]
  1195 00000873 6A01                    	push 1
  1196 00000875 488B7F09                	mov rdi, qword [rdi + 1 + 8] ; v[0]
  1197 00000879 E8C9FCFFFF              	call print_sexpr
  1198                                  .Lvector_loop:
  1199                                  	; [rsp] index
  1200                                  	; [rsp + 8*1] limit
  1201                                  	; [rsp + 8*2] vector
  1202 0000087E 488B0424                	mov rax, qword [rsp]
  1203 00000882 483B442408              	cmp rax, qword [rsp + 8*1]
  1204 00000887 7436                    	je .Lvector_end
  1205 00000889 48BF-                   	mov rdi, fmt_space
  1205 0000088B [3408000000000000] 
  1206 00000893 B800000000              	mov rax, 0
  1207                                          ENTER
    44 00000898 C8000000            <1>  enter 0, 0
    45 0000089C 4883E4F0            <1>  and rsp, ~15
  1208 000008A0 E8(00000000)            	call printf
  1209                                          LEAVE
    49 000008A5 C9                  <1>  leave
  1210 000008A6 488B0424                	mov rax, qword [rsp]
  1211 000008AA 488B5C2410              	mov rbx, qword [rsp + 8*2]
  1212 000008AF 488B7CC309              	mov rdi, qword [rbx + 1 + 8 + 8 * rax] ; v[i]
  1213 000008B4 E88EFCFFFF              	call print_sexpr
  1214 000008B9 48FF0424                	inc qword [rsp]
  1215 000008BD EBBF                    	jmp .Lvector_loop
  1216                                  
  1217                                  .Lvector_end:
  1218 000008BF 4883C418                	add rsp, 8*3
  1219 000008C3 48BF-                   	mov rdi, fmt_rparen
  1219 000008C5 [3208000000000000] 
  1220 000008CD E9F3010000              	jmp .Lemit	
  1221                                  
  1222                                  .Lvector_empty:
  1223 000008D2 48BF-                   	mov rdi, fmt_empty_vector
  1223 000008D4 [3608000000000000] 
  1224 000008DC E9E4010000              	jmp .Lemit
  1225                                  
  1226                                  .Lreal:
  1227 000008E1 FF7701                  	push qword [rdi + 1]
  1228 000008E4 F20F100424              	movsd xmm0, qword [rsp]
  1229 000008E9 4883C408                	add rsp, 8*1
  1230 000008ED 48BF-                   	mov rdi, fmt_real
  1230 000008EF [3D08000000000000] 
  1231 000008F7 B801000000              	mov rax, 1
  1232                                  	ENTER
    44 000008FC C8000000            <1>  enter 0, 0
    45 00000900 4883E4F0            <1>  and rsp, ~15
  1233 00000904 E8(00000000)            	call printf
  1234                                  	LEAVE
    49 00000909 C9                  <1>  leave
  1235 0000090A E9CB010000              	jmp .Lend
  1236                                  
  1237                                  .Lfraction:
  1238 0000090F 488B7701                	mov rsi, qword [rdi + 1]
  1239 00000913 488B5709                	mov rdx, qword [rdi + 1 + 8]
  1240 00000917 4883FE00                	cmp rsi, 0
  1241 0000091B 7415                    	je .Lrat_zero
  1242 0000091D 4883FA01                	cmp rdx, 1
  1243 00000921 741E                    	je .Lrat_int
  1244 00000923 48BF-                   	mov rdi, fmt_fraction
  1244 00000925 [4008000000000000] 
  1245 0000092D E993010000              	jmp .Lemit
  1246                                  
  1247                                  .Lrat_zero:
  1248 00000932 48BF-                   	mov rdi, fmt_zero
  1248 00000934 [4808000000000000] 
  1249 0000093C E984010000              	jmp .Lemit
  1250                                  
  1251                                  .Lrat_int:
  1252 00000941 48BF-                   	mov rdi, fmt_int
  1252 00000943 [4A08000000000000] 
  1253 0000094B E975010000              	jmp .Lemit
  1254                                  
  1255                                  .Linteger:
  1256 00000950 488B7701                	mov rsi, qword [rdi + 1]
  1257 00000954 48BF-                   	mov rdi, fmt_int
  1257 00000956 [4A08000000000000] 
  1258 0000095E E962010000              	jmp .Lemit
  1259                                  
  1260                                  .Lstring:
  1261 00000963 488D4709                	lea rax, [rdi + 1 + 8]
  1262 00000967 50                      	push rax
  1263 00000968 FF7701                  	push qword [rdi + 1]
  1264 0000096B 48BF-                   	mov rdi, fmt_dquote
  1264 0000096D [9308000000000000] 
  1265 00000975 B800000000              	mov rax, 0
  1266                                  	ENTER
    44 0000097A C8000000            <1>  enter 0, 0
    45 0000097E 4883E4F0            <1>  and rsp, ~15
  1267 00000982 E8(00000000)            	call printf
  1268                                  	LEAVE
    49 00000987 C9                  <1>  leave
  1269                                  .Lstring_loop:
  1270                                  	; qword [rsp]: limit
  1271                                  	; qword [rsp + 8*1]: char *
  1272 00000988 48833C2400              	cmp qword [rsp], 0
  1273 0000098D 0F84EF000000            	je .Lstring_end
  1274 00000993 488B442408              	mov rax, qword [rsp + 8*1]
  1275 00000998 8A00                    	mov al, byte [rax]
  1276 0000099A 4825FF000000            	and rax, 255
  1277 000009A0 3C07                    	cmp al, 7
  1278 000009A2 745D                            je .Lstring_char_7
  1279 000009A4 3C08                            cmp al, 8
  1280 000009A6 7465                            je .Lstring_char_8
  1281 000009A8 3C09                            cmp al, 9
  1282 000009AA 746D                            je .Lstring_char_9
  1283 000009AC 3C0A                            cmp al, 10
  1284 000009AE 7475                            je .Lstring_char_10
  1285 000009B0 3C0B                            cmp al, 11
  1286 000009B2 747D                            je .Lstring_char_11
  1287 000009B4 3C0C                            cmp al, 12
  1288 000009B6 0F8481000000                    je .Lstring_char_12
  1289 000009BC 3C0D                            cmp al, 13
  1290 000009BE 0F8485000000                    je .Lstring_char_13
  1291 000009C4 3C22                            cmp al, 34
  1292 000009C6 0F8489000000                    je .Lstring_char_34
  1293 000009CC 3C5C                            cmp al, 92              ;         je .Lstring_char_92
  1295 000009CE 3C20                            cmp al, ' '
  1296 000009D0 0F8C9A000000                    jl .Lstring_char_hex
  1297 000009D6 48BF-                           mov rdi, fmt_string_char
  1297 000009D8 [9508000000000000] 
  1298 000009E0 4889C6                          mov rsi, rax
  1299                                  .Lstring_char_emit:
  1300 000009E3 B800000000                      mov rax, 0
  1301                                          ENTER
    44 000009E8 C8000000            <1>  enter 0, 0
    45 000009EC 4883E4F0            <1>  and rsp, ~15
  1302 000009F0 E8(00000000)                    call printf
  1303                                          LEAVE
    49 000009F5 C9                  <1>  leave
  1304 000009F6 48FF0C24                        dec qword [rsp]
  1305 000009FA 48FF442408                      inc qword [rsp + 8*1]
  1306 000009FF EB87                            jmp .Lstring_loop
  1307                                  
  1308                                  .Lstring_char_7:
  1309 00000A01 48BF-                           mov rdi, fmt_string_char_7
  1309 00000A03 [9808000000000000] 
  1310 00000A0B EBD6                            jmp .Lstring_char_emit
  1311                                  
  1312                                  .Lstring_char_8:
  1313 00000A0D 48BF-                           mov rdi, fmt_string_char_8
  1313 00000A0F [9B08000000000000] 
  1314 00000A17 EBCA                            jmp .Lstring_char_emit
  1315                                          
  1316                                  .Lstring_char_9:
  1317 00000A19 48BF-                           mov rdi, fmt_string_char_9
  1317 00000A1B [9E08000000000000] 
  1318 00000A23 EBBE                            jmp .Lstring_char_emit
  1319                                  
  1320                                  .Lstring_char_10:
  1321 00000A25 48BF-                           mov rdi, fmt_string_char_10
  1321 00000A27 [A108000000000000] 
  1322 00000A2F EBB2                            jmp .Lstring_char_emit
  1323                                  
  1324                                  .Lstring_char_11:
  1325 00000A31 48BF-                           mov rdi, fmt_string_char_11
  1325 00000A33 [A408000000000000] 
  1326 00000A3B EBA6                            jmp .Lstring_char_emit
  1327                                  
  1328                                  .Lstring_char_12:
  1329 00000A3D 48BF-                           mov rdi, fmt_string_char_12
  1329 00000A3F [A708000000000000] 
  1330 00000A47 EB9A                            jmp .Lstring_char_emit
  1331                                  
  1332                                  .Lstring_char_13:
  1333 00000A49 48BF-                           mov rdi, fmt_string_char_13
  1333 00000A4B [AA08000000000000] 
  1334 00000A53 EB8E                            jmp .Lstring_char_emit
  1335                                  
  1336                                  .Lstring_char_34:
  1337 00000A55 48BF-                           mov rdi, fmt_string_char_34
  1337 00000A57 [AD08000000000000] 
  1338 00000A5F EB82                            jmp .Lstring_char_emit
  1339                                  
  1340                                  .Lstring_char_92:
  1341 00000A61 48BF-                           mov rdi, fmt_string_char_92
  1341 00000A63 [B008000000000000] 
  1342 00000A6B E973FFFFFF                      jmp .Lstring_char_emit
  1343                                  
  1344                                  .Lstring_char_hex:
  1345 00000A70 48BF-                           mov rdi, fmt_string_char_hex
  1345 00000A72 [B308000000000000] 
  1346 00000A7A 4889C6                          mov rsi, rax
  1347 00000A7D E961FFFFFF                      jmp .Lstring_char_emit        
  1348                                  
  1349                                  .Lstring_end:
  1350 00000A82 4883C410                	add rsp, 8 * 2
  1351 00000A86 48BF-                   	mov rdi, fmt_dquote
  1351 00000A88 [9308000000000000] 
  1352 00000A90 EB33                    	jmp .Lemit
  1353                                  
  1354                                  .Lunknown_sexpr_type:
  1355 00000A92 48BE-                   	mov rsi, fmt_unknown_scheme_object_error
  1355 00000A94 [4E08000000000000] 
  1356 00000A9C 4825FF000000            	and rax, 255
  1357 00000AA2 4889C2                  	mov rdx, rax
  1358 00000AA5 4889F9                  	mov rcx, rdi
  1359 00000AA8 488B3C25[00000000]      	mov rdi, qword [stderr]
  1360 00000AB0 B800000000              	mov rax, 0
  1361                                          ENTER
    44 00000AB5 C8000000            <1>  enter 0, 0
    45 00000AB9 4883E4F0            <1>  and rsp, ~15
  1362 00000ABD E8(00000000)            	call fprintf
  1363                                          LEAVE
    49 00000AC2 C9                  <1>  leave
  1364 00000AC3 C9                              leave
  1365 00000AC4 C3                              ret
  1366                                  
  1367                                  .Lemit:
  1368 00000AC5 B800000000              	mov rax, 0
  1369                                          ENTER
    44 00000ACA C8000000            <1>  enter 0, 0
    45 00000ACE 4883E4F0            <1>  and rsp, ~15
  1370 00000AD2 E8(00000000)            	call printf
  1371                                          LEAVE
    49 00000AD7 C9                  <1>  leave
  1372 00000AD8 EB00                    	jmp .Lend
  1373                                  
  1374                                  .Lend:
  1375                                  	LEAVE
    49 00000ADA C9                  <1>  leave
  1376 00000ADB C3                      	ret
  1377                                  
  1378                                  ;;; rdi: address of free variable
  1379                                  ;;; rsi: address of code-pointer
  1380                                  bind_primitive:
  1381 00000ADC C8000000                        enter 0, 0
  1382 00000AE0 57                              push rdi
  1383 00000AE1 BF11000000                      mov rdi, (1 + 8 + 8)
  1384 00000AE6 E8DBF7FFFF                      call malloc
  1385 00000AEB 5F                              pop rdi
  1386 00000AEC C60004                          mov byte [rax], T_closure
  1387 00000AEF 48C7400100000000                mov SOB_CLOSURE_ENV(rax), 0 ; dummy, lexical environment
  1388 00000AF7 48897009                        mov SOB_CLOSURE_CODE(rax), rsi ; code pointer
  1389 00000AFB 488907                          mov qword [rdi], rax
  1390 00000AFE 48B8-                           mov rax, sob_void
  1390 00000B00 [0000000000000000] 
  1391 00000B08 C9                              leave
  1392 00000B09 C3                              ret
  1393                                  
  1394                                  L_code_ptr_ash:
  1395 00000B0A C8000000                        enter 0, 0
  1396 00000B0E 48837D1802                      cmp COUNT, 2
  1397 00000B13 0F8539140000                    jne L_error_arg_count_2
  1398 00000B19 488B7D20                        mov rdi, PARAM(0)
  1399                                          assert_integer(rdi)
    53 00000B1D 803F11              <1>  cmp byte [%1], %2
    54 00000B20 0F85CB140000        <1>  jne L_error_incorrect_type
  1400 00000B26 488B4D28                        mov rcx, PARAM(1)
  1401                                          assert_integer(rcx)
    53 00000B2A 803911              <1>  cmp byte [%1], %2
    54 00000B2D 0F85BE140000        <1>  jne L_error_incorrect_type
  1402 00000B33 488B7F01                        mov rdi, qword [rdi + 1]
  1403 00000B37 488B4901                        mov rcx, qword [rcx + 1]
  1404 00000B3B 4883F900                        cmp rcx, 0
  1405 00000B3F 7C0F                            jl .L_negative
  1406                                  .L_loop_positive:
  1407 00000B41 4883F900                        cmp rcx, 0
  1408 00000B45 741B                            je .L_exit
  1409 00000B47 48D3E7                          sal rdi, cl
  1410 00000B4A 48C1E908                        shr rcx, 8
  1411 00000B4E EBF1                            jmp .L_loop_positive
  1412                                  .L_negative:
  1413 00000B50 48F7D9                          neg rcx
  1414                                  .L_loop_negative:
  1415 00000B53 4883F900                        cmp rcx, 0
  1416 00000B57 7409                            je .L_exit
  1417 00000B59 48D3FF                          sar rdi, cl
  1418 00000B5C 48C1E908                        shr rcx, 8
  1419 00000B60 EBF1                            jmp .L_loop_negative
  1420                                  .L_exit:
  1421 00000B62 E805130000                      call make_integer
  1422 00000B67 C9                              leave
  1423 00000B68 C22000                          ret AND_KILL_FRAME(2)
  1424                                  
  1425                                  L_code_ptr_logand:
  1426 00000B6B C8000000                        enter 0, 0
  1427 00000B6F 48837D1802                      cmp COUNT, 2
  1428 00000B74 0F85D8130000                    jne L_error_arg_count_2
  1429 00000B7A 4C8B4520                        mov r8, PARAM(0)
  1430                                          assert_integer(r8)
    53 00000B7E 41803811            <1>  cmp byte [%1], %2
    54 00000B82 0F8569140000        <1>  jne L_error_incorrect_type
  1431 00000B88 4C8B4D28                        mov r9, PARAM(1)
  1432                                          assert_integer(r9)
    53 00000B8C 41803911            <1>  cmp byte [%1], %2
    54 00000B90 0F855B140000        <1>  jne L_error_incorrect_type
  1433 00000B96 498B7801                        mov rdi, qword [r8 + 1]
  1434 00000B9A 49237901                        and rdi, qword [r9 + 1]
  1435 00000B9E E8C9120000                      call make_integer
  1436 00000BA3 C9                              leave
  1437 00000BA4 C22000                          ret AND_KILL_FRAME(2)
  1438                                  
  1439                                  L_code_ptr_logor:
  1440 00000BA7 C8000000                        enter 0, 0
  1441 00000BAB 48837D1802                      cmp COUNT, 2
  1442 00000BB0 0F859C130000                    jne L_error_arg_count_2
  1443 00000BB6 4C8B4520                        mov r8, PARAM(0)
  1444                                          assert_integer(r8)
    53 00000BBA 41803811            <1>  cmp byte [%1], %2
    54 00000BBE 0F852D140000        <1>  jne L_error_incorrect_type
  1445 00000BC4 4C8B4D28                        mov r9, PARAM(1)
  1446                                          assert_integer(r9)
    53 00000BC8 41803911            <1>  cmp byte [%1], %2
    54 00000BCC 0F851F140000        <1>  jne L_error_incorrect_type
  1447 00000BD2 498B7801                        mov rdi, qword [r8 + 1]
  1448 00000BD6 490B7901                        or rdi, qword [r9 + 1]
  1449 00000BDA E88D120000                      call make_integer
  1450 00000BDF C9                              leave
  1451 00000BE0 C22000                          ret AND_KILL_FRAME(2)
  1452                                  
  1453                                  L_code_ptr_logxor:
  1454 00000BE3 C8000000                        enter 0, 0
  1455 00000BE7 48837D1802                      cmp COUNT, 2
  1456 00000BEC 0F8560130000                    jne L_error_arg_count_2
  1457 00000BF2 4C8B4520                        mov r8, PARAM(0)
  1458                                          assert_integer(r8)
    53 00000BF6 41803811            <1>  cmp byte [%1], %2
    54 00000BFA 0F85F1130000        <1>  jne L_error_incorrect_type
  1459 00000C00 4C8B4D28                        mov r9, PARAM(1)
  1460                                          assert_integer(r9)
    53 00000C04 41803911            <1>  cmp byte [%1], %2
    54 00000C08 0F85E3130000        <1>  jne L_error_incorrect_type
  1461 00000C0E 498B7801                        mov rdi, qword [r8 + 1]
  1462 00000C12 49337901                        xor rdi, qword [r9 + 1]
  1463 00000C16 E851120000                      call make_integer
  1464                                          LEAVE
    49 00000C1B C9                  <1>  leave
  1465 00000C1C C22000                          ret AND_KILL_FRAME(2)
  1466                                  
  1467                                  L_code_ptr_lognot:
  1468 00000C1F C8000000                        enter 0, 0
  1469 00000C23 48837D1801                      cmp COUNT, 1
  1470 00000C28 0F85EF120000                    jne L_error_arg_count_1
  1471 00000C2E 4C8B4520                        mov r8, PARAM(0)
  1472                                          assert_integer(r8)
    53 00000C32 41803811            <1>  cmp byte [%1], %2
    54 00000C36 0F85B5130000        <1>  jne L_error_incorrect_type
  1473 00000C3C 498B7801                        mov rdi, qword [r8 + 1]
  1474 00000C40 48F7D7                          not rdi
  1475 00000C43 E824120000                      call make_integer
  1476 00000C48 C9                              leave
  1477 00000C49 C21800                          ret AND_KILL_FRAME(1)
  1478                                  
  1479                                  L_code_ptr_bin_apply:
  1480                                      ;; Arguments:
  1481                                      ;; rdi = function to apply
  1482                                      ;; rsi = pointer to the list of arguments
  1483                                      
  1484                                      ;; 1. Save caller's registers
  1485 00000C4C 55                          push rbp
  1486 00000C4D 4889E5                      mov rbp, rsp
  1487 00000C50 53                          push rbx
  1488                                  
  1489                                      ;; 2. Unpack the argument list
  1490 00000C51 4889F3                      mov rbx, rsi       ;; rbx points to the start of the argument list
  1491 00000C54 B900000000                  mov rcx, 0         ;; rcx will count the number of arguments
  1492                                  
  1493                                  L_unpack_loop:
  1494 00000C59 4883FB00                    cmp rbx, 0         ;; Check if we reached the end of the list (NULL)
  1495 00000C5D 740B                        je L_call_function ;; If yes, jump to function call
  1496 00000C5F FF33                        push qword [rbx]   ;; Push the current argument onto the stack
  1497 00000C61 488B5B08                    mov rbx, [rbx+8]   ;; Move to the next argument in the list
  1498 00000C65 48FFC1                      inc rcx            ;; Increment the argument count
  1499 00000C68 EBEF                        jmp L_unpack_loop  ;; Continue unpacking
  1500                                  
  1501                                  L_call_function:
  1502                                      ;; 3. Call the function
  1503 00000C6A 4889CF                      mov rdi, rcx       ;; First argument: number of arguments
  1504 00000C6D FFD7                        call rdi           ;; Call the function
  1505                                  
  1506                                      ;; 4. Restore caller's registers and return
  1507 00000C6F 5B                          pop rbx
  1508 00000C70 4889EC                      mov rsp, rbp
  1509 00000C73 5D                          pop rbp
  1510 00000C74 C3                          ret
  1511                                  
  1512                                  L_code_ptr_is_null:
  1513 00000C75 C8000000                        enter 0, 0
  1514 00000C79 48837D1801                      cmp COUNT, 1
  1515 00000C7E 0F8599120000                    jne L_error_arg_count_1
  1516 00000C84 488B4520                        mov rax, PARAM(0)
  1517 00000C88 803801                          cmp byte [rax], T_nil
  1518 00000C8B 750C                            jne .L_false
  1519 00000C8D 48B8-                           mov rax, sob_boolean_true
  1519 00000C8F [0300000000000000] 
  1520 00000C97 EB0A                            jmp .L_end
  1521                                  .L_false:
  1522 00000C99 48B8-                           mov rax, sob_boolean_false
  1522 00000C9B [0200000000000000] 
  1523                                  .L_end:
  1524 00000CA3 C9                              leave
  1525 00000CA4 C21800                          ret AND_KILL_FRAME(1)
  1526                                  
  1527                                  L_code_ptr_is_pair:
  1528 00000CA7 C8000000                        enter 0, 0
  1529 00000CAB 48837D1801                      cmp COUNT, 1
  1530 00000CB0 0F8567120000                    jne L_error_arg_count_1
  1531 00000CB6 488B4520                        mov rax, PARAM(0)
  1532 00000CBA 803821                          cmp byte [rax], T_pair
  1533 00000CBD 750C                            jne .L_false
  1534 00000CBF 48B8-                           mov rax, sob_boolean_true
  1534 00000CC1 [0300000000000000] 
  1535 00000CC9 EB0A                            jmp .L_end
  1536                                  .L_false:
  1537 00000CCB 48B8-                           mov rax, sob_boolean_false
  1537 00000CCD [0200000000000000] 
  1538                                  .L_end:
  1539 00000CD5 C9                              leave
  1540 00000CD6 C21800                          ret AND_KILL_FRAME(1)
  1541                                          
  1542                                  L_code_ptr_is_void:
  1543 00000CD9 C8000000                        enter 0, 0
  1544 00000CDD 48837D1801                      cmp COUNT, 1
  1545 00000CE2 0F8535120000                    jne L_error_arg_count_1
  1546 00000CE8 488B4520                        mov rax, PARAM(0)
  1547 00000CEC 803800                          cmp byte [rax], T_void
  1548 00000CEF 750C                            jne .L_false
  1549 00000CF1 48B8-                           mov rax, sob_boolean_true
  1549 00000CF3 [0300000000000000] 
  1550 00000CFB EB0A                            jmp .L_end
  1551                                  .L_false:
  1552 00000CFD 48B8-                           mov rax, sob_boolean_false
  1552 00000CFF [0200000000000000] 
  1553                                  .L_end:
  1554 00000D07 C9                              leave
  1555 00000D08 C21800                          ret AND_KILL_FRAME(1)
  1556                                  
  1557                                  L_code_ptr_is_char:
  1558 00000D0B C8000000                        enter 0, 0
  1559 00000D0F 48837D1801                      cmp COUNT, 1
  1560 00000D14 0F8503120000                    jne L_error_arg_count_1
  1561 00000D1A 488B4520                        mov rax, PARAM(0)
  1562 00000D1E 803802                          cmp byte [rax], T_char
  1563 00000D21 750C                            jne .L_false
  1564 00000D23 48B8-                           mov rax, sob_boolean_true
  1564 00000D25 [0300000000000000] 
  1565 00000D2D EB0A                            jmp .L_end
  1566                                  .L_false:
  1567 00000D2F 48B8-                           mov rax, sob_boolean_false
  1567 00000D31 [0200000000000000] 
  1568                                  .L_end:
  1569 00000D39 C9                              leave
  1570 00000D3A C21800                          ret AND_KILL_FRAME(1)
  1571                                  
  1572                                  L_code_ptr_is_string:
  1573 00000D3D C8000000                        enter 0, 0
  1574 00000D41 48837D1801                      cmp COUNT, 1
  1575 00000D46 0F85D1110000                    jne L_error_arg_count_1
  1576 00000D4C 488B4520                        mov rax, PARAM(0)
  1577 00000D50 803803                          cmp byte [rax], T_string
  1578 00000D53 750C                            jne .L_false
  1579 00000D55 48B8-                           mov rax, sob_boolean_true
  1579 00000D57 [0300000000000000] 
  1580 00000D5F EB0A                            jmp .L_end
  1581                                  .L_false:
  1582 00000D61 48B8-                           mov rax, sob_boolean_false
  1582 00000D63 [0200000000000000] 
  1583                                  .L_end:
  1584 00000D6B C9                              leave
  1585 00000D6C C21800                          ret AND_KILL_FRAME(1)
  1586                                  
  1587                                  L_code_ptr_is_symbol:
  1588 00000D6F C8000000                        enter 0, 0
  1589 00000D73 48837D1801                      cmp COUNT, 1
  1590 00000D78 0F859F110000                    jne L_error_arg_count_1
  1591 00000D7E 4C8B4520                        mov r8, PARAM(0)
  1592 00000D82 41802040                        and byte [r8], T_symbol
  1593 00000D86 740C                            jz .L_false
  1594 00000D88 48B8-                           mov rax, sob_boolean_true
  1594 00000D8A [0300000000000000] 
  1595 00000D92 EB0A                            jmp .L_exit
  1596                                  .L_false:
  1597 00000D94 48B8-                           mov rax, sob_boolean_false
  1597 00000D96 [0200000000000000] 
  1598                                  .L_exit:
  1599 00000D9E C9                              leave
  1600 00000D9F C21800                          ret AND_KILL_FRAME(1)
  1601                                  
  1602                                  L_code_ptr_is_uninterned_symbol:
  1603 00000DA2 C8000000                        enter 0, 0
  1604 00000DA6 48837D1801                      cmp COUNT, 1
  1605 00000DAB 0F856C110000                    jne L_error_arg_count_1
  1606 00000DB1 4C8B4520                        mov r8, PARAM(0)
  1607 00000DB5 41803842                        cmp byte [r8], T_uninterned_symbol
  1608 00000DB9 750C                            jne .L_false
  1609 00000DBB 48B8-                           mov rax, sob_boolean_true
  1609 00000DBD [0300000000000000] 
  1610 00000DC5 EB0A                            jmp .L_exit
  1611                                  .L_false:
  1612 00000DC7 48B8-                           mov rax, sob_boolean_false
  1612 00000DC9 [0200000000000000] 
  1613                                  .L_exit:
  1614 00000DD1 C9                              leave
  1615 00000DD2 C21800                          ret AND_KILL_FRAME(1)
  1616                                  
  1617                                  L_code_ptr_is_interned_symbol:
  1618 00000DD5 C8000000                        enter 0, 0
  1619 00000DD9 48837D1801                      cmp COUNT, 1
  1620 00000DDE 0F8539110000                    jne L_error_arg_count_1
  1621 00000DE4 488B4520                        mov rax, PARAM(0)
  1622 00000DE8 803841                          cmp byte [rax], T_interned_symbol
  1623 00000DEB 750C                            jne .L_false
  1624 00000DED 48B8-                           mov rax, sob_boolean_true
  1624 00000DEF [0300000000000000] 
  1625 00000DF7 EB0A                            jmp .L_end
  1626                                  .L_false:
  1627 00000DF9 48B8-                           mov rax, sob_boolean_false
  1627 00000DFB [0200000000000000] 
  1628                                  .L_end:
  1629 00000E03 C9                              leave
  1630 00000E04 C21800                          ret AND_KILL_FRAME(1)
  1631                                  
  1632                                  L_code_ptr_gensym:
  1633 00000E07 C8000000                        enter 0, 0
  1634 00000E0B 48837D1800                      cmp COUNT, 0
  1635 00000E10 0F85D2100000                    jne L_error_arg_count_0
  1636 00000E16 48FF0425[B9080000]              inc qword [gensym_count]
  1637 00000E1E BF09000000                      mov rdi, (1 + 8)
  1638 00000E23 E89EF4FFFF                      call malloc
  1639 00000E28 C60042                          mov byte [rax], T_uninterned_symbol
  1640 00000E2B 488B0C25[B9080000]              mov rcx, qword [gensym_count]
  1641 00000E33 48894801                        mov qword [rax + 1], rcx
  1642 00000E37 C9                              leave
  1643 00000E38 C21000                          ret AND_KILL_FRAME(0)
  1644                                  
  1645                                  L_code_ptr_is_vector:
  1646 00000E3B C8000000                        enter 0, 0
  1647 00000E3F 48837D1801                      cmp COUNT, 1
  1648 00000E44 0F85D3100000                    jne L_error_arg_count_1
  1649 00000E4A 488B4520                        mov rax, PARAM(0)
  1650 00000E4E 803822                          cmp byte [rax], T_vector
  1651 00000E51 750C                            jne .L_false
  1652 00000E53 48B8-                           mov rax, sob_boolean_true
  1652 00000E55 [0300000000000000] 
  1653 00000E5D EB0A                            jmp .L_end
  1654                                  .L_false:
  1655 00000E5F 48B8-                           mov rax, sob_boolean_false
  1655 00000E61 [0200000000000000] 
  1656                                  .L_end:
  1657 00000E69 C9                              leave
  1658 00000E6A C21800                          ret AND_KILL_FRAME(1)
  1659                                  
  1660                                  L_code_ptr_is_closure:
  1661 00000E6D C8000000                        enter 0, 0
  1662 00000E71 48837D1801                      cmp COUNT, 1
  1663 00000E76 0F85A1100000                    jne L_error_arg_count_1
  1664 00000E7C 488B4520                        mov rax, PARAM(0)
  1665 00000E80 803804                          cmp byte [rax], T_closure
  1666 00000E83 750C                            jne .L_false
  1667 00000E85 48B8-                           mov rax, sob_boolean_true
  1667 00000E87 [0300000000000000] 
  1668 00000E8F EB0A                            jmp .L_end
  1669                                  .L_false:
  1670 00000E91 48B8-                           mov rax, sob_boolean_false
  1670 00000E93 [0200000000000000] 
  1671                                  .L_end:
  1672 00000E9B C9                              leave
  1673 00000E9C C21800                          ret AND_KILL_FRAME(1)
  1674                                  
  1675                                  L_code_ptr_is_real:
  1676 00000E9F C8000000                        enter 0, 0
  1677 00000EA3 48837D1801                      cmp COUNT, 1
  1678 00000EA8 0F856F100000                    jne L_error_arg_count_1
  1679 00000EAE 488B4520                        mov rax, PARAM(0)
  1680 00000EB2 803813                          cmp byte [rax], T_real
  1681 00000EB5 750C                            jne .L_false
  1682 00000EB7 48B8-                           mov rax, sob_boolean_true
  1682 00000EB9 [0300000000000000] 
  1683 00000EC1 EB0A                            jmp .L_end
  1684                                  .L_false:
  1685 00000EC3 48B8-                           mov rax, sob_boolean_false
  1685 00000EC5 [0200000000000000] 
  1686                                  .L_end:
  1687 00000ECD C9                              leave
  1688 00000ECE C21800                          ret AND_KILL_FRAME(1)
  1689                                  
  1690                                  L_code_ptr_is_fraction:
  1691 00000ED1 C8000000                        enter 0, 0
  1692 00000ED5 48837D1801                      cmp COUNT, 1
  1693 00000EDA 0F853D100000                    jne L_error_arg_count_1
  1694 00000EE0 488B4520                        mov rax, PARAM(0)
  1695 00000EE4 803812                          cmp byte [rax], T_fraction
  1696 00000EE7 750C                            jne .L_false
  1697 00000EE9 48B8-                           mov rax, sob_boolean_true
  1697 00000EEB [0300000000000000] 
  1698 00000EF3 EB0A                            jmp .L_end
  1699                                  .L_false:
  1700 00000EF5 48B8-                           mov rax, sob_boolean_false
  1700 00000EF7 [0200000000000000] 
  1701                                  .L_end:
  1702 00000EFF C9                              leave
  1703 00000F00 C21800                          ret AND_KILL_FRAME(1)
  1704                                  
  1705                                  L_code_ptr_is_boolean:
  1706 00000F03 C8000000                        enter 0, 0
  1707 00000F07 48837D1801                      cmp COUNT, 1
  1708 00000F0C 0F850B100000                    jne L_error_arg_count_1
  1709 00000F12 488B4520                        mov rax, PARAM(0)
  1710 00000F16 8A18                            mov bl, byte [rax]
  1711 00000F18 80E308                          and bl, T_boolean
  1712 00000F1B 740C                            je .L_false
  1713 00000F1D 48B8-                           mov rax, sob_boolean_true
  1713 00000F1F [0300000000000000] 
  1714 00000F27 EB0A                            jmp .L_end
  1715                                  .L_false:
  1716 00000F29 48B8-                           mov rax, sob_boolean_false
  1716 00000F2B [0200000000000000] 
  1717                                  .L_end:
  1718 00000F33 C9                              leave
  1719 00000F34 C21800                          ret AND_KILL_FRAME(1)
  1720                                          
  1721                                  L_code_ptr_is_boolean_false:
  1722 00000F37 C8000000                        enter 0, 0
  1723 00000F3B 48837D1801                      cmp COUNT, 1
  1724 00000F40 0F85D70F0000                    jne L_error_arg_count_1
  1725 00000F46 488B4520                        mov rax, PARAM(0)
  1726 00000F4A 8A18                            mov bl, byte [rax]
  1727 00000F4C 80FB09                          cmp bl, T_boolean_false
  1728 00000F4F 750C                            jne .L_false
  1729 00000F51 48B8-                           mov rax, sob_boolean_true
  1729 00000F53 [0300000000000000] 
  1730 00000F5B EB0A                            jmp .L_end
  1731                                  .L_false:
  1732 00000F5D 48B8-                           mov rax, sob_boolean_false
  1732 00000F5F [0200000000000000] 
  1733                                  .L_end:
  1734 00000F67 C9                              leave
  1735 00000F68 C21800                          ret AND_KILL_FRAME(1)
  1736                                  
  1737                                  L_code_ptr_is_boolean_true:
  1738 00000F6B C8000000                        enter 0, 0
  1739 00000F6F 48837D1801                      cmp COUNT, 1
  1740 00000F74 0F85A30F0000                    jne L_error_arg_count_1
  1741 00000F7A 488B4520                        mov rax, PARAM(0)
  1742 00000F7E 8A18                            mov bl, byte [rax]
  1743 00000F80 80FB0A                          cmp bl, T_boolean_true
  1744 00000F83 750C                            jne .L_false
  1745 00000F85 48B8-                           mov rax, sob_boolean_true
  1745 00000F87 [0300000000000000] 
  1746 00000F8F EB0A                            jmp .L_end
  1747                                  .L_false:
  1748 00000F91 48B8-                           mov rax, sob_boolean_false
  1748 00000F93 [0200000000000000] 
  1749                                  .L_end:
  1750 00000F9B C9                              leave
  1751 00000F9C C21800                          ret AND_KILL_FRAME(1)
  1752                                  
  1753                                  L_code_ptr_is_number:
  1754 00000F9F C8000000                        enter 0, 0
  1755 00000FA3 48837D1801                      cmp COUNT, 1
  1756 00000FA8 0F856F0F0000                    jne L_error_arg_count_1
  1757 00000FAE 488B4520                        mov rax, PARAM(0)
  1758 00000FB2 8A18                            mov bl, byte [rax]
  1759 00000FB4 80E310                          and bl, T_number
  1760 00000FB7 740C                            jz .L_false
  1761 00000FB9 48B8-                           mov rax, sob_boolean_true
  1761 00000FBB [0300000000000000] 
  1762 00000FC3 EB0A                            jmp .L_end
  1763                                  .L_false:
  1764 00000FC5 48B8-                           mov rax, sob_boolean_false
  1764 00000FC7 [0200000000000000] 
  1765                                  .L_end:
  1766 00000FCF C9                              leave
  1767 00000FD0 C21800                          ret AND_KILL_FRAME(1)
  1768                                          
  1769                                  L_code_ptr_is_collection:
  1770 00000FD3 C8000000                        enter 0, 0
  1771 00000FD7 48837D1801                      cmp COUNT, 1
  1772 00000FDC 0F853B0F0000                    jne L_error_arg_count_1
  1773 00000FE2 488B4520                        mov rax, PARAM(0)
  1774 00000FE6 8A18                            mov bl, byte [rax]
  1775 00000FE8 80E320                          and bl, T_collection
  1776 00000FEB 740C                            je .L_false
  1777 00000FED 48B8-                           mov rax, sob_boolean_true
  1777 00000FEF [0300000000000000] 
  1778 00000FF7 EB0A                            jmp .L_end
  1779                                  .L_false:
  1780 00000FF9 48B8-                           mov rax, sob_boolean_false
  1780 00000FFB [0200000000000000] 
  1781                                  .L_end:
  1782 00001003 C9                              leave
  1783 00001004 C21800                          ret AND_KILL_FRAME(1)
  1784                                  
  1785                                  L_code_ptr_cons:
  1786 00001007 C8000000                        enter 0, 0
  1787 0000100B 48837D1802                      cmp COUNT, 2
  1788 00001010 0F853C0F0000                    jne L_error_arg_count_2
  1789 00001016 BF11000000                      mov rdi, (1 + 8 + 8)
  1790 0000101B E8A6F2FFFF                      call malloc
  1791 00001020 C60021                          mov byte [rax], T_pair
  1792 00001023 488B5D20                        mov rbx, PARAM(0)
  1793 00001027 48895801                        mov SOB_PAIR_CAR(rax), rbx
  1794 0000102B 488B5D28                        mov rbx, PARAM(1)
  1795 0000102F 48895809                        mov SOB_PAIR_CDR(rax), rbx
  1796 00001033 C9                              leave
  1797 00001034 C22000                          ret AND_KILL_FRAME(2)
  1798                                  
  1799                                  L_code_ptr_display_sexpr:
  1800 00001037 C8000000                        enter 0, 0
  1801 0000103B 48837D1801                      cmp COUNT, 1
  1802 00001040 0F85D70E0000                    jne L_error_arg_count_1
  1803 00001046 488B7D20                        mov rdi, PARAM(0)
  1804 0000104A E8F8F4FFFF                      call print_sexpr
  1805 0000104F 48B8-                           mov rax, sob_void
  1805 00001051 [0000000000000000] 
  1806 00001059 C9                              leave
  1807 0000105A C21800                          ret AND_KILL_FRAME(1)
  1808                                  
  1809                                  L_code_ptr_write_char:
  1810 0000105D C8000000                        enter 0, 0
  1811 00001061 48837D1801                      cmp COUNT, 1
  1812 00001066 0F85B10E0000                    jne L_error_arg_count_1
  1813 0000106C 488B4520                        mov rax, PARAM(0)
  1814                                          assert_char(rax)
    53 00001070 803802              <1>  cmp byte [%1], %2
    54 00001073 0F85780F0000        <1>  jne L_error_incorrect_type
  1815 00001079 8A4001                          mov al, SOB_CHAR_VALUE(rax)
  1816 0000107C 4825FF000000                    and rax, 255
  1817 00001082 48BF-                           mov rdi, fmt_char
  1817 00001084 [C108000000000000] 
  1818 0000108C 4889C6                          mov rsi, rax
  1819 0000108F B800000000                      mov rax, 0
  1820                                          ENTER
    44 00001094 C8000000            <1>  enter 0, 0
    45 00001098 4883E4F0            <1>  and rsp, ~15
  1821 0000109C E8(00000000)                    call printf
  1822                                          LEAVE
    49 000010A1 C9                  <1>  leave
  1823 000010A2 48B8-                           mov rax, sob_void
  1823 000010A4 [0000000000000000] 
  1824 000010AC C9                              leave
  1825 000010AD C21800                          ret AND_KILL_FRAME(1)
  1826                                  
  1827                                  L_code_ptr_car:
  1828 000010B0 C8000000                        enter 0, 0
  1829 000010B4 48837D1801                      cmp COUNT, 1
  1830 000010B9 0F855E0E0000                    jne L_error_arg_count_1
  1831 000010BF 488B4520                        mov rax, PARAM(0)
  1832                                          assert_pair(rax)
    53 000010C3 803821              <1>  cmp byte [%1], %2
    54 000010C6 0F85250F0000        <1>  jne L_error_incorrect_type
  1833 000010CC 488B4001                        mov rax, SOB_PAIR_CAR(rax)
  1834 000010D0 C9                              leave
  1835 000010D1 C21800                          ret AND_KILL_FRAME(1)
  1836                                          
  1837                                  L_code_ptr_cdr:
  1838 000010D4 C8000000                        enter 0, 0
  1839 000010D8 48837D1801                      cmp COUNT, 1
  1840 000010DD 0F853A0E0000                    jne L_error_arg_count_1
  1841 000010E3 488B4520                        mov rax, PARAM(0)
  1842                                          assert_pair(rax)
    53 000010E7 803821              <1>  cmp byte [%1], %2
    54 000010EA 0F85010F0000        <1>  jne L_error_incorrect_type
  1843 000010F0 488B4009                        mov rax, SOB_PAIR_CDR(rax)
  1844 000010F4 C9                              leave
  1845 000010F5 C21800                          ret AND_KILL_FRAME(1)
  1846                                          
  1847                                  L_code_ptr_string_length:
  1848 000010F8 C8000000                        enter 0, 0
  1849 000010FC 48837D1801                      cmp COUNT, 1
  1850 00001101 0F85160E0000                    jne L_error_arg_count_1
  1851 00001107 488B4520                        mov rax, PARAM(0)
  1852                                          assert_string(rax)
    53 0000110B 803803              <1>  cmp byte [%1], %2
    54 0000110E 0F85DD0E0000        <1>  jne L_error_incorrect_type
  1853 00001114 488B7801                        mov rdi, SOB_STRING_LENGTH(rax)
  1854 00001118 E84F0D0000                      call make_integer
  1855 0000111D C9                              leave
  1856 0000111E C21800                          ret AND_KILL_FRAME(1)
  1857                                  
  1858                                  L_code_ptr_vector_length:
  1859 00001121 C8000000                        enter 0, 0
  1860 00001125 48837D1801                      cmp COUNT, 1
  1861 0000112A 0F85ED0D0000                    jne L_error_arg_count_1
  1862 00001130 488B4520                        mov rax, PARAM(0)
  1863                                          assert_vector(rax)
    53 00001134 803822              <1>  cmp byte [%1], %2
    54 00001137 0F85B40E0000        <1>  jne L_error_incorrect_type
  1864 0000113D 488B7801                        mov rdi, SOB_VECTOR_LENGTH(rax)
  1865 00001141 E8260D0000                      call make_integer
  1866 00001146 C9                              leave
  1867 00001147 C21800                          ret AND_KILL_FRAME(1)
  1868                                  
  1869                                  L_code_ptr_real_to_integer:
  1870 0000114A C8000000                        enter 0, 0
  1871 0000114E 48837D1801                      cmp COUNT, 1
  1872 00001153 0F85C40D0000                    jne L_error_arg_count_1
  1873 00001159 488B5D20                        mov rbx, PARAM(0)
  1874                                          assert_real(rbx)
    53 0000115D 803B13              <1>  cmp byte [%1], %2
    54 00001160 0F858B0E0000        <1>  jne L_error_incorrect_type
  1875 00001166 F20F104301                      movsd xmm0, qword [rbx + 1]
  1876 0000116B F2480F2CF8                      cvttsd2si rdi, xmm0
  1877 00001170 E8F70C0000                      call make_integer
  1878 00001175 C9                              leave
  1879 00001176 C21800                          ret AND_KILL_FRAME(1)
  1880                                  
  1881                                  L_code_ptr_exit:
  1882 00001179 C8000000                        enter 0, 0
  1883 0000117D 48837D1800                      cmp COUNT, 0
  1884 00001182 0F85600D0000                    jne L_error_arg_count_0
  1885 00001188 B800000000                      mov rax, 0
  1886 0000118D E8(00000000)                    call exit
  1887                                  
  1888                                  L_code_ptr_integer_to_real:
  1889 00001192 C8000000                        enter 0, 0
  1890 00001196 48837D1801                      cmp COUNT, 1
  1891 0000119B 0F857C0D0000                    jne L_error_arg_count_1
  1892 000011A1 488B4520                        mov rax, PARAM(0)
  1893                                          assert_integer(rax)
    53 000011A5 803811              <1>  cmp byte [%1], %2
    54 000011A8 0F85430E0000        <1>  jne L_error_incorrect_type
  1894 000011AE FF7001                          push qword [rax + 1]
  1895 000011B1 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1896 000011B7 E8980C0000                      call make_real
  1897 000011BC C9                              leave
  1898 000011BD C21800                          ret AND_KILL_FRAME(1)
  1899                                  
  1900                                  L_code_ptr_fraction_to_real:
  1901 000011C0 C8000000                        enter 0, 0
  1902 000011C4 48837D1801                      cmp COUNT, 1
  1903 000011C9 0F854E0D0000                    jne L_error_arg_count_1
  1904 000011CF 488B4520                        mov rax, PARAM(0)
  1905                                          assert_fraction(rax)
    53 000011D3 803812              <1>  cmp byte [%1], %2
    54 000011D6 0F85150E0000        <1>  jne L_error_incorrect_type
  1906 000011DC FF7001                          push qword [rax + 1]
  1907 000011DF F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1908 000011E5 FF7009                          push qword [rax + 1 + 8]
  1909 000011E8 F2480F2A0C24                    cvtsi2sd xmm1, qword [rsp]
  1910 000011EE F20F5EC1                        divsd xmm0, xmm1
  1911 000011F2 E85D0C0000                      call make_real
  1912 000011F7 C9                              leave
  1913 000011F8 C21800                          ret AND_KILL_FRAME(1)
  1914                                  
  1915                                  L_code_ptr_char_to_integer:
  1916 000011FB C8000000                        enter 0, 0
  1917 000011FF 48837D1801                      cmp COUNT, 1
  1918 00001204 0F85130D0000                    jne L_error_arg_count_1
  1919 0000120A 488B4520                        mov rax, PARAM(0)
  1920                                          assert_char(rax)
    53 0000120E 803802              <1>  cmp byte [%1], %2
    54 00001211 0F85DA0D0000        <1>  jne L_error_incorrect_type
  1921 00001217 8A4001                          mov al, byte [rax + 1]
  1922 0000121A 4825FF000000                    and rax, 255
  1923 00001220 4889C7                          mov rdi, rax
  1924 00001223 E8440C0000                      call make_integer
  1925 00001228 C9                              leave
  1926 00001229 C21800                          ret AND_KILL_FRAME(1)
  1927                                  
  1928                                  L_code_ptr_integer_to_fraction:
  1929 0000122C C8000000                        enter 0, 0
  1930 00001230 48837D1801                      cmp COUNT, 1
  1931 00001235 0F85E20C0000                    jne L_error_arg_count_1
  1932 0000123B 4C8B4520                        mov r8, PARAM(0)
  1933                                          assert_integer(r8)
    53 0000123F 41803811            <1>  cmp byte [%1], %2
    54 00001243 0F85A80D0000        <1>  jne L_error_incorrect_type
  1934 00001249 BF11000000                      mov rdi, (1 + 8 + 8)
  1935 0000124E E873F0FFFF                      call malloc
  1936 00001253 498B5801                        mov rbx, qword [r8 + 1]
  1937 00001257 C60012                          mov byte [rax], T_fraction
  1938 0000125A 48895801                        mov qword [rax + 1], rbx
  1939 0000125E 48C7400901000000                mov qword [rax + 1 + 8], 1
  1940 00001266 C9                              leave
  1941 00001267 C21800                          ret AND_KILL_FRAME(1)
  1942                                  
  1943                                  L_code_ptr_integer_to_char:
  1944 0000126A C8000000                        enter 0, 0
  1945 0000126E 48837D1801                      cmp COUNT, 1
  1946 00001273 0F85A40C0000                    jne L_error_arg_count_1
  1947 00001279 488B4520                        mov rax, PARAM(0)
  1948                                          assert_integer(rax)
    53 0000127D 803811              <1>  cmp byte [%1], %2
    54 00001280 0F856B0D0000        <1>  jne L_error_incorrect_type
  1949 00001286 488B5801                        mov rbx, qword [rax + 1]
  1950 0000128A 4883FB00                        cmp rbx, 0
  1951 0000128E 0F8EF20B0000                    jle L_error_integer_range
  1952 00001294 4881FB00010000                  cmp rbx, 256
  1953 0000129B 0F8DE50B0000                    jge L_error_integer_range
  1954 000012A1 BF02000000                      mov rdi, (1 + 1)
  1955 000012A6 E81BF0FFFF                      call malloc
  1956 000012AB C60002                          mov byte [rax], T_char
  1957 000012AE 885801                          mov byte [rax + 1], bl
  1958 000012B1 C9                              leave
  1959 000012B2 C21800                          ret AND_KILL_FRAME(1)
  1960                                  
  1961                                  L_code_ptr_trng:
  1962 000012B5 C8000000                        enter 0, 0
  1963 000012B9 48837D1800                      cmp COUNT, 0
  1964 000012BE 0F85240C0000                    jne L_error_arg_count_0
  1965 000012C4 480FC7F7                        rdrand rdi
  1966 000012C8 48D1EF                          shr rdi, 1
  1967 000012CB E89C0B0000                      call make_integer
  1968 000012D0 C9                              leave
  1969 000012D1 C21000                          ret AND_KILL_FRAME(0)
  1970                                  
  1971                                  L_code_ptr_is_zero:
  1972 000012D4 C8000000                        enter 0, 0
  1973 000012D8 48837D1801                      cmp COUNT, 1
  1974 000012DD 0F853A0C0000                    jne L_error_arg_count_1
  1975 000012E3 488B4520                        mov rax, PARAM(0)
  1976 000012E7 803811                          cmp byte [rax], T_integer
  1977 000012EA 740F                            je .L_integer
  1978 000012EC 803812                          cmp byte [rax], T_fraction
  1979 000012EF 7413                            je .L_fraction
  1980 000012F1 803813                          cmp byte [rax], T_real
  1981 000012F4 7417                            je .L_real
  1982 000012F6 E9F60C0000                      jmp L_error_incorrect_type
  1983                                  .L_integer:
  1984 000012FB 4883780100                      cmp qword [rax + 1], 0
  1985 00001300 7429                            je .L_zero
  1986 00001302 EB1B                            jmp .L_not_zero
  1987                                  .L_fraction:
  1988 00001304 4883780100                      cmp qword [rax + 1], 0
  1989 00001309 7420                            je .L_zero
  1990 0000130B EB12                            jmp .L_not_zero
  1991                                  .L_real:
  1992 0000130D 660FEFC0                        pxor xmm0, xmm0
  1993 00001311 FF7001                          push qword [rax + 1]
  1994 00001314 F20F100C24                      movsd xmm1, qword [rsp]
  1995 00001319 660F2EC1                        ucomisd xmm0, xmm1
  1996 0000131D 740C                            je .L_zero
  1997                                  .L_not_zero:
  1998 0000131F 48B8-                           mov rax, sob_boolean_false
  1998 00001321 [0200000000000000] 
  1999 00001329 EB0A                            jmp .L_end
  2000                                  .L_zero:
  2001 0000132B 48B8-                           mov rax, sob_boolean_true
  2001 0000132D [0300000000000000] 
  2002                                  .L_end:
  2003 00001335 C9                              leave
  2004 00001336 C21800                          ret AND_KILL_FRAME(1)
  2005                                  
  2006                                  L_code_ptr_is_integer:
  2007 00001339 C8000000                        enter 0, 0
  2008 0000133D 48837D1801                      cmp COUNT, 1
  2009 00001342 0F85D50B0000                    jne L_error_arg_count_1
  2010 00001348 488B4520                        mov rax, PARAM(0)
  2011 0000134C 803811                          cmp byte [rax], T_integer
  2012 0000134F 750C                            jne .L_false
  2013 00001351 48B8-                           mov rax, sob_boolean_true
  2013 00001353 [0300000000000000] 
  2014 0000135B EB0A                            jmp .L_exit
  2015                                  .L_false:
  2016 0000135D 48B8-                           mov rax, sob_boolean_false
  2016 0000135F [0200000000000000] 
  2017                                  .L_exit:
  2018 00001367 C9                              leave
  2019 00001368 C21800                          ret AND_KILL_FRAME(1)
  2020                                  
  2021                                  L_code_ptr_raw_bin_add_rr:
  2022 0000136B C8000000                        enter 0, 0
  2023 0000136F 48837D1802                      cmp COUNT, 2
  2024 00001374 0F85D80B0000                    jne L_error_arg_count_2
  2025 0000137A 488B5D20                        mov rbx, PARAM(0)
  2026                                          assert_real(rbx)
    53 0000137E 803B13              <1>  cmp byte [%1], %2
    54 00001381 0F856A0C0000        <1>  jne L_error_incorrect_type
  2027 00001387 488B4D28                        mov rcx, PARAM(1)
  2028                                          assert_real(rcx)
    53 0000138B 803913              <1>  cmp byte [%1], %2
    54 0000138E 0F855D0C0000        <1>  jne L_error_incorrect_type
  2029 00001394 F20F104301                      movsd xmm0, qword [rbx + 1]
  2030 00001399 F20F104901                      movsd xmm1, qword [rcx + 1]
  2031 0000139E F20F58C1                        addsd xmm0, xmm1
  2032 000013A2 E8AD0A0000                      call make_real
  2033 000013A7 C9                              leave
  2034 000013A8 C22000                          ret AND_KILL_FRAME(2)
  2035                                  
  2036                                  L_code_ptr_raw_bin_sub_rr:
  2037 000013AB C8000000                        enter 0, 0
  2038 000013AF 48837D1802                      cmp COUNT, 2
  2039 000013B4 0F85980B0000                    jne L_error_arg_count_2
  2040 000013BA 488B5D20                        mov rbx, PARAM(0)
  2041                                          assert_real(rbx)
    53 000013BE 803B13              <1>  cmp byte [%1], %2
    54 000013C1 0F852A0C0000        <1>  jne L_error_incorrect_type
  2042 000013C7 488B4D28                        mov rcx, PARAM(1)
  2043                                          assert_real(rcx)
    53 000013CB 803913              <1>  cmp byte [%1], %2
    54 000013CE 0F851D0C0000        <1>  jne L_error_incorrect_type
  2044 000013D4 F20F104301                      movsd xmm0, qword [rbx + 1]
  2045 000013D9 F20F104901                      movsd xmm1, qword [rcx + 1]
  2046 000013DE F20F5CC1                        subsd xmm0, xmm1
  2047 000013E2 E86D0A0000                      call make_real
  2048 000013E7 C9                              leave
  2049 000013E8 C22000                          ret AND_KILL_FRAME(2)
  2050                                  
  2051                                  L_code_ptr_raw_bin_mul_rr:
  2052 000013EB C8000000                        enter 0, 0
  2053 000013EF 48837D1802                      cmp COUNT, 2
  2054 000013F4 0F85580B0000                    jne L_error_arg_count_2
  2055 000013FA 488B5D20                        mov rbx, PARAM(0)
  2056                                          assert_real(rbx)
    53 000013FE 803B13              <1>  cmp byte [%1], %2
    54 00001401 0F85EA0B0000        <1>  jne L_error_incorrect_type
  2057 00001407 488B4D28                        mov rcx, PARAM(1)
  2058                                          assert_real(rcx)
    53 0000140B 803913              <1>  cmp byte [%1], %2
    54 0000140E 0F85DD0B0000        <1>  jne L_error_incorrect_type
  2059 00001414 F20F104301                      movsd xmm0, qword [rbx + 1]
  2060 00001419 F20F104901                      movsd xmm1, qword [rcx + 1]
  2061 0000141E F20F59C1                        mulsd xmm0, xmm1
  2062 00001422 E82D0A0000                      call make_real
  2063 00001427 C9                              leave
  2064 00001428 C22000                          ret AND_KILL_FRAME(2)
  2065                                  
  2066                                  L_code_ptr_raw_bin_div_rr:
  2067 0000142B C8000000                        enter 0, 0
  2068 0000142F 48837D1802                      cmp COUNT, 2
  2069 00001434 0F85180B0000                    jne L_error_arg_count_2
  2070 0000143A 488B5D20                        mov rbx, PARAM(0)
  2071                                          assert_real(rbx)
    53 0000143E 803B13              <1>  cmp byte [%1], %2
    54 00001441 0F85AA0B0000        <1>  jne L_error_incorrect_type
  2072 00001447 488B4D28                        mov rcx, PARAM(1)
  2073                                          assert_real(rcx)
    53 0000144B 803913              <1>  cmp byte [%1], %2
    54 0000144E 0F859D0B0000        <1>  jne L_error_incorrect_type
  2074 00001454 F20F104301                      movsd xmm0, qword [rbx + 1]
  2075 00001459 F20F104901                      movsd xmm1, qword [rcx + 1]
  2076 0000145E 660FEFD2                        pxor xmm2, xmm2
  2077 00001462 660F2ECA                        ucomisd xmm1, xmm2
  2078 00001466 0F84B60B0000                    je L_error_division_by_zero
  2079 0000146C F20F5EC1                        divsd xmm0, xmm1
  2080 00001470 E8DF090000                      call make_real
  2081 00001475 C9                              leave
  2082 00001476 C22000                          ret AND_KILL_FRAME(2)
  2083                                  
  2084                                  L_code_ptr_raw_bin_add_zz:
  2085 00001479 C8000000                	enter 0, 0
  2086 0000147D 48837D1802              	cmp COUNT, 2
  2087 00001482 0F85CA0A0000            	jne L_error_arg_count_2
  2088 00001488 4C8B4520                	mov r8, PARAM(0)
  2089                                  	assert_integer(r8)
    53 0000148C 41803811            <1>  cmp byte [%1], %2
    54 00001490 0F855B0B0000        <1>  jne L_error_incorrect_type
  2090 00001496 4C8B4D28                	mov r9, PARAM(1)
  2091                                  	assert_integer(r9)
    53 0000149A 41803911            <1>  cmp byte [%1], %2
    54 0000149E 0F854D0B0000        <1>  jne L_error_incorrect_type
  2092 000014A4 498B7801                	mov rdi, qword [r8 + 1]
  2093 000014A8 49037901                	add rdi, qword [r9 + 1]
  2094 000014AC E8BB090000              	call make_integer
  2095 000014B1 C9                      	leave
  2096 000014B2 C22000                  	ret AND_KILL_FRAME(2)
  2097                                  
  2098                                  L_code_ptr_raw_bin_add_qq:
  2099 000014B5 C8000000                        enter 0, 0
  2100 000014B9 48837D1802                      cmp COUNT, 2
  2101 000014BE 0F858E0A0000                    jne L_error_arg_count_2
  2102 000014C4 4C8B4520                        mov r8, PARAM(0)
  2103                                          assert_fraction(r8)
    53 000014C8 41803812            <1>  cmp byte [%1], %2
    54 000014CC 0F851F0B0000        <1>  jne L_error_incorrect_type
  2104 000014D2 4C8B4D28                        mov r9, PARAM(1)
  2105                                          assert_fraction(r9)
    53 000014D6 41803912            <1>  cmp byte [%1], %2
    54 000014DA 0F85110B0000        <1>  jne L_error_incorrect_type
  2106 000014E0 498B4001                        mov rax, qword [r8 + 1] ; num1
  2107 000014E4 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  2108 000014E8 4899                            cqo
  2109 000014EA 48F7EB                          imul rbx
  2110 000014ED 4889C6                          mov rsi, rax
  2111 000014F0 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2112 000014F4 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  2113 000014F8 4899                            cqo
  2114 000014FA 48F7EB                          imul rbx
  2115 000014FD 4801C6                          add rsi, rax
  2116 00001500 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2117 00001504 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  2118 00001508 4899                            cqo
  2119 0000150A 48F7EB                          imul rbx
  2120 0000150D 4889C7                          mov rdi, rax
  2121 00001510 E8DE010000                      call normalize_fraction
  2122 00001515 C9                              leave
  2123 00001516 C22000                          ret AND_KILL_FRAME(2)
  2124                                  
  2125                                  L_code_ptr_raw_bin_sub_zz:
  2126 00001519 C8000000                	enter 0, 0
  2127 0000151D 48837D1802              	cmp COUNT, 2
  2128 00001522 0F852A0A0000            	jne L_error_arg_count_2
  2129 00001528 4C8B4520                	mov r8, PARAM(0)
  2130                                  	assert_integer(r8)
    53 0000152C 41803811            <1>  cmp byte [%1], %2
    54 00001530 0F85BB0A0000        <1>  jne L_error_incorrect_type
  2131 00001536 4C8B4D28                	mov r9, PARAM(1)
  2132                                  	assert_integer(r9)
    53 0000153A 41803911            <1>  cmp byte [%1], %2
    54 0000153E 0F85AD0A0000        <1>  jne L_error_incorrect_type
  2133 00001544 498B7801                	mov rdi, qword [r8 + 1]
  2134 00001548 492B7901                	sub rdi, qword [r9 + 1]
  2135 0000154C E81B090000              	call make_integer
  2136 00001551 C9                      	leave
  2137 00001552 C22000                  	ret AND_KILL_FRAME(2)
  2138                                  
  2139                                  L_code_ptr_raw_bin_sub_qq:
  2140 00001555 C8000000                        enter 0, 0
  2141 00001559 48837D1802                      cmp COUNT, 2
  2142 0000155E 0F85EE090000                    jne L_error_arg_count_2
  2143 00001564 4C8B4520                        mov r8, PARAM(0)
  2144                                          assert_fraction(r8)
    53 00001568 41803812            <1>  cmp byte [%1], %2
    54 0000156C 0F857F0A0000        <1>  jne L_error_incorrect_type
  2145 00001572 4C8B4D28                        mov r9, PARAM(1)
  2146                                          assert_fraction(r9)
    53 00001576 41803912            <1>  cmp byte [%1], %2
    54 0000157A 0F85710A0000        <1>  jne L_error_incorrect_type
  2147 00001580 498B4001                        mov rax, qword [r8 + 1] ; num1
  2148 00001584 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  2149 00001588 4899                            cqo
  2150 0000158A 48F7EB                          imul rbx
  2151 0000158D 4889C6                          mov rsi, rax
  2152 00001590 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2153 00001594 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  2154 00001598 4899                            cqo
  2155 0000159A 48F7EB                          imul rbx
  2156 0000159D 4829C6                          sub rsi, rax
  2157 000015A0 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2158 000015A4 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  2159 000015A8 4899                            cqo
  2160 000015AA 48F7EB                          imul rbx
  2161 000015AD 4889C7                          mov rdi, rax
  2162 000015B0 E83E010000                      call normalize_fraction
  2163 000015B5 C9                              leave
  2164 000015B6 C22000                          ret AND_KILL_FRAME(2)
  2165                                  
  2166                                  L_code_ptr_raw_bin_mul_zz:
  2167 000015B9 C8000000                	enter 0, 0
  2168 000015BD 48837D1802              	cmp COUNT, 2
  2169 000015C2 0F858A090000            	jne L_error_arg_count_2
  2170 000015C8 4C8B4520                	mov r8, PARAM(0)
  2171                                  	assert_integer(r8)
    53 000015CC 41803811            <1>  cmp byte [%1], %2
    54 000015D0 0F851B0A0000        <1>  jne L_error_incorrect_type
  2172 000015D6 4C8B4D28                	mov r9, PARAM(1)
  2173                                  	assert_integer(r9)
    53 000015DA 41803911            <1>  cmp byte [%1], %2
    54 000015DE 0F850D0A0000        <1>  jne L_error_incorrect_type
  2174 000015E4 4899                    	cqo
  2175 000015E6 498B4001                	mov rax, qword [r8 + 1]
  2176 000015EA 49F76101                	mul qword [r9 + 1]
  2177 000015EE 4889C7                  	mov rdi, rax
  2178 000015F1 E876080000              	call make_integer
  2179 000015F6 C9                      	leave
  2180 000015F7 C22000                  	ret AND_KILL_FRAME(2)
  2181                                  
  2182                                  L_code_ptr_raw_bin_mul_qq:
  2183 000015FA C8000000                        enter 0, 0
  2184 000015FE 48837D1802                      cmp COUNT, 2
  2185 00001603 0F8549090000                    jne L_error_arg_count_2
  2186 00001609 4C8B4520                        mov r8, PARAM(0)
  2187                                          assert_fraction(r8)
    53 0000160D 41803812            <1>  cmp byte [%1], %2
    54 00001611 0F85DA090000        <1>  jne L_error_incorrect_type
  2188 00001617 4C8B4D28                        mov r9, PARAM(1)
  2189                                          assert_fraction(r9)
    53 0000161B 41803912            <1>  cmp byte [%1], %2
    54 0000161F 0F85CC090000        <1>  jne L_error_incorrect_type
  2190 00001625 498B4001                        mov rax, qword [r8 + 1] ; num1
  2191 00001629 498B5901                        mov rbx, qword [r9 + 1] ; num2
  2192 0000162D 4899                            cqo
  2193 0000162F 48F7EB                          imul rbx
  2194 00001632 4889C6                          mov rsi, rax
  2195 00001635 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2196 00001639 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  2197 0000163D 4899                            cqo
  2198 0000163F 48F7EB                          imul rbx
  2199 00001642 4889C7                          mov rdi, rax
  2200 00001645 E8A9000000                      call normalize_fraction
  2201 0000164A C9                              leave
  2202 0000164B C22000                          ret AND_KILL_FRAME(2)
  2203                                          
  2204                                  L_code_ptr_raw_bin_div_zz:
  2205 0000164E C8000000                	enter 0, 0
  2206 00001652 48837D1802              	cmp COUNT, 2
  2207 00001657 0F85F5080000            	jne L_error_arg_count_2
  2208 0000165D 4C8B4520                	mov r8, PARAM(0)
  2209                                  	assert_integer(r8)
    53 00001661 41803811            <1>  cmp byte [%1], %2
    54 00001665 0F8586090000        <1>  jne L_error_incorrect_type
  2210 0000166B 4C8B4D28                	mov r9, PARAM(1)
  2211                                  	assert_integer(r9)
    53 0000166F 41803911            <1>  cmp byte [%1], %2
    54 00001673 0F8578090000        <1>  jne L_error_incorrect_type
  2212 00001679 498B7901                	mov rdi, qword [r9 + 1]
  2213 0000167D 4883FF00                	cmp rdi, 0
  2214 00001681 0F849B090000            	je L_error_division_by_zero
  2215 00001687 498B7001                	mov rsi, qword [r8 + 1]
  2216 0000168B E863000000              	call normalize_fraction
  2217 00001690 C9                      	leave
  2218 00001691 C22000                  	ret AND_KILL_FRAME(2)
  2219                                  
  2220                                  L_code_ptr_raw_bin_div_qq:
  2221 00001694 C8000000                        enter 0, 0
  2222 00001698 48837D1802                      cmp COUNT, 2
  2223 0000169D 0F85AF080000                    jne L_error_arg_count_2
  2224 000016A3 4C8B4520                        mov r8, PARAM(0)
  2225                                          assert_fraction(r8)
    53 000016A7 41803812            <1>  cmp byte [%1], %2
    54 000016AB 0F8540090000        <1>  jne L_error_incorrect_type
  2226 000016B1 4C8B4D28                        mov r9, PARAM(1)
  2227                                          assert_fraction(r9)
    53 000016B5 41803912            <1>  cmp byte [%1], %2
    54 000016B9 0F8532090000        <1>  jne L_error_incorrect_type
  2228 000016BF 4983790100                      cmp qword [r9 + 1], 0
  2229 000016C4 0F8458090000                    je L_error_division_by_zero
  2230 000016CA 498B4001                        mov rax, qword [r8 + 1] ; num1
  2231 000016CE 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  2232 000016D2 4899                            cqo
  2233 000016D4 48F7EB                          imul rbx
  2234 000016D7 4889C6                          mov rsi, rax
  2235 000016DA 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2236 000016DE 498B5901                        mov rbx, qword [r9 + 1] ; num2
  2237 000016E2 4899                            cqo
  2238 000016E4 48F7EB                          imul rbx
  2239 000016E7 4889C7                          mov rdi, rax
  2240 000016EA E804000000                      call normalize_fraction
  2241 000016EF C9                              leave
  2242 000016F0 C22000                          ret AND_KILL_FRAME(2)
  2243                                          
  2244                                  normalize_fraction:
  2245 000016F3 56                              push rsi
  2246 000016F4 57                              push rdi
  2247 000016F5 E859000000                      call gcd
  2248 000016FA 4889C3                          mov rbx, rax
  2249 000016FD 58                              pop rax
  2250 000016FE 4899                            cqo
  2251 00001700 48F7FB                          idiv rbx
  2252 00001703 4989C0                          mov r8, rax
  2253 00001706 58                              pop rax
  2254 00001707 4899                            cqo
  2255 00001709 48F7FB                          idiv rbx
  2256 0000170C 4989C1                          mov r9, rax
  2257 0000170F 4983F900                        cmp r9, 0
  2258 00001713 741C                            je .L_zero
  2259 00001715 4983F801                        cmp r8, 1
  2260 00001719 7421                            je .L_int
  2261 0000171B BF11000000                      mov rdi, (1 + 8 + 8)
  2262 00001720 E8A1EBFFFF                      call malloc
  2263 00001725 C60012                          mov byte [rax], T_fraction
  2264 00001728 4C894801                        mov qword [rax + 1], r9
  2265 0000172C 4C894009                        mov qword [rax + 1 + 8], r8
  2266 00001730 C3                              ret
  2267                                  .L_zero:
  2268 00001731 BF00000000                      mov rdi, 0
  2269 00001736 E831070000                      call make_integer
  2270 0000173B C3                              ret
  2271                                  .L_int:
  2272 0000173C 4C89CF                          mov rdi, r9
  2273 0000173F E828070000                      call make_integer
  2274 00001744 C3                              ret
  2275                                  
  2276                                  iabs:
  2277 00001745 4889F8                          mov rax, rdi
  2278 00001748 4883F800                        cmp rax, 0
  2279 0000174C 7C01                            jl .Lneg
  2280 0000174E C3                              ret
  2281                                  .Lneg:
  2282 0000174F 48F7D8                          neg rax
  2283 00001752 C3                              ret
  2284                                  
  2285                                  gcd:
  2286 00001753 E8EDFFFFFF                      call iabs
  2287 00001758 4889C3                          mov rbx, rax
  2288 0000175B 4889F7                          mov rdi, rsi
  2289 0000175E E8E2FFFFFF                      call iabs
  2290 00001763 4883F800                        cmp rax, 0
  2291 00001767 7502                            jne .L0
  2292 00001769 4893                            xchg rax, rbx
  2293                                  .L0:
  2294 0000176B 4883FB00                        cmp rbx, 0
  2295 0000176F 740C                            je .L1
  2296 00001771 4899                            cqo
  2297 00001773 48F7F3                          div rbx
  2298 00001776 4889D0                          mov rax, rdx
  2299 00001779 4893                            xchg rax, rbx
  2300 0000177B EBEE                            jmp .L0
  2301                                  .L1:
  2302 0000177D C3                              ret
  2303                                  
  2304                                  L_code_ptr_error:
  2305 0000177E C8000000                        enter 0, 0
  2306 00001782 48837D1802                      cmp COUNT, 2
  2307 00001787 0F85C5070000                    jne L_error_arg_count_2
  2308 0000178D 488B7520                        mov rsi, PARAM(0)
  2309                                          assert_interned_symbol(rsi)
    53 00001791 803E41              <1>  cmp byte [%1], %2
    54 00001794 0F8557080000        <1>  jne L_error_incorrect_type
  2310 0000179A 488B7528                        mov rsi, PARAM(1)
  2311                                          assert_string(rsi)
    53 0000179E 803E03              <1>  cmp byte [%1], %2
    54 000017A1 0F854A080000        <1>  jne L_error_incorrect_type
  2312 000017A7 48BF-                           mov rdi, fmt_scheme_error_part_1
  2312 000017A9 [1F0A000000000000] 
  2313 000017B1 B800000000                      mov rax, 0
  2314                                          ENTER
    44 000017B6 C8000000            <1>  enter 0, 0
    45 000017BA 4883E4F0            <1>  and rsp, ~15
  2315 000017BE E8(00000000)                    call printf
  2316                                          LEAVE
    49 000017C3 C9                  <1>  leave
  2317 000017C4 488B7D20                        mov rdi, PARAM(0)
  2318 000017C8 E87AEDFFFF                      call print_sexpr
  2319 000017CD 48BF-                           mov rdi, fmt_scheme_error_part_2
  2319 000017CF [330A000000000000] 
  2320 000017D7 B800000000                      mov rax, 0
  2321                                          ENTER
    44 000017DC C8000000            <1>  enter 0, 0
    45 000017E0 4883E4F0            <1>  and rsp, ~15
  2322 000017E4 E8(00000000)                    call printf
  2323                                          LEAVE
    49 000017E9 C9                  <1>  leave
  2324 000017EA 488B4528                        mov rax, PARAM(1)       ; sob_string
  2325 000017EE BE01000000                      mov rsi, 1              ; size = 1 byte
  2326 000017F3 488B5001                        mov rdx, qword [rax + 1] ; length
  2327 000017F7 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
  2328 000017FB 488B0C25[00000000]              mov rcx, qword [stdout]  ; FILE*
  2329                                  	ENTER
    44 00001803 C8000000            <1>  enter 0, 0
    45 00001807 4883E4F0            <1>  and rsp, ~15
  2330 0000180B E8(00000000)                    call fwrite
  2331                                  	LEAVE
    49 00001810 C9                  <1>  leave
  2332 00001811 48BF-                           mov rdi, fmt_scheme_error_part_3
  2332 00001813 [750A000000000000] 
  2333 0000181B B800000000                      mov rax, 0
  2334                                          ENTER
    44 00001820 C8000000            <1>  enter 0, 0
    45 00001824 4883E4F0            <1>  and rsp, ~15
  2335 00001828 E8(00000000)                    call printf
  2336                                          LEAVE
    49 0000182D C9                  <1>  leave
  2337 0000182E 48C7C0F7FFFFFF                  mov rax, -9
  2338 00001835 E8(00000000)                    call exit
  2339                                  
  2340                                  L_code_ptr_raw_less_than_rr:
  2341 0000183A C8000000                        enter 0, 0
  2342 0000183E 48837D1802                      cmp COUNT, 2
  2343 00001843 0F8509070000                    jne L_error_arg_count_2
  2344 00001849 488B7520                        mov rsi, PARAM(0)
  2345                                          assert_real(rsi)
    53 0000184D 803E13              <1>  cmp byte [%1], %2
    54 00001850 0F859B070000        <1>  jne L_error_incorrect_type
  2346 00001856 488B7D28                        mov rdi, PARAM(1)
  2347                                          assert_real(rdi)
    53 0000185A 803F13              <1>  cmp byte [%1], %2
    54 0000185D 0F858E070000        <1>  jne L_error_incorrect_type
  2348 00001863 F20F104601                      movsd xmm0, qword [rsi + 1]
  2349 00001868 F20F104F01                      movsd xmm1, qword [rdi + 1]
  2350 0000186D 660F2FC1                        comisd xmm0, xmm1
  2351 00001871 730C                            jae .L_false
  2352 00001873 48B8-                           mov rax, sob_boolean_true
  2352 00001875 [0300000000000000] 
  2353 0000187D EB0A                            jmp .L_exit
  2354                                  .L_false:
  2355 0000187F 48B8-                           mov rax, sob_boolean_false
  2355 00001881 [0200000000000000] 
  2356                                  .L_exit:
  2357 00001889 C9                              leave
  2358 0000188A C22000                          ret AND_KILL_FRAME(2)
  2359                                          
  2360                                  L_code_ptr_raw_less_than_zz:
  2361 0000188D C8000000                	enter 0, 0
  2362 00001891 48837D1802              	cmp COUNT, 2
  2363 00001896 0F85B6060000            	jne L_error_arg_count_2
  2364 0000189C 4C8B4520                	mov r8, PARAM(0)
  2365                                  	assert_integer(r8)
    53 000018A0 41803811            <1>  cmp byte [%1], %2
    54 000018A4 0F8547070000        <1>  jne L_error_incorrect_type
  2366 000018AA 4C8B4D28                	mov r9, PARAM(1)
  2367                                  	assert_integer(r9)
    53 000018AE 41803911            <1>  cmp byte [%1], %2
    54 000018B2 0F8539070000        <1>  jne L_error_incorrect_type
  2368 000018B8 498B7801                	mov rdi, qword [r8 + 1]
  2369 000018BC 493B7901                	cmp rdi, qword [r9 + 1]
  2370 000018C0 7D0C                    	jge .L_false
  2371 000018C2 48B8-                   	mov rax, sob_boolean_true
  2371 000018C4 [0300000000000000] 
  2372 000018CC EB0A                    	jmp .L_exit
  2373                                  .L_false:
  2374 000018CE 48B8-                   	mov rax, sob_boolean_false
  2374 000018D0 [0200000000000000] 
  2375                                  .L_exit:
  2376 000018D8 C9                      	leave
  2377 000018D9 C22000                  	ret AND_KILL_FRAME(2)
  2378                                  
  2379                                  L_code_ptr_raw_less_than_qq:
  2380 000018DC C8000000                        enter 0, 0
  2381 000018E0 48837D1802                      cmp COUNT, 2
  2382 000018E5 0F8567060000                    jne L_error_arg_count_2
  2383 000018EB 488B7520                        mov rsi, PARAM(0)
  2384                                          assert_fraction(rsi)
    53 000018EF 803E12              <1>  cmp byte [%1], %2
    54 000018F2 0F85F9060000        <1>  jne L_error_incorrect_type
  2385 000018F8 488B7D28                        mov rdi, PARAM(1)
  2386                                          assert_fraction(rdi)
    53 000018FC 803F12              <1>  cmp byte [%1], %2
    54 000018FF 0F85EC060000        <1>  jne L_error_incorrect_type
  2387 00001905 488B4601                        mov rax, qword [rsi + 1] ; num1
  2388 00001909 4899                            cqo
  2389 0000190B 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  2390 0000190F 4889C1                          mov rcx, rax
  2391 00001912 488B4609                        mov rax, qword [rsi + 1 + 8] ; den1
  2392 00001916 4899                            cqo
  2393 00001918 48F76F01                        imul qword [rdi + 1]          ; num2
  2394 0000191C 4829C1                          sub rcx, rax
  2395 0000191F 7D0C                            jge .L_false
  2396 00001921 48B8-                           mov rax, sob_boolean_true
  2396 00001923 [0300000000000000] 
  2397 0000192B EB0A                            jmp .L_exit
  2398                                  .L_false:
  2399 0000192D 48B8-                           mov rax, sob_boolean_false
  2399 0000192F [0200000000000000] 
  2400                                  .L_exit:
  2401 00001937 C9                              leave
  2402 00001938 C22000                          ret AND_KILL_FRAME(2)
  2403                                  
  2404                                  L_code_ptr_raw_equal_rr:
  2405 0000193B C8000000                        enter 0, 0
  2406 0000193F 48837D1802                      cmp COUNT, 2
  2407 00001944 0F8508060000                    jne L_error_arg_count_2
  2408 0000194A 488B7520                        mov rsi, PARAM(0)
  2409                                          assert_real(rsi)
    53 0000194E 803E13              <1>  cmp byte [%1], %2
    54 00001951 0F859A060000        <1>  jne L_error_incorrect_type
  2410 00001957 488B7D28                        mov rdi, PARAM(1)
  2411                                          assert_real(rdi)
    53 0000195B 803F13              <1>  cmp byte [%1], %2
    54 0000195E 0F858D060000        <1>  jne L_error_incorrect_type
  2412 00001964 F20F104601                      movsd xmm0, qword [rsi + 1]
  2413 00001969 F20F104F01                      movsd xmm1, qword [rdi + 1]
  2414 0000196E 660F2FC1                        comisd xmm0, xmm1
  2415 00001972 750C                            jne .L_false
  2416 00001974 48B8-                           mov rax, sob_boolean_true
  2416 00001976 [0300000000000000] 
  2417 0000197E EB0A                            jmp .L_exit
  2418                                  .L_false:
  2419 00001980 48B8-                           mov rax, sob_boolean_false
  2419 00001982 [0200000000000000] 
  2420                                  .L_exit:
  2421 0000198A C9                              leave
  2422 0000198B C22000                          ret AND_KILL_FRAME(2)
  2423                                          
  2424                                  L_code_ptr_raw_equal_zz:
  2425 0000198E C8000000                	enter 0, 0
  2426 00001992 48837D1802              	cmp COUNT, 2
  2427 00001997 0F85B5050000            	jne L_error_arg_count_2
  2428 0000199D 4C8B4520                	mov r8, PARAM(0)
  2429                                  	assert_integer(r8)
    53 000019A1 41803811            <1>  cmp byte [%1], %2
    54 000019A5 0F8546060000        <1>  jne L_error_incorrect_type
  2430 000019AB 4C8B4D28                	mov r9, PARAM(1)
  2431                                  	assert_integer(r9)
    53 000019AF 41803911            <1>  cmp byte [%1], %2
    54 000019B3 0F8538060000        <1>  jne L_error_incorrect_type
  2432 000019B9 498B7801                	mov rdi, qword [r8 + 1]
  2433 000019BD 493B7901                	cmp rdi, qword [r9 + 1]
  2434 000019C1 750C                    	jne .L_false
  2435 000019C3 48B8-                   	mov rax, sob_boolean_true
  2435 000019C5 [0300000000000000] 
  2436 000019CD EB0A                    	jmp .L_exit
  2437                                  .L_false:
  2438 000019CF 48B8-                   	mov rax, sob_boolean_false
  2438 000019D1 [0200000000000000] 
  2439                                  .L_exit:
  2440 000019D9 C9                      	leave
  2441 000019DA C22000                  	ret AND_KILL_FRAME(2)
  2442                                  
  2443                                  L_code_ptr_raw_equal_qq:
  2444 000019DD C8000000                        enter 0, 0
  2445 000019E1 48837D1802                      cmp COUNT, 2
  2446 000019E6 0F8566050000                    jne L_error_arg_count_2
  2447 000019EC 488B7520                        mov rsi, PARAM(0)
  2448                                          assert_fraction(rsi)
    53 000019F0 803E12              <1>  cmp byte [%1], %2
    54 000019F3 0F85F8050000        <1>  jne L_error_incorrect_type
  2449 000019F9 488B7D28                        mov rdi, PARAM(1)
  2450                                          assert_fraction(rdi)
    53 000019FD 803F12              <1>  cmp byte [%1], %2
    54 00001A00 0F85EB050000        <1>  jne L_error_incorrect_type
  2451 00001A06 488B4601                        mov rax, qword [rsi + 1] ; num1
  2452 00001A0A 4899                            cqo
  2453 00001A0C 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  2454 00001A10 4889C1                          mov rcx, rax
  2455 00001A13 488B4709                        mov rax, qword [rdi + 1 + 8] ; den1
  2456 00001A17 4899                            cqo
  2457 00001A19 48F76F01                        imul qword [rdi + 1]          ; num2
  2458 00001A1D 4829C1                          sub rcx, rax
  2459 00001A20 750C                            jne .L_false
  2460 00001A22 48B8-                           mov rax, sob_boolean_true
  2460 00001A24 [0300000000000000] 
  2461 00001A2C EB0A                            jmp .L_exit
  2462                                  .L_false:
  2463 00001A2E 48B8-                           mov rax, sob_boolean_false
  2463 00001A30 [0200000000000000] 
  2464                                  .L_exit:
  2465 00001A38 C9                              leave
  2466 00001A39 C22000                          ret AND_KILL_FRAME(2)
  2467                                  
  2468                                  L_code_ptr_quotient:
  2469 00001A3C C8000000                        enter 0, 0
  2470 00001A40 48837D1802                      cmp COUNT, 2
  2471 00001A45 0F8507050000                    jne L_error_arg_count_2
  2472 00001A4B 488B7520                        mov rsi, PARAM(0)
  2473                                          assert_integer(rsi)
    53 00001A4F 803E11              <1>  cmp byte [%1], %2
    54 00001A52 0F8599050000        <1>  jne L_error_incorrect_type
  2474 00001A58 488B7D28                        mov rdi, PARAM(1)
  2475                                          assert_integer(rdi)
    53 00001A5C 803F11              <1>  cmp byte [%1], %2
    54 00001A5F 0F858C050000        <1>  jne L_error_incorrect_type
  2476 00001A65 488B4601                        mov rax, qword [rsi + 1]
  2477 00001A69 488B5F01                        mov rbx, qword [rdi + 1]
  2478 00001A6D 4883FB00                        cmp rbx, 0
  2479 00001A71 0F84AB050000                    je L_error_division_by_zero
  2480 00001A77 4899                            cqo
  2481 00001A79 48F7FB                          idiv rbx
  2482 00001A7C 4889C7                          mov rdi, rax
  2483 00001A7F E8E8030000                      call make_integer
  2484 00001A84 C9                              leave
  2485 00001A85 C22000                          ret AND_KILL_FRAME(2)
  2486                                          
  2487                                  L_code_ptr_remainder:
  2488 00001A88 C8000000                        enter 0, 0
  2489 00001A8C 48837D1802                      cmp COUNT, 2
  2490 00001A91 0F85BB040000                    jne L_error_arg_count_2
  2491 00001A97 488B7520                        mov rsi, PARAM(0)
  2492                                          assert_integer(rsi)
    53 00001A9B 803E11              <1>  cmp byte [%1], %2
    54 00001A9E 0F854D050000        <1>  jne L_error_incorrect_type
  2493 00001AA4 488B7D28                        mov rdi, PARAM(1)
  2494                                          assert_integer(rdi)
    53 00001AA8 803F11              <1>  cmp byte [%1], %2
    54 00001AAB 0F8540050000        <1>  jne L_error_incorrect_type
  2495 00001AB1 488B4601                        mov rax, qword [rsi + 1]
  2496 00001AB5 488B5F01                        mov rbx, qword [rdi + 1]
  2497 00001AB9 4883FB00                        cmp rbx, 0
  2498 00001ABD 0F845F050000                    je L_error_division_by_zero
  2499 00001AC3 4899                            cqo
  2500 00001AC5 48F7FB                          idiv rbx
  2501 00001AC8 4889D7                          mov rdi, rdx
  2502 00001ACB E89C030000                      call make_integer
  2503 00001AD0 C9                              leave
  2504 00001AD1 C22000                          ret AND_KILL_FRAME(2)
  2505                                  
  2506                                  L_code_ptr_set_car:
  2507 00001AD4 C8000000                        enter 0, 0
  2508 00001AD8 48837D1802                      cmp COUNT, 2
  2509 00001ADD 0F856F040000                    jne L_error_arg_count_2
  2510 00001AE3 488B4520                        mov rax, PARAM(0)
  2511                                          assert_pair(rax)
    53 00001AE7 803821              <1>  cmp byte [%1], %2
    54 00001AEA 0F8501050000        <1>  jne L_error_incorrect_type
  2512 00001AF0 488B5D28                        mov rbx, PARAM(1)
  2513 00001AF4 48895801                        mov SOB_PAIR_CAR(rax), rbx
  2514 00001AF8 48B8-                           mov rax, sob_void
  2514 00001AFA [0000000000000000] 
  2515 00001B02 C9                              leave
  2516 00001B03 C22000                          ret AND_KILL_FRAME(2)
  2517                                  
  2518                                  L_code_ptr_set_cdr:
  2519 00001B06 C8000000                        enter 0, 0
  2520 00001B0A 48837D1802                      cmp COUNT, 2
  2521 00001B0F 0F853D040000                    jne L_error_arg_count_2
  2522 00001B15 488B4520                        mov rax, PARAM(0)
  2523                                          assert_pair(rax)
    53 00001B19 803821              <1>  cmp byte [%1], %2
    54 00001B1C 0F85CF040000        <1>  jne L_error_incorrect_type
  2524 00001B22 488B5D28                        mov rbx, PARAM(1)
  2525 00001B26 48895809                        mov SOB_PAIR_CDR(rax), rbx
  2526 00001B2A 48B8-                           mov rax, sob_void
  2526 00001B2C [0000000000000000] 
  2527 00001B34 C9                              leave
  2528 00001B35 C22000                          ret AND_KILL_FRAME(2)
  2529                                  
  2530                                  L_code_ptr_string_ref:
  2531 00001B38 C8000000                        enter 0, 0
  2532 00001B3C 48837D1802                      cmp COUNT, 2
  2533 00001B41 0F850B040000                    jne L_error_arg_count_2
  2534 00001B47 488B7D20                        mov rdi, PARAM(0)
  2535                                          assert_string(rdi)
    53 00001B4B 803F03              <1>  cmp byte [%1], %2
    54 00001B4E 0F859D040000        <1>  jne L_error_incorrect_type
  2536 00001B54 488B7528                        mov rsi, PARAM(1)
  2537                                          assert_integer(rsi)
    53 00001B58 803E11              <1>  cmp byte [%1], %2
    54 00001B5B 0F8590040000        <1>  jne L_error_incorrect_type
  2538 00001B61 488B5701                        mov rdx, qword [rdi + 1]
  2539 00001B65 488B4E01                        mov rcx, qword [rsi + 1]
  2540 00001B69 4839D1                          cmp rcx, rdx
  2541 00001B6C 0F8D14030000                    jge L_error_integer_range
  2542 00001B72 4883F900                        cmp rcx, 0
  2543 00001B76 0F8C0A030000                    jl L_error_integer_range
  2544 00001B7C 8A5C3909                        mov bl, byte [rdi + 1 + 8 + 1 * rcx]
  2545 00001B80 BF02000000                      mov rdi, 2
  2546 00001B85 E83CE7FFFF                      call malloc
  2547 00001B8A C60002                          mov byte [rax], T_char
  2548 00001B8D 885801                          mov byte [rax + 1], bl
  2549 00001B90 C9                              leave
  2550 00001B91 C22000                          ret AND_KILL_FRAME(2)
  2551                                  
  2552                                  L_code_ptr_vector_ref:
  2553 00001B94 C8000000                        enter 0, 0
  2554 00001B98 48837D1802                      cmp COUNT, 2
  2555 00001B9D 0F85AF030000                    jne L_error_arg_count_2
  2556 00001BA3 488B7D20                        mov rdi, PARAM(0)
  2557                                          assert_vector(rdi)
    53 00001BA7 803F22              <1>  cmp byte [%1], %2
    54 00001BAA 0F8541040000        <1>  jne L_error_incorrect_type
  2558 00001BB0 488B7528                        mov rsi, PARAM(1)
  2559                                          assert_integer(rsi)
    53 00001BB4 803E11              <1>  cmp byte [%1], %2
    54 00001BB7 0F8534040000        <1>  jne L_error_incorrect_type
  2560 00001BBD 488B5701                        mov rdx, qword [rdi + 1]
  2561 00001BC1 488B4E01                        mov rcx, qword [rsi + 1]
  2562 00001BC5 4839D1                          cmp rcx, rdx
  2563 00001BC8 0F8DB8020000                    jge L_error_integer_range
  2564 00001BCE 4883F900                        cmp rcx, 0
  2565 00001BD2 0F8CAE020000                    jl L_error_integer_range
  2566 00001BD8 488B44CF09                      mov rax, [rdi + 1 + 8 + 8 * rcx]
  2567 00001BDD C9                              leave
  2568 00001BDE C22000                          ret AND_KILL_FRAME(2)
  2569                                  
  2570                                  L_code_ptr_vector_set:
  2571 00001BE1 C8000000                        enter 0, 0
  2572 00001BE5 48837D1803                      cmp COUNT, 3
  2573 00001BEA 0F85CC030000                    jne L_error_arg_count_3
  2574 00001BF0 488B7D20                        mov rdi, PARAM(0)
  2575                                          assert_vector(rdi)
    53 00001BF4 803F22              <1>  cmp byte [%1], %2
    54 00001BF7 0F85F4030000        <1>  jne L_error_incorrect_type
  2576 00001BFD 488B7528                        mov rsi, PARAM(1)
  2577                                          assert_integer(rsi)
    53 00001C01 803E11              <1>  cmp byte [%1], %2
    54 00001C04 0F85E7030000        <1>  jne L_error_incorrect_type
  2578 00001C0A 488B5701                        mov rdx, qword [rdi + 1]
  2579 00001C0E 488B4E01                        mov rcx, qword [rsi + 1]
  2580 00001C12 4839D1                          cmp rcx, rdx
  2581 00001C15 0F8D6B020000                    jge L_error_integer_range
  2582 00001C1B 4883F900                        cmp rcx, 0
  2583 00001C1F 0F8C61020000                    jl L_error_integer_range
  2584 00001C25 488B4530                        mov rax, PARAM(2)
  2585 00001C29 488944CF09                      mov qword [rdi + 1 + 8 + 8 * rcx], rax
  2586 00001C2E 48B8-                           mov rax, sob_void
  2586 00001C30 [0000000000000000] 
  2587 00001C38 C9                              leave
  2588 00001C39 C22800                          ret AND_KILL_FRAME(3)
  2589                                  
  2590                                  L_code_ptr_string_set:
  2591 00001C3C C8000000                        enter 0, 0
  2592 00001C40 48837D1803                      cmp COUNT, 3
  2593 00001C45 0F8571030000                    jne L_error_arg_count_3
  2594 00001C4B 488B7D20                        mov rdi, PARAM(0)
  2595                                          assert_string(rdi)
    53 00001C4F 803F03              <1>  cmp byte [%1], %2
    54 00001C52 0F8599030000        <1>  jne L_error_incorrect_type
  2596 00001C58 488B7528                        mov rsi, PARAM(1)
  2597                                          assert_integer(rsi)
    53 00001C5C 803E11              <1>  cmp byte [%1], %2
    54 00001C5F 0F858C030000        <1>  jne L_error_incorrect_type
  2598 00001C65 488B5701                        mov rdx, qword [rdi + 1]
  2599 00001C69 488B4E01                        mov rcx, qword [rsi + 1]
  2600 00001C6D 4839D1                          cmp rcx, rdx
  2601 00001C70 0F8D10020000                    jge L_error_integer_range
  2602 00001C76 4883F900                        cmp rcx, 0
  2603 00001C7A 0F8C06020000                    jl L_error_integer_range
  2604 00001C80 488B4530                        mov rax, PARAM(2)
  2605                                          assert_char(rax)
    53 00001C84 803802              <1>  cmp byte [%1], %2
    54 00001C87 0F8564030000        <1>  jne L_error_incorrect_type
  2606 00001C8D 8A4001                          mov al, byte [rax + 1]
  2607 00001C90 88443909                        mov byte [rdi + 1 + 8 + 1 * rcx], al
  2608 00001C94 48B8-                           mov rax, sob_void
  2608 00001C96 [0000000000000000] 
  2609 00001C9E C9                              leave
  2610 00001C9F C22800                          ret AND_KILL_FRAME(3)
  2611                                  
  2612                                  L_code_ptr_make_vector:
  2613 00001CA2 C8000000                        enter 0, 0
  2614 00001CA6 48837D1802                      cmp COUNT, 2
  2615 00001CAB 0F85A1020000                    jne L_error_arg_count_2
  2616 00001CB1 488B4D20                        mov rcx, PARAM(0)
  2617                                          assert_integer(rcx)
    53 00001CB5 803911              <1>  cmp byte [%1], %2
    54 00001CB8 0F8533030000        <1>  jne L_error_incorrect_type
  2618 00001CBE 488B4901                        mov rcx, qword [rcx + 1]
  2619 00001CC2 4883F900                        cmp rcx, 0
  2620 00001CC6 0F8CBA010000                    jl L_error_integer_range
  2621 00001CCC 488B5528                        mov rdx, PARAM(1)
  2622 00001CD0 488D3CCD09000000                lea rdi, [1 + 8 + 8 * rcx]
  2623 00001CD8 E8E9E5FFFF                      call malloc
  2624 00001CDD C60022                          mov byte [rax], T_vector
  2625 00001CE0 48894801                        mov qword [rax + 1], rcx
  2626 00001CE4 41B800000000                    mov r8, 0
  2627                                  .L0:
  2628 00001CEA 4939C8                          cmp r8, rcx
  2629 00001CED 740A                            je .L1
  2630 00001CEF 4A8954C009                      mov qword [rax + 1 + 8 + 8 * r8], rdx
  2631 00001CF4 49FFC0                          inc r8
  2632 00001CF7 EBF1                            jmp .L0
  2633                                  .L1:
  2634 00001CF9 C9                              leave
  2635 00001CFA C22000                          ret AND_KILL_FRAME(2)
  2636                                          
  2637                                  L_code_ptr_make_string:
  2638 00001CFD C8000000                        enter 0, 0
  2639 00001D01 48837D1802                      cmp COUNT, 2
  2640 00001D06 0F8546020000                    jne L_error_arg_count_2
  2641 00001D0C 488B4D20                        mov rcx, PARAM(0)
  2642                                          assert_integer(rcx)
    53 00001D10 803911              <1>  cmp byte [%1], %2
    54 00001D13 0F85D8020000        <1>  jne L_error_incorrect_type
  2643 00001D19 488B4901                        mov rcx, qword [rcx + 1]
  2644 00001D1D 4883F900                        cmp rcx, 0
  2645 00001D21 0F8C5F010000                    jl L_error_integer_range
  2646 00001D27 488B5528                        mov rdx, PARAM(1)
  2647                                          assert_char(rdx)
    53 00001D2B 803A02              <1>  cmp byte [%1], %2
    54 00001D2E 0F85BD020000        <1>  jne L_error_incorrect_type
  2648 00001D34 8A5201                          mov dl, byte [rdx + 1]
  2649 00001D37 488D7909                        lea rdi, [1 + 8 + 1 * rcx]
  2650 00001D3B E886E5FFFF                      call malloc
  2651 00001D40 C60003                          mov byte [rax], T_string
  2652 00001D43 48894801                        mov qword [rax + 1], rcx
  2653 00001D47 41B800000000                    mov r8, 0
  2654                                  .L0:
  2655 00001D4D 4939C8                          cmp r8, rcx
  2656 00001D50 740A                            je .L1
  2657 00001D52 4188540009                      mov byte [rax + 1 + 8 + 1 * r8], dl
  2658 00001D57 49FFC0                          inc r8
  2659 00001D5A EBF1                            jmp .L0
  2660                                  .L1:
  2661 00001D5C C9                              leave
  2662 00001D5D C22000                          ret AND_KILL_FRAME(2)
  2663                                  
  2664                                  L_code_ptr_numerator:
  2665 00001D60 C8000000                        enter 0, 0
  2666 00001D64 48837D1801                      cmp COUNT, 1
  2667 00001D69 0F85AE010000                    jne L_error_arg_count_1
  2668 00001D6F 488B4520                        mov rax, PARAM(0)
  2669                                          assert_fraction(rax)
    53 00001D73 803812              <1>  cmp byte [%1], %2
    54 00001D76 0F8575020000        <1>  jne L_error_incorrect_type
  2670 00001D7C 488B7801                        mov rdi, qword [rax + 1]
  2671 00001D80 E8E7000000                      call make_integer
  2672 00001D85 C9                              leave
  2673 00001D86 C21800                          ret AND_KILL_FRAME(1)
  2674                                          
  2675                                  L_code_ptr_denominator:
  2676 00001D89 C8000000                        enter 0, 0
  2677 00001D8D 48837D1801                      cmp COUNT, 1
  2678 00001D92 0F8585010000                    jne L_error_arg_count_1
  2679 00001D98 488B4520                        mov rax, PARAM(0)
  2680                                          assert_fraction(rax)
    53 00001D9C 803812              <1>  cmp byte [%1], %2
    54 00001D9F 0F854C020000        <1>  jne L_error_incorrect_type
  2681 00001DA5 488B7809                        mov rdi, qword [rax + 1 + 8]
  2682 00001DA9 E8BE000000                      call make_integer
  2683 00001DAE C9                              leave
  2684 00001DAF C21800                          ret AND_KILL_FRAME(1)
  2685                                  
  2686                                  L_code_ptr_is_eq:
  2687 00001DB2 C8000000                	enter 0, 0
  2688 00001DB6 48837D1802              	cmp COUNT, 2
  2689 00001DBB 0F8591010000            	jne L_error_arg_count_2
  2690 00001DC1 488B7D20                	mov rdi, PARAM(0)
  2691 00001DC5 488B7528                	mov rsi, PARAM(1)
  2692 00001DC9 4839F7                  	cmp rdi, rsi
  2693 00001DCC 746C                    	je .L_eq_true
  2694 00001DCE 8A17                    	mov dl, byte [rdi]
  2695 00001DD0 3A16                    	cmp dl, byte [rsi]
  2696 00001DD2 7572                    	jne .L_eq_false
  2697 00001DD4 80FA02                  	cmp dl, T_char
  2698 00001DD7 7459                    	je .L_char
  2699 00001DD9 80FA41                  	cmp dl, T_interned_symbol
  2700 00001DDC 7440                    	je .L_interned_symbol
  2701 00001DDE 80FA42                          cmp dl, T_uninterned_symbol
  2702 00001DE1 7443                            je .L_uninterned_symbol
  2703 00001DE3 80FA13                  	cmp dl, T_real
  2704 00001DE6 742E                    	je .L_real
  2705 00001DE8 80FA12                  	cmp dl, T_fraction
  2706 00001DEB 7413                    	je .L_fraction
  2707 00001DED 80FA11                          cmp dl, T_integer
  2708 00001DF0 7402                            je .L_integer
  2709 00001DF2 EB52                    	jmp .L_eq_false
  2710                                  .L_integer:
  2711 00001DF4 488B4601                        mov rax, qword [rsi + 1]
  2712 00001DF8 483B4701                        cmp rax, qword [rdi + 1]
  2713 00001DFC 7548                            jne .L_eq_false
  2714 00001DFE EB3A                            jmp .L_eq_true
  2715                                  .L_fraction:
  2716 00001E00 488B4601                	mov rax, qword [rsi + 1]
  2717 00001E04 483B4701                	cmp rax, qword [rdi + 1]
  2718 00001E08 753C                    	jne .L_eq_false
  2719 00001E0A 488B4609                	mov rax, qword [rsi + 1 + 8]
  2720 00001E0E 483B4709                	cmp rax, qword [rdi + 1 + 8]
  2721 00001E12 7532                    	jne .L_eq_false
  2722 00001E14 EB24                    	jmp .L_eq_true
  2723                                  .L_real:
  2724 00001E16 488B4601                	mov rax, qword [rsi + 1]
  2725 00001E1A 483B4701                	cmp rax, qword [rdi + 1]
  2726                                  .L_interned_symbol:
  2727                                  	; never reached, because interned_symbols are static!
  2728                                  	; but I'm keeping it in case, I'll ever change
  2729                                  	; the implementation
  2730 00001E1E 488B4601                	mov rax, qword [rsi + 1]
  2731 00001E22 483B4701                	cmp rax, qword [rdi + 1]
  2732                                  .L_uninterned_symbol:
  2733 00001E26 4C8B4701                        mov r8, qword [rdi + 1]
  2734 00001E2A 4C3B4601                        cmp r8, qword [rsi + 1]
  2735 00001E2E 7516                            jne .L_eq_false
  2736 00001E30 EB08                            jmp .L_eq_true
  2737                                  .L_char:
  2738 00001E32 8A5E01                  	mov bl, byte [rsi + 1]
  2739 00001E35 3A5F01                  	cmp bl, byte [rdi + 1]
  2740 00001E38 750C                    	jne .L_eq_false
  2741                                  .L_eq_true:
  2742 00001E3A 48B8-                   	mov rax, sob_boolean_true
  2742 00001E3C [0300000000000000] 
  2743 00001E44 EB0A                    	jmp .L_eq_exit
  2744                                  .L_eq_false:
  2745 00001E46 48B8-                   	mov rax, sob_boolean_false
  2745 00001E48 [0200000000000000] 
  2746                                  .L_eq_exit:
  2747 00001E50 C9                      	leave
  2748 00001E51 C22000                  	ret AND_KILL_FRAME(2)
  2749                                  
  2750                                  make_real:
  2751 00001E54 C8000000                        enter 0, 0
  2752 00001E58 BF09000000                      mov rdi, (1 + 8)
  2753 00001E5D E864E4FFFF                      call malloc
  2754 00001E62 C60013                          mov byte [rax], T_real
  2755 00001E65 F20F114001                      movsd qword [rax + 1], xmm0
  2756 00001E6A C9                              leave 
  2757 00001E6B C3                              ret
  2758                                          
  2759                                  make_integer:
  2760 00001E6C C8000000                        enter 0, 0
  2761 00001E70 4889FE                          mov rsi, rdi
  2762 00001E73 BF09000000                      mov rdi, (1 + 8)
  2763 00001E78 E849E4FFFF                      call malloc
  2764 00001E7D C60011                          mov byte [rax], T_integer
  2765 00001E80 48897001                        mov qword [rax + 1], rsi
  2766 00001E84 C9                              leave
  2767 00001E85 C3                              ret
  2768                                          
  2769                                  L_error_integer_range:
  2770 00001E86 488B3C25[00000000]              mov rdi, qword [stderr]
  2771 00001E8E 48BE-                           mov rsi, fmt_integer_range
  2771 00001E90 [EC09000000000000] 
  2772 00001E98 B800000000                      mov rax, 0
  2773                                          ENTER
    44 00001E9D C8000000            <1>  enter 0, 0
    45 00001EA1 4883E4F0            <1>  and rsp, ~15
  2774 00001EA5 E8(00000000)                    call fprintf
  2775                                          LEAVE
    49 00001EAA C9                  <1>  leave
  2776 00001EAB 48C7C0FBFFFFFF                  mov rax, -5
  2777 00001EB2 E8(00000000)                    call exit
  2778                                  
  2779                                  L_error_arg_negative:
  2780 00001EB7 488B3C25[00000000]              mov rdi, qword [stderr]
  2781 00001EBF 48BE-                           mov rsi, fmt_arg_negative
  2781 00001EC1 [C408000000000000] 
  2782 00001EC9 B800000000                      mov rax, 0
  2783                                          ENTER
    44 00001ECE C8000000            <1>  enter 0, 0
    45 00001ED2 4883E4F0            <1>  and rsp, ~15
  2784 00001ED6 E8(00000000)                    call fprintf
  2785                                          LEAVE
    49 00001EDB C9                  <1>  leave
  2786 00001EDC 48C7C0FDFFFFFF                  mov rax, -3
  2787 00001EE3 E8(00000000)                    call exit
  2788                                  
  2789                                  L_error_arg_count_0:
  2790 00001EE8 488B3C25[00000000]              mov rdi, qword [stderr]
  2791 00001EF0 48BE-                           mov rsi, fmt_arg_count_0
  2791 00001EF2 [EA08000000000000] 
  2792 00001EFA 488B5518                        mov rdx, COUNT
  2793 00001EFE B800000000                      mov rax, 0
  2794                                          ENTER
    44 00001F03 C8000000            <1>  enter 0, 0
    45 00001F07 4883E4F0            <1>  and rsp, ~15
  2795 00001F0B E8(00000000)                    call fprintf
  2796                                          LEAVE
    49 00001F10 C9                  <1>  leave
  2797 00001F11 48C7C0FDFFFFFF                  mov rax, -3
  2798 00001F18 E8(00000000)                    call exit
  2799                                  
  2800                                  L_error_arg_count_1:
  2801 00001F1D 488B3C25[00000000]              mov rdi, qword [stderr]
  2802 00001F25 48BE-                           mov rsi, fmt_arg_count_1
  2802 00001F27 [1209000000000000] 
  2803 00001F2F 488B5518                        mov rdx, COUNT
  2804 00001F33 B800000000                      mov rax, 0
  2805                                          ENTER
    44 00001F38 C8000000            <1>  enter 0, 0
    45 00001F3C 4883E4F0            <1>  and rsp, ~15
  2806 00001F40 E8(00000000)                    call fprintf
  2807                                          LEAVE
    49 00001F45 C9                  <1>  leave
  2808 00001F46 48C7C0FDFFFFFF                  mov rax, -3
  2809 00001F4D E8(00000000)                    call exit
  2810                                  
  2811                                  L_error_arg_count_2:
  2812 00001F52 488B3C25[00000000]              mov rdi, qword [stderr]
  2813 00001F5A 48BE-                           mov rsi, fmt_arg_count_2
  2813 00001F5C [7809000000000000] 
  2814 00001F64 488B5518                        mov rdx, COUNT
  2815 00001F68 B800000000                      mov rax, 0
  2816                                          ENTER
    44 00001F6D C8000000            <1>  enter 0, 0
    45 00001F71 4883E4F0            <1>  and rsp, ~15
  2817 00001F75 E8(00000000)                    call fprintf
  2818                                          LEAVE
    49 00001F7A C9                  <1>  leave
  2819 00001F7B 48C7C0FDFFFFFF                  mov rax, -3
  2820 00001F82 E8(00000000)                    call exit
  2821                                  
  2822                                  L_error_arg_count_12:
  2823 00001F87 488B3C25[00000000]              mov rdi, qword [stderr]
  2824 00001F8F 48BE-                           mov rsi, fmt_arg_count_12
  2824 00001F91 [3809000000000000] 
  2825 00001F99 488B5518                        mov rdx, COUNT
  2826 00001F9D B800000000                      mov rax, 0
  2827                                          ENTER
    44 00001FA2 C8000000            <1>  enter 0, 0
    45 00001FA6 4883E4F0            <1>  and rsp, ~15
  2828 00001FAA E8(00000000)                    call fprintf
  2829                                          LEAVE
    49 00001FAF C9                  <1>  leave
  2830 00001FB0 48C7C0FDFFFFFF                  mov rax, -3
  2831 00001FB7 E8(00000000)                    call exit
  2832                                  
  2833                                  L_error_arg_count_3:
  2834 00001FBC 488B3C25[00000000]              mov rdi, qword [stderr]
  2835 00001FC4 48BE-                           mov rsi, fmt_arg_count_3
  2835 00001FC6 [9F09000000000000] 
  2836 00001FCE 488B5518                        mov rdx, COUNT
  2837 00001FD2 B800000000                      mov rax, 0
  2838                                          ENTER
    44 00001FD7 C8000000            <1>  enter 0, 0
    45 00001FDB 4883E4F0            <1>  and rsp, ~15
  2839 00001FDF E8(00000000)                    call fprintf
  2840                                          LEAVE
    49 00001FE4 C9                  <1>  leave
  2841 00001FE5 48C7C0FDFFFFFF                  mov rax, -3
  2842 00001FEC E8(00000000)                    call exit
  2843                                          
  2844                                  L_error_incorrect_type:
  2845 00001FF1 488B3C25[00000000]              mov rdi, qword [stderr]
  2846 00001FF9 48BE-                           mov rsi, fmt_type
  2846 00001FFB [C809000000000000] 
  2847 00002003 B800000000                      mov rax, 0
  2848                                          ENTER
    44 00002008 C8000000            <1>  enter 0, 0
    45 0000200C 4883E4F0            <1>  and rsp, ~15
  2849 00002010 E8(00000000)                    call fprintf
  2850                                          LEAVE
    49 00002015 C9                  <1>  leave
  2851 00002016 48C7C0FCFFFFFF                  mov rax, -4
  2852 0000201D E8(00000000)                    call exit
  2853                                  
  2854                                  L_error_division_by_zero:
  2855 00002022 488B3C25[00000000]              mov rdi, qword [stderr]
  2856 0000202A 48BE-                           mov rsi, fmt_division_by_zero
  2856 0000202C [090A000000000000] 
  2857 00002034 B800000000                      mov rax, 0
  2858                                          ENTER
    44 00002039 C8000000            <1>  enter 0, 0
    45 0000203D 4883E4F0            <1>  and rsp, ~15
  2859 00002041 E8(00000000)                    call fprintf
  2860                                          LEAVE
    49 00002046 C9                  <1>  leave
  2861 00002047 48C7C0F8FFFFFF                  mov rax, -8
  2862 0000204E E8(00000000)                    call exit
  2863                                  
  2864                                  section .data
  2865                                  gensym_count:
  2866 000008B9 0000000000000000                dq 0
  2867                                  fmt_char:
  2868 000008C1 256300                          db `%c\0`
  2869                                  fmt_arg_negative:
  2870 000008C4 212121205468652061-             db `!!! The argument cannot be negative.\n\0`
  2870 000008CD 7267756D656E742063-
  2870 000008D6 616E6E6F7420626520-
  2870 000008DF 6E656761746976652E-
  2870 000008E8 0A00               
  2871                                  fmt_arg_count_0:
  2872 000008EA 212121204578706563-             db `!!! Expecting zero arguments. Found %d\n\0`
  2872 000008F3 74696E67207A65726F-
  2872 000008FC 20617267756D656E74-
  2872 00000905 732E20466F756E6420-
  2872 0000090E 25640A00           
  2873                                  fmt_arg_count_1:
  2874 00000912 212121204578706563-             db `!!! Expecting one argument. Found %d\n\0`
  2874 0000091B 74696E67206F6E6520-
  2874 00000924 617267756D656E742E-
  2874 0000092D 20466F756E64202564-
  2874 00000936 0A00               
  2875                                  fmt_arg_count_12:
  2876 00000938 212121204578706563-             db `!!! Expecting one required and one optional argument. Found %d\n\0`
  2876 00000941 74696E67206F6E6520-
  2876 0000094A 726571756972656420-
  2876 00000953 616E64206F6E65206F-
  2876 0000095C 7074696F6E616C2061-
  2876 00000965 7267756D656E742E20-
  2876 0000096E 466F756E642025640A-
  2876 00000977 00                 
  2877                                  fmt_arg_count_2:
  2878 00000978 212121204578706563-             db `!!! Expecting two arguments. Found %d\n\0`
  2878 00000981 74696E672074776F20-
  2878 0000098A 617267756D656E7473-
  2878 00000993 2E20466F756E642025-
  2878 0000099C 640A00             
  2879                                  fmt_arg_count_3:
  2880 0000099F 212121204578706563-             db `!!! Expecting three arguments. Found %d\n\0`
  2880 000009A8 74696E672074687265-
  2880 000009B1 6520617267756D656E-
  2880 000009BA 74732E20466F756E64-
  2880 000009C3 2025640A00         
  2881                                  fmt_type:
  2882 000009C8 2121212046756E6374-             db `!!! Function passed incorrect type\n\0`
  2882 000009D1 696F6E207061737365-
  2882 000009DA 6420696E636F727265-
  2882 000009E3 637420747970650A00 
  2883                                  fmt_integer_range:
  2884 000009EC 21212120496E636F72-             db `!!! Incorrect integer range\n\0`
  2884 000009F5 7265637420696E7465-
  2884 000009FE 6765722072616E6765-
  2884 00000A07 0A00               
  2885                                  fmt_division_by_zero:
  2886 00000A09 212121204469766973-             db `!!! Division by zero\n\0`
  2886 00000A12 696F6E206279207A65-
  2886 00000A1B 726F0A00           
  2887                                  fmt_scheme_error_part_1:
  2888 00000A1F 0A2121212054686520-             db `\n!!! The procedure \0`
  2888 00000A28 70726F636564757265-
  2888 00000A31 2000               
  2889                                  fmt_scheme_error_part_2:
  2890 00000A33 2061736B656420746F-             db ` asked to terminate the program\n`
  2890 00000A3C 207465726D696E6174-
  2890 00000A45 65207468652070726F-
  2890 00000A4E 6772616D0A         
  2891 00000A53 202020207769746820-             db `    with the following message:\n\n\0`
  2891 00000A5C 74686520666F6C6C6F-
  2891 00000A65 77696E67206D657373-
  2891 00000A6E 6167653A0A0A00     
  2892                                  fmt_scheme_error_part_3:
  2893 00000A75 0A0A476F6F64627965-             db `\n\nGoodbye!\n\n\0`
  2893 00000A7E 210A0A00           
