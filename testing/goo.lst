     1                                  ;;; prologue-1.asm
     2                                  ;;; The first part of the standard prologue for compiled programs
     3                                  ;;;
     4                                  ;;; Programmer: Mayer Goldberg, 2023
     5                                  
     6                                  %define T_void 				0
     7                                  %define T_nil 				1
     8                                  %define T_char 				2
     9                                  %define T_string 			3
    10                                  %define T_closure 			4
    11                                  %define T_undefined			5
    12                                  %define T_boolean 			8
    13                                  %define T_boolean_false 		(T_boolean | 1)
    14                                  %define T_boolean_true 			(T_boolean | 2)
    15                                  %define T_number 			16
    16                                  %define T_integer			(T_number | 1)
    17                                  %define T_fraction 			(T_number | 2)
    18                                  %define T_real 				(T_number | 3)
    19                                  %define T_collection 			32
    20                                  %define T_pair 				(T_collection | 1)
    21                                  %define T_vector 			(T_collection | 2)
    22                                  %define T_symbol 			64
    23                                  %define T_interned_symbol		(T_symbol | 1)
    24                                  %define T_uninterned_symbol		(T_symbol | 2)
    25                                  
    26                                  %define SOB_CHAR_VALUE(reg) 		byte [reg + 1]
    27                                  %define SOB_PAIR_CAR(reg)		qword [reg + 1]
    28                                  %define SOB_PAIR_CDR(reg)		qword [reg + 1 + 8]
    29                                  %define SOB_STRING_LENGTH(reg)		qword [reg + 1]
    30                                  %define SOB_VECTOR_LENGTH(reg)		qword [reg + 1]
    31                                  %define SOB_CLOSURE_ENV(reg)		qword [reg + 1]
    32                                  %define SOB_CLOSURE_CODE(reg)		qword [reg + 1 + 8]
    33                                  
    34                                  %define OLD_RBP 			qword [rbp]
    35                                  %define RET_ADDR 			qword [rbp + 8 * 1]
    36                                  %define ENV 				qword [rbp + 8 * 2]
    37                                  %define COUNT 				qword [rbp + 8 * 3]
    38                                  %define PARAM(n) 			qword [rbp + 8 * (4 + n)]
    39                                  %define AND_KILL_FRAME(n)		(8 * (2 + n))
    40                                  
    41                                  %define MAGIC				496351
    42                                  
    43                                  %macro ENTER 0
    44                                  	enter 0, 0
    45                                  	and rsp, ~15
    46                                  %endmacro
    47                                  
    48                                  %macro LEAVE 0
    49                                  	leave
    50                                  %endmacro
    51                                  
    52                                  %macro assert_type 2
    53                                          cmp byte [%1], %2
    54                                          jne L_error_incorrect_type
    55                                  %endmacro
    56                                  
    57                                  %define assert_void(reg)		assert_type reg, T_void
    58                                  %define assert_nil(reg)			assert_type reg, T_nil
    59                                  %define assert_char(reg)		assert_type reg, T_char
    60                                  %define assert_string(reg)		assert_type reg, T_string
    61                                  %define assert_symbol(reg)		assert_type reg, T_symbol
    62                                  %define assert_interned_symbol(reg)	assert_type reg, T_interned_symbol
    63                                  %define assert_uninterned_symbol(reg)	assert_type reg, T_uninterned_symbol
    64                                  %define assert_closure(reg)		assert_type reg, T_closure
    65                                  %define assert_boolean(reg)		assert_type reg, T_boolean
    66                                  %define assert_integer(reg)		assert_type reg, T_integer
    67                                  %define assert_fraction(reg)		assert_type reg, T_fraction
    68                                  %define assert_real(reg)		assert_type reg, T_real
    69                                  %define assert_pair(reg)		assert_type reg, T_pair
    70                                  %define assert_vector(reg)		assert_type reg, T_vector
    71                                  
    72                                  %define sob_void			(L_constants + 0)
    73                                  %define sob_nil				(L_constants + 1)
    74                                  %define sob_boolean_false		(L_constants + 2)
    75                                  %define sob_boolean_true		(L_constants + 3)
    76                                  %define sob_char_nul			(L_constants + 4)
    77                                  
    78                                  %define bytes(n)			(n)
    79                                  %define kbytes(n) 			(bytes(n) << 10)
    80                                  %define mbytes(n) 			(kbytes(n) << 10)
    81                                  %define gbytes(n) 			(mbytes(n) << 10)
    82                                  
    83                                  section .data
    84                                  L_constants:
    85                                  	; L_constants + 0:
    86 00000000 00                      	db T_void
    87                                  	; L_constants + 1:
    88 00000001 01                      	db T_nil
    89                                  	; L_constants + 2:
    90 00000002 09                      	db T_boolean_false
    91                                  	; L_constants + 3:
    92 00000003 0A                      	db T_boolean_true
    93                                  	; L_constants + 4:
    94 00000004 0200                    	db T_char, 0x00	; #\nul
    95                                  	; L_constants + 6:
    96 00000006 03                      	db T_string	; "null?"
    97 00000007 0500000000000000        	dq 5
    98 0000000F 6E756C6C3F              	db 0x6E, 0x75, 0x6C, 0x6C, 0x3F
    99                                  	; L_constants + 20:
   100 00000014 03                      	db T_string	; "pair?"
   101 00000015 0500000000000000        	dq 5
   102 0000001D 706169723F              	db 0x70, 0x61, 0x69, 0x72, 0x3F
   103                                  	; L_constants + 34:
   104 00000022 03                      	db T_string	; "void?"
   105 00000023 0500000000000000        	dq 5
   106 0000002B 766F69643F              	db 0x76, 0x6F, 0x69, 0x64, 0x3F
   107                                  	; L_constants + 48:
   108 00000030 03                      	db T_string	; "char?"
   109 00000031 0500000000000000        	dq 5
   110 00000039 636861723F              	db 0x63, 0x68, 0x61, 0x72, 0x3F
   111                                  	; L_constants + 62:
   112 0000003E 03                      	db T_string	; "string?"
   113 0000003F 0700000000000000        	dq 7
   114 00000047 737472696E673F          	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x3F
   115                                  	; L_constants + 78:
   116 0000004E 03                      	db T_string	; "interned-symbol?"
   117 0000004F 1000000000000000        	dq 16
   118 00000057 696E7465726E6564        	db 0x69, 0x6E, 0x74, 0x65, 0x72, 0x6E, 0x65, 0x64
   119 0000005F 2D73796D626F6C3F        	db 0x2D, 0x73, 0x79, 0x6D, 0x62, 0x6F, 0x6C, 0x3F
   120                                  	; L_constants + 103:
   121 00000067 03                      	db T_string	; "vector?"
   122 00000068 0700000000000000        	dq 7
   123 00000070 766563746F723F          	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x3F
   124                                  	; L_constants + 119:
   125 00000077 03                      	db T_string	; "procedure?"
   126 00000078 0A00000000000000        	dq 10
   127 00000080 70726F6365647572        	db 0x70, 0x72, 0x6F, 0x63, 0x65, 0x64, 0x75, 0x72
   128 00000088 653F                    	db 0x65, 0x3F
   129                                  	; L_constants + 138:
   130 0000008A 03                      	db T_string	; "real?"
   131 0000008B 0500000000000000        	dq 5
   132 00000093 7265616C3F              	db 0x72, 0x65, 0x61, 0x6C, 0x3F
   133                                  	; L_constants + 152:
   134 00000098 03                      	db T_string	; "fraction?"
   135 00000099 0900000000000000        	dq 9
   136 000000A1 6672616374696F6E        	db 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E
   137 000000A9 3F                      	db 0x3F
   138                                  	; L_constants + 170:
   139 000000AA 03                      	db T_string	; "boolean?"
   140 000000AB 0800000000000000        	dq 8
   141 000000B3 626F6F6C65616E3F        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x3F
   142                                  	; L_constants + 187:
   143 000000BB 03                      	db T_string	; "number?"
   144 000000BC 0700000000000000        	dq 7
   145 000000C4 6E756D6265723F          	db 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72, 0x3F
   146                                  	; L_constants + 203:
   147 000000CB 03                      	db T_string	; "collection?"
   148 000000CC 0B00000000000000        	dq 11
   149 000000D4 636F6C6C65637469        	db 0x63, 0x6F, 0x6C, 0x6C, 0x65, 0x63, 0x74, 0x69
   150 000000DC 6F6E3F                  	db 0x6F, 0x6E, 0x3F
   151                                  	; L_constants + 223:
   152 000000DF 03                      	db T_string	; "cons"
   153 000000E0 0400000000000000        	dq 4
   154 000000E8 636F6E73                	db 0x63, 0x6F, 0x6E, 0x73
   155                                  	; L_constants + 236:
   156 000000EC 03                      	db T_string	; "display-sexpr"
   157 000000ED 0D00000000000000        	dq 13
   158 000000F5 646973706C61792D        	db 0x64, 0x69, 0x73, 0x70, 0x6C, 0x61, 0x79, 0x2D
   159 000000FD 7365787072              	db 0x73, 0x65, 0x78, 0x70, 0x72
   160                                  	; L_constants + 258:
   161 00000102 03                      	db T_string	; "write-char"
   162 00000103 0A00000000000000        	dq 10
   163 0000010B 77726974652D6368        	db 0x77, 0x72, 0x69, 0x74, 0x65, 0x2D, 0x63, 0x68
   164 00000113 6172                    	db 0x61, 0x72
   165                                  	; L_constants + 277:
   166 00000115 03                      	db T_string	; "car"
   167 00000116 0300000000000000        	dq 3
   168 0000011E 636172                  	db 0x63, 0x61, 0x72
   169                                  	; L_constants + 289:
   170 00000121 03                      	db T_string	; "cdr"
   171 00000122 0300000000000000        	dq 3
   172 0000012A 636472                  	db 0x63, 0x64, 0x72
   173                                  	; L_constants + 301:
   174 0000012D 03                      	db T_string	; "string-length"
   175 0000012E 0D00000000000000        	dq 13
   176 00000136 737472696E672D6C        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x6C
   177 0000013E 656E677468              	db 0x65, 0x6E, 0x67, 0x74, 0x68
   178                                  	; L_constants + 323:
   179 00000143 03                      	db T_string	; "vector-length"
   180 00000144 0D00000000000000        	dq 13
   181 0000014C 766563746F722D6C        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x6C
   182 00000154 656E677468              	db 0x65, 0x6E, 0x67, 0x74, 0x68
   183                                  	; L_constants + 345:
   184 00000159 03                      	db T_string	; "real->integer"
   185 0000015A 0D00000000000000        	dq 13
   186 00000162 7265616C2D3E696E        	db 0x72, 0x65, 0x61, 0x6C, 0x2D, 0x3E, 0x69, 0x6E
   187 0000016A 7465676572              	db 0x74, 0x65, 0x67, 0x65, 0x72
   188                                  	; L_constants + 367:
   189 0000016F 03                      	db T_string	; "exit"
   190 00000170 0400000000000000        	dq 4
   191 00000178 65786974                	db 0x65, 0x78, 0x69, 0x74
   192                                  	; L_constants + 380:
   193 0000017C 03                      	db T_string	; "integer->real"
   194 0000017D 0D00000000000000        	dq 13
   195 00000185 696E74656765722D        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x2D
   196 0000018D 3E7265616C              	db 0x3E, 0x72, 0x65, 0x61, 0x6C
   197                                  	; L_constants + 402:
   198 00000192 03                      	db T_string	; "fraction->real"
   199 00000193 0E00000000000000        	dq 14
   200 0000019B 6672616374696F6E        	db 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E
   201 000001A3 2D3E7265616C            	db 0x2D, 0x3E, 0x72, 0x65, 0x61, 0x6C
   202                                  	; L_constants + 425:
   203 000001A9 03                      	db T_string	; "char->integer"
   204 000001AA 0D00000000000000        	dq 13
   205 000001B2 636861722D3E696E        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x3E, 0x69, 0x6E
   206 000001BA 7465676572              	db 0x74, 0x65, 0x67, 0x65, 0x72
   207                                  	; L_constants + 447:
   208 000001BF 03                      	db T_string	; "integer->char"
   209 000001C0 0D00000000000000        	dq 13
   210 000001C8 696E74656765722D        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x2D
   211 000001D0 3E63686172              	db 0x3E, 0x63, 0x68, 0x61, 0x72
   212                                  	; L_constants + 469:
   213 000001D5 03                      	db T_string	; "trng"
   214 000001D6 0400000000000000        	dq 4
   215 000001DE 74726E67                	db 0x74, 0x72, 0x6E, 0x67
   216                                  	; L_constants + 482:
   217 000001E2 03                      	db T_string	; "zero?"
   218 000001E3 0500000000000000        	dq 5
   219 000001EB 7A65726F3F              	db 0x7A, 0x65, 0x72, 0x6F, 0x3F
   220                                  	; L_constants + 496:
   221 000001F0 03                      	db T_string	; "integer?"
   222 000001F1 0800000000000000        	dq 8
   223 000001F9 696E74656765723F        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x3F
   224                                  	; L_constants + 513:
   225 00000201 03                      	db T_string	; "__bin-apply"
   226 00000202 0B00000000000000        	dq 11
   227 0000020A 5F5F62696E2D6170        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x70
   228 00000212 706C79                  	db 0x70, 0x6C, 0x79
   229                                  	; L_constants + 533:
   230 00000215 03                      	db T_string	; "__bin-add-rr"
   231 00000216 0C00000000000000        	dq 12
   232 0000021E 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   233 00000226 642D7272                	db 0x64, 0x2D, 0x72, 0x72
   234                                  	; L_constants + 554:
   235 0000022A 03                      	db T_string	; "__bin-sub-rr"
   236 0000022B 0C00000000000000        	dq 12
   237 00000233 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   238 0000023B 622D7272                	db 0x62, 0x2D, 0x72, 0x72
   239                                  	; L_constants + 575:
   240 0000023F 03                      	db T_string	; "__bin-mul-rr"
   241 00000240 0C00000000000000        	dq 12
   242 00000248 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   243 00000250 6C2D7272                	db 0x6C, 0x2D, 0x72, 0x72
   244                                  	; L_constants + 596:
   245 00000254 03                      	db T_string	; "__bin-div-rr"
   246 00000255 0C00000000000000        	dq 12
   247 0000025D 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   248 00000265 762D7272                	db 0x76, 0x2D, 0x72, 0x72
   249                                  	; L_constants + 617:
   250 00000269 03                      	db T_string	; "__bin-add-qq"
   251 0000026A 0C00000000000000        	dq 12
   252 00000272 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   253 0000027A 642D7171                	db 0x64, 0x2D, 0x71, 0x71
   254                                  	; L_constants + 638:
   255 0000027E 03                      	db T_string	; "__bin-sub-qq"
   256 0000027F 0C00000000000000        	dq 12
   257 00000287 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   258 0000028F 622D7171                	db 0x62, 0x2D, 0x71, 0x71
   259                                  	; L_constants + 659:
   260 00000293 03                      	db T_string	; "__bin-mul-qq"
   261 00000294 0C00000000000000        	dq 12
   262 0000029C 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   263 000002A4 6C2D7171                	db 0x6C, 0x2D, 0x71, 0x71
   264                                  	; L_constants + 680:
   265 000002A8 03                      	db T_string	; "__bin-div-qq"
   266 000002A9 0C00000000000000        	dq 12
   267 000002B1 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   268 000002B9 762D7171                	db 0x76, 0x2D, 0x71, 0x71
   269                                  	; L_constants + 701:
   270 000002BD 03                      	db T_string	; "__bin-add-zz"
   271 000002BE 0C00000000000000        	dq 12
   272 000002C6 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   273 000002CE 642D7A7A                	db 0x64, 0x2D, 0x7A, 0x7A
   274                                  	; L_constants + 722:
   275 000002D2 03                      	db T_string	; "__bin-sub-zz"
   276 000002D3 0C00000000000000        	dq 12
   277 000002DB 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   278 000002E3 622D7A7A                	db 0x62, 0x2D, 0x7A, 0x7A
   279                                  	; L_constants + 743:
   280 000002E7 03                      	db T_string	; "__bin-mul-zz"
   281 000002E8 0C00000000000000        	dq 12
   282 000002F0 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   283 000002F8 6C2D7A7A                	db 0x6C, 0x2D, 0x7A, 0x7A
   284                                  	; L_constants + 764:
   285 000002FC 03                      	db T_string	; "__bin-div-zz"
   286 000002FD 0C00000000000000        	dq 12
   287 00000305 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   288 0000030D 762D7A7A                	db 0x76, 0x2D, 0x7A, 0x7A
   289                                  	; L_constants + 785:
   290 00000311 03                      	db T_string	; "error"
   291 00000312 0500000000000000        	dq 5
   292 0000031A 6572726F72              	db 0x65, 0x72, 0x72, 0x6F, 0x72
   293                                  	; L_constants + 799:
   294 0000031F 03                      	db T_string	; "__bin-less-than-rr"
   295 00000320 1200000000000000        	dq 18
   296 00000328 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   297 00000330 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   298 00000338 7272                    	db 0x72, 0x72
   299                                  	; L_constants + 826:
   300 0000033A 03                      	db T_string	; "__bin-less-than-qq"
   301 0000033B 1200000000000000        	dq 18
   302 00000343 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   303 0000034B 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   304 00000353 7171                    	db 0x71, 0x71
   305                                  	; L_constants + 853:
   306 00000355 03                      	db T_string	; "__bin-less-than-zz"
   307 00000356 1200000000000000        	dq 18
   308 0000035E 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   309 00000366 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   310 0000036E 7A7A                    	db 0x7A, 0x7A
   311                                  	; L_constants + 880:
   312 00000370 03                      	db T_string	; "__bin-equal-rr"
   313 00000371 0E00000000000000        	dq 14
   314 00000379 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   315 00000381 75616C2D7272            	db 0x75, 0x61, 0x6C, 0x2D, 0x72, 0x72
   316                                  	; L_constants + 903:
   317 00000387 03                      	db T_string	; "__bin-equal-qq"
   318 00000388 0E00000000000000        	dq 14
   319 00000390 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   320 00000398 75616C2D7171            	db 0x75, 0x61, 0x6C, 0x2D, 0x71, 0x71
   321                                  	; L_constants + 926:
   322 0000039E 03                      	db T_string	; "__bin-equal-zz"
   323 0000039F 0E00000000000000        	dq 14
   324 000003A7 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   325 000003AF 75616C2D7A7A            	db 0x75, 0x61, 0x6C, 0x2D, 0x7A, 0x7A
   326                                  	; L_constants + 949:
   327 000003B5 03                      	db T_string	; "quotient"
   328 000003B6 0800000000000000        	dq 8
   329 000003BE 71756F7469656E74        	db 0x71, 0x75, 0x6F, 0x74, 0x69, 0x65, 0x6E, 0x74
   330                                  	; L_constants + 966:
   331 000003C6 03                      	db T_string	; "remainder"
   332 000003C7 0900000000000000        	dq 9
   333 000003CF 72656D61696E6465        	db 0x72, 0x65, 0x6D, 0x61, 0x69, 0x6E, 0x64, 0x65
   334 000003D7 72                      	db 0x72
   335                                  	; L_constants + 984:
   336 000003D8 03                      	db T_string	; "set-car!"
   337 000003D9 0800000000000000        	dq 8
   338 000003E1 7365742D63617221        	db 0x73, 0x65, 0x74, 0x2D, 0x63, 0x61, 0x72, 0x21
   339                                  	; L_constants + 1001:
   340 000003E9 03                      	db T_string	; "set-cdr!"
   341 000003EA 0800000000000000        	dq 8
   342 000003F2 7365742D63647221        	db 0x73, 0x65, 0x74, 0x2D, 0x63, 0x64, 0x72, 0x21
   343                                  	; L_constants + 1018:
   344 000003FA 03                      	db T_string	; "string-ref"
   345 000003FB 0A00000000000000        	dq 10
   346 00000403 737472696E672D72        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x72
   347 0000040B 6566                    	db 0x65, 0x66
   348                                  	; L_constants + 1037:
   349 0000040D 03                      	db T_string	; "vector-ref"
   350 0000040E 0A00000000000000        	dq 10
   351 00000416 766563746F722D72        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x72
   352 0000041E 6566                    	db 0x65, 0x66
   353                                  	; L_constants + 1056:
   354 00000420 03                      	db T_string	; "vector-set!"
   355 00000421 0B00000000000000        	dq 11
   356 00000429 766563746F722D73        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x73
   357 00000431 657421                  	db 0x65, 0x74, 0x21
   358                                  	; L_constants + 1076:
   359 00000434 03                      	db T_string	; "string-set!"
   360 00000435 0B00000000000000        	dq 11
   361 0000043D 737472696E672D73        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x73
   362 00000445 657421                  	db 0x65, 0x74, 0x21
   363                                  	; L_constants + 1096:
   364 00000448 03                      	db T_string	; "make-vector"
   365 00000449 0B00000000000000        	dq 11
   366 00000451 6D616B652D766563        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x76, 0x65, 0x63
   367 00000459 746F72                  	db 0x74, 0x6F, 0x72
   368                                  	; L_constants + 1116:
   369 0000045C 03                      	db T_string	; "make-string"
   370 0000045D 0B00000000000000        	dq 11
   371 00000465 6D616B652D737472        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x73, 0x74, 0x72
   372 0000046D 696E67                  	db 0x69, 0x6E, 0x67
   373                                  	; L_constants + 1136:
   374 00000470 03                      	db T_string	; "numerator"
   375 00000471 0900000000000000        	dq 9
   376 00000479 6E756D657261746F        	db 0x6E, 0x75, 0x6D, 0x65, 0x72, 0x61, 0x74, 0x6F
   377 00000481 72                      	db 0x72
   378                                  	; L_constants + 1154:
   379 00000482 03                      	db T_string	; "denominator"
   380 00000483 0B00000000000000        	dq 11
   381 0000048B 64656E6F6D696E61        	db 0x64, 0x65, 0x6E, 0x6F, 0x6D, 0x69, 0x6E, 0x61
   382 00000493 746F72                  	db 0x74, 0x6F, 0x72
   383                                  	; L_constants + 1174:
   384 00000496 03                      	db T_string	; "eq?"
   385 00000497 0300000000000000        	dq 3
   386 0000049F 65713F                  	db 0x65, 0x71, 0x3F
   387                                  	; L_constants + 1186:
   388 000004A2 03                      	db T_string	; "__integer-to-fracti...
   389 000004A3 1500000000000000        	dq 21
   390 000004AB 5F5F696E74656765        	db 0x5F, 0x5F, 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65
   391 000004B3 722D746F2D667261        	db 0x72, 0x2D, 0x74, 0x6F, 0x2D, 0x66, 0x72, 0x61
   392 000004BB 6374696F6E              	db 0x63, 0x74, 0x69, 0x6F, 0x6E
   393                                  	; L_constants + 1216:
   394 000004C0 03                      	db T_string	; "logand"
   395 000004C1 0600000000000000        	dq 6
   396 000004C9 6C6F67616E64            	db 0x6C, 0x6F, 0x67, 0x61, 0x6E, 0x64
   397                                  	; L_constants + 1231:
   398 000004CF 03                      	db T_string	; "logor"
   399 000004D0 0500000000000000        	dq 5
   400 000004D8 6C6F676F72              	db 0x6C, 0x6F, 0x67, 0x6F, 0x72
   401                                  	; L_constants + 1245:
   402 000004DD 03                      	db T_string	; "logxor"
   403 000004DE 0600000000000000        	dq 6
   404 000004E6 6C6F67786F72            	db 0x6C, 0x6F, 0x67, 0x78, 0x6F, 0x72
   405                                  	; L_constants + 1260:
   406 000004EC 03                      	db T_string	; "lognot"
   407 000004ED 0600000000000000        	dq 6
   408 000004F5 6C6F676E6F74            	db 0x6C, 0x6F, 0x67, 0x6E, 0x6F, 0x74
   409                                  	; L_constants + 1275:
   410 000004FB 03                      	db T_string	; "ash"
   411 000004FC 0300000000000000        	dq 3
   412 00000504 617368                  	db 0x61, 0x73, 0x68
   413                                  	; L_constants + 1287:
   414 00000507 03                      	db T_string	; "symbol?"
   415 00000508 0700000000000000        	dq 7
   416 00000510 73796D626F6C3F          	db 0x73, 0x79, 0x6D, 0x62, 0x6F, 0x6C, 0x3F
   417                                  	; L_constants + 1303:
   418 00000517 03                      	db T_string	; "uninterned-symbol?"
   419 00000518 1200000000000000        	dq 18
   420 00000520 756E696E7465726E        	db 0x75, 0x6E, 0x69, 0x6E, 0x74, 0x65, 0x72, 0x6E
   421 00000528 65642D73796D626F        	db 0x65, 0x64, 0x2D, 0x73, 0x79, 0x6D, 0x62, 0x6F
   422 00000530 6C3F                    	db 0x6C, 0x3F
   423                                  	; L_constants + 1330:
   424 00000532 03                      	db T_string	; "gensym?"
   425 00000533 0700000000000000        	dq 7
   426 0000053B 67656E73796D3F          	db 0x67, 0x65, 0x6E, 0x73, 0x79, 0x6D, 0x3F
   427                                  	; L_constants + 1346:
   428 00000542 03                      	db T_string	; "gensym"
   429 00000543 0600000000000000        	dq 6
   430 0000054B 67656E73796D            	db 0x67, 0x65, 0x6E, 0x73, 0x79, 0x6D
   431                                  	; L_constants + 1361:
   432 00000551 03                      	db T_string	; "frame"
   433 00000552 0500000000000000        	dq 5
   434 0000055A 6672616D65              	db 0x66, 0x72, 0x61, 0x6D, 0x65
   435                                  	; L_constants + 1375:
   436 0000055F 03                      	db T_string	; "break"
   437 00000560 0500000000000000        	dq 5
   438 00000568 627265616B              	db 0x62, 0x72, 0x65, 0x61, 0x6B
   439                                  	; L_constants + 1389:
   440 0000056D 03                      	db T_string	; "boolean-false?"
   441 0000056E 0E00000000000000        	dq 14
   442 00000576 626F6F6C65616E2D        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x2D
   443 0000057E 66616C73653F            	db 0x66, 0x61, 0x6C, 0x73, 0x65, 0x3F
   444                                  	; L_constants + 1412:
   445 00000584 03                      	db T_string	; "boolean-true?"
   446 00000585 0D00000000000000        	dq 13
   447 0000058D 626F6F6C65616E2D        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x2D
   448 00000595 747275653F              	db 0x74, 0x72, 0x75, 0x65, 0x3F
   449                                  	; L_constants + 1434:
   450 0000059A 03                      	db T_string	; "primitive?"
   451 0000059B 0A00000000000000        	dq 10
   452 000005A3 7072696D69746976        	db 0x70, 0x72, 0x69, 0x6D, 0x69, 0x74, 0x69, 0x76
   453 000005AB 653F                    	db 0x65, 0x3F
   454                                  	; L_constants + 1453:
   455 000005AD 03                      	db T_string	; "length"
   456 000005AE 0600000000000000        	dq 6
   457 000005B6 6C656E677468            	db 0x6C, 0x65, 0x6E, 0x67, 0x74, 0x68
   458                                  	; L_constants + 1468:
   459 000005BC 03                      	db T_string	; "make-list"
   460 000005BD 0900000000000000        	dq 9
   461 000005C5 6D616B652D6C6973        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x6C, 0x69, 0x73
   462 000005CD 74                      	db 0x74
   463                                  	; L_constants + 1486:
   464 000005CE 03                      	db T_string	; "return"
   465 000005CF 0600000000000000        	dq 6
   466 000005D7 72657475726E            	db 0x72, 0x65, 0x74, 0x75, 0x72, 0x6E
   467                                  	; L_constants + 1501:
   468 000005DD 11                      	db T_integer	; 1
   469 000005DE 0100000000000000        	dq 1
   470                                  	; L_constants + 1510:
   471 000005E6 11                      	db T_integer	; 2
   472 000005E7 0200000000000000        	dq 2
   473                                  	; L_constants + 1519:
   474 000005EF 11                      	db T_integer	; 3
   475 000005F0 0300000000000000        	dq 3
   476                                  	; L_constants + 1528:
   477 000005F8 11                      	db T_integer	; 4
   478 000005F9 0400000000000000        	dq 4
   479                                  	; L_constants + 1537:
   480 00000601 11                      	db T_integer	; 5
   481 00000602 0500000000000000        	dq 5
   482                                  
   483                                  
   484                                  extern printf, fprintf, stdout, stderr, fwrite, exit, putchar, getchar
   485                                  global main
   486                                  section .text
   487                                  main:
   488 00000000 C8000000                        enter 0, 0
   489 00000004 6A00                            push 0
   490 00000006 6A00                            push 0
   491 00000008 68[47010000]                    push Lend
   492 0000000D C8000000                        enter 0, 0
   493                                  
   494                                  	; preparing a non-tail-call
   495 00000011 48B8-                   	mov rax, L_constants + 1537
   495 00000013 [0106000000000000] 
   496 0000001B 50                      	push rax
   497 0000001C 48B8-                   	mov rax, L_constants + 1528
   497 0000001E [F805000000000000] 
   498 00000026 50                      	push rax
   499 00000027 48B8-                   	mov rax, L_constants + 1519
   499 00000029 [EF05000000000000] 
   500 00000031 50                      	push rax
   501 00000032 48B8-                   	mov rax, L_constants + 1510
   501 00000034 [E605000000000000] 
   502 0000003C 50                      	push rax
   503 0000003D 48B8-                   	mov rax, L_constants + 1501
   503 0000003F [DD05000000000000] 
   504 00000047 50                      	push rax
   505 00000048 6A05                    	push 5	; arg count
   506 0000004A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   507 0000004F E85E020000              	call malloc
   508 00000054 50                      	push rax
   509 00000055 BF10000000              	mov rdi, 8 * 2	; new rib
   510 0000005A E853020000              	call malloc
   511 0000005F 50                      	push rax
   512 00000060 BF08000000              	mov rdi, 8 * 1	; extended env
   513 00000065 E848020000              	call malloc
   514 0000006A 488B7D10                	mov rdi, ENV
   515 0000006E BE00000000              	mov rsi, 0
   516 00000073 BA01000000              	mov rdx, 1
   517                                  .L_lambda_opt_env_loop_0001:	; ext_env[i + 1] <-- env[i]
   518 00000078 4883FE00                	cmp rsi, 0
   519 0000007C 7410                    	je .L_lambda_opt_env_end_0001
   520 0000007E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
   521 00000082 48890CD0                	mov qword [rax + 8 * rdx], rcx
   522 00000086 48FFC6                  	inc rsi
   523 00000089 48FFC2                  	inc rdx
   524 0000008C EBEA                    	jmp .L_lambda_opt_env_loop_0001
   525                                  .L_lambda_opt_env_end_0001:
   526 0000008E 5B                      	pop rbx
   527 0000008F BE00000000              	mov rsi, 0
   528                                  .L_lambda_opt_params_loop_0001:	; copy params
   529 00000094 4883FE02                	cmp rsi, 2
   530 00000098 740E                    	je .L_lambda_opt_params_end_0001
   531 0000009A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   532 0000009F 488914F3                	mov qword [rbx + 8 * rsi], rdx
   533 000000A3 48FFC6                  	inc rsi
   534 000000A6 EBEC                    	jmp .L_lambda_opt_params_loop_0001
   535                                  .L_lambda_opt_params_end_0001:
   536 000000A8 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib
   537 000000AB 4889C3                  	mov rbx, rax
   538 000000AE 58                      	pop rax
   539 000000AF C60004                  	mov byte [rax], T_closure
   540 000000B2 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   541 000000B6 48C74009[C0000000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0001
   542 000000BE EB78                    	jmp .L_lambda_opt_end_0001
   543                                  .L_lambda_opt_code_0001:
   544 000000C0 48837C241002            	cmp qword [rsp + 8 * 2], 2
   545 000000C6 740D                    	je .L_lambda_opt_arity_check_exact_0001
   546 000000C8 7F1A                    	jg .L_lambda_opt_arity_check_more_0001
   547 000000CA FF742410                	push qword [rsp + 8 * 2]
   548 000000CE 6A02                    	push 2
   549 000000D0 E9AA010000              	jmp L_error_incorrect_arity_opt
   550                                  .L_lambda_opt_arity_check_exact_0001:
   551 000000D5 488D6424F8              	lea rsp, [rsp - 8]
   552 000000DA 48C70424[01000000]      	mov qword [rsp], sob_nil
   553 000000E2 EB48                    	jmp .L_lambda_opt_stack_adjusted_0001
   554                                  .L_lambda_opt_arity_check_more_0001:
   555 000000E4 4C8B442410              	mov r8, qword [rsp + 8 * 2] ; number of arguments
   556 000000E9 4989E1                  	mov r9, rsp
   557 000000EC 4983E802                	sub r8, 2 ; calculate the number of optional arguments
   558 000000F0 4E8D54C410              	lea r10, [rsp + 8 * r8 + 8 * 2]
   559 000000F5 4C89C1                  	mov rcx, r8
   560 000000F8 48B8-                   	mov rax, sob_nil
   560 000000FA [0100000000000000] 
   561                                  .L_lambda_opt_stack_shrink_loop_0001:
   562 00000102 4883F900                	cmp rcx, 0
   563 00000106 7424                    	je .L_lambda_opt_stack_adjusted_0001
   564 00000108 4983EA08                	sub r10, 8
   565 0000010C 498B1A                  	mov rbx, qword [r10]
   566 0000010F BF11000000              	mov rdi, (1 + 8 + 8)
   567 00000114 E899010000              	call malloc
   568 00000119 C60021                  	mov byte [rax], T_pair
   569 0000011C 48895801                	mov qword [rax + 1], rbx
   570 00000120 48895009                	mov qword [rax + 1 + 8], rdx
   571 00000124 4889C2                  	mov rdx, rax
   572 00000127 48FFC9                  	dec rcx
   573 0000012A EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_0001
   574                                  .L_lambda_opt_stack_adjusted_0001:
   575 0000012C C8000000                	enter 0, 0
   576 00000130 488B4530                	mov rax, PARAM(2)	; param c
   577 00000134 C9                      	leave
   578 00000135 C22800                  	ret AND_KILL_FRAME(3)
   579                                  .L_lambda_opt_end_0001:
   580 00000138 803804                  	cmp byte [rax], T_closure
   581 0000013B 0F85C8000000            	jne L_error_non_closure
   582 00000141 FF7001                  	push SOB_CLOSURE_ENV(rax)
   583 00000144 FF5009                  	call SOB_CLOSURE_CODE(rax)
   584                                  Lend:
   585 00000147 4889C7                  	mov rdi, rax
   586 0000014A E8B8030000              	call print_sexpr_if_not_void
   587                                  
   588 0000014F 48BF-                           mov rdi, fmt_memory_usage
   588 00000151 [A206000000000000] 
   589 00000159 488B3425[28070000]              mov rsi, qword [top_of_memory]
   590 00000161 4881EE[00000000]                sub rsi, memory
   591 00000168 B800000000                      mov rax, 0
   592                                          ENTER
    44 0000016D C8000000            <1>  enter 0, 0
    45 00000171 4883E4F0            <1>  and rsp, ~15
   593 00000175 E8(00000000)                    call printf
   594                                          LEAVE
    49 0000017A C9                  <1>  leave
   595 0000017B B800000000                      mov rax, 0
   596 00000180 E8(00000000)                    call exit
   597                                  
   598                                  L_error_fvar_undefined:
   599 00000185 50                              push rax
   600 00000186 488B3C25[00000000]              mov rdi, qword [stderr]  ; destination
   601 0000018E 48BE-                           mov rsi, fmt_undefined_free_var_1
   601 00000190 [0A06000000000000] 
   602 00000198 B800000000                      mov rax, 0
   603                                          ENTER
    44 0000019D C8000000            <1>  enter 0, 0
    45 000001A1 4883E4F0            <1>  and rsp, ~15
   604 000001A5 E8(00000000)                    call fprintf
   605                                          LEAVE
    49 000001AA C9                  <1>  leave
   606 000001AB 58                              pop rax
   607 000001AC 488B4001                        mov rax, qword [rax + 1] ; string
   608 000001B0 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
   609 000001B4 BE01000000                      mov rsi, 1               ; sizeof(char)
   610 000001B9 488B5001                        mov rdx, qword [rax + 1] ; string-length
   611 000001BD 488B0C25[00000000]              mov rcx, qword [stderr]  ; destination
   612 000001C5 B800000000                      mov rax, 0
   613                                          ENTER
    44 000001CA C8000000            <1>  enter 0, 0
    45 000001CE 4883E4F0            <1>  and rsp, ~15
   614 000001D2 E8(00000000)                    call fwrite
   615                                          LEAVE
    49 000001D7 C9                  <1>  leave
   616 000001D8 488B3C25[00000000]              mov rdi, [stderr]       ; destination
   617 000001E0 48BE-                           mov rsi, fmt_undefined_free_var_2
   617 000001E2 [2106000000000000] 
   618 000001EA B800000000                      mov rax, 0
   619                                          ENTER
    44 000001EF C8000000            <1>  enter 0, 0
    45 000001F3 4883E4F0            <1>  and rsp, ~15
   620 000001F7 E8(00000000)                    call fprintf
   621                                          LEAVE
    49 000001FC C9                  <1>  leave
   622 000001FD 48C7C0F6FFFFFF                  mov rax, -10
   623 00000204 E8(00000000)                    call exit
   624                                  
   625                                  L_error_non_closure:
   626 00000209 488B3C25[00000000]              mov rdi, qword [stderr]
   627 00000211 48BE-                           mov rsi, fmt_non_closure
   627 00000213 [D806000000000000] 
   628 0000021B B800000000                      mov rax, 0
   629                                          ENTER
    44 00000220 C8000000            <1>  enter 0, 0
    45 00000224 4883E4F0            <1>  and rsp, ~15
   630 00000228 E8(00000000)                    call fprintf
   631                                          LEAVE
    49 0000022D C9                  <1>  leave
   632 0000022E 48C7C0FEFFFFFF                  mov rax, -2
   633 00000235 E8(00000000)                    call exit
   634                                  
   635                                  L_error_improper_list:
   636 0000023A 488B3C25[00000000]      	mov rdi, qword [stderr]
   637 00000242 48BE-                   	mov rsi, fmt_error_improper_list
   637 00000244 [0007000000000000] 
   638 0000024C B800000000              	mov rax, 0
   639                                          ENTER
    44 00000251 C8000000            <1>  enter 0, 0
    45 00000255 4883E4F0            <1>  and rsp, ~15
   640 00000259 E8(00000000)            	call fprintf
   641                                          LEAVE
    49 0000025E C9                  <1>  leave
   642 0000025F 48C7C0F9FFFFFF          	mov rax, -7
   643 00000266 E8(00000000)            	call exit
   644                                  
   645                                  L_error_incorrect_arity_simple:
   646 0000026B 488B3C25[00000000]              mov rdi, qword [stderr]
   647 00000273 48BE-                           mov rsi, fmt_incorrect_arity_simple
   647 00000275 [4306000000000000] 
   648 0000027D EB12                            jmp L_error_incorrect_arity_common
   649                                  L_error_incorrect_arity_opt:
   650 0000027F 488B3C25[00000000]              mov rdi, qword [stderr]
   651 00000287 48BE-                           mov rsi, fmt_incorrect_arity_opt
   651 00000289 [6E06000000000000] 
   652                                  L_error_incorrect_arity_common:
   653 00000291 5A                              pop rdx
   654 00000292 59                              pop rcx
   655 00000293 B800000000                      mov rax, 0
   656                                          ENTER
    44 00000298 C8000000            <1>  enter 0, 0
    45 0000029C 4883E4F0            <1>  and rsp, ~15
   657 000002A0 E8(00000000)                    call fprintf
   658                                          LEAVE
    49 000002A5 C9                  <1>  leave
   659 000002A6 48C7C0FAFFFFFF                  mov rax, -6
   660 000002AD E8(00000000)                    call exit
   661                                  
   662                                  section .data
   663                                  fmt_undefined_free_var_1:
   664 0000060A 212121205468652066-             db `!!! The free variable \0`
   664 00000613 726565207661726961-
   664 0000061C 626C652000         
   665                                  fmt_undefined_free_var_2:
   666 00000621 207761732075736564-             db ` was used before it was defined.\n\0`
   666 0000062A 206265666F72652069-
   666 00000633 742077617320646566-
   666 0000063C 696E65642E0A00     
   667                                  fmt_incorrect_arity_simple:
   668 00000643 212121204578706563-             db `!!! Expected %ld arguments, but given %ld\n\0`
   668 0000064C 74656420256C642061-
   668 00000655 7267756D656E74732C-
   668 0000065E 206275742067697665-
   668 00000667 6E20256C640A00     
   669                                  fmt_incorrect_arity_opt:
   670 0000066E 212121204578706563-             db `!!! Expected at least %ld arguments, but given %ld\n\0`
   670 00000677 746564206174206C65-
   670 00000680 61737420256C642061-
   670 00000689 7267756D656E74732C-
   670 00000692 206275742067697665-
   670 0000069B 6E20256C640A00     
   671                                  fmt_memory_usage:
   672 000006A2 0A2121212055736564-             db `\n!!! Used %ld bytes of dynamically-allocated memory\n\n\0`
   672 000006AB 20256C642062797465-
   672 000006B4 73206F662064796E61-
   672 000006BD 6D6963616C6C792D61-
   672 000006C6 6C6C6F636174656420-
   672 000006CF 6D656D6F72790A0A00 
   673                                  fmt_non_closure:
   674 000006D8 21212120417474656D-             db `!!! Attempting to apply a non-closure!\n\0`
   674 000006E1 7074696E6720746F20-
   674 000006EA 6170706C792061206E-
   674 000006F3 6F6E2D636C6F737572-
   674 000006FC 65210A00           
   675                                  fmt_error_improper_list:
   676 00000700 212121205468652061-     	db `!!! The argument is not a proper list!\n\0`
   676 00000709 7267756D656E742069-
   676 00000712 73206E6F7420612070-
   676 0000071B 726F706572206C6973-
   676 00000724 74210A00           
   677                                  
   678                                  section .bss
   679                                  memory:
   680 00000000 <res 40000000h>         	resb gbytes(1)
   681                                  
   682                                  section .data
   683                                  top_of_memory:
   684 00000728 [0000000000000000]              dq memory
   685                                  
   686                                  section .text
   687                                  malloc:
   688 000002B2 488B0425[28070000]              mov rax, qword [top_of_memory]
   689 000002BA 48013C25[28070000]              add qword [top_of_memory], rdi
   690 000002C2 C3                              ret
   691                                  
   692                                  L_code_ptr_return:
   693 000002C3 48837C241002            	cmp qword [rsp + 8*2], 2
   694 000002C9 0F85461C0000            	jne L_error_arg_count_2
   695 000002CF 488B4C2418              	mov rcx, qword [rsp + 8*3]
   696                                  	assert_integer(rcx)
    53 000002D4 803911              <1>  cmp byte [%1], %2
    54 000002D7 0F85D71C0000        <1>  jne L_error_incorrect_type
   697 000002DD 488B4901                	mov rcx, qword [rcx + 1]
   698 000002E1 4883F900                	cmp rcx, 0
   699 000002E5 0F8C5E1B0000            	jl L_error_integer_range
   700 000002EB 488B442420              	mov rax, qword [rsp + 8*4]
   701                                  .L0:
   702 000002F0 4883F900                        cmp rcx, 0
   703 000002F4 7409                            je .L1
   704 000002F6 488B6D00                	mov rbp, qword [rbp]
   705 000002FA 48FFC9                  	dec rcx
   706 000002FD 7FF1                    	jg .L0
   707                                  .L1:
   708 000002FF 4889EC                  	mov rsp, rbp
   709 00000302 5D                      	pop rbp
   710 00000303 5B                              pop rbx
   711 00000304 488B4C2408                      mov rcx, qword [rsp + 8*1]
   712 00000309 488D64CC10                      lea rsp, [rsp + 8*rcx + 8*2]
   713 0000030E FFE3                    	jmp rbx
   714                                  
   715                                  L_code_ptr_make_list:
   716 00000310 C8000000                	enter 0, 0
   717 00000314 48837D1801                      cmp COUNT, 1
   718 00000319 740C                            je .L0
   719 0000031B 48837D1802                      cmp COUNT, 2
   720 00000320 7411                            je .L1
   721 00000322 E9231C0000                      jmp L_error_arg_count_12
   722                                  .L0:
   723 00000327 49B9-                           mov r9, sob_void
   723 00000329 [0000000000000000] 
   724 00000331 EB04                            jmp .L2
   725                                  .L1:
   726 00000333 4C8B4D28                        mov r9, PARAM(1)
   727                                  .L2:
   728 00000337 488B4D20                        mov rcx, PARAM(0)
   729                                          assert_integer(rcx)
    53 0000033B 803911              <1>  cmp byte [%1], %2
    54 0000033E 0F85701C0000        <1>  jne L_error_incorrect_type
   730 00000344 488B4901                        mov rcx, qword [rcx + 1]
   731 00000348 4883F900                        cmp rcx, 0
   732 0000034C 0F8C281B0000                    jl L_error_arg_negative
   733 00000352 49B8-                           mov r8, sob_nil
   733 00000354 [0100000000000000] 
   734                                  .L3:
   735 0000035C 4883F900                        cmp rcx, 0
   736 00000360 7E1D                            jle .L4
   737 00000362 BF11000000                      mov rdi, 1 + 8 + 8
   738 00000367 E846FFFFFF                      call malloc
   739 0000036C C60021                          mov byte [rax], T_pair
   740 0000036F 4C894801                        mov qword [rax + 1], r9
   741 00000373 4C894009                        mov qword [rax + 1 + 8], r8
   742 00000377 4989C0                          mov r8, rax
   743 0000037A 48FFC9                          dec rcx
   744 0000037D EBDD                            jmp .L3
   745                                  .L4:
   746 0000037F 4C89C0                          mov rax, r8
   747 00000382 48837D1802                      cmp COUNT, 2
   748 00000387 7404                            je .L5
   749 00000389 C9                              leave
   750 0000038A C21800                          ret AND_KILL_FRAME(1)
   751                                  .L5:
   752 0000038D C9                      	leave
   753 0000038E C22000                  	ret AND_KILL_FRAME(2)
   754                                  
   755                                  L_code_ptr_is_primitive:
   756 00000391 C8000000                	enter 0, 0
   757 00000395 48837D1801              	cmp COUNT, 1
   758 0000039A 0F85401B0000            	jne L_error_arg_count_1
   759 000003A0 488B4520                	mov rax, PARAM(0)
   760                                  	assert_closure(rax)
    53 000003A4 803804              <1>  cmp byte [%1], %2
    54 000003A7 0F85071C0000        <1>  jne L_error_incorrect_type
   761 000003AD 4883780100              	cmp SOB_CLOSURE_ENV(rax), 0
   762 000003B2 750C                    	jne .L_false
   763 000003B4 48B8-                   	mov rax, sob_boolean_true
   763 000003B6 [0300000000000000] 
   764 000003BE EB0A                    	jmp .L_end
   765                                  .L_false:
   766 000003C0 48B8-                   	mov rax, sob_boolean_false
   766 000003C2 [0200000000000000] 
   767                                  .L_end:
   768 000003CA C9                      	leave
   769 000003CB C21800                  	ret AND_KILL_FRAME(1)
   770                                  
   771                                  L_code_ptr_length:
   772 000003CE C8000000                	enter 0, 0
   773 000003D2 48837D1801              	cmp COUNT, 1
   774 000003D7 0F85031B0000            	jne L_error_arg_count_1
   775 000003DD 488B5D20                	mov rbx, PARAM(0)
   776 000003E1 BF00000000              	mov rdi, 0
   777                                  .L:
   778 000003E6 803B01                  	cmp byte [rbx], T_nil
   779 000003E9 7412                    	je .L_end
   780                                  	assert_pair(rbx)
    53 000003EB 803B21              <1>  cmp byte [%1], %2
    54 000003EE 0F85C01B0000        <1>  jne L_error_incorrect_type
   781 000003F4 488B5B09                	mov rbx, SOB_PAIR_CDR(rbx)
   782 000003F8 48FFC7                  	inc rdi
   783 000003FB EBE9                    	jmp .L
   784                                  .L_end:
   785 000003FD E82D1A0000              	call make_integer
   786 00000402 C9                      	leave
   787 00000403 C21800                  	ret AND_KILL_FRAME(1)
   788                                  
   789                                  L_code_ptr_break:
   790 00000406 48837C241000                    cmp qword [rsp + 8 * 2], 0
   791 0000040C 0F85991A0000                    jne L_error_arg_count_0
   792 00000412 CC                              int3
   793 00000413 48B8-                           mov rax, sob_void
   793 00000415 [0000000000000000] 
   794 0000041D C21000                          ret AND_KILL_FRAME(0)        
   795                                  
   796                                  L_code_ptr_frame:
   797 00000420 C8000000                        enter 0, 0
   798 00000424 48837D1800                      cmp COUNT, 0
   799 00000429 0F857C1A0000                    jne L_error_arg_count_0
   800                                  
   801 0000042F 48BF-                           mov rdi, fmt_frame
   801 00000431 [3007000000000000] 
   802 00000439 488B7500                        mov rsi, qword [rbp]    ; old rbp
   803 0000043D 488B5608                        mov rdx, qword [rsi + 8*1] ; ret addr
   804 00000441 488B4E10                        mov rcx, qword [rsi + 8*2] ; lexical environment
   805 00000445 4C8B4618                        mov r8, qword [rsi + 8*3] ; count
   806 00000449 4C8D4E20                        lea r9, [rsi + 8*4]       ; address of argument 0
   807 0000044D 6A00                            push 0
   808 0000044F 4151                            push r9
   809 00000451 4150                            push r8                   ; we'll use it when printing the params
   810 00000453 B800000000                      mov rax, 0
   811                                          
   812                                          ENTER
    44 00000458 C8000000            <1>  enter 0, 0
    45 0000045C 4883E4F0            <1>  and rsp, ~15
   813 00000460 E8(00000000)                    call printf
   814                                          LEAVE
    49 00000465 C9                  <1>  leave
   815                                  
   816                                  .L:
   817 00000466 488B0C24                        mov rcx, qword [rsp]
   818 0000046A 4883F900                        cmp rcx, 0
   819 0000046E 7467                            je .L_out
   820 00000470 48BF-                           mov rdi, fmt_frame_param_prefix
   820 00000472 [6907000000000000] 
   821 0000047A 488B742410                      mov rsi, qword [rsp + 8*2]
   822 0000047F B800000000                      mov rax, 0
   823                                          
   824                                          ENTER
    44 00000484 C8000000            <1>  enter 0, 0
    45 00000488 4883E4F0            <1>  and rsp, ~15
   825 0000048C E8(00000000)                    call printf
   826                                          LEAVE
    49 00000491 C9                  <1>  leave
   827                                  
   828 00000492 488B0C24                        mov rcx, qword [rsp]
   829 00000496 48FFC9                          dec rcx
   830 00000499 48890C24                        mov qword [rsp], rcx    ; dec arg count
   831 0000049D 48FF442410                      inc qword [rsp + 8*2]   ; increment index of current arg
   832 000004A2 488B7C2408                      mov rdi, qword [rsp + 8*1] ; addr of addr current arg
   833 000004A7 4C8D4F08                        lea r9, [rdi + 8]          ; addr of next arg
   834 000004AB 4C894C2408                      mov qword [rsp + 8*1], r9  ; backup addr of next arg
   835 000004B0 488B3F                          mov rdi, qword [rdi]       ; addr of current arg
   836 000004B3 E87B000000                      call print_sexpr
   837 000004B8 48BF-                           mov rdi, fmt_newline
   837 000004BA [9507000000000000] 
   838 000004C2 B800000000                      mov rax, 0
   839                                          ENTER
    44 000004C7 C8000000            <1>  enter 0, 0
    45 000004CB 4883E4F0            <1>  and rsp, ~15
   840 000004CF E8(00000000)                    call printf
   841                                          LEAVE
    49 000004D4 C9                  <1>  leave
   842 000004D5 EB8F                            jmp .L
   843                                  .L_out:
   844 000004D7 48BF-                           mov rdi, fmt_frame_continue
   844 000004D9 [7A07000000000000] 
   845 000004E1 B800000000                      mov rax, 0
   846                                          ENTER
    44 000004E6 C8000000            <1>  enter 0, 0
    45 000004EA 4883E4F0            <1>  and rsp, ~15
   847 000004EE E8(00000000)                    call printf
   848 000004F3 E8(00000000)                    call getchar
   849                                          LEAVE
    49 000004F8 C9                  <1>  leave
   850                                          
   851 000004F9 48B8-                           mov rax, sob_void
   851 000004FB [0000000000000000] 
   852 00000503 C9                              leave
   853 00000504 C21000                          ret AND_KILL_FRAME(0)
   854                                          
   855                                  print_sexpr_if_not_void:
   856 00000507 4881FF[00000000]        	cmp rdi, sob_void
   857 0000050E 7422                    	je .done
   858 00000510 E81E000000              	call print_sexpr
   859 00000515 48BF-                   	mov rdi, fmt_newline
   859 00000517 [9507000000000000] 
   860 0000051F B800000000              	mov rax, 0
   861                                  	ENTER
    44 00000524 C8000000            <1>  enter 0, 0
    45 00000528 4883E4F0            <1>  and rsp, ~15
   862 0000052C E8(00000000)            	call printf
   863                                  	LEAVE
    49 00000531 C9                  <1>  leave
   864                                  .done:
   865 00000532 C3                      	ret
   866                                  
   867                                  section .data
   868                                  fmt_frame:
   869 00000730 524250203D2025703B-             db `RBP = %p; ret addr = %p; lex env = %p; param count = %d\n\0`
   869 00000739 207265742061646472-
   869 00000742 203D2025703B206C65-
   869 0000074B 7820656E76203D2025-
   869 00000754 703B20706172616D20-
   869 0000075D 636F756E74203D2025-
   869 00000766 640A00             
   870                                  fmt_frame_param_prefix:
   871 00000769 3D3D5B706172616D20-             db `==[param %d]==> \0`
   871 00000772 25645D3D3D3E2000   
   872                                  fmt_frame_continue:
   873 0000077A 486974203C456E7465-             db `Hit <Enter> to continue...\0`
   873 00000783 723E20746F20636F6E-
   873 0000078C 74696E75652E2E2E00 
   874                                  fmt_newline:
   875 00000795 0A00                    	db `\n\0`
   876                                  fmt_void:
   877 00000797 233C766F69643E00        	db `#<void>\0`
   878                                  fmt_nil:
   879 0000079F 282900                  	db `()\0`
   880                                  fmt_boolean_false:
   881 000007A2 236600                  	db `#f\0`
   882                                  fmt_boolean_true:
   883 000007A5 237400                  	db `#t\0`
   884                                  fmt_char_backslash:
   885 000007A8 235C5C00                	db `#\\\\\0`
   886                                  fmt_char_dquote:
   887 000007AC 235C2200                	db `#\\"\0`
   888                                  fmt_char_simple:
   889 000007B0 235C256300              	db `#\\%c\0`
   890                                  fmt_char_null:
   891 000007B5 235C6E756C00            	db `#\\nul\0`
   892                                  fmt_char_bell:
   893 000007BB 235C62656C6C00          	db `#\\bell\0`
   894                                  fmt_char_backspace:
   895 000007C2 235C6261636B737061-     	db `#\\backspace\0`
   895 000007CB 636500             
   896                                  fmt_char_tab:
   897 000007CE 235C74616200            	db `#\\tab\0`
   898                                  fmt_char_newline:
   899 000007D4 235C6E65776C696E65-     	db `#\\newline\0`
   899 000007DD 00                 
   900                                  fmt_char_formfeed:
   901 000007DE 235C7061676500          	db `#\\page\0`
   902                                  fmt_char_return:
   903 000007E5 235C72657475726E00      	db `#\\return\0`
   904                                  fmt_char_escape:
   905 000007EE 235C65736300            	db `#\\esc\0`
   906                                  fmt_char_space:
   907 000007F4 235C737061636500        	db `#\\space\0`
   908                                  fmt_char_hex:
   909 000007FC 235C782530325800        	db `#\\x%02X\0`
   910                                  fmt_gensym:
   911 00000804 47256C6400                      db `G%ld\0`
   912                                  fmt_closure:
   913 00000809 233C636C6F73757265-     	db `#<closure at 0x%08X env=0x%08X code=0x%08X>\0`
   913 00000812 206174203078253038-
   913 0000081B 5820656E763D307825-
   913 00000824 30385820636F64653D-
   913 0000082D 3078253038583E00   
   914                                  fmt_lparen:
   915 00000835 2800                    	db `(\0`
   916                                  fmt_dotted_pair:
   917 00000837 202E2000                	db ` . \0`
   918                                  fmt_rparen:
   919 0000083B 2900                    	db `)\0`
   920                                  fmt_space:
   921 0000083D 2000                    	db ` \0`
   922                                  fmt_empty_vector:
   923 0000083F 23282900                	db `#()\0`
   924                                  fmt_vector:
   925 00000843 232800                  	db `#(\0`
   926                                  fmt_real:
   927 00000846 256600                  	db `%f\0`
   928                                  fmt_fraction:
   929 00000849 256C642F256C6400        	db `%ld/%ld\0`
   930                                  fmt_zero:
   931 00000851 3000                    	db `0\0`
   932                                  fmt_int:
   933 00000853 256C6400                	db `%ld\0`
   934                                  fmt_unknown_scheme_object_error:
   935 00000857 0A0A21212120457272-     	db `\n\n!!! Error: Unknown Scheme-object (RTTI 0x%02X) `
   935 00000860 6F723A20556E6B6E6F-
   935 00000869 776E20536368656D65-
   935 00000872 2D6F626A6563742028-
   935 0000087B 525454492030782530-
   935 00000884 32582920           
   936 00000888 617420616464726573-     	db `at address 0x%08X\n\n\0`
   936 00000891 73203078253038580A-
   936 0000089A 0A00               
   937                                  fmt_dquote:
   938 0000089C 2200                    	db `\"\0`
   939                                  fmt_string_char:
   940 0000089E 256300                          db `%c\0`
   941                                  fmt_string_char_7:
   942 000008A1 5C6100                          db `\\a\0`
   943                                  fmt_string_char_8:
   944 000008A4 5C6200                          db `\\b\0`
   945                                  fmt_string_char_9:
   946 000008A7 5C7400                          db `\\t\0`
   947                                  fmt_string_char_10:
   948 000008AA 5C6E00                          db `\\n\0`
   949                                  fmt_string_char_11:
   950 000008AD 5C7600                          db `\\v\0`
   951                                  fmt_string_char_12:
   952 000008B0 5C6600                          db `\\f\0`
   953                                  fmt_string_char_13:
   954 000008B3 5C7200                          db `\\r\0`
   955                                  fmt_string_char_34:
   956 000008B6 5C2200                          db `\\"\0`
   957                                  fmt_string_char_92:
   958 000008B9 5C5C00                          db `\\\\\0`
   959                                  fmt_string_char_hex:
   960 000008BC 5C7825583B00                    db `\\x%X;\0`
   961                                  
   962                                  section .text
   963                                  
   964                                  print_sexpr:
   965 00000533 C8000000                	enter 0, 0
   966 00000537 8A07                    	mov al, byte [rdi]
   967 00000539 3C00                    	cmp al, T_void
   968 0000053B 7465                    	je .Lvoid
   969 0000053D 3C01                    	cmp al, T_nil
   970 0000053F 7470                    	je .Lnil
   971 00000541 3C09                    	cmp al, T_boolean_false
   972 00000543 747B                    	je .Lboolean_false
   973 00000545 3C0A                    	cmp al, T_boolean_true
   974 00000547 0F8482000000            	je .Lboolean_true
   975 0000054D 3C02                    	cmp al, T_char
   976 0000054F 0F8489000000            	je .Lchar
   977 00000555 3C41                    	cmp al, T_interned_symbol
   978 00000557 0F84BF010000            	je .Linterned_symbol
   979 0000055D 3C42                            cmp al, T_uninterned_symbol
   980 0000055F 0F84E3010000                    je .Luninterned_symbol
   981 00000565 3C21                    	cmp al, T_pair
   982 00000567 0F84EE010000            	je .Lpair
   983 0000056D 3C22                    	cmp al, T_vector
   984 0000056F 0F84B7020000            	je .Lvector
   985 00000575 3C04                    	cmp al, T_closure
   986 00000577 0F8485010000            	je .Lclosure
   987 0000057D 3C13                    	cmp al, T_real
   988 0000057F 0F8448030000            	je .Lreal
   989 00000585 3C12                    	cmp al, T_fraction
   990 00000587 0F846E030000            	je .Lfraction
   991 0000058D 3C11                    	cmp al, T_integer
   992 0000058F 0F84A7030000            	je .Linteger
   993 00000595 3C03                    	cmp al, T_string
   994 00000597 0F84B2030000            	je .Lstring
   995                                  
   996 0000059D E9DC040000              	jmp .Lunknown_sexpr_type
   997                                  
   998                                  .Lvoid:
   999 000005A2 48BF-                   	mov rdi, fmt_void
   999 000005A4 [9707000000000000] 
  1000 000005AC E900050000              	jmp .Lemit
  1001                                  
  1002                                  .Lnil:
  1003 000005B1 48BF-                   	mov rdi, fmt_nil
  1003 000005B3 [9F07000000000000] 
  1004 000005BB E9F1040000              	jmp .Lemit
  1005                                  
  1006                                  .Lboolean_false:
  1007 000005C0 48BF-                   	mov rdi, fmt_boolean_false
  1007 000005C2 [A207000000000000] 
  1008 000005CA E9E2040000              	jmp .Lemit
  1009                                  
  1010                                  .Lboolean_true:
  1011 000005CF 48BF-                   	mov rdi, fmt_boolean_true
  1011 000005D1 [A507000000000000] 
  1012 000005D9 E9D3040000              	jmp .Lemit
  1013                                  
  1014                                  .Lchar:
  1015 000005DE 8A4701                  	mov al, byte [rdi + 1]
  1016 000005E1 3C20                    	cmp al, ' '
  1017 000005E3 7E20                    	jle .Lchar_whitespace
  1018 000005E5 3C5C                    	cmp al, 92 		; backslash
  1019 000005E7 7474                    	je .Lchar_backslash
  1020 000005E9 3C22                    	cmp al, '"'
  1021 000005EB 747F                    	je .Lchar_dquote
  1022 000005ED 4825FF000000            	and rax, 255
  1023 000005F3 48BF-                   	mov rdi, fmt_char_simple
  1023 000005F5 [B007000000000000] 
  1024 000005FD 4889C6                  	mov rsi, rax
  1025 00000600 E9AC040000              	jmp .Lemit
  1026                                  
  1027                                  .Lchar_whitespace:
  1028 00000605 3C00                    	cmp al, 0
  1029 00000607 7472                    	je .Lchar_null
  1030 00000609 3C07                    	cmp al, 7
  1031 0000060B 747D                    	je .Lchar_bell
  1032 0000060D 3C08                    	cmp al, 8
  1033 0000060F 0F8484000000            	je .Lchar_backspace
  1034 00000615 3C09                    	cmp al, 9
  1035 00000617 0F848B000000            	je .Lchar_tab
  1036 0000061D 3C0A                    	cmp al, 10
  1037 0000061F 0F8492000000            	je .Lchar_newline
  1038 00000625 3C0C                    	cmp al, 12
  1039 00000627 0F8499000000            	je .Lchar_formfeed
  1040 0000062D 3C0D                    	cmp al, 13
  1041 0000062F 0F84A0000000            	je .Lchar_return
  1042 00000635 3C1B                    	cmp al, 27
  1043 00000637 0F84A7000000            	je .Lchar_escape
  1044 0000063D 4825FF000000            	and rax, 255
  1045 00000643 3C20                    	cmp al, ' '
  1046 00000645 0F84A8000000            	je .Lchar_space
  1047 0000064B 48BF-                   	mov rdi, fmt_char_hex
  1047 0000064D [FC07000000000000] 
  1048 00000655 4889C6                  	mov rsi, rax
  1049 00000658 E954040000              	jmp .Lemit	
  1050                                  
  1051                                  .Lchar_backslash:
  1052 0000065D 48BF-                   	mov rdi, fmt_char_backslash
  1052 0000065F [A807000000000000] 
  1053 00000667 E945040000              	jmp .Lemit
  1054                                  
  1055                                  .Lchar_dquote:
  1056 0000066C 48BF-                   	mov rdi, fmt_char_dquote
  1056 0000066E [AC07000000000000] 
  1057 00000676 E936040000              	jmp .Lemit
  1058                                  
  1059                                  .Lchar_null:
  1060 0000067B 48BF-                   	mov rdi, fmt_char_null
  1060 0000067D [B507000000000000] 
  1061 00000685 E927040000              	jmp .Lemit
  1062                                  
  1063                                  .Lchar_bell:
  1064 0000068A 48BF-                   	mov rdi, fmt_char_bell
  1064 0000068C [BB07000000000000] 
  1065 00000694 E918040000              	jmp .Lemit
  1066                                  
  1067                                  .Lchar_backspace:
  1068 00000699 48BF-                   	mov rdi, fmt_char_backspace
  1068 0000069B [C207000000000000] 
  1069 000006A3 E909040000              	jmp .Lemit
  1070                                  
  1071                                  .Lchar_tab:
  1072 000006A8 48BF-                   	mov rdi, fmt_char_tab
  1072 000006AA [CE07000000000000] 
  1073 000006B2 E9FA030000              	jmp .Lemit
  1074                                  
  1075                                  .Lchar_newline:
  1076 000006B7 48BF-                   	mov rdi, fmt_char_newline
  1076 000006B9 [D407000000000000] 
  1077 000006C1 E9EB030000              	jmp .Lemit
  1078                                  
  1079                                  .Lchar_formfeed:
  1080 000006C6 48BF-                   	mov rdi, fmt_char_formfeed
  1080 000006C8 [DE07000000000000] 
  1081 000006D0 E9DC030000              	jmp .Lemit
  1082                                  
  1083                                  .Lchar_return:
  1084 000006D5 48BF-                   	mov rdi, fmt_char_return
  1084 000006D7 [E507000000000000] 
  1085 000006DF E9CD030000              	jmp .Lemit
  1086                                  
  1087                                  .Lchar_escape:
  1088 000006E4 48BF-                   	mov rdi, fmt_char_escape
  1088 000006E6 [EE07000000000000] 
  1089 000006EE E9BE030000              	jmp .Lemit
  1090                                  
  1091                                  .Lchar_space:
  1092 000006F3 48BF-                   	mov rdi, fmt_char_space
  1092 000006F5 [F407000000000000] 
  1093 000006FD E9AF030000              	jmp .Lemit
  1094                                  
  1095                                  .Lclosure:
  1096 00000702 4889FE                  	mov rsi, qword rdi
  1097 00000705 48BF-                   	mov rdi, fmt_closure
  1097 00000707 [0908000000000000] 
  1098 0000070F 488B5601                	mov rdx, SOB_CLOSURE_ENV(rsi)
  1099 00000713 488B4E09                	mov rcx, SOB_CLOSURE_CODE(rsi)
  1100 00000717 E995030000              	jmp .Lemit
  1101                                  
  1102                                  .Linterned_symbol:
  1103 0000071C 488B7F01                	mov rdi, qword [rdi + 1] ; sob_string
  1104 00000720 BE01000000              	mov rsi, 1		 ; size = 1 byte
  1105 00000725 488B5701                	mov rdx, qword [rdi + 1] ; length
  1106 00000729 488D7F09                	lea rdi, [rdi + 1 + 8]	 ; actual characters
  1107 0000072D 488B0C25[00000000]      	mov rcx, qword [stdout]	 ; FILE *
  1108                                  	ENTER
    44 00000735 C8000000            <1>  enter 0, 0
    45 00000739 4883E4F0            <1>  and rsp, ~15
  1109 0000073D E8(00000000)            	call fwrite
  1110                                  	LEAVE
    49 00000742 C9                  <1>  leave
  1111 00000743 E97E030000              	jmp .Lend
  1112                                  
  1113                                  .Luninterned_symbol:
  1114 00000748 488B7701                        mov rsi, qword [rdi + 1] ; gensym counter
  1115 0000074C 48BF-                           mov rdi, fmt_gensym
  1115 0000074E [0408000000000000] 
  1116 00000756 E956030000                      jmp .Lemit
  1117                                  	
  1118                                  .Lpair:
  1119 0000075B 57                      	push rdi
  1120 0000075C 48BF-                   	mov rdi, fmt_lparen
  1120 0000075E [3508000000000000] 
  1121 00000766 B800000000              	mov rax, 0
  1122                                          ENTER
    44 0000076B C8000000            <1>  enter 0, 0
    45 0000076F 4883E4F0            <1>  and rsp, ~15
  1123 00000773 E8(00000000)            	call printf
  1124                                          LEAVE
    49 00000778 C9                  <1>  leave
  1125 00000779 488B3C24                	mov rdi, qword [rsp] 	; pair
  1126 0000077D 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
  1127 00000781 E8ADFDFFFF              	call print_sexpr
  1128 00000786 5F                      	pop rdi 		; pair
  1129 00000787 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
  1130                                  .Lcdr:
  1131 0000078B 8A07                    	mov al, byte [rdi]
  1132 0000078D 3C01                    	cmp al, T_nil
  1133 0000078F 7447                    	je .Lcdr_nil
  1134 00000791 3C21                    	cmp al, T_pair
  1135 00000793 7462                    	je .Lcdr_pair
  1136 00000795 57                      	push rdi
  1137 00000796 48BF-                   	mov rdi, fmt_dotted_pair
  1137 00000798 [3708000000000000] 
  1138 000007A0 B800000000              	mov rax, 0
  1139                                          ENTER
    44 000007A5 C8000000            <1>  enter 0, 0
    45 000007A9 4883E4F0            <1>  and rsp, ~15
  1140 000007AD E8(00000000)            	call printf
  1141                                          LEAVE
    49 000007B2 C9                  <1>  leave
  1142 000007B3 5F                      	pop rdi
  1143 000007B4 E87AFDFFFF              	call print_sexpr
  1144 000007B9 48BF-                   	mov rdi, fmt_rparen
  1144 000007BB [3B08000000000000] 
  1145 000007C3 B800000000              	mov rax, 0
  1146                                          ENTER
    44 000007C8 C8000000            <1>  enter 0, 0
    45 000007CC 4883E4F0            <1>  and rsp, ~15
  1147 000007D0 E8(00000000)            	call printf
  1148                                          LEAVE
    49 000007D5 C9                  <1>  leave
  1149 000007D6 C9                      	leave
  1150 000007D7 C3                      	ret
  1151                                  
  1152                                  .Lcdr_nil:
  1153 000007D8 48BF-                   	mov rdi, fmt_rparen
  1153 000007DA [3B08000000000000] 
  1154 000007E2 B800000000              	mov rax, 0
  1155                                          ENTER
    44 000007E7 C8000000            <1>  enter 0, 0
    45 000007EB 4883E4F0            <1>  and rsp, ~15
  1156 000007EF E8(00000000)            	call printf
  1157                                          LEAVE
    49 000007F4 C9                  <1>  leave
  1158 000007F5 C9                      	leave
  1159 000007F6 C3                      	ret
  1160                                  
  1161                                  .Lcdr_pair:
  1162 000007F7 57                      	push rdi
  1163 000007F8 48BF-                   	mov rdi, fmt_space
  1163 000007FA [3D08000000000000] 
  1164 00000802 B800000000              	mov rax, 0
  1165                                          ENTER
    44 00000807 C8000000            <1>  enter 0, 0
    45 0000080B 4883E4F0            <1>  and rsp, ~15
  1166 0000080F E8(00000000)            	call printf
  1167                                          LEAVE
    49 00000814 C9                  <1>  leave
  1168 00000815 488B3C24                	mov rdi, qword [rsp]
  1169 00000819 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
  1170 0000081D E811FDFFFF              	call print_sexpr
  1171 00000822 5F                      	pop rdi
  1172 00000823 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
  1173 00000827 E95FFFFFFF              	jmp .Lcdr
  1174                                  
  1175                                  .Lvector:
  1176 0000082C 488B4701                	mov rax, qword [rdi + 1] ; length
  1177 00000830 4883F800                	cmp rax, 0
  1178 00000834 0F8484000000            	je .Lvector_empty
  1179 0000083A 57                      	push rdi
  1180 0000083B 48BF-                   	mov rdi, fmt_vector
  1180 0000083D [4308000000000000] 
  1181 00000845 B800000000              	mov rax, 0
  1182                                          ENTER
    44 0000084A C8000000            <1>  enter 0, 0
    45 0000084E 4883E4F0            <1>  and rsp, ~15
  1183 00000852 E8(00000000)            	call printf
  1184                                          LEAVE
    49 00000857 C9                  <1>  leave
  1185 00000858 488B3C24                	mov rdi, qword [rsp]
  1186 0000085C FF7701                  	push qword [rdi + 1]
  1187 0000085F 6A01                    	push 1
  1188 00000861 488B7F09                	mov rdi, qword [rdi + 1 + 8] ; v[0]
  1189 00000865 E8C9FCFFFF              	call print_sexpr
  1190                                  .Lvector_loop:
  1191                                  	; [rsp] index
  1192                                  	; [rsp + 8*1] limit
  1193                                  	; [rsp + 8*2] vector
  1194 0000086A 488B0424                	mov rax, qword [rsp]
  1195 0000086E 483B442408              	cmp rax, qword [rsp + 8*1]
  1196 00000873 7436                    	je .Lvector_end
  1197 00000875 48BF-                   	mov rdi, fmt_space
  1197 00000877 [3D08000000000000] 
  1198 0000087F B800000000              	mov rax, 0
  1199                                          ENTER
    44 00000884 C8000000            <1>  enter 0, 0
    45 00000888 4883E4F0            <1>  and rsp, ~15
  1200 0000088C E8(00000000)            	call printf
  1201                                          LEAVE
    49 00000891 C9                  <1>  leave
  1202 00000892 488B0424                	mov rax, qword [rsp]
  1203 00000896 488B5C2410              	mov rbx, qword [rsp + 8*2]
  1204 0000089B 488B7CC309              	mov rdi, qword [rbx + 1 + 8 + 8 * rax] ; v[i]
  1205 000008A0 E88EFCFFFF              	call print_sexpr
  1206 000008A5 48FF0424                	inc qword [rsp]
  1207 000008A9 EBBF                    	jmp .Lvector_loop
  1208                                  
  1209                                  .Lvector_end:
  1210 000008AB 4883C418                	add rsp, 8*3
  1211 000008AF 48BF-                   	mov rdi, fmt_rparen
  1211 000008B1 [3B08000000000000] 
  1212 000008B9 E9F3010000              	jmp .Lemit	
  1213                                  
  1214                                  .Lvector_empty:
  1215 000008BE 48BF-                   	mov rdi, fmt_empty_vector
  1215 000008C0 [3F08000000000000] 
  1216 000008C8 E9E4010000              	jmp .Lemit
  1217                                  
  1218                                  .Lreal:
  1219 000008CD FF7701                  	push qword [rdi + 1]
  1220 000008D0 F20F100424              	movsd xmm0, qword [rsp]
  1221 000008D5 4883C408                	add rsp, 8*1
  1222 000008D9 48BF-                   	mov rdi, fmt_real
  1222 000008DB [4608000000000000] 
  1223 000008E3 B801000000              	mov rax, 1
  1224                                  	ENTER
    44 000008E8 C8000000            <1>  enter 0, 0
    45 000008EC 4883E4F0            <1>  and rsp, ~15
  1225 000008F0 E8(00000000)            	call printf
  1226                                  	LEAVE
    49 000008F5 C9                  <1>  leave
  1227 000008F6 E9CB010000              	jmp .Lend
  1228                                  
  1229                                  .Lfraction:
  1230 000008FB 488B7701                	mov rsi, qword [rdi + 1]
  1231 000008FF 488B5709                	mov rdx, qword [rdi + 1 + 8]
  1232 00000903 4883FE00                	cmp rsi, 0
  1233 00000907 7415                    	je .Lrat_zero
  1234 00000909 4883FA01                	cmp rdx, 1
  1235 0000090D 741E                    	je .Lrat_int
  1236 0000090F 48BF-                   	mov rdi, fmt_fraction
  1236 00000911 [4908000000000000] 
  1237 00000919 E993010000              	jmp .Lemit
  1238                                  
  1239                                  .Lrat_zero:
  1240 0000091E 48BF-                   	mov rdi, fmt_zero
  1240 00000920 [5108000000000000] 
  1241 00000928 E984010000              	jmp .Lemit
  1242                                  
  1243                                  .Lrat_int:
  1244 0000092D 48BF-                   	mov rdi, fmt_int
  1244 0000092F [5308000000000000] 
  1245 00000937 E975010000              	jmp .Lemit
  1246                                  
  1247                                  .Linteger:
  1248 0000093C 488B7701                	mov rsi, qword [rdi + 1]
  1249 00000940 48BF-                   	mov rdi, fmt_int
  1249 00000942 [5308000000000000] 
  1250 0000094A E962010000              	jmp .Lemit
  1251                                  
  1252                                  .Lstring:
  1253 0000094F 488D4709                	lea rax, [rdi + 1 + 8]
  1254 00000953 50                      	push rax
  1255 00000954 FF7701                  	push qword [rdi + 1]
  1256 00000957 48BF-                   	mov rdi, fmt_dquote
  1256 00000959 [9C08000000000000] 
  1257 00000961 B800000000              	mov rax, 0
  1258                                  	ENTER
    44 00000966 C8000000            <1>  enter 0, 0
    45 0000096A 4883E4F0            <1>  and rsp, ~15
  1259 0000096E E8(00000000)            	call printf
  1260                                  	LEAVE
    49 00000973 C9                  <1>  leave
  1261                                  .Lstring_loop:
  1262                                  	; qword [rsp]: limit
  1263                                  	; qword [rsp + 8*1]: char *
  1264 00000974 48833C2400              	cmp qword [rsp], 0
  1265 00000979 0F84EF000000            	je .Lstring_end
  1266 0000097F 488B442408              	mov rax, qword [rsp + 8*1]
  1267 00000984 8A00                    	mov al, byte [rax]
  1268 00000986 4825FF000000            	and rax, 255
  1269 0000098C 3C07                    	cmp al, 7
  1270 0000098E 745D                            je .Lstring_char_7
  1271 00000990 3C08                            cmp al, 8
  1272 00000992 7465                            je .Lstring_char_8
  1273 00000994 3C09                            cmp al, 9
  1274 00000996 746D                            je .Lstring_char_9
  1275 00000998 3C0A                            cmp al, 10
  1276 0000099A 7475                            je .Lstring_char_10
  1277 0000099C 3C0B                            cmp al, 11
  1278 0000099E 747D                            je .Lstring_char_11
  1279 000009A0 3C0C                            cmp al, 12
  1280 000009A2 0F8481000000                    je .Lstring_char_12
  1281 000009A8 3C0D                            cmp al, 13
  1282 000009AA 0F8485000000                    je .Lstring_char_13
  1283 000009B0 3C22                            cmp al, 34
  1284 000009B2 0F8489000000                    je .Lstring_char_34
  1285 000009B8 3C5C                            cmp al, 92              ;         je .Lstring_char_92
  1287 000009BA 3C20                            cmp al, ' '
  1288 000009BC 0F8C9A000000                    jl .Lstring_char_hex
  1289 000009C2 48BF-                           mov rdi, fmt_string_char
  1289 000009C4 [9E08000000000000] 
  1290 000009CC 4889C6                          mov rsi, rax
  1291                                  .Lstring_char_emit:
  1292 000009CF B800000000                      mov rax, 0
  1293                                          ENTER
    44 000009D4 C8000000            <1>  enter 0, 0
    45 000009D8 4883E4F0            <1>  and rsp, ~15
  1294 000009DC E8(00000000)                    call printf
  1295                                          LEAVE
    49 000009E1 C9                  <1>  leave
  1296 000009E2 48FF0C24                        dec qword [rsp]
  1297 000009E6 48FF442408                      inc qword [rsp + 8*1]
  1298 000009EB EB87                            jmp .Lstring_loop
  1299                                  
  1300                                  .Lstring_char_7:
  1301 000009ED 48BF-                           mov rdi, fmt_string_char_7
  1301 000009EF [A108000000000000] 
  1302 000009F7 EBD6                            jmp .Lstring_char_emit
  1303                                  
  1304                                  .Lstring_char_8:
  1305 000009F9 48BF-                           mov rdi, fmt_string_char_8
  1305 000009FB [A408000000000000] 
  1306 00000A03 EBCA                            jmp .Lstring_char_emit
  1307                                          
  1308                                  .Lstring_char_9:
  1309 00000A05 48BF-                           mov rdi, fmt_string_char_9
  1309 00000A07 [A708000000000000] 
  1310 00000A0F EBBE                            jmp .Lstring_char_emit
  1311                                  
  1312                                  .Lstring_char_10:
  1313 00000A11 48BF-                           mov rdi, fmt_string_char_10
  1313 00000A13 [AA08000000000000] 
  1314 00000A1B EBB2                            jmp .Lstring_char_emit
  1315                                  
  1316                                  .Lstring_char_11:
  1317 00000A1D 48BF-                           mov rdi, fmt_string_char_11
  1317 00000A1F [AD08000000000000] 
  1318 00000A27 EBA6                            jmp .Lstring_char_emit
  1319                                  
  1320                                  .Lstring_char_12:
  1321 00000A29 48BF-                           mov rdi, fmt_string_char_12
  1321 00000A2B [B008000000000000] 
  1322 00000A33 EB9A                            jmp .Lstring_char_emit
  1323                                  
  1324                                  .Lstring_char_13:
  1325 00000A35 48BF-                           mov rdi, fmt_string_char_13
  1325 00000A37 [B308000000000000] 
  1326 00000A3F EB8E                            jmp .Lstring_char_emit
  1327                                  
  1328                                  .Lstring_char_34:
  1329 00000A41 48BF-                           mov rdi, fmt_string_char_34
  1329 00000A43 [B608000000000000] 
  1330 00000A4B EB82                            jmp .Lstring_char_emit
  1331                                  
  1332                                  .Lstring_char_92:
  1333 00000A4D 48BF-                           mov rdi, fmt_string_char_92
  1333 00000A4F [B908000000000000] 
  1334 00000A57 E973FFFFFF                      jmp .Lstring_char_emit
  1335                                  
  1336                                  .Lstring_char_hex:
  1337 00000A5C 48BF-                           mov rdi, fmt_string_char_hex
  1337 00000A5E [BC08000000000000] 
  1338 00000A66 4889C6                          mov rsi, rax
  1339 00000A69 E961FFFFFF                      jmp .Lstring_char_emit        
  1340                                  
  1341                                  .Lstring_end:
  1342 00000A6E 4883C410                	add rsp, 8 * 2
  1343 00000A72 48BF-                   	mov rdi, fmt_dquote
  1343 00000A74 [9C08000000000000] 
  1344 00000A7C EB33                    	jmp .Lemit
  1345                                  
  1346                                  .Lunknown_sexpr_type:
  1347 00000A7E 48BE-                   	mov rsi, fmt_unknown_scheme_object_error
  1347 00000A80 [5708000000000000] 
  1348 00000A88 4825FF000000            	and rax, 255
  1349 00000A8E 4889C2                  	mov rdx, rax
  1350 00000A91 4889F9                  	mov rcx, rdi
  1351 00000A94 488B3C25[00000000]      	mov rdi, qword [stderr]
  1352 00000A9C B800000000              	mov rax, 0
  1353                                          ENTER
    44 00000AA1 C8000000            <1>  enter 0, 0
    45 00000AA5 4883E4F0            <1>  and rsp, ~15
  1354 00000AA9 E8(00000000)            	call fprintf
  1355                                          LEAVE
    49 00000AAE C9                  <1>  leave
  1356 00000AAF C9                              leave
  1357 00000AB0 C3                              ret
  1358                                  
  1359                                  .Lemit:
  1360 00000AB1 B800000000              	mov rax, 0
  1361                                          ENTER
    44 00000AB6 C8000000            <1>  enter 0, 0
    45 00000ABA 4883E4F0            <1>  and rsp, ~15
  1362 00000ABE E8(00000000)            	call printf
  1363                                          LEAVE
    49 00000AC3 C9                  <1>  leave
  1364 00000AC4 EB00                    	jmp .Lend
  1365                                  
  1366                                  .Lend:
  1367                                  	LEAVE
    49 00000AC6 C9                  <1>  leave
  1368 00000AC7 C3                      	ret
  1369                                  
  1370                                  ;;; rdi: address of free variable
  1371                                  ;;; rsi: address of code-pointer
  1372                                  bind_primitive:
  1373 00000AC8 C8000000                        enter 0, 0
  1374 00000ACC 57                              push rdi
  1375 00000ACD BF11000000                      mov rdi, (1 + 8 + 8)
  1376 00000AD2 E8DBF7FFFF                      call malloc
  1377 00000AD7 5F                              pop rdi
  1378 00000AD8 C60004                          mov byte [rax], T_closure
  1379 00000ADB 48C7400100000000                mov SOB_CLOSURE_ENV(rax), 0 ; dummy, lexical environment
  1380 00000AE3 48897009                        mov SOB_CLOSURE_CODE(rax), rsi ; code pointer
  1381 00000AE7 488907                          mov qword [rdi], rax
  1382 00000AEA 48B8-                           mov rax, sob_void
  1382 00000AEC [0000000000000000] 
  1383 00000AF4 C9                              leave
  1384 00000AF5 C3                              ret
  1385                                  
  1386                                  L_code_ptr_ash:
  1387 00000AF6 C8000000                        enter 0, 0
  1388 00000AFA 48837D1802                      cmp COUNT, 2
  1389 00000AFF 0F8510140000                    jne L_error_arg_count_2
  1390 00000B05 488B7D20                        mov rdi, PARAM(0)
  1391                                          assert_integer(rdi)
    53 00000B09 803F11              <1>  cmp byte [%1], %2
    54 00000B0C 0F85A2140000        <1>  jne L_error_incorrect_type
  1392 00000B12 488B4D28                        mov rcx, PARAM(1)
  1393                                          assert_integer(rcx)
    53 00000B16 803911              <1>  cmp byte [%1], %2
    54 00000B19 0F8595140000        <1>  jne L_error_incorrect_type
  1394 00000B1F 488B7F01                        mov rdi, qword [rdi + 1]
  1395 00000B23 488B4901                        mov rcx, qword [rcx + 1]
  1396 00000B27 4883F900                        cmp rcx, 0
  1397 00000B2B 7C0F                            jl .L_negative
  1398                                  .L_loop_positive:
  1399 00000B2D 4883F900                        cmp rcx, 0
  1400 00000B31 741B                            je .L_exit
  1401 00000B33 48D3E7                          sal rdi, cl
  1402 00000B36 48C1E908                        shr rcx, 8
  1403 00000B3A EBF1                            jmp .L_loop_positive
  1404                                  .L_negative:
  1405 00000B3C 48F7D9                          neg rcx
  1406                                  .L_loop_negative:
  1407 00000B3F 4883F900                        cmp rcx, 0
  1408 00000B43 7409                            je .L_exit
  1409 00000B45 48D3FF                          sar rdi, cl
  1410 00000B48 48C1E908                        shr rcx, 8
  1411 00000B4C EBF1                            jmp .L_loop_negative
  1412                                  .L_exit:
  1413 00000B4E E8DC120000                      call make_integer
  1414 00000B53 C9                              leave
  1415 00000B54 C22000                          ret AND_KILL_FRAME(2)
  1416                                  
  1417                                  L_code_ptr_logand:
  1418 00000B57 C8000000                        enter 0, 0
  1419 00000B5B 48837D1802                      cmp COUNT, 2
  1420 00000B60 0F85AF130000                    jne L_error_arg_count_2
  1421 00000B66 4C8B4520                        mov r8, PARAM(0)
  1422                                          assert_integer(r8)
    53 00000B6A 41803811            <1>  cmp byte [%1], %2
    54 00000B6E 0F8540140000        <1>  jne L_error_incorrect_type
  1423 00000B74 4C8B4D28                        mov r9, PARAM(1)
  1424                                          assert_integer(r9)
    53 00000B78 41803911            <1>  cmp byte [%1], %2
    54 00000B7C 0F8532140000        <1>  jne L_error_incorrect_type
  1425 00000B82 498B7801                        mov rdi, qword [r8 + 1]
  1426 00000B86 49237901                        and rdi, qword [r9 + 1]
  1427 00000B8A E8A0120000                      call make_integer
  1428 00000B8F C9                              leave
  1429 00000B90 C22000                          ret AND_KILL_FRAME(2)
  1430                                  
  1431                                  L_code_ptr_logor:
  1432 00000B93 C8000000                        enter 0, 0
  1433 00000B97 48837D1802                      cmp COUNT, 2
  1434 00000B9C 0F8573130000                    jne L_error_arg_count_2
  1435 00000BA2 4C8B4520                        mov r8, PARAM(0)
  1436                                          assert_integer(r8)
    53 00000BA6 41803811            <1>  cmp byte [%1], %2
    54 00000BAA 0F8504140000        <1>  jne L_error_incorrect_type
  1437 00000BB0 4C8B4D28                        mov r9, PARAM(1)
  1438                                          assert_integer(r9)
    53 00000BB4 41803911            <1>  cmp byte [%1], %2
    54 00000BB8 0F85F6130000        <1>  jne L_error_incorrect_type
  1439 00000BBE 498B7801                        mov rdi, qword [r8 + 1]
  1440 00000BC2 490B7901                        or rdi, qword [r9 + 1]
  1441 00000BC6 E864120000                      call make_integer
  1442 00000BCB C9                              leave
  1443 00000BCC C22000                          ret AND_KILL_FRAME(2)
  1444                                  
  1445                                  L_code_ptr_logxor:
  1446 00000BCF C8000000                        enter 0, 0
  1447 00000BD3 48837D1802                      cmp COUNT, 2
  1448 00000BD8 0F8537130000                    jne L_error_arg_count_2
  1449 00000BDE 4C8B4520                        mov r8, PARAM(0)
  1450                                          assert_integer(r8)
    53 00000BE2 41803811            <1>  cmp byte [%1], %2
    54 00000BE6 0F85C8130000        <1>  jne L_error_incorrect_type
  1451 00000BEC 4C8B4D28                        mov r9, PARAM(1)
  1452                                          assert_integer(r9)
    53 00000BF0 41803911            <1>  cmp byte [%1], %2
    54 00000BF4 0F85BA130000        <1>  jne L_error_incorrect_type
  1453 00000BFA 498B7801                        mov rdi, qword [r8 + 1]
  1454 00000BFE 49337901                        xor rdi, qword [r9 + 1]
  1455 00000C02 E828120000                      call make_integer
  1456                                          LEAVE
    49 00000C07 C9                  <1>  leave
  1457 00000C08 C22000                          ret AND_KILL_FRAME(2)
  1458                                  
  1459                                  L_code_ptr_lognot:
  1460 00000C0B C8000000                        enter 0, 0
  1461 00000C0F 48837D1801                      cmp COUNT, 1
  1462 00000C14 0F85C6120000                    jne L_error_arg_count_1
  1463 00000C1A 4C8B4520                        mov r8, PARAM(0)
  1464                                          assert_integer(r8)
    53 00000C1E 41803811            <1>  cmp byte [%1], %2
    54 00000C22 0F858C130000        <1>  jne L_error_incorrect_type
  1465 00000C28 498B7801                        mov rdi, qword [r8 + 1]
  1466 00000C2C 48F7D7                          not rdi
  1467 00000C2F E8FB110000                      call make_integer
  1468 00000C34 C9                              leave
  1469 00000C35 C21800                          ret AND_KILL_FRAME(1)
  1470                                  
  1471                                  L_code_ptr_bin_apply:
  1472                                  ;;; fill in for final project!
  1473                                  
  1474                                  L_code_ptr_is_null:
  1475 00000C38 C8000000                        enter 0, 0
  1476 00000C3C 48837D1801                      cmp COUNT, 1
  1477 00000C41 0F8599120000                    jne L_error_arg_count_1
  1478 00000C47 488B4520                        mov rax, PARAM(0)
  1479 00000C4B 803801                          cmp byte [rax], T_nil
  1480 00000C4E 750C                            jne .L_false
  1481 00000C50 48B8-                           mov rax, sob_boolean_true
  1481 00000C52 [0300000000000000] 
  1482 00000C5A EB0A                            jmp .L_end
  1483                                  .L_false:
  1484 00000C5C 48B8-                           mov rax, sob_boolean_false
  1484 00000C5E [0200000000000000] 
  1485                                  .L_end:
  1486 00000C66 C9                              leave
  1487 00000C67 C21800                          ret AND_KILL_FRAME(1)
  1488                                  
  1489                                  L_code_ptr_is_pair:
  1490 00000C6A C8000000                        enter 0, 0
  1491 00000C6E 48837D1801                      cmp COUNT, 1
  1492 00000C73 0F8567120000                    jne L_error_arg_count_1
  1493 00000C79 488B4520                        mov rax, PARAM(0)
  1494 00000C7D 803821                          cmp byte [rax], T_pair
  1495 00000C80 750C                            jne .L_false
  1496 00000C82 48B8-                           mov rax, sob_boolean_true
  1496 00000C84 [0300000000000000] 
  1497 00000C8C EB0A                            jmp .L_end
  1498                                  .L_false:
  1499 00000C8E 48B8-                           mov rax, sob_boolean_false
  1499 00000C90 [0200000000000000] 
  1500                                  .L_end:
  1501 00000C98 C9                              leave
  1502 00000C99 C21800                          ret AND_KILL_FRAME(1)
  1503                                          
  1504                                  L_code_ptr_is_void:
  1505 00000C9C C8000000                        enter 0, 0
  1506 00000CA0 48837D1801                      cmp COUNT, 1
  1507 00000CA5 0F8535120000                    jne L_error_arg_count_1
  1508 00000CAB 488B4520                        mov rax, PARAM(0)
  1509 00000CAF 803800                          cmp byte [rax], T_void
  1510 00000CB2 750C                            jne .L_false
  1511 00000CB4 48B8-                           mov rax, sob_boolean_true
  1511 00000CB6 [0300000000000000] 
  1512 00000CBE EB0A                            jmp .L_end
  1513                                  .L_false:
  1514 00000CC0 48B8-                           mov rax, sob_boolean_false
  1514 00000CC2 [0200000000000000] 
  1515                                  .L_end:
  1516 00000CCA C9                              leave
  1517 00000CCB C21800                          ret AND_KILL_FRAME(1)
  1518                                  
  1519                                  L_code_ptr_is_char:
  1520 00000CCE C8000000                        enter 0, 0
  1521 00000CD2 48837D1801                      cmp COUNT, 1
  1522 00000CD7 0F8503120000                    jne L_error_arg_count_1
  1523 00000CDD 488B4520                        mov rax, PARAM(0)
  1524 00000CE1 803802                          cmp byte [rax], T_char
  1525 00000CE4 750C                            jne .L_false
  1526 00000CE6 48B8-                           mov rax, sob_boolean_true
  1526 00000CE8 [0300000000000000] 
  1527 00000CF0 EB0A                            jmp .L_end
  1528                                  .L_false:
  1529 00000CF2 48B8-                           mov rax, sob_boolean_false
  1529 00000CF4 [0200000000000000] 
  1530                                  .L_end:
  1531 00000CFC C9                              leave
  1532 00000CFD C21800                          ret AND_KILL_FRAME(1)
  1533                                  
  1534                                  L_code_ptr_is_string:
  1535 00000D00 C8000000                        enter 0, 0
  1536 00000D04 48837D1801                      cmp COUNT, 1
  1537 00000D09 0F85D1110000                    jne L_error_arg_count_1
  1538 00000D0F 488B4520                        mov rax, PARAM(0)
  1539 00000D13 803803                          cmp byte [rax], T_string
  1540 00000D16 750C                            jne .L_false
  1541 00000D18 48B8-                           mov rax, sob_boolean_true
  1541 00000D1A [0300000000000000] 
  1542 00000D22 EB0A                            jmp .L_end
  1543                                  .L_false:
  1544 00000D24 48B8-                           mov rax, sob_boolean_false
  1544 00000D26 [0200000000000000] 
  1545                                  .L_end:
  1546 00000D2E C9                              leave
  1547 00000D2F C21800                          ret AND_KILL_FRAME(1)
  1548                                  
  1549                                  L_code_ptr_is_symbol:
  1550 00000D32 C8000000                        enter 0, 0
  1551 00000D36 48837D1801                      cmp COUNT, 1
  1552 00000D3B 0F859F110000                    jne L_error_arg_count_1
  1553 00000D41 4C8B4520                        mov r8, PARAM(0)
  1554 00000D45 41802040                        and byte [r8], T_symbol
  1555 00000D49 740C                            jz .L_false
  1556 00000D4B 48B8-                           mov rax, sob_boolean_true
  1556 00000D4D [0300000000000000] 
  1557 00000D55 EB0A                            jmp .L_exit
  1558                                  .L_false:
  1559 00000D57 48B8-                           mov rax, sob_boolean_false
  1559 00000D59 [0200000000000000] 
  1560                                  .L_exit:
  1561 00000D61 C9                              leave
  1562 00000D62 C21800                          ret AND_KILL_FRAME(1)
  1563                                  
  1564                                  L_code_ptr_is_uninterned_symbol:
  1565 00000D65 C8000000                        enter 0, 0
  1566 00000D69 48837D1801                      cmp COUNT, 1
  1567 00000D6E 0F856C110000                    jne L_error_arg_count_1
  1568 00000D74 4C8B4520                        mov r8, PARAM(0)
  1569 00000D78 41803842                        cmp byte [r8], T_uninterned_symbol
  1570 00000D7C 750C                            jne .L_false
  1571 00000D7E 48B8-                           mov rax, sob_boolean_true
  1571 00000D80 [0300000000000000] 
  1572 00000D88 EB0A                            jmp .L_exit
  1573                                  .L_false:
  1574 00000D8A 48B8-                           mov rax, sob_boolean_false
  1574 00000D8C [0200000000000000] 
  1575                                  .L_exit:
  1576 00000D94 C9                              leave
  1577 00000D95 C21800                          ret AND_KILL_FRAME(1)
  1578                                  
  1579                                  L_code_ptr_is_interned_symbol:
  1580 00000D98 C8000000                        enter 0, 0
  1581 00000D9C 48837D1801                      cmp COUNT, 1
  1582 00000DA1 0F8539110000                    jne L_error_arg_count_1
  1583 00000DA7 488B4520                        mov rax, PARAM(0)
  1584 00000DAB 803841                          cmp byte [rax], T_interned_symbol
  1585 00000DAE 750C                            jne .L_false
  1586 00000DB0 48B8-                           mov rax, sob_boolean_true
  1586 00000DB2 [0300000000000000] 
  1587 00000DBA EB0A                            jmp .L_end
  1588                                  .L_false:
  1589 00000DBC 48B8-                           mov rax, sob_boolean_false
  1589 00000DBE [0200000000000000] 
  1590                                  .L_end:
  1591 00000DC6 C9                              leave
  1592 00000DC7 C21800                          ret AND_KILL_FRAME(1)
  1593                                  
  1594                                  L_code_ptr_gensym:
  1595 00000DCA C8000000                        enter 0, 0
  1596 00000DCE 48837D1800                      cmp COUNT, 0
  1597 00000DD3 0F85D2100000                    jne L_error_arg_count_0
  1598 00000DD9 48FF0425[C2080000]              inc qword [gensym_count]
  1599 00000DE1 BF09000000                      mov rdi, (1 + 8)
  1600 00000DE6 E8C7F4FFFF                      call malloc
  1601 00000DEB C60042                          mov byte [rax], T_uninterned_symbol
  1602 00000DEE 488B0C25[C2080000]              mov rcx, qword [gensym_count]
  1603 00000DF6 48894801                        mov qword [rax + 1], rcx
  1604 00000DFA C9                              leave
  1605 00000DFB C21000                          ret AND_KILL_FRAME(0)
  1606                                  
  1607                                  L_code_ptr_is_vector:
  1608 00000DFE C8000000                        enter 0, 0
  1609 00000E02 48837D1801                      cmp COUNT, 1
  1610 00000E07 0F85D3100000                    jne L_error_arg_count_1
  1611 00000E0D 488B4520                        mov rax, PARAM(0)
  1612 00000E11 803822                          cmp byte [rax], T_vector
  1613 00000E14 750C                            jne .L_false
  1614 00000E16 48B8-                           mov rax, sob_boolean_true
  1614 00000E18 [0300000000000000] 
  1615 00000E20 EB0A                            jmp .L_end
  1616                                  .L_false:
  1617 00000E22 48B8-                           mov rax, sob_boolean_false
  1617 00000E24 [0200000000000000] 
  1618                                  .L_end:
  1619 00000E2C C9                              leave
  1620 00000E2D C21800                          ret AND_KILL_FRAME(1)
  1621                                  
  1622                                  L_code_ptr_is_closure:
  1623 00000E30 C8000000                        enter 0, 0
  1624 00000E34 48837D1801                      cmp COUNT, 1
  1625 00000E39 0F85A1100000                    jne L_error_arg_count_1
  1626 00000E3F 488B4520                        mov rax, PARAM(0)
  1627 00000E43 803804                          cmp byte [rax], T_closure
  1628 00000E46 750C                            jne .L_false
  1629 00000E48 48B8-                           mov rax, sob_boolean_true
  1629 00000E4A [0300000000000000] 
  1630 00000E52 EB0A                            jmp .L_end
  1631                                  .L_false:
  1632 00000E54 48B8-                           mov rax, sob_boolean_false
  1632 00000E56 [0200000000000000] 
  1633                                  .L_end:
  1634 00000E5E C9                              leave
  1635 00000E5F C21800                          ret AND_KILL_FRAME(1)
  1636                                  
  1637                                  L_code_ptr_is_real:
  1638 00000E62 C8000000                        enter 0, 0
  1639 00000E66 48837D1801                      cmp COUNT, 1
  1640 00000E6B 0F856F100000                    jne L_error_arg_count_1
  1641 00000E71 488B4520                        mov rax, PARAM(0)
  1642 00000E75 803813                          cmp byte [rax], T_real
  1643 00000E78 750C                            jne .L_false
  1644 00000E7A 48B8-                           mov rax, sob_boolean_true
  1644 00000E7C [0300000000000000] 
  1645 00000E84 EB0A                            jmp .L_end
  1646                                  .L_false:
  1647 00000E86 48B8-                           mov rax, sob_boolean_false
  1647 00000E88 [0200000000000000] 
  1648                                  .L_end:
  1649 00000E90 C9                              leave
  1650 00000E91 C21800                          ret AND_KILL_FRAME(1)
  1651                                  
  1652                                  L_code_ptr_is_fraction:
  1653 00000E94 C8000000                        enter 0, 0
  1654 00000E98 48837D1801                      cmp COUNT, 1
  1655 00000E9D 0F853D100000                    jne L_error_arg_count_1
  1656 00000EA3 488B4520                        mov rax, PARAM(0)
  1657 00000EA7 803812                          cmp byte [rax], T_fraction
  1658 00000EAA 750C                            jne .L_false
  1659 00000EAC 48B8-                           mov rax, sob_boolean_true
  1659 00000EAE [0300000000000000] 
  1660 00000EB6 EB0A                            jmp .L_end
  1661                                  .L_false:
  1662 00000EB8 48B8-                           mov rax, sob_boolean_false
  1662 00000EBA [0200000000000000] 
  1663                                  .L_end:
  1664 00000EC2 C9                              leave
  1665 00000EC3 C21800                          ret AND_KILL_FRAME(1)
  1666                                  
  1667                                  L_code_ptr_is_boolean:
  1668 00000EC6 C8000000                        enter 0, 0
  1669 00000ECA 48837D1801                      cmp COUNT, 1
  1670 00000ECF 0F850B100000                    jne L_error_arg_count_1
  1671 00000ED5 488B4520                        mov rax, PARAM(0)
  1672 00000ED9 8A18                            mov bl, byte [rax]
  1673 00000EDB 80E308                          and bl, T_boolean
  1674 00000EDE 740C                            je .L_false
  1675 00000EE0 48B8-                           mov rax, sob_boolean_true
  1675 00000EE2 [0300000000000000] 
  1676 00000EEA EB0A                            jmp .L_end
  1677                                  .L_false:
  1678 00000EEC 48B8-                           mov rax, sob_boolean_false
  1678 00000EEE [0200000000000000] 
  1679                                  .L_end:
  1680 00000EF6 C9                              leave
  1681 00000EF7 C21800                          ret AND_KILL_FRAME(1)
  1682                                          
  1683                                  L_code_ptr_is_boolean_false:
  1684 00000EFA C8000000                        enter 0, 0
  1685 00000EFE 48837D1801                      cmp COUNT, 1
  1686 00000F03 0F85D70F0000                    jne L_error_arg_count_1
  1687 00000F09 488B4520                        mov rax, PARAM(0)
  1688 00000F0D 8A18                            mov bl, byte [rax]
  1689 00000F0F 80FB09                          cmp bl, T_boolean_false
  1690 00000F12 750C                            jne .L_false
  1691 00000F14 48B8-                           mov rax, sob_boolean_true
  1691 00000F16 [0300000000000000] 
  1692 00000F1E EB0A                            jmp .L_end
  1693                                  .L_false:
  1694 00000F20 48B8-                           mov rax, sob_boolean_false
  1694 00000F22 [0200000000000000] 
  1695                                  .L_end:
  1696 00000F2A C9                              leave
  1697 00000F2B C21800                          ret AND_KILL_FRAME(1)
  1698                                  
  1699                                  L_code_ptr_is_boolean_true:
  1700 00000F2E C8000000                        enter 0, 0
  1701 00000F32 48837D1801                      cmp COUNT, 1
  1702 00000F37 0F85A30F0000                    jne L_error_arg_count_1
  1703 00000F3D 488B4520                        mov rax, PARAM(0)
  1704 00000F41 8A18                            mov bl, byte [rax]
  1705 00000F43 80FB0A                          cmp bl, T_boolean_true
  1706 00000F46 750C                            jne .L_false
  1707 00000F48 48B8-                           mov rax, sob_boolean_true
  1707 00000F4A [0300000000000000] 
  1708 00000F52 EB0A                            jmp .L_end
  1709                                  .L_false:
  1710 00000F54 48B8-                           mov rax, sob_boolean_false
  1710 00000F56 [0200000000000000] 
  1711                                  .L_end:
  1712 00000F5E C9                              leave
  1713 00000F5F C21800                          ret AND_KILL_FRAME(1)
  1714                                  
  1715                                  L_code_ptr_is_number:
  1716 00000F62 C8000000                        enter 0, 0
  1717 00000F66 48837D1801                      cmp COUNT, 1
  1718 00000F6B 0F856F0F0000                    jne L_error_arg_count_1
  1719 00000F71 488B4520                        mov rax, PARAM(0)
  1720 00000F75 8A18                            mov bl, byte [rax]
  1721 00000F77 80E310                          and bl, T_number
  1722 00000F7A 740C                            jz .L_false
  1723 00000F7C 48B8-                           mov rax, sob_boolean_true
  1723 00000F7E [0300000000000000] 
  1724 00000F86 EB0A                            jmp .L_end
  1725                                  .L_false:
  1726 00000F88 48B8-                           mov rax, sob_boolean_false
  1726 00000F8A [0200000000000000] 
  1727                                  .L_end:
  1728 00000F92 C9                              leave
  1729 00000F93 C21800                          ret AND_KILL_FRAME(1)
  1730                                          
  1731                                  L_code_ptr_is_collection:
  1732 00000F96 C8000000                        enter 0, 0
  1733 00000F9A 48837D1801                      cmp COUNT, 1
  1734 00000F9F 0F853B0F0000                    jne L_error_arg_count_1
  1735 00000FA5 488B4520                        mov rax, PARAM(0)
  1736 00000FA9 8A18                            mov bl, byte [rax]
  1737 00000FAB 80E320                          and bl, T_collection
  1738 00000FAE 740C                            je .L_false
  1739 00000FB0 48B8-                           mov rax, sob_boolean_true
  1739 00000FB2 [0300000000000000] 
  1740 00000FBA EB0A                            jmp .L_end
  1741                                  .L_false:
  1742 00000FBC 48B8-                           mov rax, sob_boolean_false
  1742 00000FBE [0200000000000000] 
  1743                                  .L_end:
  1744 00000FC6 C9                              leave
  1745 00000FC7 C21800                          ret AND_KILL_FRAME(1)
  1746                                  
  1747                                  L_code_ptr_cons:
  1748 00000FCA C8000000                        enter 0, 0
  1749 00000FCE 48837D1802                      cmp COUNT, 2
  1750 00000FD3 0F853C0F0000                    jne L_error_arg_count_2
  1751 00000FD9 BF11000000                      mov rdi, (1 + 8 + 8)
  1752 00000FDE E8CFF2FFFF                      call malloc
  1753 00000FE3 C60021                          mov byte [rax], T_pair
  1754 00000FE6 488B5D20                        mov rbx, PARAM(0)
  1755 00000FEA 48895801                        mov SOB_PAIR_CAR(rax), rbx
  1756 00000FEE 488B5D28                        mov rbx, PARAM(1)
  1757 00000FF2 48895809                        mov SOB_PAIR_CDR(rax), rbx
  1758 00000FF6 C9                              leave
  1759 00000FF7 C22000                          ret AND_KILL_FRAME(2)
  1760                                  
  1761                                  L_code_ptr_display_sexpr:
  1762 00000FFA C8000000                        enter 0, 0
  1763 00000FFE 48837D1801                      cmp COUNT, 1
  1764 00001003 0F85D70E0000                    jne L_error_arg_count_1
  1765 00001009 488B7D20                        mov rdi, PARAM(0)
  1766 0000100D E821F5FFFF                      call print_sexpr
  1767 00001012 48B8-                           mov rax, sob_void
  1767 00001014 [0000000000000000] 
  1768 0000101C C9                              leave
  1769 0000101D C21800                          ret AND_KILL_FRAME(1)
  1770                                  
  1771                                  L_code_ptr_write_char:
  1772 00001020 C8000000                        enter 0, 0
  1773 00001024 48837D1801                      cmp COUNT, 1
  1774 00001029 0F85B10E0000                    jne L_error_arg_count_1
  1775 0000102F 488B4520                        mov rax, PARAM(0)
  1776                                          assert_char(rax)
    53 00001033 803802              <1>  cmp byte [%1], %2
    54 00001036 0F85780F0000        <1>  jne L_error_incorrect_type
  1777 0000103C 8A4001                          mov al, SOB_CHAR_VALUE(rax)
  1778 0000103F 4825FF000000                    and rax, 255
  1779 00001045 48BF-                           mov rdi, fmt_char
  1779 00001047 [CA08000000000000] 
  1780 0000104F 4889C6                          mov rsi, rax
  1781 00001052 B800000000                      mov rax, 0
  1782                                          ENTER
    44 00001057 C8000000            <1>  enter 0, 0
    45 0000105B 4883E4F0            <1>  and rsp, ~15
  1783 0000105F E8(00000000)                    call printf
  1784                                          LEAVE
    49 00001064 C9                  <1>  leave
  1785 00001065 48B8-                           mov rax, sob_void
  1785 00001067 [0000000000000000] 
  1786 0000106F C9                              leave
  1787 00001070 C21800                          ret AND_KILL_FRAME(1)
  1788                                  
  1789                                  L_code_ptr_car:
  1790 00001073 C8000000                        enter 0, 0
  1791 00001077 48837D1801                      cmp COUNT, 1
  1792 0000107C 0F855E0E0000                    jne L_error_arg_count_1
  1793 00001082 488B4520                        mov rax, PARAM(0)
  1794                                          assert_pair(rax)
    53 00001086 803821              <1>  cmp byte [%1], %2
    54 00001089 0F85250F0000        <1>  jne L_error_incorrect_type
  1795 0000108F 488B4001                        mov rax, SOB_PAIR_CAR(rax)
  1796 00001093 C9                              leave
  1797 00001094 C21800                          ret AND_KILL_FRAME(1)
  1798                                          
  1799                                  L_code_ptr_cdr:
  1800 00001097 C8000000                        enter 0, 0
  1801 0000109B 48837D1801                      cmp COUNT, 1
  1802 000010A0 0F853A0E0000                    jne L_error_arg_count_1
  1803 000010A6 488B4520                        mov rax, PARAM(0)
  1804                                          assert_pair(rax)
    53 000010AA 803821              <1>  cmp byte [%1], %2
    54 000010AD 0F85010F0000        <1>  jne L_error_incorrect_type
  1805 000010B3 488B4009                        mov rax, SOB_PAIR_CDR(rax)
  1806 000010B7 C9                              leave
  1807 000010B8 C21800                          ret AND_KILL_FRAME(1)
  1808                                          
  1809                                  L_code_ptr_string_length:
  1810 000010BB C8000000                        enter 0, 0
  1811 000010BF 48837D1801                      cmp COUNT, 1
  1812 000010C4 0F85160E0000                    jne L_error_arg_count_1
  1813 000010CA 488B4520                        mov rax, PARAM(0)
  1814                                          assert_string(rax)
    53 000010CE 803803              <1>  cmp byte [%1], %2
    54 000010D1 0F85DD0E0000        <1>  jne L_error_incorrect_type
  1815 000010D7 488B7801                        mov rdi, SOB_STRING_LENGTH(rax)
  1816 000010DB E84F0D0000                      call make_integer
  1817 000010E0 C9                              leave
  1818 000010E1 C21800                          ret AND_KILL_FRAME(1)
  1819                                  
  1820                                  L_code_ptr_vector_length:
  1821 000010E4 C8000000                        enter 0, 0
  1822 000010E8 48837D1801                      cmp COUNT, 1
  1823 000010ED 0F85ED0D0000                    jne L_error_arg_count_1
  1824 000010F3 488B4520                        mov rax, PARAM(0)
  1825                                          assert_vector(rax)
    53 000010F7 803822              <1>  cmp byte [%1], %2
    54 000010FA 0F85B40E0000        <1>  jne L_error_incorrect_type
  1826 00001100 488B7801                        mov rdi, SOB_VECTOR_LENGTH(rax)
  1827 00001104 E8260D0000                      call make_integer
  1828 00001109 C9                              leave
  1829 0000110A C21800                          ret AND_KILL_FRAME(1)
  1830                                  
  1831                                  L_code_ptr_real_to_integer:
  1832 0000110D C8000000                        enter 0, 0
  1833 00001111 48837D1801                      cmp COUNT, 1
  1834 00001116 0F85C40D0000                    jne L_error_arg_count_1
  1835 0000111C 488B5D20                        mov rbx, PARAM(0)
  1836                                          assert_real(rbx)
    53 00001120 803B13              <1>  cmp byte [%1], %2
    54 00001123 0F858B0E0000        <1>  jne L_error_incorrect_type
  1837 00001129 F20F104301                      movsd xmm0, qword [rbx + 1]
  1838 0000112E F2480F2CF8                      cvttsd2si rdi, xmm0
  1839 00001133 E8F70C0000                      call make_integer
  1840 00001138 C9                              leave
  1841 00001139 C21800                          ret AND_KILL_FRAME(1)
  1842                                  
  1843                                  L_code_ptr_exit:
  1844 0000113C C8000000                        enter 0, 0
  1845 00001140 48837D1800                      cmp COUNT, 0
  1846 00001145 0F85600D0000                    jne L_error_arg_count_0
  1847 0000114B B800000000                      mov rax, 0
  1848 00001150 E8(00000000)                    call exit
  1849                                  
  1850                                  L_code_ptr_integer_to_real:
  1851 00001155 C8000000                        enter 0, 0
  1852 00001159 48837D1801                      cmp COUNT, 1
  1853 0000115E 0F857C0D0000                    jne L_error_arg_count_1
  1854 00001164 488B4520                        mov rax, PARAM(0)
  1855                                          assert_integer(rax)
    53 00001168 803811              <1>  cmp byte [%1], %2
    54 0000116B 0F85430E0000        <1>  jne L_error_incorrect_type
  1856 00001171 FF7001                          push qword [rax + 1]
  1857 00001174 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1858 0000117A E8980C0000                      call make_real
  1859 0000117F C9                              leave
  1860 00001180 C21800                          ret AND_KILL_FRAME(1)
  1861                                  
  1862                                  L_code_ptr_fraction_to_real:
  1863 00001183 C8000000                        enter 0, 0
  1864 00001187 48837D1801                      cmp COUNT, 1
  1865 0000118C 0F854E0D0000                    jne L_error_arg_count_1
  1866 00001192 488B4520                        mov rax, PARAM(0)
  1867                                          assert_fraction(rax)
    53 00001196 803812              <1>  cmp byte [%1], %2
    54 00001199 0F85150E0000        <1>  jne L_error_incorrect_type
  1868 0000119F FF7001                          push qword [rax + 1]
  1869 000011A2 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1870 000011A8 FF7009                          push qword [rax + 1 + 8]
  1871 000011AB F2480F2A0C24                    cvtsi2sd xmm1, qword [rsp]
  1872 000011B1 F20F5EC1                        divsd xmm0, xmm1
  1873 000011B5 E85D0C0000                      call make_real
  1874 000011BA C9                              leave
  1875 000011BB C21800                          ret AND_KILL_FRAME(1)
  1876                                  
  1877                                  L_code_ptr_char_to_integer:
  1878 000011BE C8000000                        enter 0, 0
  1879 000011C2 48837D1801                      cmp COUNT, 1
  1880 000011C7 0F85130D0000                    jne L_error_arg_count_1
  1881 000011CD 488B4520                        mov rax, PARAM(0)
  1882                                          assert_char(rax)
    53 000011D1 803802              <1>  cmp byte [%1], %2
    54 000011D4 0F85DA0D0000        <1>  jne L_error_incorrect_type
  1883 000011DA 8A4001                          mov al, byte [rax + 1]
  1884 000011DD 4825FF000000                    and rax, 255
  1885 000011E3 4889C7                          mov rdi, rax
  1886 000011E6 E8440C0000                      call make_integer
  1887 000011EB C9                              leave
  1888 000011EC C21800                          ret AND_KILL_FRAME(1)
  1889                                  
  1890                                  L_code_ptr_integer_to_fraction:
  1891 000011EF C8000000                        enter 0, 0
  1892 000011F3 48837D1801                      cmp COUNT, 1
  1893 000011F8 0F85E20C0000                    jne L_error_arg_count_1
  1894 000011FE 4C8B4520                        mov r8, PARAM(0)
  1895                                          assert_integer(r8)
    53 00001202 41803811            <1>  cmp byte [%1], %2
    54 00001206 0F85A80D0000        <1>  jne L_error_incorrect_type
  1896 0000120C BF11000000                      mov rdi, (1 + 8 + 8)
  1897 00001211 E89CF0FFFF                      call malloc
  1898 00001216 498B5801                        mov rbx, qword [r8 + 1]
  1899 0000121A C60012                          mov byte [rax], T_fraction
  1900 0000121D 48895801                        mov qword [rax + 1], rbx
  1901 00001221 48C7400901000000                mov qword [rax + 1 + 8], 1
  1902 00001229 C9                              leave
  1903 0000122A C21800                          ret AND_KILL_FRAME(1)
  1904                                  
  1905                                  L_code_ptr_integer_to_char:
  1906 0000122D C8000000                        enter 0, 0
  1907 00001231 48837D1801                      cmp COUNT, 1
  1908 00001236 0F85A40C0000                    jne L_error_arg_count_1
  1909 0000123C 488B4520                        mov rax, PARAM(0)
  1910                                          assert_integer(rax)
    53 00001240 803811              <1>  cmp byte [%1], %2
    54 00001243 0F856B0D0000        <1>  jne L_error_incorrect_type
  1911 00001249 488B5801                        mov rbx, qword [rax + 1]
  1912 0000124D 4883FB00                        cmp rbx, 0
  1913 00001251 0F8EF20B0000                    jle L_error_integer_range
  1914 00001257 4881FB00010000                  cmp rbx, 256
  1915 0000125E 0F8DE50B0000                    jge L_error_integer_range
  1916 00001264 BF02000000                      mov rdi, (1 + 1)
  1917 00001269 E844F0FFFF                      call malloc
  1918 0000126E C60002                          mov byte [rax], T_char
  1919 00001271 885801                          mov byte [rax + 1], bl
  1920 00001274 C9                              leave
  1921 00001275 C21800                          ret AND_KILL_FRAME(1)
  1922                                  
  1923                                  L_code_ptr_trng:
  1924 00001278 C8000000                        enter 0, 0
  1925 0000127C 48837D1800                      cmp COUNT, 0
  1926 00001281 0F85240C0000                    jne L_error_arg_count_0
  1927 00001287 480FC7F7                        rdrand rdi
  1928 0000128B 48D1EF                          shr rdi, 1
  1929 0000128E E89C0B0000                      call make_integer
  1930 00001293 C9                              leave
  1931 00001294 C21000                          ret AND_KILL_FRAME(0)
  1932                                  
  1933                                  L_code_ptr_is_zero:
  1934 00001297 C8000000                        enter 0, 0
  1935 0000129B 48837D1801                      cmp COUNT, 1
  1936 000012A0 0F853A0C0000                    jne L_error_arg_count_1
  1937 000012A6 488B4520                        mov rax, PARAM(0)
  1938 000012AA 803811                          cmp byte [rax], T_integer
  1939 000012AD 740F                            je .L_integer
  1940 000012AF 803812                          cmp byte [rax], T_fraction
  1941 000012B2 7413                            je .L_fraction
  1942 000012B4 803813                          cmp byte [rax], T_real
  1943 000012B7 7417                            je .L_real
  1944 000012B9 E9F60C0000                      jmp L_error_incorrect_type
  1945                                  .L_integer:
  1946 000012BE 4883780100                      cmp qword [rax + 1], 0
  1947 000012C3 7429                            je .L_zero
  1948 000012C5 EB1B                            jmp .L_not_zero
  1949                                  .L_fraction:
  1950 000012C7 4883780100                      cmp qword [rax + 1], 0
  1951 000012CC 7420                            je .L_zero
  1952 000012CE EB12                            jmp .L_not_zero
  1953                                  .L_real:
  1954 000012D0 660FEFC0                        pxor xmm0, xmm0
  1955 000012D4 FF7001                          push qword [rax + 1]
  1956 000012D7 F20F100C24                      movsd xmm1, qword [rsp]
  1957 000012DC 660F2EC1                        ucomisd xmm0, xmm1
  1958 000012E0 740C                            je .L_zero
  1959                                  .L_not_zero:
  1960 000012E2 48B8-                           mov rax, sob_boolean_false
  1960 000012E4 [0200000000000000] 
  1961 000012EC EB0A                            jmp .L_end
  1962                                  .L_zero:
  1963 000012EE 48B8-                           mov rax, sob_boolean_true
  1963 000012F0 [0300000000000000] 
  1964                                  .L_end:
  1965 000012F8 C9                              leave
  1966 000012F9 C21800                          ret AND_KILL_FRAME(1)
  1967                                  
  1968                                  L_code_ptr_is_integer:
  1969 000012FC C8000000                        enter 0, 0
  1970 00001300 48837D1801                      cmp COUNT, 1
  1971 00001305 0F85D50B0000                    jne L_error_arg_count_1
  1972 0000130B 488B4520                        mov rax, PARAM(0)
  1973 0000130F 803811                          cmp byte [rax], T_integer
  1974 00001312 750C                            jne .L_false
  1975 00001314 48B8-                           mov rax, sob_boolean_true
  1975 00001316 [0300000000000000] 
  1976 0000131E EB0A                            jmp .L_exit
  1977                                  .L_false:
  1978 00001320 48B8-                           mov rax, sob_boolean_false
  1978 00001322 [0200000000000000] 
  1979                                  .L_exit:
  1980 0000132A C9                              leave
  1981 0000132B C21800                          ret AND_KILL_FRAME(1)
  1982                                  
  1983                                  L_code_ptr_raw_bin_add_rr:
  1984 0000132E C8000000                        enter 0, 0
  1985 00001332 48837D1802                      cmp COUNT, 2
  1986 00001337 0F85D80B0000                    jne L_error_arg_count_2
  1987 0000133D 488B5D20                        mov rbx, PARAM(0)
  1988                                          assert_real(rbx)
    53 00001341 803B13              <1>  cmp byte [%1], %2
    54 00001344 0F856A0C0000        <1>  jne L_error_incorrect_type
  1989 0000134A 488B4D28                        mov rcx, PARAM(1)
  1990                                          assert_real(rcx)
    53 0000134E 803913              <1>  cmp byte [%1], %2
    54 00001351 0F855D0C0000        <1>  jne L_error_incorrect_type
  1991 00001357 F20F104301                      movsd xmm0, qword [rbx + 1]
  1992 0000135C F20F104901                      movsd xmm1, qword [rcx + 1]
  1993 00001361 F20F58C1                        addsd xmm0, xmm1
  1994 00001365 E8AD0A0000                      call make_real
  1995 0000136A C9                              leave
  1996 0000136B C22000                          ret AND_KILL_FRAME(2)
  1997                                  
  1998                                  L_code_ptr_raw_bin_sub_rr:
  1999 0000136E C8000000                        enter 0, 0
  2000 00001372 48837D1802                      cmp COUNT, 2
  2001 00001377 0F85980B0000                    jne L_error_arg_count_2
  2002 0000137D 488B5D20                        mov rbx, PARAM(0)
  2003                                          assert_real(rbx)
    53 00001381 803B13              <1>  cmp byte [%1], %2
    54 00001384 0F852A0C0000        <1>  jne L_error_incorrect_type
  2004 0000138A 488B4D28                        mov rcx, PARAM(1)
  2005                                          assert_real(rcx)
    53 0000138E 803913              <1>  cmp byte [%1], %2
    54 00001391 0F851D0C0000        <1>  jne L_error_incorrect_type
  2006 00001397 F20F104301                      movsd xmm0, qword [rbx + 1]
  2007 0000139C F20F104901                      movsd xmm1, qword [rcx + 1]
  2008 000013A1 F20F5CC1                        subsd xmm0, xmm1
  2009 000013A5 E86D0A0000                      call make_real
  2010 000013AA C9                              leave
  2011 000013AB C22000                          ret AND_KILL_FRAME(2)
  2012                                  
  2013                                  L_code_ptr_raw_bin_mul_rr:
  2014 000013AE C8000000                        enter 0, 0
  2015 000013B2 48837D1802                      cmp COUNT, 2
  2016 000013B7 0F85580B0000                    jne L_error_arg_count_2
  2017 000013BD 488B5D20                        mov rbx, PARAM(0)
  2018                                          assert_real(rbx)
    53 000013C1 803B13              <1>  cmp byte [%1], %2
    54 000013C4 0F85EA0B0000        <1>  jne L_error_incorrect_type
  2019 000013CA 488B4D28                        mov rcx, PARAM(1)
  2020                                          assert_real(rcx)
    53 000013CE 803913              <1>  cmp byte [%1], %2
    54 000013D1 0F85DD0B0000        <1>  jne L_error_incorrect_type
  2021 000013D7 F20F104301                      movsd xmm0, qword [rbx + 1]
  2022 000013DC F20F104901                      movsd xmm1, qword [rcx + 1]
  2023 000013E1 F20F59C1                        mulsd xmm0, xmm1
  2024 000013E5 E82D0A0000                      call make_real
  2025 000013EA C9                              leave
  2026 000013EB C22000                          ret AND_KILL_FRAME(2)
  2027                                  
  2028                                  L_code_ptr_raw_bin_div_rr:
  2029 000013EE C8000000                        enter 0, 0
  2030 000013F2 48837D1802                      cmp COUNT, 2
  2031 000013F7 0F85180B0000                    jne L_error_arg_count_2
  2032 000013FD 488B5D20                        mov rbx, PARAM(0)
  2033                                          assert_real(rbx)
    53 00001401 803B13              <1>  cmp byte [%1], %2
    54 00001404 0F85AA0B0000        <1>  jne L_error_incorrect_type
  2034 0000140A 488B4D28                        mov rcx, PARAM(1)
  2035                                          assert_real(rcx)
    53 0000140E 803913              <1>  cmp byte [%1], %2
    54 00001411 0F859D0B0000        <1>  jne L_error_incorrect_type
  2036 00001417 F20F104301                      movsd xmm0, qword [rbx + 1]
  2037 0000141C F20F104901                      movsd xmm1, qword [rcx + 1]
  2038 00001421 660FEFD2                        pxor xmm2, xmm2
  2039 00001425 660F2ECA                        ucomisd xmm1, xmm2
  2040 00001429 0F84B60B0000                    je L_error_division_by_zero
  2041 0000142F F20F5EC1                        divsd xmm0, xmm1
  2042 00001433 E8DF090000                      call make_real
  2043 00001438 C9                              leave
  2044 00001439 C22000                          ret AND_KILL_FRAME(2)
  2045                                  
  2046                                  L_code_ptr_raw_bin_add_zz:
  2047 0000143C C8000000                	enter 0, 0
  2048 00001440 48837D1802              	cmp COUNT, 2
  2049 00001445 0F85CA0A0000            	jne L_error_arg_count_2
  2050 0000144B 4C8B4520                	mov r8, PARAM(0)
  2051                                  	assert_integer(r8)
    53 0000144F 41803811            <1>  cmp byte [%1], %2
    54 00001453 0F855B0B0000        <1>  jne L_error_incorrect_type
  2052 00001459 4C8B4D28                	mov r9, PARAM(1)
  2053                                  	assert_integer(r9)
    53 0000145D 41803911            <1>  cmp byte [%1], %2
    54 00001461 0F854D0B0000        <1>  jne L_error_incorrect_type
  2054 00001467 498B7801                	mov rdi, qword [r8 + 1]
  2055 0000146B 49037901                	add rdi, qword [r9 + 1]
  2056 0000146F E8BB090000              	call make_integer
  2057 00001474 C9                      	leave
  2058 00001475 C22000                  	ret AND_KILL_FRAME(2)
  2059                                  
  2060                                  L_code_ptr_raw_bin_add_qq:
  2061 00001478 C8000000                        enter 0, 0
  2062 0000147C 48837D1802                      cmp COUNT, 2
  2063 00001481 0F858E0A0000                    jne L_error_arg_count_2
  2064 00001487 4C8B4520                        mov r8, PARAM(0)
  2065                                          assert_fraction(r8)
    53 0000148B 41803812            <1>  cmp byte [%1], %2
    54 0000148F 0F851F0B0000        <1>  jne L_error_incorrect_type
  2066 00001495 4C8B4D28                        mov r9, PARAM(1)
  2067                                          assert_fraction(r9)
    53 00001499 41803912            <1>  cmp byte [%1], %2
    54 0000149D 0F85110B0000        <1>  jne L_error_incorrect_type
  2068 000014A3 498B4001                        mov rax, qword [r8 + 1] ; num1
  2069 000014A7 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  2070 000014AB 4899                            cqo
  2071 000014AD 48F7EB                          imul rbx
  2072 000014B0 4889C6                          mov rsi, rax
  2073 000014B3 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2074 000014B7 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  2075 000014BB 4899                            cqo
  2076 000014BD 48F7EB                          imul rbx
  2077 000014C0 4801C6                          add rsi, rax
  2078 000014C3 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2079 000014C7 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  2080 000014CB 4899                            cqo
  2081 000014CD 48F7EB                          imul rbx
  2082 000014D0 4889C7                          mov rdi, rax
  2083 000014D3 E8DE010000                      call normalize_fraction
  2084 000014D8 C9                              leave
  2085 000014D9 C22000                          ret AND_KILL_FRAME(2)
  2086                                  
  2087                                  L_code_ptr_raw_bin_sub_zz:
  2088 000014DC C8000000                	enter 0, 0
  2089 000014E0 48837D1802              	cmp COUNT, 2
  2090 000014E5 0F852A0A0000            	jne L_error_arg_count_2
  2091 000014EB 4C8B4520                	mov r8, PARAM(0)
  2092                                  	assert_integer(r8)
    53 000014EF 41803811            <1>  cmp byte [%1], %2
    54 000014F3 0F85BB0A0000        <1>  jne L_error_incorrect_type
  2093 000014F9 4C8B4D28                	mov r9, PARAM(1)
  2094                                  	assert_integer(r9)
    53 000014FD 41803911            <1>  cmp byte [%1], %2
    54 00001501 0F85AD0A0000        <1>  jne L_error_incorrect_type
  2095 00001507 498B7801                	mov rdi, qword [r8 + 1]
  2096 0000150B 492B7901                	sub rdi, qword [r9 + 1]
  2097 0000150F E81B090000              	call make_integer
  2098 00001514 C9                      	leave
  2099 00001515 C22000                  	ret AND_KILL_FRAME(2)
  2100                                  
  2101                                  L_code_ptr_raw_bin_sub_qq:
  2102 00001518 C8000000                        enter 0, 0
  2103 0000151C 48837D1802                      cmp COUNT, 2
  2104 00001521 0F85EE090000                    jne L_error_arg_count_2
  2105 00001527 4C8B4520                        mov r8, PARAM(0)
  2106                                          assert_fraction(r8)
    53 0000152B 41803812            <1>  cmp byte [%1], %2
    54 0000152F 0F857F0A0000        <1>  jne L_error_incorrect_type
  2107 00001535 4C8B4D28                        mov r9, PARAM(1)
  2108                                          assert_fraction(r9)
    53 00001539 41803912            <1>  cmp byte [%1], %2
    54 0000153D 0F85710A0000        <1>  jne L_error_incorrect_type
  2109 00001543 498B4001                        mov rax, qword [r8 + 1] ; num1
  2110 00001547 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  2111 0000154B 4899                            cqo
  2112 0000154D 48F7EB                          imul rbx
  2113 00001550 4889C6                          mov rsi, rax
  2114 00001553 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2115 00001557 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  2116 0000155B 4899                            cqo
  2117 0000155D 48F7EB                          imul rbx
  2118 00001560 4829C6                          sub rsi, rax
  2119 00001563 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2120 00001567 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  2121 0000156B 4899                            cqo
  2122 0000156D 48F7EB                          imul rbx
  2123 00001570 4889C7                          mov rdi, rax
  2124 00001573 E83E010000                      call normalize_fraction
  2125 00001578 C9                              leave
  2126 00001579 C22000                          ret AND_KILL_FRAME(2)
  2127                                  
  2128                                  L_code_ptr_raw_bin_mul_zz:
  2129 0000157C C8000000                	enter 0, 0
  2130 00001580 48837D1802              	cmp COUNT, 2
  2131 00001585 0F858A090000            	jne L_error_arg_count_2
  2132 0000158B 4C8B4520                	mov r8, PARAM(0)
  2133                                  	assert_integer(r8)
    53 0000158F 41803811            <1>  cmp byte [%1], %2
    54 00001593 0F851B0A0000        <1>  jne L_error_incorrect_type
  2134 00001599 4C8B4D28                	mov r9, PARAM(1)
  2135                                  	assert_integer(r9)
    53 0000159D 41803911            <1>  cmp byte [%1], %2
    54 000015A1 0F850D0A0000        <1>  jne L_error_incorrect_type
  2136 000015A7 4899                    	cqo
  2137 000015A9 498B4001                	mov rax, qword [r8 + 1]
  2138 000015AD 49F76101                	mul qword [r9 + 1]
  2139 000015B1 4889C7                  	mov rdi, rax
  2140 000015B4 E876080000              	call make_integer
  2141 000015B9 C9                      	leave
  2142 000015BA C22000                  	ret AND_KILL_FRAME(2)
  2143                                  
  2144                                  L_code_ptr_raw_bin_mul_qq:
  2145 000015BD C8000000                        enter 0, 0
  2146 000015C1 48837D1802                      cmp COUNT, 2
  2147 000015C6 0F8549090000                    jne L_error_arg_count_2
  2148 000015CC 4C8B4520                        mov r8, PARAM(0)
  2149                                          assert_fraction(r8)
    53 000015D0 41803812            <1>  cmp byte [%1], %2
    54 000015D4 0F85DA090000        <1>  jne L_error_incorrect_type
  2150 000015DA 4C8B4D28                        mov r9, PARAM(1)
  2151                                          assert_fraction(r9)
    53 000015DE 41803912            <1>  cmp byte [%1], %2
    54 000015E2 0F85CC090000        <1>  jne L_error_incorrect_type
  2152 000015E8 498B4001                        mov rax, qword [r8 + 1] ; num1
  2153 000015EC 498B5901                        mov rbx, qword [r9 + 1] ; num2
  2154 000015F0 4899                            cqo
  2155 000015F2 48F7EB                          imul rbx
  2156 000015F5 4889C6                          mov rsi, rax
  2157 000015F8 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2158 000015FC 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  2159 00001600 4899                            cqo
  2160 00001602 48F7EB                          imul rbx
  2161 00001605 4889C7                          mov rdi, rax
  2162 00001608 E8A9000000                      call normalize_fraction
  2163 0000160D C9                              leave
  2164 0000160E C22000                          ret AND_KILL_FRAME(2)
  2165                                          
  2166                                  L_code_ptr_raw_bin_div_zz:
  2167 00001611 C8000000                	enter 0, 0
  2168 00001615 48837D1802              	cmp COUNT, 2
  2169 0000161A 0F85F5080000            	jne L_error_arg_count_2
  2170 00001620 4C8B4520                	mov r8, PARAM(0)
  2171                                  	assert_integer(r8)
    53 00001624 41803811            <1>  cmp byte [%1], %2
    54 00001628 0F8586090000        <1>  jne L_error_incorrect_type
  2172 0000162E 4C8B4D28                	mov r9, PARAM(1)
  2173                                  	assert_integer(r9)
    53 00001632 41803911            <1>  cmp byte [%1], %2
    54 00001636 0F8578090000        <1>  jne L_error_incorrect_type
  2174 0000163C 498B7901                	mov rdi, qword [r9 + 1]
  2175 00001640 4883FF00                	cmp rdi, 0
  2176 00001644 0F849B090000            	je L_error_division_by_zero
  2177 0000164A 498B7001                	mov rsi, qword [r8 + 1]
  2178 0000164E E863000000              	call normalize_fraction
  2179 00001653 C9                      	leave
  2180 00001654 C22000                  	ret AND_KILL_FRAME(2)
  2181                                  
  2182                                  L_code_ptr_raw_bin_div_qq:
  2183 00001657 C8000000                        enter 0, 0
  2184 0000165B 48837D1802                      cmp COUNT, 2
  2185 00001660 0F85AF080000                    jne L_error_arg_count_2
  2186 00001666 4C8B4520                        mov r8, PARAM(0)
  2187                                          assert_fraction(r8)
    53 0000166A 41803812            <1>  cmp byte [%1], %2
    54 0000166E 0F8540090000        <1>  jne L_error_incorrect_type
  2188 00001674 4C8B4D28                        mov r9, PARAM(1)
  2189                                          assert_fraction(r9)
    53 00001678 41803912            <1>  cmp byte [%1], %2
    54 0000167C 0F8532090000        <1>  jne L_error_incorrect_type
  2190 00001682 4983790100                      cmp qword [r9 + 1], 0
  2191 00001687 0F8458090000                    je L_error_division_by_zero
  2192 0000168D 498B4001                        mov rax, qword [r8 + 1] ; num1
  2193 00001691 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  2194 00001695 4899                            cqo
  2195 00001697 48F7EB                          imul rbx
  2196 0000169A 4889C6                          mov rsi, rax
  2197 0000169D 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2198 000016A1 498B5901                        mov rbx, qword [r9 + 1] ; num2
  2199 000016A5 4899                            cqo
  2200 000016A7 48F7EB                          imul rbx
  2201 000016AA 4889C7                          mov rdi, rax
  2202 000016AD E804000000                      call normalize_fraction
  2203 000016B2 C9                              leave
  2204 000016B3 C22000                          ret AND_KILL_FRAME(2)
  2205                                          
  2206                                  normalize_fraction:
  2207 000016B6 56                              push rsi
  2208 000016B7 57                              push rdi
  2209 000016B8 E859000000                      call gcd
  2210 000016BD 4889C3                          mov rbx, rax
  2211 000016C0 58                              pop rax
  2212 000016C1 4899                            cqo
  2213 000016C3 48F7FB                          idiv rbx
  2214 000016C6 4989C0                          mov r8, rax
  2215 000016C9 58                              pop rax
  2216 000016CA 4899                            cqo
  2217 000016CC 48F7FB                          idiv rbx
  2218 000016CF 4989C1                          mov r9, rax
  2219 000016D2 4983F900                        cmp r9, 0
  2220 000016D6 741C                            je .L_zero
  2221 000016D8 4983F801                        cmp r8, 1
  2222 000016DC 7421                            je .L_int
  2223 000016DE BF11000000                      mov rdi, (1 + 8 + 8)
  2224 000016E3 E8CAEBFFFF                      call malloc
  2225 000016E8 C60012                          mov byte [rax], T_fraction
  2226 000016EB 4C894801                        mov qword [rax + 1], r9
  2227 000016EF 4C894009                        mov qword [rax + 1 + 8], r8
  2228 000016F3 C3                              ret
  2229                                  .L_zero:
  2230 000016F4 BF00000000                      mov rdi, 0
  2231 000016F9 E831070000                      call make_integer
  2232 000016FE C3                              ret
  2233                                  .L_int:
  2234 000016FF 4C89CF                          mov rdi, r9
  2235 00001702 E828070000                      call make_integer
  2236 00001707 C3                              ret
  2237                                  
  2238                                  iabs:
  2239 00001708 4889F8                          mov rax, rdi
  2240 0000170B 4883F800                        cmp rax, 0
  2241 0000170F 7C01                            jl .Lneg
  2242 00001711 C3                              ret
  2243                                  .Lneg:
  2244 00001712 48F7D8                          neg rax
  2245 00001715 C3                              ret
  2246                                  
  2247                                  gcd:
  2248 00001716 E8EDFFFFFF                      call iabs
  2249 0000171B 4889C3                          mov rbx, rax
  2250 0000171E 4889F7                          mov rdi, rsi
  2251 00001721 E8E2FFFFFF                      call iabs
  2252 00001726 4883F800                        cmp rax, 0
  2253 0000172A 7502                            jne .L0
  2254 0000172C 4893                            xchg rax, rbx
  2255                                  .L0:
  2256 0000172E 4883FB00                        cmp rbx, 0
  2257 00001732 740C                            je .L1
  2258 00001734 4899                            cqo
  2259 00001736 48F7F3                          div rbx
  2260 00001739 4889D0                          mov rax, rdx
  2261 0000173C 4893                            xchg rax, rbx
  2262 0000173E EBEE                            jmp .L0
  2263                                  .L1:
  2264 00001740 C3                              ret
  2265                                  
  2266                                  L_code_ptr_error:
  2267 00001741 C8000000                        enter 0, 0
  2268 00001745 48837D1802                      cmp COUNT, 2
  2269 0000174A 0F85C5070000                    jne L_error_arg_count_2
  2270 00001750 488B7520                        mov rsi, PARAM(0)
  2271                                          assert_interned_symbol(rsi)
    53 00001754 803E41              <1>  cmp byte [%1], %2
    54 00001757 0F8557080000        <1>  jne L_error_incorrect_type
  2272 0000175D 488B7528                        mov rsi, PARAM(1)
  2273                                          assert_string(rsi)
    53 00001761 803E03              <1>  cmp byte [%1], %2
    54 00001764 0F854A080000        <1>  jne L_error_incorrect_type
  2274 0000176A 48BF-                           mov rdi, fmt_scheme_error_part_1
  2274 0000176C [280A000000000000] 
  2275 00001774 B800000000                      mov rax, 0
  2276                                          ENTER
    44 00001779 C8000000            <1>  enter 0, 0
    45 0000177D 4883E4F0            <1>  and rsp, ~15
  2277 00001781 E8(00000000)                    call printf
  2278                                          LEAVE
    49 00001786 C9                  <1>  leave
  2279 00001787 488B7D20                        mov rdi, PARAM(0)
  2280 0000178B E8A3EDFFFF                      call print_sexpr
  2281 00001790 48BF-                           mov rdi, fmt_scheme_error_part_2
  2281 00001792 [3C0A000000000000] 
  2282 0000179A B800000000                      mov rax, 0
  2283                                          ENTER
    44 0000179F C8000000            <1>  enter 0, 0
    45 000017A3 4883E4F0            <1>  and rsp, ~15
  2284 000017A7 E8(00000000)                    call printf
  2285                                          LEAVE
    49 000017AC C9                  <1>  leave
  2286 000017AD 488B4528                        mov rax, PARAM(1)       ; sob_string
  2287 000017B1 BE01000000                      mov rsi, 1              ; size = 1 byte
  2288 000017B6 488B5001                        mov rdx, qword [rax + 1] ; length
  2289 000017BA 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
  2290 000017BE 488B0C25[00000000]              mov rcx, qword [stdout]  ; FILE*
  2291                                  	ENTER
    44 000017C6 C8000000            <1>  enter 0, 0
    45 000017CA 4883E4F0            <1>  and rsp, ~15
  2292 000017CE E8(00000000)                    call fwrite
  2293                                  	LEAVE
    49 000017D3 C9                  <1>  leave
  2294 000017D4 48BF-                           mov rdi, fmt_scheme_error_part_3
  2294 000017D6 [7E0A000000000000] 
  2295 000017DE B800000000                      mov rax, 0
  2296                                          ENTER
    44 000017E3 C8000000            <1>  enter 0, 0
    45 000017E7 4883E4F0            <1>  and rsp, ~15
  2297 000017EB E8(00000000)                    call printf
  2298                                          LEAVE
    49 000017F0 C9                  <1>  leave
  2299 000017F1 48C7C0F7FFFFFF                  mov rax, -9
  2300 000017F8 E8(00000000)                    call exit
  2301                                  
  2302                                  L_code_ptr_raw_less_than_rr:
  2303 000017FD C8000000                        enter 0, 0
  2304 00001801 48837D1802                      cmp COUNT, 2
  2305 00001806 0F8509070000                    jne L_error_arg_count_2
  2306 0000180C 488B7520                        mov rsi, PARAM(0)
  2307                                          assert_real(rsi)
    53 00001810 803E13              <1>  cmp byte [%1], %2
    54 00001813 0F859B070000        <1>  jne L_error_incorrect_type
  2308 00001819 488B7D28                        mov rdi, PARAM(1)
  2309                                          assert_real(rdi)
    53 0000181D 803F13              <1>  cmp byte [%1], %2
    54 00001820 0F858E070000        <1>  jne L_error_incorrect_type
  2310 00001826 F20F104601                      movsd xmm0, qword [rsi + 1]
  2311 0000182B F20F104F01                      movsd xmm1, qword [rdi + 1]
  2312 00001830 660F2FC1                        comisd xmm0, xmm1
  2313 00001834 730C                            jae .L_false
  2314 00001836 48B8-                           mov rax, sob_boolean_true
  2314 00001838 [0300000000000000] 
  2315 00001840 EB0A                            jmp .L_exit
  2316                                  .L_false:
  2317 00001842 48B8-                           mov rax, sob_boolean_false
  2317 00001844 [0200000000000000] 
  2318                                  .L_exit:
  2319 0000184C C9                              leave
  2320 0000184D C22000                          ret AND_KILL_FRAME(2)
  2321                                          
  2322                                  L_code_ptr_raw_less_than_zz:
  2323 00001850 C8000000                	enter 0, 0
  2324 00001854 48837D1802              	cmp COUNT, 2
  2325 00001859 0F85B6060000            	jne L_error_arg_count_2
  2326 0000185F 4C8B4520                	mov r8, PARAM(0)
  2327                                  	assert_integer(r8)
    53 00001863 41803811            <1>  cmp byte [%1], %2
    54 00001867 0F8547070000        <1>  jne L_error_incorrect_type
  2328 0000186D 4C8B4D28                	mov r9, PARAM(1)
  2329                                  	assert_integer(r9)
    53 00001871 41803911            <1>  cmp byte [%1], %2
    54 00001875 0F8539070000        <1>  jne L_error_incorrect_type
  2330 0000187B 498B7801                	mov rdi, qword [r8 + 1]
  2331 0000187F 493B7901                	cmp rdi, qword [r9 + 1]
  2332 00001883 7D0C                    	jge .L_false
  2333 00001885 48B8-                   	mov rax, sob_boolean_true
  2333 00001887 [0300000000000000] 
  2334 0000188F EB0A                    	jmp .L_exit
  2335                                  .L_false:
  2336 00001891 48B8-                   	mov rax, sob_boolean_false
  2336 00001893 [0200000000000000] 
  2337                                  .L_exit:
  2338 0000189B C9                      	leave
  2339 0000189C C22000                  	ret AND_KILL_FRAME(2)
  2340                                  
  2341                                  L_code_ptr_raw_less_than_qq:
  2342 0000189F C8000000                        enter 0, 0
  2343 000018A3 48837D1802                      cmp COUNT, 2
  2344 000018A8 0F8567060000                    jne L_error_arg_count_2
  2345 000018AE 488B7520                        mov rsi, PARAM(0)
  2346                                          assert_fraction(rsi)
    53 000018B2 803E12              <1>  cmp byte [%1], %2
    54 000018B5 0F85F9060000        <1>  jne L_error_incorrect_type
  2347 000018BB 488B7D28                        mov rdi, PARAM(1)
  2348                                          assert_fraction(rdi)
    53 000018BF 803F12              <1>  cmp byte [%1], %2
    54 000018C2 0F85EC060000        <1>  jne L_error_incorrect_type
  2349 000018C8 488B4601                        mov rax, qword [rsi + 1] ; num1
  2350 000018CC 4899                            cqo
  2351 000018CE 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  2352 000018D2 4889C1                          mov rcx, rax
  2353 000018D5 488B4609                        mov rax, qword [rsi + 1 + 8] ; den1
  2354 000018D9 4899                            cqo
  2355 000018DB 48F76F01                        imul qword [rdi + 1]          ; num2
  2356 000018DF 4829C1                          sub rcx, rax
  2357 000018E2 7D0C                            jge .L_false
  2358 000018E4 48B8-                           mov rax, sob_boolean_true
  2358 000018E6 [0300000000000000] 
  2359 000018EE EB0A                            jmp .L_exit
  2360                                  .L_false:
  2361 000018F0 48B8-                           mov rax, sob_boolean_false
  2361 000018F2 [0200000000000000] 
  2362                                  .L_exit:
  2363 000018FA C9                              leave
  2364 000018FB C22000                          ret AND_KILL_FRAME(2)
  2365                                  
  2366                                  L_code_ptr_raw_equal_rr:
  2367 000018FE C8000000                        enter 0, 0
  2368 00001902 48837D1802                      cmp COUNT, 2
  2369 00001907 0F8508060000                    jne L_error_arg_count_2
  2370 0000190D 488B7520                        mov rsi, PARAM(0)
  2371                                          assert_real(rsi)
    53 00001911 803E13              <1>  cmp byte [%1], %2
    54 00001914 0F859A060000        <1>  jne L_error_incorrect_type
  2372 0000191A 488B7D28                        mov rdi, PARAM(1)
  2373                                          assert_real(rdi)
    53 0000191E 803F13              <1>  cmp byte [%1], %2
    54 00001921 0F858D060000        <1>  jne L_error_incorrect_type
  2374 00001927 F20F104601                      movsd xmm0, qword [rsi + 1]
  2375 0000192C F20F104F01                      movsd xmm1, qword [rdi + 1]
  2376 00001931 660F2FC1                        comisd xmm0, xmm1
  2377 00001935 750C                            jne .L_false
  2378 00001937 48B8-                           mov rax, sob_boolean_true
  2378 00001939 [0300000000000000] 
  2379 00001941 EB0A                            jmp .L_exit
  2380                                  .L_false:
  2381 00001943 48B8-                           mov rax, sob_boolean_false
  2381 00001945 [0200000000000000] 
  2382                                  .L_exit:
  2383 0000194D C9                              leave
  2384 0000194E C22000                          ret AND_KILL_FRAME(2)
  2385                                          
  2386                                  L_code_ptr_raw_equal_zz:
  2387 00001951 C8000000                	enter 0, 0
  2388 00001955 48837D1802              	cmp COUNT, 2
  2389 0000195A 0F85B5050000            	jne L_error_arg_count_2
  2390 00001960 4C8B4520                	mov r8, PARAM(0)
  2391                                  	assert_integer(r8)
    53 00001964 41803811            <1>  cmp byte [%1], %2
    54 00001968 0F8546060000        <1>  jne L_error_incorrect_type
  2392 0000196E 4C8B4D28                	mov r9, PARAM(1)
  2393                                  	assert_integer(r9)
    53 00001972 41803911            <1>  cmp byte [%1], %2
    54 00001976 0F8538060000        <1>  jne L_error_incorrect_type
  2394 0000197C 498B7801                	mov rdi, qword [r8 + 1]
  2395 00001980 493B7901                	cmp rdi, qword [r9 + 1]
  2396 00001984 750C                    	jne .L_false
  2397 00001986 48B8-                   	mov rax, sob_boolean_true
  2397 00001988 [0300000000000000] 
  2398 00001990 EB0A                    	jmp .L_exit
  2399                                  .L_false:
  2400 00001992 48B8-                   	mov rax, sob_boolean_false
  2400 00001994 [0200000000000000] 
  2401                                  .L_exit:
  2402 0000199C C9                      	leave
  2403 0000199D C22000                  	ret AND_KILL_FRAME(2)
  2404                                  
  2405                                  L_code_ptr_raw_equal_qq:
  2406 000019A0 C8000000                        enter 0, 0
  2407 000019A4 48837D1802                      cmp COUNT, 2
  2408 000019A9 0F8566050000                    jne L_error_arg_count_2
  2409 000019AF 488B7520                        mov rsi, PARAM(0)
  2410                                          assert_fraction(rsi)
    53 000019B3 803E12              <1>  cmp byte [%1], %2
    54 000019B6 0F85F8050000        <1>  jne L_error_incorrect_type
  2411 000019BC 488B7D28                        mov rdi, PARAM(1)
  2412                                          assert_fraction(rdi)
    53 000019C0 803F12              <1>  cmp byte [%1], %2
    54 000019C3 0F85EB050000        <1>  jne L_error_incorrect_type
  2413 000019C9 488B4601                        mov rax, qword [rsi + 1] ; num1
  2414 000019CD 4899                            cqo
  2415 000019CF 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  2416 000019D3 4889C1                          mov rcx, rax
  2417 000019D6 488B4709                        mov rax, qword [rdi + 1 + 8] ; den1
  2418 000019DA 4899                            cqo
  2419 000019DC 48F76F01                        imul qword [rdi + 1]          ; num2
  2420 000019E0 4829C1                          sub rcx, rax
  2421 000019E3 750C                            jne .L_false
  2422 000019E5 48B8-                           mov rax, sob_boolean_true
  2422 000019E7 [0300000000000000] 
  2423 000019EF EB0A                            jmp .L_exit
  2424                                  .L_false:
  2425 000019F1 48B8-                           mov rax, sob_boolean_false
  2425 000019F3 [0200000000000000] 
  2426                                  .L_exit:
  2427 000019FB C9                              leave
  2428 000019FC C22000                          ret AND_KILL_FRAME(2)
  2429                                  
  2430                                  L_code_ptr_quotient:
  2431 000019FF C8000000                        enter 0, 0
  2432 00001A03 48837D1802                      cmp COUNT, 2
  2433 00001A08 0F8507050000                    jne L_error_arg_count_2
  2434 00001A0E 488B7520                        mov rsi, PARAM(0)
  2435                                          assert_integer(rsi)
    53 00001A12 803E11              <1>  cmp byte [%1], %2
    54 00001A15 0F8599050000        <1>  jne L_error_incorrect_type
  2436 00001A1B 488B7D28                        mov rdi, PARAM(1)
  2437                                          assert_integer(rdi)
    53 00001A1F 803F11              <1>  cmp byte [%1], %2
    54 00001A22 0F858C050000        <1>  jne L_error_incorrect_type
  2438 00001A28 488B4601                        mov rax, qword [rsi + 1]
  2439 00001A2C 488B5F01                        mov rbx, qword [rdi + 1]
  2440 00001A30 4883FB00                        cmp rbx, 0
  2441 00001A34 0F84AB050000                    je L_error_division_by_zero
  2442 00001A3A 4899                            cqo
  2443 00001A3C 48F7FB                          idiv rbx
  2444 00001A3F 4889C7                          mov rdi, rax
  2445 00001A42 E8E8030000                      call make_integer
  2446 00001A47 C9                              leave
  2447 00001A48 C22000                          ret AND_KILL_FRAME(2)
  2448                                          
  2449                                  L_code_ptr_remainder:
  2450 00001A4B C8000000                        enter 0, 0
  2451 00001A4F 48837D1802                      cmp COUNT, 2
  2452 00001A54 0F85BB040000                    jne L_error_arg_count_2
  2453 00001A5A 488B7520                        mov rsi, PARAM(0)
  2454                                          assert_integer(rsi)
    53 00001A5E 803E11              <1>  cmp byte [%1], %2
    54 00001A61 0F854D050000        <1>  jne L_error_incorrect_type
  2455 00001A67 488B7D28                        mov rdi, PARAM(1)
  2456                                          assert_integer(rdi)
    53 00001A6B 803F11              <1>  cmp byte [%1], %2
    54 00001A6E 0F8540050000        <1>  jne L_error_incorrect_type
  2457 00001A74 488B4601                        mov rax, qword [rsi + 1]
  2458 00001A78 488B5F01                        mov rbx, qword [rdi + 1]
  2459 00001A7C 4883FB00                        cmp rbx, 0
  2460 00001A80 0F845F050000                    je L_error_division_by_zero
  2461 00001A86 4899                            cqo
  2462 00001A88 48F7FB                          idiv rbx
  2463 00001A8B 4889D7                          mov rdi, rdx
  2464 00001A8E E89C030000                      call make_integer
  2465 00001A93 C9                              leave
  2466 00001A94 C22000                          ret AND_KILL_FRAME(2)
  2467                                  
  2468                                  L_code_ptr_set_car:
  2469 00001A97 C8000000                        enter 0, 0
  2470 00001A9B 48837D1802                      cmp COUNT, 2
  2471 00001AA0 0F856F040000                    jne L_error_arg_count_2
  2472 00001AA6 488B4520                        mov rax, PARAM(0)
  2473                                          assert_pair(rax)
    53 00001AAA 803821              <1>  cmp byte [%1], %2
    54 00001AAD 0F8501050000        <1>  jne L_error_incorrect_type
  2474 00001AB3 488B5D28                        mov rbx, PARAM(1)
  2475 00001AB7 48895801                        mov SOB_PAIR_CAR(rax), rbx
  2476 00001ABB 48B8-                           mov rax, sob_void
  2476 00001ABD [0000000000000000] 
  2477 00001AC5 C9                              leave
  2478 00001AC6 C22000                          ret AND_KILL_FRAME(2)
  2479                                  
  2480                                  L_code_ptr_set_cdr:
  2481 00001AC9 C8000000                        enter 0, 0
  2482 00001ACD 48837D1802                      cmp COUNT, 2
  2483 00001AD2 0F853D040000                    jne L_error_arg_count_2
  2484 00001AD8 488B4520                        mov rax, PARAM(0)
  2485                                          assert_pair(rax)
    53 00001ADC 803821              <1>  cmp byte [%1], %2
    54 00001ADF 0F85CF040000        <1>  jne L_error_incorrect_type
  2486 00001AE5 488B5D28                        mov rbx, PARAM(1)
  2487 00001AE9 48895809                        mov SOB_PAIR_CDR(rax), rbx
  2488 00001AED 48B8-                           mov rax, sob_void
  2488 00001AEF [0000000000000000] 
  2489 00001AF7 C9                              leave
  2490 00001AF8 C22000                          ret AND_KILL_FRAME(2)
  2491                                  
  2492                                  L_code_ptr_string_ref:
  2493 00001AFB C8000000                        enter 0, 0
  2494 00001AFF 48837D1802                      cmp COUNT, 2
  2495 00001B04 0F850B040000                    jne L_error_arg_count_2
  2496 00001B0A 488B7D20                        mov rdi, PARAM(0)
  2497                                          assert_string(rdi)
    53 00001B0E 803F03              <1>  cmp byte [%1], %2
    54 00001B11 0F859D040000        <1>  jne L_error_incorrect_type
  2498 00001B17 488B7528                        mov rsi, PARAM(1)
  2499                                          assert_integer(rsi)
    53 00001B1B 803E11              <1>  cmp byte [%1], %2
    54 00001B1E 0F8590040000        <1>  jne L_error_incorrect_type
  2500 00001B24 488B5701                        mov rdx, qword [rdi + 1]
  2501 00001B28 488B4E01                        mov rcx, qword [rsi + 1]
  2502 00001B2C 4839D1                          cmp rcx, rdx
  2503 00001B2F 0F8D14030000                    jge L_error_integer_range
  2504 00001B35 4883F900                        cmp rcx, 0
  2505 00001B39 0F8C0A030000                    jl L_error_integer_range
  2506 00001B3F 8A5C3909                        mov bl, byte [rdi + 1 + 8 + 1 * rcx]
  2507 00001B43 BF02000000                      mov rdi, 2
  2508 00001B48 E865E7FFFF                      call malloc
  2509 00001B4D C60002                          mov byte [rax], T_char
  2510 00001B50 885801                          mov byte [rax + 1], bl
  2511 00001B53 C9                              leave
  2512 00001B54 C22000                          ret AND_KILL_FRAME(2)
  2513                                  
  2514                                  L_code_ptr_vector_ref:
  2515 00001B57 C8000000                        enter 0, 0
  2516 00001B5B 48837D1802                      cmp COUNT, 2
  2517 00001B60 0F85AF030000                    jne L_error_arg_count_2
  2518 00001B66 488B7D20                        mov rdi, PARAM(0)
  2519                                          assert_vector(rdi)
    53 00001B6A 803F22              <1>  cmp byte [%1], %2
    54 00001B6D 0F8541040000        <1>  jne L_error_incorrect_type
  2520 00001B73 488B7528                        mov rsi, PARAM(1)
  2521                                          assert_integer(rsi)
    53 00001B77 803E11              <1>  cmp byte [%1], %2
    54 00001B7A 0F8534040000        <1>  jne L_error_incorrect_type
  2522 00001B80 488B5701                        mov rdx, qword [rdi + 1]
  2523 00001B84 488B4E01                        mov rcx, qword [rsi + 1]
  2524 00001B88 4839D1                          cmp rcx, rdx
  2525 00001B8B 0F8DB8020000                    jge L_error_integer_range
  2526 00001B91 4883F900                        cmp rcx, 0
  2527 00001B95 0F8CAE020000                    jl L_error_integer_range
  2528 00001B9B 488B44CF09                      mov rax, [rdi + 1 + 8 + 8 * rcx]
  2529 00001BA0 C9                              leave
  2530 00001BA1 C22000                          ret AND_KILL_FRAME(2)
  2531                                  
  2532                                  L_code_ptr_vector_set:
  2533 00001BA4 C8000000                        enter 0, 0
  2534 00001BA8 48837D1803                      cmp COUNT, 3
  2535 00001BAD 0F85CC030000                    jne L_error_arg_count_3
  2536 00001BB3 488B7D20                        mov rdi, PARAM(0)
  2537                                          assert_vector(rdi)
    53 00001BB7 803F22              <1>  cmp byte [%1], %2
    54 00001BBA 0F85F4030000        <1>  jne L_error_incorrect_type
  2538 00001BC0 488B7528                        mov rsi, PARAM(1)
  2539                                          assert_integer(rsi)
    53 00001BC4 803E11              <1>  cmp byte [%1], %2
    54 00001BC7 0F85E7030000        <1>  jne L_error_incorrect_type
  2540 00001BCD 488B5701                        mov rdx, qword [rdi + 1]
  2541 00001BD1 488B4E01                        mov rcx, qword [rsi + 1]
  2542 00001BD5 4839D1                          cmp rcx, rdx
  2543 00001BD8 0F8D6B020000                    jge L_error_integer_range
  2544 00001BDE 4883F900                        cmp rcx, 0
  2545 00001BE2 0F8C61020000                    jl L_error_integer_range
  2546 00001BE8 488B4530                        mov rax, PARAM(2)
  2547 00001BEC 488944CF09                      mov qword [rdi + 1 + 8 + 8 * rcx], rax
  2548 00001BF1 48B8-                           mov rax, sob_void
  2548 00001BF3 [0000000000000000] 
  2549 00001BFB C9                              leave
  2550 00001BFC C22800                          ret AND_KILL_FRAME(3)
  2551                                  
  2552                                  L_code_ptr_string_set:
  2553 00001BFF C8000000                        enter 0, 0
  2554 00001C03 48837D1803                      cmp COUNT, 3
  2555 00001C08 0F8571030000                    jne L_error_arg_count_3
  2556 00001C0E 488B7D20                        mov rdi, PARAM(0)
  2557                                          assert_string(rdi)
    53 00001C12 803F03              <1>  cmp byte [%1], %2
    54 00001C15 0F8599030000        <1>  jne L_error_incorrect_type
  2558 00001C1B 488B7528                        mov rsi, PARAM(1)
  2559                                          assert_integer(rsi)
    53 00001C1F 803E11              <1>  cmp byte [%1], %2
    54 00001C22 0F858C030000        <1>  jne L_error_incorrect_type
  2560 00001C28 488B5701                        mov rdx, qword [rdi + 1]
  2561 00001C2C 488B4E01                        mov rcx, qword [rsi + 1]
  2562 00001C30 4839D1                          cmp rcx, rdx
  2563 00001C33 0F8D10020000                    jge L_error_integer_range
  2564 00001C39 4883F900                        cmp rcx, 0
  2565 00001C3D 0F8C06020000                    jl L_error_integer_range
  2566 00001C43 488B4530                        mov rax, PARAM(2)
  2567                                          assert_char(rax)
    53 00001C47 803802              <1>  cmp byte [%1], %2
    54 00001C4A 0F8564030000        <1>  jne L_error_incorrect_type
  2568 00001C50 8A4001                          mov al, byte [rax + 1]
  2569 00001C53 88443909                        mov byte [rdi + 1 + 8 + 1 * rcx], al
  2570 00001C57 48B8-                           mov rax, sob_void
  2570 00001C59 [0000000000000000] 
  2571 00001C61 C9                              leave
  2572 00001C62 C22800                          ret AND_KILL_FRAME(3)
  2573                                  
  2574                                  L_code_ptr_make_vector:
  2575 00001C65 C8000000                        enter 0, 0
  2576 00001C69 48837D1802                      cmp COUNT, 2
  2577 00001C6E 0F85A1020000                    jne L_error_arg_count_2
  2578 00001C74 488B4D20                        mov rcx, PARAM(0)
  2579                                          assert_integer(rcx)
    53 00001C78 803911              <1>  cmp byte [%1], %2
    54 00001C7B 0F8533030000        <1>  jne L_error_incorrect_type
  2580 00001C81 488B4901                        mov rcx, qword [rcx + 1]
  2581 00001C85 4883F900                        cmp rcx, 0
  2582 00001C89 0F8CBA010000                    jl L_error_integer_range
  2583 00001C8F 488B5528                        mov rdx, PARAM(1)
  2584 00001C93 488D3CCD09000000                lea rdi, [1 + 8 + 8 * rcx]
  2585 00001C9B E812E6FFFF                      call malloc
  2586 00001CA0 C60022                          mov byte [rax], T_vector
  2587 00001CA3 48894801                        mov qword [rax + 1], rcx
  2588 00001CA7 41B800000000                    mov r8, 0
  2589                                  .L0:
  2590 00001CAD 4939C8                          cmp r8, rcx
  2591 00001CB0 740A                            je .L1
  2592 00001CB2 4A8954C009                      mov qword [rax + 1 + 8 + 8 * r8], rdx
  2593 00001CB7 49FFC0                          inc r8
  2594 00001CBA EBF1                            jmp .L0
  2595                                  .L1:
  2596 00001CBC C9                              leave
  2597 00001CBD C22000                          ret AND_KILL_FRAME(2)
  2598                                          
  2599                                  L_code_ptr_make_string:
  2600 00001CC0 C8000000                        enter 0, 0
  2601 00001CC4 48837D1802                      cmp COUNT, 2
  2602 00001CC9 0F8546020000                    jne L_error_arg_count_2
  2603 00001CCF 488B4D20                        mov rcx, PARAM(0)
  2604                                          assert_integer(rcx)
    53 00001CD3 803911              <1>  cmp byte [%1], %2
    54 00001CD6 0F85D8020000        <1>  jne L_error_incorrect_type
  2605 00001CDC 488B4901                        mov rcx, qword [rcx + 1]
  2606 00001CE0 4883F900                        cmp rcx, 0
  2607 00001CE4 0F8C5F010000                    jl L_error_integer_range
  2608 00001CEA 488B5528                        mov rdx, PARAM(1)
  2609                                          assert_char(rdx)
    53 00001CEE 803A02              <1>  cmp byte [%1], %2
    54 00001CF1 0F85BD020000        <1>  jne L_error_incorrect_type
  2610 00001CF7 8A5201                          mov dl, byte [rdx + 1]
  2611 00001CFA 488D7909                        lea rdi, [1 + 8 + 1 * rcx]
  2612 00001CFE E8AFE5FFFF                      call malloc
  2613 00001D03 C60003                          mov byte [rax], T_string
  2614 00001D06 48894801                        mov qword [rax + 1], rcx
  2615 00001D0A 41B800000000                    mov r8, 0
  2616                                  .L0:
  2617 00001D10 4939C8                          cmp r8, rcx
  2618 00001D13 740A                            je .L1
  2619 00001D15 4188540009                      mov byte [rax + 1 + 8 + 1 * r8], dl
  2620 00001D1A 49FFC0                          inc r8
  2621 00001D1D EBF1                            jmp .L0
  2622                                  .L1:
  2623 00001D1F C9                              leave
  2624 00001D20 C22000                          ret AND_KILL_FRAME(2)
  2625                                  
  2626                                  L_code_ptr_numerator:
  2627 00001D23 C8000000                        enter 0, 0
  2628 00001D27 48837D1801                      cmp COUNT, 1
  2629 00001D2C 0F85AE010000                    jne L_error_arg_count_1
  2630 00001D32 488B4520                        mov rax, PARAM(0)
  2631                                          assert_fraction(rax)
    53 00001D36 803812              <1>  cmp byte [%1], %2
    54 00001D39 0F8575020000        <1>  jne L_error_incorrect_type
  2632 00001D3F 488B7801                        mov rdi, qword [rax + 1]
  2633 00001D43 E8E7000000                      call make_integer
  2634 00001D48 C9                              leave
  2635 00001D49 C21800                          ret AND_KILL_FRAME(1)
  2636                                          
  2637                                  L_code_ptr_denominator:
  2638 00001D4C C8000000                        enter 0, 0
  2639 00001D50 48837D1801                      cmp COUNT, 1
  2640 00001D55 0F8585010000                    jne L_error_arg_count_1
  2641 00001D5B 488B4520                        mov rax, PARAM(0)
  2642                                          assert_fraction(rax)
    53 00001D5F 803812              <1>  cmp byte [%1], %2
    54 00001D62 0F854C020000        <1>  jne L_error_incorrect_type
  2643 00001D68 488B7809                        mov rdi, qword [rax + 1 + 8]
  2644 00001D6C E8BE000000                      call make_integer
  2645 00001D71 C9                              leave
  2646 00001D72 C21800                          ret AND_KILL_FRAME(1)
  2647                                  
  2648                                  L_code_ptr_is_eq:
  2649 00001D75 C8000000                	enter 0, 0
  2650 00001D79 48837D1802              	cmp COUNT, 2
  2651 00001D7E 0F8591010000            	jne L_error_arg_count_2
  2652 00001D84 488B7D20                	mov rdi, PARAM(0)
  2653 00001D88 488B7528                	mov rsi, PARAM(1)
  2654 00001D8C 4839F7                  	cmp rdi, rsi
  2655 00001D8F 746C                    	je .L_eq_true
  2656 00001D91 8A17                    	mov dl, byte [rdi]
  2657 00001D93 3A16                    	cmp dl, byte [rsi]
  2658 00001D95 7572                    	jne .L_eq_false
  2659 00001D97 80FA02                  	cmp dl, T_char
  2660 00001D9A 7459                    	je .L_char
  2661 00001D9C 80FA41                  	cmp dl, T_interned_symbol
  2662 00001D9F 7440                    	je .L_interned_symbol
  2663 00001DA1 80FA42                          cmp dl, T_uninterned_symbol
  2664 00001DA4 7443                            je .L_uninterned_symbol
  2665 00001DA6 80FA13                  	cmp dl, T_real
  2666 00001DA9 742E                    	je .L_real
  2667 00001DAB 80FA12                  	cmp dl, T_fraction
  2668 00001DAE 7413                    	je .L_fraction
  2669 00001DB0 80FA11                          cmp dl, T_integer
  2670 00001DB3 7402                            je .L_integer
  2671 00001DB5 EB52                    	jmp .L_eq_false
  2672                                  .L_integer:
  2673 00001DB7 488B4601                        mov rax, qword [rsi + 1]
  2674 00001DBB 483B4701                        cmp rax, qword [rdi + 1]
  2675 00001DBF 7548                            jne .L_eq_false
  2676 00001DC1 EB3A                            jmp .L_eq_true
  2677                                  .L_fraction:
  2678 00001DC3 488B4601                	mov rax, qword [rsi + 1]
  2679 00001DC7 483B4701                	cmp rax, qword [rdi + 1]
  2680 00001DCB 753C                    	jne .L_eq_false
  2681 00001DCD 488B4609                	mov rax, qword [rsi + 1 + 8]
  2682 00001DD1 483B4709                	cmp rax, qword [rdi + 1 + 8]
  2683 00001DD5 7532                    	jne .L_eq_false
  2684 00001DD7 EB24                    	jmp .L_eq_true
  2685                                  .L_real:
  2686 00001DD9 488B4601                	mov rax, qword [rsi + 1]
  2687 00001DDD 483B4701                	cmp rax, qword [rdi + 1]
  2688                                  .L_interned_symbol:
  2689                                  	; never reached, because interned_symbols are static!
  2690                                  	; but I'm keeping it in case, I'll ever change
  2691                                  	; the implementation
  2692 00001DE1 488B4601                	mov rax, qword [rsi + 1]
  2693 00001DE5 483B4701                	cmp rax, qword [rdi + 1]
  2694                                  .L_uninterned_symbol:
  2695 00001DE9 4C8B4701                        mov r8, qword [rdi + 1]
  2696 00001DED 4C3B4601                        cmp r8, qword [rsi + 1]
  2697 00001DF1 7516                            jne .L_eq_false
  2698 00001DF3 EB08                            jmp .L_eq_true
  2699                                  .L_char:
  2700 00001DF5 8A5E01                  	mov bl, byte [rsi + 1]
  2701 00001DF8 3A5F01                  	cmp bl, byte [rdi + 1]
  2702 00001DFB 750C                    	jne .L_eq_false
  2703                                  .L_eq_true:
  2704 00001DFD 48B8-                   	mov rax, sob_boolean_true
  2704 00001DFF [0300000000000000] 
  2705 00001E07 EB0A                    	jmp .L_eq_exit
  2706                                  .L_eq_false:
  2707 00001E09 48B8-                   	mov rax, sob_boolean_false
  2707 00001E0B [0200000000000000] 
  2708                                  .L_eq_exit:
  2709 00001E13 C9                      	leave
  2710 00001E14 C22000                  	ret AND_KILL_FRAME(2)
  2711                                  
  2712                                  make_real:
  2713 00001E17 C8000000                        enter 0, 0
  2714 00001E1B BF09000000                      mov rdi, (1 + 8)
  2715 00001E20 E88DE4FFFF                      call malloc
  2716 00001E25 C60013                          mov byte [rax], T_real
  2717 00001E28 F20F114001                      movsd qword [rax + 1], xmm0
  2718 00001E2D C9                              leave 
  2719 00001E2E C3                              ret
  2720                                          
  2721                                  make_integer:
  2722 00001E2F C8000000                        enter 0, 0
  2723 00001E33 4889FE                          mov rsi, rdi
  2724 00001E36 BF09000000                      mov rdi, (1 + 8)
  2725 00001E3B E872E4FFFF                      call malloc
  2726 00001E40 C60011                          mov byte [rax], T_integer
  2727 00001E43 48897001                        mov qword [rax + 1], rsi
  2728 00001E47 C9                              leave
  2729 00001E48 C3                              ret
  2730                                          
  2731                                  L_error_integer_range:
  2732 00001E49 488B3C25[00000000]              mov rdi, qword [stderr]
  2733 00001E51 48BE-                           mov rsi, fmt_integer_range
  2733 00001E53 [F509000000000000] 
  2734 00001E5B B800000000                      mov rax, 0
  2735                                          ENTER
    44 00001E60 C8000000            <1>  enter 0, 0
    45 00001E64 4883E4F0            <1>  and rsp, ~15
  2736 00001E68 E8(00000000)                    call fprintf
  2737                                          LEAVE
    49 00001E6D C9                  <1>  leave
  2738 00001E6E 48C7C0FBFFFFFF                  mov rax, -5
  2739 00001E75 E8(00000000)                    call exit
  2740                                  
  2741                                  L_error_arg_negative:
  2742 00001E7A 488B3C25[00000000]              mov rdi, qword [stderr]
  2743 00001E82 48BE-                           mov rsi, fmt_arg_negative
  2743 00001E84 [CD08000000000000] 
  2744 00001E8C B800000000                      mov rax, 0
  2745                                          ENTER
    44 00001E91 C8000000            <1>  enter 0, 0
    45 00001E95 4883E4F0            <1>  and rsp, ~15
  2746 00001E99 E8(00000000)                    call fprintf
  2747                                          LEAVE
    49 00001E9E C9                  <1>  leave
  2748 00001E9F 48C7C0FDFFFFFF                  mov rax, -3
  2749 00001EA6 E8(00000000)                    call exit
  2750                                  
  2751                                  L_error_arg_count_0:
  2752 00001EAB 488B3C25[00000000]              mov rdi, qword [stderr]
  2753 00001EB3 48BE-                           mov rsi, fmt_arg_count_0
  2753 00001EB5 [F308000000000000] 
  2754 00001EBD 488B5518                        mov rdx, COUNT
  2755 00001EC1 B800000000                      mov rax, 0
  2756                                          ENTER
    44 00001EC6 C8000000            <1>  enter 0, 0
    45 00001ECA 4883E4F0            <1>  and rsp, ~15
  2757 00001ECE E8(00000000)                    call fprintf
  2758                                          LEAVE
    49 00001ED3 C9                  <1>  leave
  2759 00001ED4 48C7C0FDFFFFFF                  mov rax, -3
  2760 00001EDB E8(00000000)                    call exit
  2761                                  
  2762                                  L_error_arg_count_1:
  2763 00001EE0 488B3C25[00000000]              mov rdi, qword [stderr]
  2764 00001EE8 48BE-                           mov rsi, fmt_arg_count_1
  2764 00001EEA [1B09000000000000] 
  2765 00001EF2 488B5518                        mov rdx, COUNT
  2766 00001EF6 B800000000                      mov rax, 0
  2767                                          ENTER
    44 00001EFB C8000000            <1>  enter 0, 0
    45 00001EFF 4883E4F0            <1>  and rsp, ~15
  2768 00001F03 E8(00000000)                    call fprintf
  2769                                          LEAVE
    49 00001F08 C9                  <1>  leave
  2770 00001F09 48C7C0FDFFFFFF                  mov rax, -3
  2771 00001F10 E8(00000000)                    call exit
  2772                                  
  2773                                  L_error_arg_count_2:
  2774 00001F15 488B3C25[00000000]              mov rdi, qword [stderr]
  2775 00001F1D 48BE-                           mov rsi, fmt_arg_count_2
  2775 00001F1F [8109000000000000] 
  2776 00001F27 488B5518                        mov rdx, COUNT
  2777 00001F2B B800000000                      mov rax, 0
  2778                                          ENTER
    44 00001F30 C8000000            <1>  enter 0, 0
    45 00001F34 4883E4F0            <1>  and rsp, ~15
  2779 00001F38 E8(00000000)                    call fprintf
  2780                                          LEAVE
    49 00001F3D C9                  <1>  leave
  2781 00001F3E 48C7C0FDFFFFFF                  mov rax, -3
  2782 00001F45 E8(00000000)                    call exit
  2783                                  
  2784                                  L_error_arg_count_12:
  2785 00001F4A 488B3C25[00000000]              mov rdi, qword [stderr]
  2786 00001F52 48BE-                           mov rsi, fmt_arg_count_12
  2786 00001F54 [4109000000000000] 
  2787 00001F5C 488B5518                        mov rdx, COUNT
  2788 00001F60 B800000000                      mov rax, 0
  2789                                          ENTER
    44 00001F65 C8000000            <1>  enter 0, 0
    45 00001F69 4883E4F0            <1>  and rsp, ~15
  2790 00001F6D E8(00000000)                    call fprintf
  2791                                          LEAVE
    49 00001F72 C9                  <1>  leave
  2792 00001F73 48C7C0FDFFFFFF                  mov rax, -3
  2793 00001F7A E8(00000000)                    call exit
  2794                                  
  2795                                  L_error_arg_count_3:
  2796 00001F7F 488B3C25[00000000]              mov rdi, qword [stderr]
  2797 00001F87 48BE-                           mov rsi, fmt_arg_count_3
  2797 00001F89 [A809000000000000] 
  2798 00001F91 488B5518                        mov rdx, COUNT
  2799 00001F95 B800000000                      mov rax, 0
  2800                                          ENTER
    44 00001F9A C8000000            <1>  enter 0, 0
    45 00001F9E 4883E4F0            <1>  and rsp, ~15
  2801 00001FA2 E8(00000000)                    call fprintf
  2802                                          LEAVE
    49 00001FA7 C9                  <1>  leave
  2803 00001FA8 48C7C0FDFFFFFF                  mov rax, -3
  2804 00001FAF E8(00000000)                    call exit
  2805                                          
  2806                                  L_error_incorrect_type:
  2807 00001FB4 488B3C25[00000000]              mov rdi, qword [stderr]
  2808 00001FBC 48BE-                           mov rsi, fmt_type
  2808 00001FBE [D109000000000000] 
  2809 00001FC6 B800000000                      mov rax, 0
  2810                                          ENTER
    44 00001FCB C8000000            <1>  enter 0, 0
    45 00001FCF 4883E4F0            <1>  and rsp, ~15
  2811 00001FD3 E8(00000000)                    call fprintf
  2812                                          LEAVE
    49 00001FD8 C9                  <1>  leave
  2813 00001FD9 48C7C0FCFFFFFF                  mov rax, -4
  2814 00001FE0 E8(00000000)                    call exit
  2815                                  
  2816                                  L_error_division_by_zero:
  2817 00001FE5 488B3C25[00000000]              mov rdi, qword [stderr]
  2818 00001FED 48BE-                           mov rsi, fmt_division_by_zero
  2818 00001FEF [120A000000000000] 
  2819 00001FF7 B800000000                      mov rax, 0
  2820                                          ENTER
    44 00001FFC C8000000            <1>  enter 0, 0
    45 00002000 4883E4F0            <1>  and rsp, ~15
  2821 00002004 E8(00000000)                    call fprintf
  2822                                          LEAVE
    49 00002009 C9                  <1>  leave
  2823 0000200A 48C7C0F8FFFFFF                  mov rax, -8
  2824 00002011 E8(00000000)                    call exit
  2825                                  
  2826                                  section .data
  2827                                  gensym_count:
  2828 000008C2 0000000000000000                dq 0
  2829                                  fmt_char:
  2830 000008CA 256300                          db `%c\0`
  2831                                  fmt_arg_negative:
  2832 000008CD 212121205468652061-             db `!!! The argument cannot be negative.\n\0`
  2832 000008D6 7267756D656E742063-
  2832 000008DF 616E6E6F7420626520-
  2832 000008E8 6E656761746976652E-
  2832 000008F1 0A00               
  2833                                  fmt_arg_count_0:
  2834 000008F3 212121204578706563-             db `!!! Expecting zero arguments. Found %d\n\0`
  2834 000008FC 74696E67207A65726F-
  2834 00000905 20617267756D656E74-
  2834 0000090E 732E20466F756E6420-
  2834 00000917 25640A00           
  2835                                  fmt_arg_count_1:
  2836 0000091B 212121204578706563-             db `!!! Expecting one argument. Found %d\n\0`
  2836 00000924 74696E67206F6E6520-
  2836 0000092D 617267756D656E742E-
  2836 00000936 20466F756E64202564-
  2836 0000093F 0A00               
  2837                                  fmt_arg_count_12:
  2838 00000941 212121204578706563-             db `!!! Expecting one required and one optional argument. Found %d\n\0`
  2838 0000094A 74696E67206F6E6520-
  2838 00000953 726571756972656420-
  2838 0000095C 616E64206F6E65206F-
  2838 00000965 7074696F6E616C2061-
  2838 0000096E 7267756D656E742E20-
  2838 00000977 466F756E642025640A-
  2838 00000980 00                 
  2839                                  fmt_arg_count_2:
  2840 00000981 212121204578706563-             db `!!! Expecting two arguments. Found %d\n\0`
  2840 0000098A 74696E672074776F20-
  2840 00000993 617267756D656E7473-
  2840 0000099C 2E20466F756E642025-
  2840 000009A5 640A00             
  2841                                  fmt_arg_count_3:
  2842 000009A8 212121204578706563-             db `!!! Expecting three arguments. Found %d\n\0`
  2842 000009B1 74696E672074687265-
  2842 000009BA 6520617267756D656E-
  2842 000009C3 74732E20466F756E64-
  2842 000009CC 2025640A00         
  2843                                  fmt_type:
  2844 000009D1 2121212046756E6374-             db `!!! Function passed incorrect type\n\0`
  2844 000009DA 696F6E207061737365-
  2844 000009E3 6420696E636F727265-
  2844 000009EC 637420747970650A00 
  2845                                  fmt_integer_range:
  2846 000009F5 21212120496E636F72-             db `!!! Incorrect integer range\n\0`
  2846 000009FE 7265637420696E7465-
  2846 00000A07 6765722072616E6765-
  2846 00000A10 0A00               
  2847                                  fmt_division_by_zero:
  2848 00000A12 212121204469766973-             db `!!! Division by zero\n\0`
  2848 00000A1B 696F6E206279207A65-
  2848 00000A24 726F0A00           
  2849                                  fmt_scheme_error_part_1:
  2850 00000A28 0A2121212054686520-             db `\n!!! The procedure \0`
  2850 00000A31 70726F636564757265-
  2850 00000A3A 2000               
  2851                                  fmt_scheme_error_part_2:
  2852 00000A3C 2061736B656420746F-             db ` asked to terminate the program\n`
  2852 00000A45 207465726D696E6174-
  2852 00000A4E 65207468652070726F-
  2852 00000A57 6772616D0A         
  2853 00000A5C 202020207769746820-             db `    with the following message:\n\n\0`
  2853 00000A65 74686520666F6C6C6F-
  2853 00000A6E 77696E67206D657373-
  2853 00000A77 6167653A0A0A00     
  2854                                  fmt_scheme_error_part_3:
  2855 00000A7E 0A0A476F6F64627965-             db `\n\nGoodbye!\n\n\0`
  2855 00000A87 210A0A00           
