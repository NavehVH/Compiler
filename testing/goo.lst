     1                                  ;;; prologue-1.asm
     2                                  ;;; The first part of the standard prologue for compiled programs
     3                                  ;;;
     4                                  ;;; Programmer: Mayer Goldberg, 2023
     5                                  
     6                                  %define T_void 				0
     7                                  %define T_nil 				1
     8                                  %define T_char 				2
     9                                  %define T_string 			3
    10                                  %define T_closure 			4
    11                                  %define T_undefined			5
    12                                  %define T_boolean 			8
    13                                  %define T_boolean_false 		(T_boolean | 1)
    14                                  %define T_boolean_true 			(T_boolean | 2)
    15                                  %define T_number 			16
    16                                  %define T_integer			(T_number | 1)
    17                                  %define T_fraction 			(T_number | 2)
    18                                  %define T_real 				(T_number | 3)
    19                                  %define T_collection 			32
    20                                  %define T_pair 				(T_collection | 1)
    21                                  %define T_vector 			(T_collection | 2)
    22                                  %define T_symbol 			64
    23                                  %define T_interned_symbol		(T_symbol | 1)
    24                                  %define T_uninterned_symbol		(T_symbol | 2)
    25                                  
    26                                  %define SOB_CHAR_VALUE(reg) 		byte [reg + 1]
    27                                  %define SOB_PAIR_CAR(reg)		qword [reg + 1]
    28                                  %define SOB_PAIR_CDR(reg)		qword [reg + 1 + 8]
    29                                  %define SOB_STRING_LENGTH(reg)		qword [reg + 1]
    30                                  %define SOB_VECTOR_LENGTH(reg)		qword [reg + 1]
    31                                  %define SOB_CLOSURE_ENV(reg)		qword [reg + 1]
    32                                  %define SOB_CLOSURE_CODE(reg)		qword [reg + 1 + 8]
    33                                  
    34                                  %define OLD_RBP 			qword [rbp]
    35                                  %define RET_ADDR 			qword [rbp + 8 * 1]
    36                                  %define ENV 				qword [rbp + 8 * 2]
    37                                  %define COUNT 				qword [rbp + 8 * 3]
    38                                  %define PARAM(n) 			qword [rbp + 8 * (4 + n)]
    39                                  %define AND_KILL_FRAME(n)		(8 * (2 + n))
    40                                  
    41                                  %define MAGIC				496351
    42                                  
    43                                  %macro ENTER 0
    44                                  	enter 0, 0
    45                                  	and rsp, ~15
    46                                  %endmacro
    47                                  
    48                                  %macro LEAVE 0
    49                                  	leave
    50                                  %endmacro
    51                                  
    52                                  %macro assert_type 2
    53                                          cmp byte [%1], %2
    54                                          jne L_error_incorrect_type
    55                                  %endmacro
    56                                  
    57                                  %define assert_void(reg)		assert_type reg, T_void
    58                                  %define assert_nil(reg)			assert_type reg, T_nil
    59                                  %define assert_char(reg)		assert_type reg, T_char
    60                                  %define assert_string(reg)		assert_type reg, T_string
    61                                  %define assert_symbol(reg)		assert_type reg, T_symbol
    62                                  %define assert_interned_symbol(reg)	assert_type reg, T_interned_symbol
    63                                  %define assert_uninterned_symbol(reg)	assert_type reg, T_uninterned_symbol
    64                                  %define assert_closure(reg)		assert_type reg, T_closure
    65                                  %define assert_boolean(reg)		assert_type reg, T_boolean
    66                                  %define assert_integer(reg)		assert_type reg, T_integer
    67                                  %define assert_fraction(reg)		assert_type reg, T_fraction
    68                                  %define assert_real(reg)		assert_type reg, T_real
    69                                  %define assert_pair(reg)		assert_type reg, T_pair
    70                                  %define assert_vector(reg)		assert_type reg, T_vector
    71                                  
    72                                  %define sob_void			(L_constants + 0)
    73                                  %define sob_nil				(L_constants + 1)
    74                                  %define sob_boolean_false		(L_constants + 2)
    75                                  %define sob_boolean_true		(L_constants + 3)
    76                                  %define sob_char_nul			(L_constants + 4)
    77                                  
    78                                  %define bytes(n)			(n)
    79                                  %define kbytes(n) 			(bytes(n) << 10)
    80                                  %define mbytes(n) 			(kbytes(n) << 10)
    81                                  %define gbytes(n) 			(mbytes(n) << 10)
    82                                  
    83                                  section .data
    84                                  L_constants:
    85                                  	; L_constants + 0:
    86 00000000 00                      	db T_void
    87                                  	; L_constants + 1:
    88 00000001 01                      	db T_nil
    89                                  	; L_constants + 2:
    90 00000002 09                      	db T_boolean_false
    91                                  	; L_constants + 3:
    92 00000003 0A                      	db T_boolean_true
    93                                  	; L_constants + 4:
    94 00000004 0200                    	db T_char, 0x00	; #\nul
    95                                  	; L_constants + 6:
    96 00000006 03                      	db T_string	; "null?"
    97 00000007 0500000000000000        	dq 5
    98 0000000F 6E756C6C3F              	db 0x6E, 0x75, 0x6C, 0x6C, 0x3F
    99                                  	; L_constants + 20:
   100 00000014 03                      	db T_string	; "pair?"
   101 00000015 0500000000000000        	dq 5
   102 0000001D 706169723F              	db 0x70, 0x61, 0x69, 0x72, 0x3F
   103                                  	; L_constants + 34:
   104 00000022 03                      	db T_string	; "void?"
   105 00000023 0500000000000000        	dq 5
   106 0000002B 766F69643F              	db 0x76, 0x6F, 0x69, 0x64, 0x3F
   107                                  	; L_constants + 48:
   108 00000030 03                      	db T_string	; "char?"
   109 00000031 0500000000000000        	dq 5
   110 00000039 636861723F              	db 0x63, 0x68, 0x61, 0x72, 0x3F
   111                                  	; L_constants + 62:
   112 0000003E 03                      	db T_string	; "string?"
   113 0000003F 0700000000000000        	dq 7
   114 00000047 737472696E673F          	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x3F
   115                                  	; L_constants + 78:
   116 0000004E 03                      	db T_string	; "interned-symbol?"
   117 0000004F 1000000000000000        	dq 16
   118 00000057 696E7465726E6564        	db 0x69, 0x6E, 0x74, 0x65, 0x72, 0x6E, 0x65, 0x64
   119 0000005F 2D73796D626F6C3F        	db 0x2D, 0x73, 0x79, 0x6D, 0x62, 0x6F, 0x6C, 0x3F
   120                                  	; L_constants + 103:
   121 00000067 03                      	db T_string	; "vector?"
   122 00000068 0700000000000000        	dq 7
   123 00000070 766563746F723F          	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x3F
   124                                  	; L_constants + 119:
   125 00000077 03                      	db T_string	; "procedure?"
   126 00000078 0A00000000000000        	dq 10
   127 00000080 70726F6365647572        	db 0x70, 0x72, 0x6F, 0x63, 0x65, 0x64, 0x75, 0x72
   128 00000088 653F                    	db 0x65, 0x3F
   129                                  	; L_constants + 138:
   130 0000008A 03                      	db T_string	; "real?"
   131 0000008B 0500000000000000        	dq 5
   132 00000093 7265616C3F              	db 0x72, 0x65, 0x61, 0x6C, 0x3F
   133                                  	; L_constants + 152:
   134 00000098 03                      	db T_string	; "fraction?"
   135 00000099 0900000000000000        	dq 9
   136 000000A1 6672616374696F6E        	db 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E
   137 000000A9 3F                      	db 0x3F
   138                                  	; L_constants + 170:
   139 000000AA 03                      	db T_string	; "boolean?"
   140 000000AB 0800000000000000        	dq 8
   141 000000B3 626F6F6C65616E3F        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x3F
   142                                  	; L_constants + 187:
   143 000000BB 03                      	db T_string	; "number?"
   144 000000BC 0700000000000000        	dq 7
   145 000000C4 6E756D6265723F          	db 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72, 0x3F
   146                                  	; L_constants + 203:
   147 000000CB 03                      	db T_string	; "collection?"
   148 000000CC 0B00000000000000        	dq 11
   149 000000D4 636F6C6C65637469        	db 0x63, 0x6F, 0x6C, 0x6C, 0x65, 0x63, 0x74, 0x69
   150 000000DC 6F6E3F                  	db 0x6F, 0x6E, 0x3F
   151                                  	; L_constants + 223:
   152 000000DF 03                      	db T_string	; "cons"
   153 000000E0 0400000000000000        	dq 4
   154 000000E8 636F6E73                	db 0x63, 0x6F, 0x6E, 0x73
   155                                  	; L_constants + 236:
   156 000000EC 03                      	db T_string	; "display-sexpr"
   157 000000ED 0D00000000000000        	dq 13
   158 000000F5 646973706C61792D        	db 0x64, 0x69, 0x73, 0x70, 0x6C, 0x61, 0x79, 0x2D
   159 000000FD 7365787072              	db 0x73, 0x65, 0x78, 0x70, 0x72
   160                                  	; L_constants + 258:
   161 00000102 03                      	db T_string	; "write-char"
   162 00000103 0A00000000000000        	dq 10
   163 0000010B 77726974652D6368        	db 0x77, 0x72, 0x69, 0x74, 0x65, 0x2D, 0x63, 0x68
   164 00000113 6172                    	db 0x61, 0x72
   165                                  	; L_constants + 277:
   166 00000115 03                      	db T_string	; "car"
   167 00000116 0300000000000000        	dq 3
   168 0000011E 636172                  	db 0x63, 0x61, 0x72
   169                                  	; L_constants + 289:
   170 00000121 03                      	db T_string	; "cdr"
   171 00000122 0300000000000000        	dq 3
   172 0000012A 636472                  	db 0x63, 0x64, 0x72
   173                                  	; L_constants + 301:
   174 0000012D 03                      	db T_string	; "string-length"
   175 0000012E 0D00000000000000        	dq 13
   176 00000136 737472696E672D6C        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x6C
   177 0000013E 656E677468              	db 0x65, 0x6E, 0x67, 0x74, 0x68
   178                                  	; L_constants + 323:
   179 00000143 03                      	db T_string	; "vector-length"
   180 00000144 0D00000000000000        	dq 13
   181 0000014C 766563746F722D6C        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x6C
   182 00000154 656E677468              	db 0x65, 0x6E, 0x67, 0x74, 0x68
   183                                  	; L_constants + 345:
   184 00000159 03                      	db T_string	; "real->integer"
   185 0000015A 0D00000000000000        	dq 13
   186 00000162 7265616C2D3E696E        	db 0x72, 0x65, 0x61, 0x6C, 0x2D, 0x3E, 0x69, 0x6E
   187 0000016A 7465676572              	db 0x74, 0x65, 0x67, 0x65, 0x72
   188                                  	; L_constants + 367:
   189 0000016F 03                      	db T_string	; "exit"
   190 00000170 0400000000000000        	dq 4
   191 00000178 65786974                	db 0x65, 0x78, 0x69, 0x74
   192                                  	; L_constants + 380:
   193 0000017C 03                      	db T_string	; "integer->real"
   194 0000017D 0D00000000000000        	dq 13
   195 00000185 696E74656765722D        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x2D
   196 0000018D 3E7265616C              	db 0x3E, 0x72, 0x65, 0x61, 0x6C
   197                                  	; L_constants + 402:
   198 00000192 03                      	db T_string	; "fraction->real"
   199 00000193 0E00000000000000        	dq 14
   200 0000019B 6672616374696F6E        	db 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E
   201 000001A3 2D3E7265616C            	db 0x2D, 0x3E, 0x72, 0x65, 0x61, 0x6C
   202                                  	; L_constants + 425:
   203 000001A9 03                      	db T_string	; "char->integer"
   204 000001AA 0D00000000000000        	dq 13
   205 000001B2 636861722D3E696E        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x3E, 0x69, 0x6E
   206 000001BA 7465676572              	db 0x74, 0x65, 0x67, 0x65, 0x72
   207                                  	; L_constants + 447:
   208 000001BF 03                      	db T_string	; "integer->char"
   209 000001C0 0D00000000000000        	dq 13
   210 000001C8 696E74656765722D        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x2D
   211 000001D0 3E63686172              	db 0x3E, 0x63, 0x68, 0x61, 0x72
   212                                  	; L_constants + 469:
   213 000001D5 03                      	db T_string	; "trng"
   214 000001D6 0400000000000000        	dq 4
   215 000001DE 74726E67                	db 0x74, 0x72, 0x6E, 0x67
   216                                  	; L_constants + 482:
   217 000001E2 03                      	db T_string	; "zero?"
   218 000001E3 0500000000000000        	dq 5
   219 000001EB 7A65726F3F              	db 0x7A, 0x65, 0x72, 0x6F, 0x3F
   220                                  	; L_constants + 496:
   221 000001F0 03                      	db T_string	; "integer?"
   222 000001F1 0800000000000000        	dq 8
   223 000001F9 696E74656765723F        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x3F
   224                                  	; L_constants + 513:
   225 00000201 03                      	db T_string	; "__bin-apply"
   226 00000202 0B00000000000000        	dq 11
   227 0000020A 5F5F62696E2D6170        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x70
   228 00000212 706C79                  	db 0x70, 0x6C, 0x79
   229                                  	; L_constants + 533:
   230 00000215 03                      	db T_string	; "__bin-add-rr"
   231 00000216 0C00000000000000        	dq 12
   232 0000021E 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   233 00000226 642D7272                	db 0x64, 0x2D, 0x72, 0x72
   234                                  	; L_constants + 554:
   235 0000022A 03                      	db T_string	; "__bin-sub-rr"
   236 0000022B 0C00000000000000        	dq 12
   237 00000233 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   238 0000023B 622D7272                	db 0x62, 0x2D, 0x72, 0x72
   239                                  	; L_constants + 575:
   240 0000023F 03                      	db T_string	; "__bin-mul-rr"
   241 00000240 0C00000000000000        	dq 12
   242 00000248 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   243 00000250 6C2D7272                	db 0x6C, 0x2D, 0x72, 0x72
   244                                  	; L_constants + 596:
   245 00000254 03                      	db T_string	; "__bin-div-rr"
   246 00000255 0C00000000000000        	dq 12
   247 0000025D 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   248 00000265 762D7272                	db 0x76, 0x2D, 0x72, 0x72
   249                                  	; L_constants + 617:
   250 00000269 03                      	db T_string	; "__bin-add-qq"
   251 0000026A 0C00000000000000        	dq 12
   252 00000272 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   253 0000027A 642D7171                	db 0x64, 0x2D, 0x71, 0x71
   254                                  	; L_constants + 638:
   255 0000027E 03                      	db T_string	; "__bin-sub-qq"
   256 0000027F 0C00000000000000        	dq 12
   257 00000287 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   258 0000028F 622D7171                	db 0x62, 0x2D, 0x71, 0x71
   259                                  	; L_constants + 659:
   260 00000293 03                      	db T_string	; "__bin-mul-qq"
   261 00000294 0C00000000000000        	dq 12
   262 0000029C 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   263 000002A4 6C2D7171                	db 0x6C, 0x2D, 0x71, 0x71
   264                                  	; L_constants + 680:
   265 000002A8 03                      	db T_string	; "__bin-div-qq"
   266 000002A9 0C00000000000000        	dq 12
   267 000002B1 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   268 000002B9 762D7171                	db 0x76, 0x2D, 0x71, 0x71
   269                                  	; L_constants + 701:
   270 000002BD 03                      	db T_string	; "__bin-add-zz"
   271 000002BE 0C00000000000000        	dq 12
   272 000002C6 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   273 000002CE 642D7A7A                	db 0x64, 0x2D, 0x7A, 0x7A
   274                                  	; L_constants + 722:
   275 000002D2 03                      	db T_string	; "__bin-sub-zz"
   276 000002D3 0C00000000000000        	dq 12
   277 000002DB 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   278 000002E3 622D7A7A                	db 0x62, 0x2D, 0x7A, 0x7A
   279                                  	; L_constants + 743:
   280 000002E7 03                      	db T_string	; "__bin-mul-zz"
   281 000002E8 0C00000000000000        	dq 12
   282 000002F0 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   283 000002F8 6C2D7A7A                	db 0x6C, 0x2D, 0x7A, 0x7A
   284                                  	; L_constants + 764:
   285 000002FC 03                      	db T_string	; "__bin-div-zz"
   286 000002FD 0C00000000000000        	dq 12
   287 00000305 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   288 0000030D 762D7A7A                	db 0x76, 0x2D, 0x7A, 0x7A
   289                                  	; L_constants + 785:
   290 00000311 03                      	db T_string	; "error"
   291 00000312 0500000000000000        	dq 5
   292 0000031A 6572726F72              	db 0x65, 0x72, 0x72, 0x6F, 0x72
   293                                  	; L_constants + 799:
   294 0000031F 03                      	db T_string	; "__bin-less-than-rr"
   295 00000320 1200000000000000        	dq 18
   296 00000328 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   297 00000330 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   298 00000338 7272                    	db 0x72, 0x72
   299                                  	; L_constants + 826:
   300 0000033A 03                      	db T_string	; "__bin-less-than-qq"
   301 0000033B 1200000000000000        	dq 18
   302 00000343 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   303 0000034B 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   304 00000353 7171                    	db 0x71, 0x71
   305                                  	; L_constants + 853:
   306 00000355 03                      	db T_string	; "__bin-less-than-zz"
   307 00000356 1200000000000000        	dq 18
   308 0000035E 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   309 00000366 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   310 0000036E 7A7A                    	db 0x7A, 0x7A
   311                                  	; L_constants + 880:
   312 00000370 03                      	db T_string	; "__bin-equal-rr"
   313 00000371 0E00000000000000        	dq 14
   314 00000379 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   315 00000381 75616C2D7272            	db 0x75, 0x61, 0x6C, 0x2D, 0x72, 0x72
   316                                  	; L_constants + 903:
   317 00000387 03                      	db T_string	; "__bin-equal-qq"
   318 00000388 0E00000000000000        	dq 14
   319 00000390 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   320 00000398 75616C2D7171            	db 0x75, 0x61, 0x6C, 0x2D, 0x71, 0x71
   321                                  	; L_constants + 926:
   322 0000039E 03                      	db T_string	; "__bin-equal-zz"
   323 0000039F 0E00000000000000        	dq 14
   324 000003A7 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   325 000003AF 75616C2D7A7A            	db 0x75, 0x61, 0x6C, 0x2D, 0x7A, 0x7A
   326                                  	; L_constants + 949:
   327 000003B5 03                      	db T_string	; "quotient"
   328 000003B6 0800000000000000        	dq 8
   329 000003BE 71756F7469656E74        	db 0x71, 0x75, 0x6F, 0x74, 0x69, 0x65, 0x6E, 0x74
   330                                  	; L_constants + 966:
   331 000003C6 03                      	db T_string	; "remainder"
   332 000003C7 0900000000000000        	dq 9
   333 000003CF 72656D61696E6465        	db 0x72, 0x65, 0x6D, 0x61, 0x69, 0x6E, 0x64, 0x65
   334 000003D7 72                      	db 0x72
   335                                  	; L_constants + 984:
   336 000003D8 03                      	db T_string	; "set-car!"
   337 000003D9 0800000000000000        	dq 8
   338 000003E1 7365742D63617221        	db 0x73, 0x65, 0x74, 0x2D, 0x63, 0x61, 0x72, 0x21
   339                                  	; L_constants + 1001:
   340 000003E9 03                      	db T_string	; "set-cdr!"
   341 000003EA 0800000000000000        	dq 8
   342 000003F2 7365742D63647221        	db 0x73, 0x65, 0x74, 0x2D, 0x63, 0x64, 0x72, 0x21
   343                                  	; L_constants + 1018:
   344 000003FA 03                      	db T_string	; "string-ref"
   345 000003FB 0A00000000000000        	dq 10
   346 00000403 737472696E672D72        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x72
   347 0000040B 6566                    	db 0x65, 0x66
   348                                  	; L_constants + 1037:
   349 0000040D 03                      	db T_string	; "vector-ref"
   350 0000040E 0A00000000000000        	dq 10
   351 00000416 766563746F722D72        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x72
   352 0000041E 6566                    	db 0x65, 0x66
   353                                  	; L_constants + 1056:
   354 00000420 03                      	db T_string	; "vector-set!"
   355 00000421 0B00000000000000        	dq 11
   356 00000429 766563746F722D73        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x73
   357 00000431 657421                  	db 0x65, 0x74, 0x21
   358                                  	; L_constants + 1076:
   359 00000434 03                      	db T_string	; "string-set!"
   360 00000435 0B00000000000000        	dq 11
   361 0000043D 737472696E672D73        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x73
   362 00000445 657421                  	db 0x65, 0x74, 0x21
   363                                  	; L_constants + 1096:
   364 00000448 03                      	db T_string	; "make-vector"
   365 00000449 0B00000000000000        	dq 11
   366 00000451 6D616B652D766563        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x76, 0x65, 0x63
   367 00000459 746F72                  	db 0x74, 0x6F, 0x72
   368                                  	; L_constants + 1116:
   369 0000045C 03                      	db T_string	; "make-string"
   370 0000045D 0B00000000000000        	dq 11
   371 00000465 6D616B652D737472        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x73, 0x74, 0x72
   372 0000046D 696E67                  	db 0x69, 0x6E, 0x67
   373                                  	; L_constants + 1136:
   374 00000470 03                      	db T_string	; "numerator"
   375 00000471 0900000000000000        	dq 9
   376 00000479 6E756D657261746F        	db 0x6E, 0x75, 0x6D, 0x65, 0x72, 0x61, 0x74, 0x6F
   377 00000481 72                      	db 0x72
   378                                  	; L_constants + 1154:
   379 00000482 03                      	db T_string	; "denominator"
   380 00000483 0B00000000000000        	dq 11
   381 0000048B 64656E6F6D696E61        	db 0x64, 0x65, 0x6E, 0x6F, 0x6D, 0x69, 0x6E, 0x61
   382 00000493 746F72                  	db 0x74, 0x6F, 0x72
   383                                  	; L_constants + 1174:
   384 00000496 03                      	db T_string	; "eq?"
   385 00000497 0300000000000000        	dq 3
   386 0000049F 65713F                  	db 0x65, 0x71, 0x3F
   387                                  	; L_constants + 1186:
   388 000004A2 03                      	db T_string	; "__integer-to-fracti...
   389 000004A3 1500000000000000        	dq 21
   390 000004AB 5F5F696E74656765        	db 0x5F, 0x5F, 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65
   391 000004B3 722D746F2D667261        	db 0x72, 0x2D, 0x74, 0x6F, 0x2D, 0x66, 0x72, 0x61
   392 000004BB 6374696F6E              	db 0x63, 0x74, 0x69, 0x6F, 0x6E
   393                                  	; L_constants + 1216:
   394 000004C0 03                      	db T_string	; "logand"
   395 000004C1 0600000000000000        	dq 6
   396 000004C9 6C6F67616E64            	db 0x6C, 0x6F, 0x67, 0x61, 0x6E, 0x64
   397                                  	; L_constants + 1231:
   398 000004CF 03                      	db T_string	; "logor"
   399 000004D0 0500000000000000        	dq 5
   400 000004D8 6C6F676F72              	db 0x6C, 0x6F, 0x67, 0x6F, 0x72
   401                                  	; L_constants + 1245:
   402 000004DD 03                      	db T_string	; "logxor"
   403 000004DE 0600000000000000        	dq 6
   404 000004E6 6C6F67786F72            	db 0x6C, 0x6F, 0x67, 0x78, 0x6F, 0x72
   405                                  	; L_constants + 1260:
   406 000004EC 03                      	db T_string	; "lognot"
   407 000004ED 0600000000000000        	dq 6
   408 000004F5 6C6F676E6F74            	db 0x6C, 0x6F, 0x67, 0x6E, 0x6F, 0x74
   409                                  	; L_constants + 1275:
   410 000004FB 03                      	db T_string	; "ash"
   411 000004FC 0300000000000000        	dq 3
   412 00000504 617368                  	db 0x61, 0x73, 0x68
   413                                  	; L_constants + 1287:
   414 00000507 03                      	db T_string	; "symbol?"
   415 00000508 0700000000000000        	dq 7
   416 00000510 73796D626F6C3F          	db 0x73, 0x79, 0x6D, 0x62, 0x6F, 0x6C, 0x3F
   417                                  	; L_constants + 1303:
   418 00000517 03                      	db T_string	; "uninterned-symbol?"
   419 00000518 1200000000000000        	dq 18
   420 00000520 756E696E7465726E        	db 0x75, 0x6E, 0x69, 0x6E, 0x74, 0x65, 0x72, 0x6E
   421 00000528 65642D73796D626F        	db 0x65, 0x64, 0x2D, 0x73, 0x79, 0x6D, 0x62, 0x6F
   422 00000530 6C3F                    	db 0x6C, 0x3F
   423                                  	; L_constants + 1330:
   424 00000532 03                      	db T_string	; "gensym?"
   425 00000533 0700000000000000        	dq 7
   426 0000053B 67656E73796D3F          	db 0x67, 0x65, 0x6E, 0x73, 0x79, 0x6D, 0x3F
   427                                  	; L_constants + 1346:
   428 00000542 03                      	db T_string	; "gensym"
   429 00000543 0600000000000000        	dq 6
   430 0000054B 67656E73796D            	db 0x67, 0x65, 0x6E, 0x73, 0x79, 0x6D
   431                                  	; L_constants + 1361:
   432 00000551 03                      	db T_string	; "frame"
   433 00000552 0500000000000000        	dq 5
   434 0000055A 6672616D65              	db 0x66, 0x72, 0x61, 0x6D, 0x65
   435                                  	; L_constants + 1375:
   436 0000055F 03                      	db T_string	; "break"
   437 00000560 0500000000000000        	dq 5
   438 00000568 627265616B              	db 0x62, 0x72, 0x65, 0x61, 0x6B
   439                                  	; L_constants + 1389:
   440 0000056D 03                      	db T_string	; "boolean-false?"
   441 0000056E 0E00000000000000        	dq 14
   442 00000576 626F6F6C65616E2D        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x2D
   443 0000057E 66616C73653F            	db 0x66, 0x61, 0x6C, 0x73, 0x65, 0x3F
   444                                  	; L_constants + 1412:
   445 00000584 03                      	db T_string	; "boolean-true?"
   446 00000585 0D00000000000000        	dq 13
   447 0000058D 626F6F6C65616E2D        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x2D
   448 00000595 747275653F              	db 0x74, 0x72, 0x75, 0x65, 0x3F
   449                                  	; L_constants + 1434:
   450 0000059A 03                      	db T_string	; "primitive?"
   451 0000059B 0A00000000000000        	dq 10
   452 000005A3 7072696D69746976        	db 0x70, 0x72, 0x69, 0x6D, 0x69, 0x74, 0x69, 0x76
   453 000005AB 653F                    	db 0x65, 0x3F
   454                                  	; L_constants + 1453:
   455 000005AD 03                      	db T_string	; "length"
   456 000005AE 0600000000000000        	dq 6
   457 000005B6 6C656E677468            	db 0x6C, 0x65, 0x6E, 0x67, 0x74, 0x68
   458                                  	; L_constants + 1468:
   459 000005BC 03                      	db T_string	; "make-list"
   460 000005BD 0900000000000000        	dq 9
   461 000005C5 6D616B652D6C6973        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x6C, 0x69, 0x73
   462 000005CD 74                      	db 0x74
   463                                  	; L_constants + 1486:
   464 000005CE 03                      	db T_string	; "return"
   465 000005CF 0600000000000000        	dq 6
   466 000005D7 72657475726E            	db 0x72, 0x65, 0x74, 0x75, 0x72, 0x6E
   467                                  	; L_constants + 1501:
   468 000005DD 11                      	db T_integer	; 1
   469 000005DE 0100000000000000        	dq 1
   470                                  	; L_constants + 1510:
   471 000005E6 11                      	db T_integer	; 2
   472 000005E7 0200000000000000        	dq 2
   473                                  	; L_constants + 1519:
   474 000005EF 11                      	db T_integer	; 3
   475 000005F0 0300000000000000        	dq 3
   476                                  	; L_constants + 1528:
   477 000005F8 11                      	db T_integer	; 4
   478 000005F9 0400000000000000        	dq 4
   479                                  	; L_constants + 1537:
   480 00000601 11                      	db T_integer	; 5
   481 00000602 0500000000000000        	dq 5
   482                                  	; L_constants + 1546:
   483 0000060A 11                      	db T_integer	; 6
   484 0000060B 0600000000000000        	dq 6
   485                                  	; L_constants + 1555:
   486 00000613 11                      	db T_integer	; 8
   487 00000614 0800000000000000        	dq 8
   488                                  
   489                                  
   490                                  extern printf, fprintf, stdout, stderr, fwrite, exit, putchar, getchar
   491                                  global main
   492                                  section .text
   493                                  main:
   494 00000000 C8000000                        enter 0, 0
   495 00000004 6A00                            push 0
   496 00000006 6A00                            push 0
   497 00000008 68[08020000]                    push Lend
   498 0000000D C8000000                        enter 0, 0
   499                                  
   500                                  	; preparing a non-tail-call
   501 00000011 48B8-                   	mov rax, L_constants + 1555
   501 00000013 [1306000000000000] 
   502 0000001B 50                      	push rax
   503 0000001C 48B8-                   	mov rax, L_constants + 1546
   503 0000001E [0A06000000000000] 
   504 00000026 50                      	push rax
   505 00000027 48B8-                   	mov rax, L_constants + 1537
   505 00000029 [0106000000000000] 
   506 00000031 50                      	push rax
   507 00000032 48B8-                   	mov rax, L_constants + 1528
   507 00000034 [F805000000000000] 
   508 0000003C 50                      	push rax
   509 0000003D 48B8-                   	mov rax, L_constants + 1519
   509 0000003F [EF05000000000000] 
   510 00000047 50                      	push rax
   511 00000048 48B8-                   	mov rax, L_constants + 1510
   511 0000004A [E605000000000000] 
   512 00000052 50                      	push rax
   513 00000053 48B8-                   	mov rax, L_constants + 1510
   513 00000055 [E605000000000000] 
   514 0000005D 50                      	push rax
   515 0000005E 48B8-                   	mov rax, L_constants + 1501
   515 00000060 [DD05000000000000] 
   516 00000068 50                      	push rax
   517 00000069 48B8-                   	mov rax, L_constants + 1501
   517 0000006B [DD05000000000000] 
   518 00000073 50                      	push rax
   519 00000074 6A09                    	push 9	; arg count
   520 00000076 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   521 0000007B E8F3020000              	call malloc
   522 00000080 50                      	push rax
   523 00000081 BF00000000              	mov rdi, 8 * 0	; new rib
   524 00000086 E8E8020000              	call malloc
   525 0000008B 50                      	push rax
   526 0000008C BF08000000              	mov rdi, 8 * 1	; extended env
   527 00000091 E8DD020000              	call malloc
   528 00000096 488B7D10                	mov rdi, ENV
   529 0000009A BE00000000              	mov rsi, 0
   530 0000009F BA01000000              	mov rdx, 1
   531                                  .L_lambda_opt_env_loop_000b:	; ext_env[i + 1] <-- env[i]
   532 000000A4 4883FE00                	cmp rsi, 0
   533 000000A8 7410                    	je .L_lambda_opt_env_end_000b
   534 000000AA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
   535 000000AE 48890CD0                	mov qword [rax + 8 * rdx], rcx
   536 000000B2 48FFC6                  	inc rsi
   537 000000B5 48FFC2                  	inc rdx
   538 000000B8 EBEA                    	jmp .L_lambda_opt_env_loop_000b
   539                                  .L_lambda_opt_env_end_000b:
   540 000000BA 5B                      	pop rbx
   541 000000BB BE00000000              	mov rsi, 0
   542                                  .L_lambda_opt_params_loop_000b:	; copy params
   543 000000C0 4883FE00                	cmp rsi, 0
   544 000000C4 740E                    	je .L_lambda_opt_params_end_000b
   545 000000C6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   546 000000CB 488914F3                	mov qword [rbx + 8 * rsi], rdx
   547 000000CF 48FFC6                  	inc rsi
   548 000000D2 EBEC                    	jmp .L_lambda_opt_params_loop_000b
   549                                  .L_lambda_opt_params_end_000b:
   550 000000D4 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   551 000000D7 4889C3                  	mov rbx, rax
   552 000000DA 58                      	pop rax
   553 000000DB C60004                  	mov byte [rax], T_closure
   554 000000DE 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   555 000000E2 48C74009[EF000000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_000b
   556 000000EA E90A010000              	jmp .L_lambda_opt_end_000b
   557                                  .L_lambda_opt_code_000b:
   558 000000EF 4C8B542410              	mov r10, qword [rsp + 8 * 2]         ; r10 = number of args 
   559 000000F4 4983FA01                	cmp r10, 1         ; Compare r10 (argument count) with required params
   560 000000F8 7407                    	je .L_lambda_opt_arity_check_exact_000b	; Jump if arity matches
   561 000000FA 7F4C                    	jg .L_lambda_opt_arity_check_more_000b	; Jump if more arguments passed
   562 000000FC E93F020000              	jmp L_error_incorrect_arity_opt
   563                                  .L_lambda_opt_arity_check_exact_000b:
   564 00000101 4D89D6                  	mov r14, r10 ; r14 = num of iterations (args)
   565 00000104 4983C603                	add r14, 3 ; add 3 first stack values
   566 00000108 41BF00000000            	mov r15, 0 ; r15 = index
   567 0000010E 4883EC08                	sub rsp, 8 ; Allocate one extra space on the stack
   568 00000112 48C70424[01000000]      	mov qword [rsp], sob_nil ; Initialize the new space with sob_nil
   569 0000011A EB00                    	jmp .L_lambda_opt_stack_shrink_loop_000b
   570                                  .L_lambda_opt_stack_shrink_loop_000b:
   571 0000011C 4983FE00                	cmp r14, 0
   572 00000120 7E11                    	jle .L_make_lambda_opt_exact_finish_000b
   573 00000122 4E8B5CFC08              	mov r11, qword [rsp + 8 * (r15 + 1)] ; r11 = value of param
   574 00000127 4E891CFC                	mov qword [rsp + 8 * r15], r11 ; move param to the right place
   575 0000012B 49FFCE                  	dec r14 ; next loop value
   576 0000012E 49FFC7                  	inc r15 ; update i
   577 00000131 EBE9                    	jmp .L_lambda_opt_stack_shrink_loop_000b
   578                                  .L_make_lambda_opt_exact_finish_000b:
   579 00000133 4AC704FC[01000000]      	mov qword [rsp + 8 * r15], sob_nil ; Add sob_nil to the stack at the end
   580 0000013B 49FFC2                  	inc r10
   581 0000013E 4C89542410              	mov qword [rsp + 8 * 2], r10
   582 00000143 E9A5000000              	jmp .L_lambda_opt_stack_adjusted_000b
   583                                  .L_lambda_opt_arity_check_more_000b:
   584 00000148 4D89D6                  	mov r14, r10 ; r14 = num args
   585 0000014B 4D89D7                  	mov r15, r10 ; r15 = num args
   586 0000014E 41B901000000            	mov r9, 1; r9 = number of params 
   587 00000154 4D29CE                  	sub r14, r9 ; r14 = extra args
   588 00000157 4D01F1                  	add r9, r14 ; r9 = num args
   589 0000015A 48BA-                   	mov rdx, sob_nil ; rdx = point to our list
   589 0000015C [0100000000000000] 
   590 00000164 EB00                    	jmp .L_make_lambda_opt_arg_list_000b
   591                                  .L_make_lambda_opt_arg_list_000b:
   592 00000166 4983FE00                	cmp r14, 0
   593 0000016A 7E2C                    	jle .L_make_lambda_opt_stack_fixed_000b
   594 0000016C 4A8B7CCC10              	mov rdi, qword [rsp + 8 * (r9 + 2)] ; rdi = Load the last arg
   595 00000171 4989C0                  	mov r8, rax                         ; r8= temp closure of rax 
   596 00000174 41BA11000000            	mov r10, (1 + 8 + 8)                ; r10 = Allocate memory for the new pair (T_PAIR + CAR + CDR)
   597 0000017A E8F4010000              	call malloc                         ; Allocate memory, result in rax
   598 0000017F C60021                  	mov byte [rax], T_pair              ; Mark as a pair
   599 00000182 48897801                	mov qword [rax + 1], rdi         ; CAR: current argument
   600 00000186 48895009                	mov qword [rax + 1 + 8], rdx           ; CDR: current list
   601 0000018A 4889C2                  	mov rdx, rax                        ; rdx = Update rdx to point to the new pair
   602 0000018D 4C89C0                  	mov rax, r8                         ; Restore closure to rax
   603 00000190 49FFC9                  	dec r9                              ; args index minus 1
   604 00000193 49FFCE                  	dec r14                             ; next iteration
   605 00000196 EBCE                    	jmp .L_make_lambda_opt_arg_list_000b
   606                                  .L_make_lambda_opt_stack_fixed_000b:
   607 00000198 4D89FE                  	mov r14, r15 ; r14 = num args
   608 0000019B 4D89F8                  	mov r8, r15 ; r14 = num args and num of iterations 
   609 0000019E 4983C003                	add r8, 3 ; add the first 3 things in the stuff to num of iterations
   610 000001A2 41BA01000000            	mov r10, 1; r10 = num of params
   611 000001A8 4D29D6                  	sub r14, r10 ; r14 = extra args
   612 000001AB 4D29F0                  	sub r8, r14 ; r8 = number of iterations (check this)
   613 000001AE 49FFCE                  	dec r14 ; how much we need to change stack wise?
   614 000001B1 4A8954C410              	mov qword [rsp + 8 * (r8 + 2)], rdx ; Add list to the right place
   615 000001B6 EB00                    	jmp .L_lambda_opt_stack_shrink_loop_more_000b
   616                                  .L_lambda_opt_stack_shrink_loop_more_000b:
   617 000001B8 4983F800                	cmp r8, 0
   618 000001BC 7E15                    	jle .L_make_lambda_opt_more_finish_000b
   619 000001BE 4D8D60FF                	lea r12, [r8 - 1]; r12 = position of the arg we need to move
   620 000001C2 4E8B1CE4                	mov r11, qword [rsp + 8 * r12] 
   621 000001C6 4D8D26                  	lea r12, [r14]
   622 000001C9 4E895CC408              	mov qword [rsp + 8 * (r8 + 1)], r11 
   623 000001CE 49FFC8                  	dec r8 ; next iteration
   624 000001D1 EBE5                    	jmp .L_lambda_opt_stack_shrink_loop_more_000b
   625                                  .L_make_lambda_opt_more_finish_000b:
   626 000001D3 4D89F8                  	mov r8, r15 ; num of args
   627 000001D6 41BA01000000            	mov r10, 1
   628 000001DC 4D29D0                  	sub r8, r10 ; num of new args
   629 000001DF 49FFC0                  	inc r8
   630 000001E2 4C89442420              	mov qword [rsp + 8 * 4], r8
   631 000001E7 4883C410                	add rsp, 8 * 2  ; 
   632 000001EB EB00                    	jmp .L_lambda_opt_stack_adjusted_000b
   633                                  .L_lambda_opt_stack_adjusted_000b:
   634 000001ED C8000000                	enter 0, 0
   635 000001F1 488B4528                	mov rax, PARAM(1)	; param d
   636 000001F5 C9                      	leave
   637 000001F6 C21800                  	ret AND_KILL_FRAME(1)
   638                                  .L_lambda_opt_end_000b:	; new closure is in rax
   639 000001F9 803804                  	cmp byte [rax], T_closure
   640 000001FC 0F85C8000000            	jne L_error_non_closure
   641 00000202 FF7001                  	push SOB_CLOSURE_ENV(rax)
   642 00000205 FF5009                  	call SOB_CLOSURE_CODE(rax)
   643                                  Lend:
   644 00000208 4889C7                  	mov rdi, rax
   645 0000020B E8B8030000              	call print_sexpr_if_not_void
   646 00000210 48BF-                   mov rdi, fmt_memory_usage
   646 00000212 [B406000000000000] 
   647 0000021A 488B3425[3A070000]              mov rsi, qword [top_of_memory]
   648 00000222 4881EE[00000000]                sub rsi, memory
   649 00000229 B800000000                      mov rax, 0
   650                                          ENTER
    44 0000022E C8000000            <1>  enter 0, 0
    45 00000232 4883E4F0            <1>  and rsp, ~15
   651 00000236 E8(00000000)                    call printf
   652                                          LEAVE
    49 0000023B C9                  <1>  leave
   653 0000023C B800000000                      mov rax, 0
   654 00000241 E8(00000000)                    call exit
   655                                  
   656                                  L_error_fvar_undefined:
   657 00000246 50                              push rax
   658 00000247 488B3C25[00000000]              mov rdi, qword [stderr]  ; destination
   659 0000024F 48BE-                           mov rsi, fmt_undefined_free_var_1
   659 00000251 [1C06000000000000] 
   660 00000259 B800000000                      mov rax, 0
   661                                          ENTER
    44 0000025E C8000000            <1>  enter 0, 0
    45 00000262 4883E4F0            <1>  and rsp, ~15
   662 00000266 E8(00000000)                    call fprintf
   663                                          LEAVE
    49 0000026B C9                  <1>  leave
   664 0000026C 58                              pop rax
   665 0000026D 488B4001                        mov rax, qword [rax + 1] ; string
   666 00000271 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
   667 00000275 BE01000000                      mov rsi, 1               ; sizeof(char)
   668 0000027A 488B5001                        mov rdx, qword [rax + 1] ; string-length
   669 0000027E 488B0C25[00000000]              mov rcx, qword [stderr]  ; destination
   670 00000286 B800000000                      mov rax, 0
   671                                          ENTER
    44 0000028B C8000000            <1>  enter 0, 0
    45 0000028F 4883E4F0            <1>  and rsp, ~15
   672 00000293 E8(00000000)                    call fwrite
   673                                          LEAVE
    49 00000298 C9                  <1>  leave
   674 00000299 488B3C25[00000000]              mov rdi, [stderr]       ; destination
   675 000002A1 48BE-                           mov rsi, fmt_undefined_free_var_2
   675 000002A3 [3306000000000000] 
   676 000002AB B800000000                      mov rax, 0
   677                                          ENTER
    44 000002B0 C8000000            <1>  enter 0, 0
    45 000002B4 4883E4F0            <1>  and rsp, ~15
   678 000002B8 E8(00000000)                    call fprintf
   679                                          LEAVE
    49 000002BD C9                  <1>  leave
   680 000002BE 48C7C0F6FFFFFF                  mov rax, -10
   681 000002C5 E8(00000000)                    call exit
   682                                  
   683                                  L_error_non_closure:
   684 000002CA 488B3C25[00000000]              mov rdi, qword [stderr]
   685 000002D2 48BE-                           mov rsi, fmt_non_closure
   685 000002D4 [EA06000000000000] 
   686 000002DC B800000000                      mov rax, 0
   687                                          ENTER
    44 000002E1 C8000000            <1>  enter 0, 0
    45 000002E5 4883E4F0            <1>  and rsp, ~15
   688 000002E9 E8(00000000)                    call fprintf
   689                                          LEAVE
    49 000002EE C9                  <1>  leave
   690 000002EF 48C7C0FEFFFFFF                  mov rax, -2
   691 000002F6 E8(00000000)                    call exit
   692                                  
   693                                  L_error_improper_list:
   694 000002FB 488B3C25[00000000]      	mov rdi, qword [stderr]
   695 00000303 48BE-                   	mov rsi, fmt_error_improper_list
   695 00000305 [1207000000000000] 
   696 0000030D B800000000              	mov rax, 0
   697                                          ENTER
    44 00000312 C8000000            <1>  enter 0, 0
    45 00000316 4883E4F0            <1>  and rsp, ~15
   698 0000031A E8(00000000)            	call fprintf
   699                                          LEAVE
    49 0000031F C9                  <1>  leave
   700 00000320 48C7C0F9FFFFFF          	mov rax, -7
   701 00000327 E8(00000000)            	call exit
   702                                  
   703                                  L_error_incorrect_arity_simple:
   704 0000032C 488B3C25[00000000]              mov rdi, qword [stderr]
   705 00000334 48BE-                           mov rsi, fmt_incorrect_arity_simple
   705 00000336 [5506000000000000] 
   706 0000033E EB12                            jmp L_error_incorrect_arity_common
   707                                  L_error_incorrect_arity_opt:
   708 00000340 488B3C25[00000000]              mov rdi, qword [stderr]
   709 00000348 48BE-                           mov rsi, fmt_incorrect_arity_opt
   709 0000034A [8006000000000000] 
   710                                  L_error_incorrect_arity_common:
   711 00000352 5A                              pop rdx
   712 00000353 59                              pop rcx
   713 00000354 B800000000                      mov rax, 0
   714                                          ENTER
    44 00000359 C8000000            <1>  enter 0, 0
    45 0000035D 4883E4F0            <1>  and rsp, ~15
   715 00000361 E8(00000000)                    call fprintf
   716                                          LEAVE
    49 00000366 C9                  <1>  leave
   717 00000367 48C7C0FAFFFFFF                  mov rax, -6
   718 0000036E E8(00000000)                    call exit
   719                                  
   720                                  section .data
   721                                  fmt_undefined_free_var_1:
   722 0000061C 212121205468652066-             db `!!! The free variable \0`
   722 00000625 726565207661726961-
   722 0000062E 626C652000         
   723                                  fmt_undefined_free_var_2:
   724 00000633 207761732075736564-             db ` was used before it was defined.\n\0`
   724 0000063C 206265666F72652069-
   724 00000645 742077617320646566-
   724 0000064E 696E65642E0A00     
   725                                  fmt_incorrect_arity_simple:
   726 00000655 212121204578706563-             db `!!! Expected %ld arguments, but given %ld\n\0`
   726 0000065E 74656420256C642061-
   726 00000667 7267756D656E74732C-
   726 00000670 206275742067697665-
   726 00000679 6E20256C640A00     
   727                                  fmt_incorrect_arity_opt:
   728 00000680 212121204578706563-             db `!!! Expected at least %ld arguments, but given %ld\n\0`
   728 00000689 746564206174206C65-
   728 00000692 61737420256C642061-
   728 0000069B 7267756D656E74732C-
   728 000006A4 206275742067697665-
   728 000006AD 6E20256C640A00     
   729                                  fmt_memory_usage:
   730 000006B4 0A2121212055736564-             db `\n!!! Used %ld bytes of dynamically-allocated memory\n\n\0`
   730 000006BD 20256C642062797465-
   730 000006C6 73206F662064796E61-
   730 000006CF 6D6963616C6C792D61-
   730 000006D8 6C6C6F636174656420-
   730 000006E1 6D656D6F72790A0A00 
   731                                  fmt_non_closure:
   732 000006EA 21212120417474656D-             db `!!! Attempting to apply a non-closure!\n\0`
   732 000006F3 7074696E6720746F20-
   732 000006FC 6170706C792061206E-
   732 00000705 6F6E2D636C6F737572-
   732 0000070E 65210A00           
   733                                  fmt_error_improper_list:
   734 00000712 212121205468652061-     	db `!!! The argument is not a proper list!\n\0`
   734 0000071B 7267756D656E742069-
   734 00000724 73206E6F7420612070-
   734 0000072D 726F706572206C6973-
   734 00000736 74210A00           
   735                                  
   736                                  section .bss
   737                                  memory:
   738 00000000 <res 40000000h>         	resb gbytes(1)
   739                                  
   740                                  section .data
   741                                  top_of_memory:
   742 0000073A [0000000000000000]              dq memory
   743                                  
   744                                  section .text
   745                                  malloc:
   746 00000373 488B0425[3A070000]              mov rax, qword [top_of_memory]
   747 0000037B 48013C25[3A070000]              add qword [top_of_memory], rdi
   748 00000383 C3                              ret
   749                                  
   750                                  L_code_ptr_return:
   751 00000384 48837C241002            	cmp qword [rsp + 8*2], 2
   752 0000038A 0F85461C0000            	jne L_error_arg_count_2
   753 00000390 488B4C2418              	mov rcx, qword [rsp + 8*3]
   754                                  	assert_integer(rcx)
    53 00000395 803911              <1>  cmp byte [%1], %2
    54 00000398 0F85D71C0000        <1>  jne L_error_incorrect_type
   755 0000039E 488B4901                	mov rcx, qword [rcx + 1]
   756 000003A2 4883F900                	cmp rcx, 0
   757 000003A6 0F8C5E1B0000            	jl L_error_integer_range
   758 000003AC 488B442420              	mov rax, qword [rsp + 8*4]
   759                                  .L0:
   760 000003B1 4883F900                        cmp rcx, 0
   761 000003B5 7409                            je .L1
   762 000003B7 488B6D00                	mov rbp, qword [rbp]
   763 000003BB 48FFC9                  	dec rcx
   764 000003BE 7FF1                    	jg .L0
   765                                  .L1:
   766 000003C0 4889EC                  	mov rsp, rbp
   767 000003C3 5D                      	pop rbp
   768 000003C4 5B                              pop rbx
   769 000003C5 488B4C2408                      mov rcx, qword [rsp + 8*1]
   770 000003CA 488D64CC10                      lea rsp, [rsp + 8*rcx + 8*2]
   771 000003CF FFE3                    	jmp rbx
   772                                  
   773                                  L_code_ptr_make_list:
   774 000003D1 C8000000                	enter 0, 0
   775 000003D5 48837D1801                      cmp COUNT, 1
   776 000003DA 740C                            je .L0
   777 000003DC 48837D1802                      cmp COUNT, 2
   778 000003E1 7411                            je .L1
   779 000003E3 E9231C0000                      jmp L_error_arg_count_12
   780                                  .L0:
   781 000003E8 49B9-                           mov r9, sob_void
   781 000003EA [0000000000000000] 
   782 000003F2 EB04                            jmp .L2
   783                                  .L1:
   784 000003F4 4C8B4D28                        mov r9, PARAM(1)
   785                                  .L2:
   786 000003F8 488B4D20                        mov rcx, PARAM(0)
   787                                          assert_integer(rcx)
    53 000003FC 803911              <1>  cmp byte [%1], %2
    54 000003FF 0F85701C0000        <1>  jne L_error_incorrect_type
   788 00000405 488B4901                        mov rcx, qword [rcx + 1]
   789 00000409 4883F900                        cmp rcx, 0
   790 0000040D 0F8C281B0000                    jl L_error_arg_negative
   791 00000413 49B8-                           mov r8, sob_nil
   791 00000415 [0100000000000000] 
   792                                  .L3:
   793 0000041D 4883F900                        cmp rcx, 0
   794 00000421 7E1D                            jle .L4
   795 00000423 BF11000000                      mov rdi, 1 + 8 + 8
   796 00000428 E846FFFFFF                      call malloc
   797 0000042D C60021                          mov byte [rax], T_pair
   798 00000430 4C894801                        mov qword [rax + 1], r9
   799 00000434 4C894009                        mov qword [rax + 1 + 8], r8
   800 00000438 4989C0                          mov r8, rax
   801 0000043B 48FFC9                          dec rcx
   802 0000043E EBDD                            jmp .L3
   803                                  .L4:
   804 00000440 4C89C0                          mov rax, r8
   805 00000443 48837D1802                      cmp COUNT, 2
   806 00000448 7404                            je .L5
   807 0000044A C9                              leave
   808 0000044B C21800                          ret AND_KILL_FRAME(1)
   809                                  .L5:
   810 0000044E C9                      	leave
   811 0000044F C22000                  	ret AND_KILL_FRAME(2)
   812                                  
   813                                  L_code_ptr_is_primitive:
   814 00000452 C8000000                	enter 0, 0
   815 00000456 48837D1801              	cmp COUNT, 1
   816 0000045B 0F85401B0000            	jne L_error_arg_count_1
   817 00000461 488B4520                	mov rax, PARAM(0)
   818                                  	assert_closure(rax)
    53 00000465 803804              <1>  cmp byte [%1], %2
    54 00000468 0F85071C0000        <1>  jne L_error_incorrect_type
   819 0000046E 4883780100              	cmp SOB_CLOSURE_ENV(rax), 0
   820 00000473 750C                    	jne .L_false
   821 00000475 48B8-                   	mov rax, sob_boolean_true
   821 00000477 [0300000000000000] 
   822 0000047F EB0A                    	jmp .L_end
   823                                  .L_false:
   824 00000481 48B8-                   	mov rax, sob_boolean_false
   824 00000483 [0200000000000000] 
   825                                  .L_end:
   826 0000048B C9                      	leave
   827 0000048C C21800                  	ret AND_KILL_FRAME(1)
   828                                  
   829                                  L_code_ptr_length:
   830 0000048F C8000000                	enter 0, 0
   831 00000493 48837D1801              	cmp COUNT, 1
   832 00000498 0F85031B0000            	jne L_error_arg_count_1
   833 0000049E 488B5D20                	mov rbx, PARAM(0)
   834 000004A2 BF00000000              	mov rdi, 0
   835                                  .L:
   836 000004A7 803B01                  	cmp byte [rbx], T_nil
   837 000004AA 7412                    	je .L_end
   838                                  	assert_pair(rbx)
    53 000004AC 803B21              <1>  cmp byte [%1], %2
    54 000004AF 0F85C01B0000        <1>  jne L_error_incorrect_type
   839 000004B5 488B5B09                	mov rbx, SOB_PAIR_CDR(rbx)
   840 000004B9 48FFC7                  	inc rdi
   841 000004BC EBE9                    	jmp .L
   842                                  .L_end:
   843 000004BE E82D1A0000              	call make_integer
   844 000004C3 C9                      	leave
   845 000004C4 C21800                  	ret AND_KILL_FRAME(1)
   846                                  
   847                                  L_code_ptr_break:
   848 000004C7 48837C241000                    cmp qword [rsp + 8 * 2], 0
   849 000004CD 0F85991A0000                    jne L_error_arg_count_0
   850 000004D3 CC                              int3
   851 000004D4 48B8-                           mov rax, sob_void
   851 000004D6 [0000000000000000] 
   852 000004DE C21000                          ret AND_KILL_FRAME(0)        
   853                                  
   854                                  L_code_ptr_frame:
   855 000004E1 C8000000                        enter 0, 0
   856 000004E5 48837D1800                      cmp COUNT, 0
   857 000004EA 0F857C1A0000                    jne L_error_arg_count_0
   858                                  
   859 000004F0 48BF-                           mov rdi, fmt_frame
   859 000004F2 [4207000000000000] 
   860 000004FA 488B7500                        mov rsi, qword [rbp]    ; old rbp
   861 000004FE 488B5608                        mov rdx, qword [rsi + 8*1] ; ret addr
   862 00000502 488B4E10                        mov rcx, qword [rsi + 8*2] ; lexical environment
   863 00000506 4C8B4618                        mov r8, qword [rsi + 8*3] ; count
   864 0000050A 4C8D4E20                        lea r9, [rsi + 8*4]       ; address of argument 0
   865 0000050E 6A00                            push 0
   866 00000510 4151                            push r9
   867 00000512 4150                            push r8                   ; we'll use it when printing the params
   868 00000514 B800000000                      mov rax, 0
   869                                          
   870                                          ENTER
    44 00000519 C8000000            <1>  enter 0, 0
    45 0000051D 4883E4F0            <1>  and rsp, ~15
   871 00000521 E8(00000000)                    call printf
   872                                          LEAVE
    49 00000526 C9                  <1>  leave
   873                                  
   874                                  .L:
   875 00000527 488B0C24                        mov rcx, qword [rsp]
   876 0000052B 4883F900                        cmp rcx, 0
   877 0000052F 7467                            je .L_out
   878 00000531 48BF-                           mov rdi, fmt_frame_param_prefix
   878 00000533 [7B07000000000000] 
   879 0000053B 488B742410                      mov rsi, qword [rsp + 8*2]
   880 00000540 B800000000                      mov rax, 0
   881                                          
   882                                          ENTER
    44 00000545 C8000000            <1>  enter 0, 0
    45 00000549 4883E4F0            <1>  and rsp, ~15
   883 0000054D E8(00000000)                    call printf
   884                                          LEAVE
    49 00000552 C9                  <1>  leave
   885                                  
   886 00000553 488B0C24                        mov rcx, qword [rsp]
   887 00000557 48FFC9                          dec rcx
   888 0000055A 48890C24                        mov qword [rsp], rcx    ; dec arg count
   889 0000055E 48FF442410                      inc qword [rsp + 8*2]   ; increment index of current arg
   890 00000563 488B7C2408                      mov rdi, qword [rsp + 8*1] ; addr of addr current arg
   891 00000568 4C8D4F08                        lea r9, [rdi + 8]          ; addr of next arg
   892 0000056C 4C894C2408                      mov qword [rsp + 8*1], r9  ; backup addr of next arg
   893 00000571 488B3F                          mov rdi, qword [rdi]       ; addr of current arg
   894 00000574 E87B000000                      call print_sexpr
   895 00000579 48BF-                           mov rdi, fmt_newline
   895 0000057B [A707000000000000] 
   896 00000583 B800000000                      mov rax, 0
   897                                          ENTER
    44 00000588 C8000000            <1>  enter 0, 0
    45 0000058C 4883E4F0            <1>  and rsp, ~15
   898 00000590 E8(00000000)                    call printf
   899                                          LEAVE
    49 00000595 C9                  <1>  leave
   900 00000596 EB8F                            jmp .L
   901                                  .L_out:
   902 00000598 48BF-                           mov rdi, fmt_frame_continue
   902 0000059A [8C07000000000000] 
   903 000005A2 B800000000                      mov rax, 0
   904                                          ENTER
    44 000005A7 C8000000            <1>  enter 0, 0
    45 000005AB 4883E4F0            <1>  and rsp, ~15
   905 000005AF E8(00000000)                    call printf
   906 000005B4 E8(00000000)                    call getchar
   907                                          LEAVE
    49 000005B9 C9                  <1>  leave
   908                                          
   909 000005BA 48B8-                           mov rax, sob_void
   909 000005BC [0000000000000000] 
   910 000005C4 C9                              leave
   911 000005C5 C21000                          ret AND_KILL_FRAME(0)
   912                                          
   913                                  print_sexpr_if_not_void:
   914 000005C8 4881FF[00000000]        	cmp rdi, sob_void
   915 000005CF 7422                    	je .done
   916 000005D1 E81E000000              	call print_sexpr
   917 000005D6 48BF-                   	mov rdi, fmt_newline
   917 000005D8 [A707000000000000] 
   918 000005E0 B800000000              	mov rax, 0
   919                                  	ENTER
    44 000005E5 C8000000            <1>  enter 0, 0
    45 000005E9 4883E4F0            <1>  and rsp, ~15
   920 000005ED E8(00000000)            	call printf
   921                                  	LEAVE
    49 000005F2 C9                  <1>  leave
   922                                  .done:
   923 000005F3 C3                      	ret
   924                                  
   925                                  section .data
   926                                  fmt_frame:
   927 00000742 524250203D2025703B-             db `RBP = %p; ret addr = %p; lex env = %p; param count = %d\n\0`
   927 0000074B 207265742061646472-
   927 00000754 203D2025703B206C65-
   927 0000075D 7820656E76203D2025-
   927 00000766 703B20706172616D20-
   927 0000076F 636F756E74203D2025-
   927 00000778 640A00             
   928                                  fmt_frame_param_prefix:
   929 0000077B 3D3D5B706172616D20-             db `==[param %d]==> \0`
   929 00000784 25645D3D3D3E2000   
   930                                  fmt_frame_continue:
   931 0000078C 486974203C456E7465-             db `Hit <Enter> to continue...\0`
   931 00000795 723E20746F20636F6E-
   931 0000079E 74696E75652E2E2E00 
   932                                  fmt_newline:
   933 000007A7 0A00                    	db `\n\0`
   934                                  fmt_void:
   935 000007A9 233C766F69643E00        	db `#<void>\0`
   936                                  fmt_nil:
   937 000007B1 282900                  	db `()\0`
   938                                  fmt_boolean_false:
   939 000007B4 236600                  	db `#f\0`
   940                                  fmt_boolean_true:
   941 000007B7 237400                  	db `#t\0`
   942                                  fmt_char_backslash:
   943 000007BA 235C5C00                	db `#\\\\\0`
   944                                  fmt_char_dquote:
   945 000007BE 235C2200                	db `#\\"\0`
   946                                  fmt_char_simple:
   947 000007C2 235C256300              	db `#\\%c\0`
   948                                  fmt_char_null:
   949 000007C7 235C6E756C00            	db `#\\nul\0`
   950                                  fmt_char_bell:
   951 000007CD 235C62656C6C00          	db `#\\bell\0`
   952                                  fmt_char_backspace:
   953 000007D4 235C6261636B737061-     	db `#\\backspace\0`
   953 000007DD 636500             
   954                                  fmt_char_tab:
   955 000007E0 235C74616200            	db `#\\tab\0`
   956                                  fmt_char_newline:
   957 000007E6 235C6E65776C696E65-     	db `#\\newline\0`
   957 000007EF 00                 
   958                                  fmt_char_formfeed:
   959 000007F0 235C7061676500          	db `#\\page\0`
   960                                  fmt_char_return:
   961 000007F7 235C72657475726E00      	db `#\\return\0`
   962                                  fmt_char_escape:
   963 00000800 235C65736300            	db `#\\esc\0`
   964                                  fmt_char_space:
   965 00000806 235C737061636500        	db `#\\space\0`
   966                                  fmt_char_hex:
   967 0000080E 235C782530325800        	db `#\\x%02X\0`
   968                                  fmt_gensym:
   969 00000816 47256C6400                      db `G%ld\0`
   970                                  fmt_closure:
   971 0000081B 233C636C6F73757265-     	db `#<closure at 0x%08X env=0x%08X code=0x%08X>\0`
   971 00000824 206174203078253038-
   971 0000082D 5820656E763D307825-
   971 00000836 30385820636F64653D-
   971 0000083F 3078253038583E00   
   972                                  fmt_lparen:
   973 00000847 2800                    	db `(\0`
   974                                  fmt_dotted_pair:
   975 00000849 202E2000                	db ` . \0`
   976                                  fmt_rparen:
   977 0000084D 2900                    	db `)\0`
   978                                  fmt_space:
   979 0000084F 2000                    	db ` \0`
   980                                  fmt_empty_vector:
   981 00000851 23282900                	db `#()\0`
   982                                  fmt_vector:
   983 00000855 232800                  	db `#(\0`
   984                                  fmt_real:
   985 00000858 256600                  	db `%f\0`
   986                                  fmt_fraction:
   987 0000085B 256C642F256C6400        	db `%ld/%ld\0`
   988                                  fmt_zero:
   989 00000863 3000                    	db `0\0`
   990                                  fmt_int:
   991 00000865 256C6400                	db `%ld\0`
   992                                  fmt_unknown_scheme_object_error:
   993 00000869 0A0A21212120457272-     	db `\n\n!!! Error: Unknown Scheme-object (RTTI 0x%02X) `
   993 00000872 6F723A20556E6B6E6F-
   993 0000087B 776E20536368656D65-
   993 00000884 2D6F626A6563742028-
   993 0000088D 525454492030782530-
   993 00000896 32582920           
   994 0000089A 617420616464726573-     	db `at address 0x%08X\n\n\0`
   994 000008A3 73203078253038580A-
   994 000008AC 0A00               
   995                                  fmt_dquote:
   996 000008AE 2200                    	db `\"\0`
   997                                  fmt_string_char:
   998 000008B0 256300                          db `%c\0`
   999                                  fmt_string_char_7:
  1000 000008B3 5C6100                          db `\\a\0`
  1001                                  fmt_string_char_8:
  1002 000008B6 5C6200                          db `\\b\0`
  1003                                  fmt_string_char_9:
  1004 000008B9 5C7400                          db `\\t\0`
  1005                                  fmt_string_char_10:
  1006 000008BC 5C6E00                          db `\\n\0`
  1007                                  fmt_string_char_11:
  1008 000008BF 5C7600                          db `\\v\0`
  1009                                  fmt_string_char_12:
  1010 000008C2 5C6600                          db `\\f\0`
  1011                                  fmt_string_char_13:
  1012 000008C5 5C7200                          db `\\r\0`
  1013                                  fmt_string_char_34:
  1014 000008C8 5C2200                          db `\\"\0`
  1015                                  fmt_string_char_92:
  1016 000008CB 5C5C00                          db `\\\\\0`
  1017                                  fmt_string_char_hex:
  1018 000008CE 5C7825583B00                    db `\\x%X;\0`
  1019                                  
  1020                                  section .text
  1021                                  
  1022                                  print_sexpr:
  1023 000005F4 C8000000                	enter 0, 0
  1024 000005F8 8A07                    	mov al, byte [rdi]
  1025 000005FA 3C00                    	cmp al, T_void
  1026 000005FC 7465                    	je .Lvoid
  1027 000005FE 3C01                    	cmp al, T_nil
  1028 00000600 7470                    	je .Lnil
  1029 00000602 3C09                    	cmp al, T_boolean_false
  1030 00000604 747B                    	je .Lboolean_false
  1031 00000606 3C0A                    	cmp al, T_boolean_true
  1032 00000608 0F8482000000            	je .Lboolean_true
  1033 0000060E 3C02                    	cmp al, T_char
  1034 00000610 0F8489000000            	je .Lchar
  1035 00000616 3C41                    	cmp al, T_interned_symbol
  1036 00000618 0F84BF010000            	je .Linterned_symbol
  1037 0000061E 3C42                            cmp al, T_uninterned_symbol
  1038 00000620 0F84E3010000                    je .Luninterned_symbol
  1039 00000626 3C21                    	cmp al, T_pair
  1040 00000628 0F84EE010000            	je .Lpair
  1041 0000062E 3C22                    	cmp al, T_vector
  1042 00000630 0F84B7020000            	je .Lvector
  1043 00000636 3C04                    	cmp al, T_closure
  1044 00000638 0F8485010000            	je .Lclosure
  1045 0000063E 3C13                    	cmp al, T_real
  1046 00000640 0F8448030000            	je .Lreal
  1047 00000646 3C12                    	cmp al, T_fraction
  1048 00000648 0F846E030000            	je .Lfraction
  1049 0000064E 3C11                    	cmp al, T_integer
  1050 00000650 0F84A7030000            	je .Linteger
  1051 00000656 3C03                    	cmp al, T_string
  1052 00000658 0F84B2030000            	je .Lstring
  1053                                  
  1054 0000065E E9DC040000              	jmp .Lunknown_sexpr_type
  1055                                  
  1056                                  .Lvoid:
  1057 00000663 48BF-                   	mov rdi, fmt_void
  1057 00000665 [A907000000000000] 
  1058 0000066D E900050000              	jmp .Lemit
  1059                                  
  1060                                  .Lnil:
  1061 00000672 48BF-                   	mov rdi, fmt_nil
  1061 00000674 [B107000000000000] 
  1062 0000067C E9F1040000              	jmp .Lemit
  1063                                  
  1064                                  .Lboolean_false:
  1065 00000681 48BF-                   	mov rdi, fmt_boolean_false
  1065 00000683 [B407000000000000] 
  1066 0000068B E9E2040000              	jmp .Lemit
  1067                                  
  1068                                  .Lboolean_true:
  1069 00000690 48BF-                   	mov rdi, fmt_boolean_true
  1069 00000692 [B707000000000000] 
  1070 0000069A E9D3040000              	jmp .Lemit
  1071                                  
  1072                                  .Lchar:
  1073 0000069F 8A4701                  	mov al, byte [rdi + 1]
  1074 000006A2 3C20                    	cmp al, ' '
  1075 000006A4 7E20                    	jle .Lchar_whitespace
  1076 000006A6 3C5C                    	cmp al, 92 		; backslash
  1077 000006A8 7474                    	je .Lchar_backslash
  1078 000006AA 3C22                    	cmp al, '"'
  1079 000006AC 747F                    	je .Lchar_dquote
  1080 000006AE 4825FF000000            	and rax, 255
  1081 000006B4 48BF-                   	mov rdi, fmt_char_simple
  1081 000006B6 [C207000000000000] 
  1082 000006BE 4889C6                  	mov rsi, rax
  1083 000006C1 E9AC040000              	jmp .Lemit
  1084                                  
  1085                                  .Lchar_whitespace:
  1086 000006C6 3C00                    	cmp al, 0
  1087 000006C8 7472                    	je .Lchar_null
  1088 000006CA 3C07                    	cmp al, 7
  1089 000006CC 747D                    	je .Lchar_bell
  1090 000006CE 3C08                    	cmp al, 8
  1091 000006D0 0F8484000000            	je .Lchar_backspace
  1092 000006D6 3C09                    	cmp al, 9
  1093 000006D8 0F848B000000            	je .Lchar_tab
  1094 000006DE 3C0A                    	cmp al, 10
  1095 000006E0 0F8492000000            	je .Lchar_newline
  1096 000006E6 3C0C                    	cmp al, 12
  1097 000006E8 0F8499000000            	je .Lchar_formfeed
  1098 000006EE 3C0D                    	cmp al, 13
  1099 000006F0 0F84A0000000            	je .Lchar_return
  1100 000006F6 3C1B                    	cmp al, 27
  1101 000006F8 0F84A7000000            	je .Lchar_escape
  1102 000006FE 4825FF000000            	and rax, 255
  1103 00000704 3C20                    	cmp al, ' '
  1104 00000706 0F84A8000000            	je .Lchar_space
  1105 0000070C 48BF-                   	mov rdi, fmt_char_hex
  1105 0000070E [0E08000000000000] 
  1106 00000716 4889C6                  	mov rsi, rax
  1107 00000719 E954040000              	jmp .Lemit	
  1108                                  
  1109                                  .Lchar_backslash:
  1110 0000071E 48BF-                   	mov rdi, fmt_char_backslash
  1110 00000720 [BA07000000000000] 
  1111 00000728 E945040000              	jmp .Lemit
  1112                                  
  1113                                  .Lchar_dquote:
  1114 0000072D 48BF-                   	mov rdi, fmt_char_dquote
  1114 0000072F [BE07000000000000] 
  1115 00000737 E936040000              	jmp .Lemit
  1116                                  
  1117                                  .Lchar_null:
  1118 0000073C 48BF-                   	mov rdi, fmt_char_null
  1118 0000073E [C707000000000000] 
  1119 00000746 E927040000              	jmp .Lemit
  1120                                  
  1121                                  .Lchar_bell:
  1122 0000074B 48BF-                   	mov rdi, fmt_char_bell
  1122 0000074D [CD07000000000000] 
  1123 00000755 E918040000              	jmp .Lemit
  1124                                  
  1125                                  .Lchar_backspace:
  1126 0000075A 48BF-                   	mov rdi, fmt_char_backspace
  1126 0000075C [D407000000000000] 
  1127 00000764 E909040000              	jmp .Lemit
  1128                                  
  1129                                  .Lchar_tab:
  1130 00000769 48BF-                   	mov rdi, fmt_char_tab
  1130 0000076B [E007000000000000] 
  1131 00000773 E9FA030000              	jmp .Lemit
  1132                                  
  1133                                  .Lchar_newline:
  1134 00000778 48BF-                   	mov rdi, fmt_char_newline
  1134 0000077A [E607000000000000] 
  1135 00000782 E9EB030000              	jmp .Lemit
  1136                                  
  1137                                  .Lchar_formfeed:
  1138 00000787 48BF-                   	mov rdi, fmt_char_formfeed
  1138 00000789 [F007000000000000] 
  1139 00000791 E9DC030000              	jmp .Lemit
  1140                                  
  1141                                  .Lchar_return:
  1142 00000796 48BF-                   	mov rdi, fmt_char_return
  1142 00000798 [F707000000000000] 
  1143 000007A0 E9CD030000              	jmp .Lemit
  1144                                  
  1145                                  .Lchar_escape:
  1146 000007A5 48BF-                   	mov rdi, fmt_char_escape
  1146 000007A7 [0008000000000000] 
  1147 000007AF E9BE030000              	jmp .Lemit
  1148                                  
  1149                                  .Lchar_space:
  1150 000007B4 48BF-                   	mov rdi, fmt_char_space
  1150 000007B6 [0608000000000000] 
  1151 000007BE E9AF030000              	jmp .Lemit
  1152                                  
  1153                                  .Lclosure:
  1154 000007C3 4889FE                  	mov rsi, qword rdi
  1155 000007C6 48BF-                   	mov rdi, fmt_closure
  1155 000007C8 [1B08000000000000] 
  1156 000007D0 488B5601                	mov rdx, SOB_CLOSURE_ENV(rsi)
  1157 000007D4 488B4E09                	mov rcx, SOB_CLOSURE_CODE(rsi)
  1158 000007D8 E995030000              	jmp .Lemit
  1159                                  
  1160                                  .Linterned_symbol:
  1161 000007DD 488B7F01                	mov rdi, qword [rdi + 1] ; sob_string
  1162 000007E1 BE01000000              	mov rsi, 1		 ; size = 1 byte
  1163 000007E6 488B5701                	mov rdx, qword [rdi + 1] ; length
  1164 000007EA 488D7F09                	lea rdi, [rdi + 1 + 8]	 ; actual characters
  1165 000007EE 488B0C25[00000000]      	mov rcx, qword [stdout]	 ; FILE *
  1166                                  	ENTER
    44 000007F6 C8000000            <1>  enter 0, 0
    45 000007FA 4883E4F0            <1>  and rsp, ~15
  1167 000007FE E8(00000000)            	call fwrite
  1168                                  	LEAVE
    49 00000803 C9                  <1>  leave
  1169 00000804 E97E030000              	jmp .Lend
  1170                                  
  1171                                  .Luninterned_symbol:
  1172 00000809 488B7701                        mov rsi, qword [rdi + 1] ; gensym counter
  1173 0000080D 48BF-                           mov rdi, fmt_gensym
  1173 0000080F [1608000000000000] 
  1174 00000817 E956030000                      jmp .Lemit
  1175                                  	
  1176                                  .Lpair:
  1177 0000081C 57                      	push rdi
  1178 0000081D 48BF-                   	mov rdi, fmt_lparen
  1178 0000081F [4708000000000000] 
  1179 00000827 B800000000              	mov rax, 0
  1180                                          ENTER
    44 0000082C C8000000            <1>  enter 0, 0
    45 00000830 4883E4F0            <1>  and rsp, ~15
  1181 00000834 E8(00000000)            	call printf
  1182                                          LEAVE
    49 00000839 C9                  <1>  leave
  1183 0000083A 488B3C24                	mov rdi, qword [rsp] 	; pair
  1184 0000083E 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
  1185 00000842 E8ADFDFFFF              	call print_sexpr
  1186 00000847 5F                      	pop rdi 		; pair
  1187 00000848 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
  1188                                  .Lcdr:
  1189 0000084C 8A07                    	mov al, byte [rdi]
  1190 0000084E 3C01                    	cmp al, T_nil
  1191 00000850 7447                    	je .Lcdr_nil
  1192 00000852 3C21                    	cmp al, T_pair
  1193 00000854 7462                    	je .Lcdr_pair
  1194 00000856 57                      	push rdi
  1195 00000857 48BF-                   	mov rdi, fmt_dotted_pair
  1195 00000859 [4908000000000000] 
  1196 00000861 B800000000              	mov rax, 0
  1197                                          ENTER
    44 00000866 C8000000            <1>  enter 0, 0
    45 0000086A 4883E4F0            <1>  and rsp, ~15
  1198 0000086E E8(00000000)            	call printf
  1199                                          LEAVE
    49 00000873 C9                  <1>  leave
  1200 00000874 5F                      	pop rdi
  1201 00000875 E87AFDFFFF              	call print_sexpr
  1202 0000087A 48BF-                   	mov rdi, fmt_rparen
  1202 0000087C [4D08000000000000] 
  1203 00000884 B800000000              	mov rax, 0
  1204                                          ENTER
    44 00000889 C8000000            <1>  enter 0, 0
    45 0000088D 4883E4F0            <1>  and rsp, ~15
  1205 00000891 E8(00000000)            	call printf
  1206                                          LEAVE
    49 00000896 C9                  <1>  leave
  1207 00000897 C9                      	leave
  1208 00000898 C3                      	ret
  1209                                  
  1210                                  .Lcdr_nil:
  1211 00000899 48BF-                   	mov rdi, fmt_rparen
  1211 0000089B [4D08000000000000] 
  1212 000008A3 B800000000              	mov rax, 0
  1213                                          ENTER
    44 000008A8 C8000000            <1>  enter 0, 0
    45 000008AC 4883E4F0            <1>  and rsp, ~15
  1214 000008B0 E8(00000000)            	call printf
  1215                                          LEAVE
    49 000008B5 C9                  <1>  leave
  1216 000008B6 C9                      	leave
  1217 000008B7 C3                      	ret
  1218                                  
  1219                                  .Lcdr_pair:
  1220 000008B8 57                      	push rdi
  1221 000008B9 48BF-                   	mov rdi, fmt_space
  1221 000008BB [4F08000000000000] 
  1222 000008C3 B800000000              	mov rax, 0
  1223                                          ENTER
    44 000008C8 C8000000            <1>  enter 0, 0
    45 000008CC 4883E4F0            <1>  and rsp, ~15
  1224 000008D0 E8(00000000)            	call printf
  1225                                          LEAVE
    49 000008D5 C9                  <1>  leave
  1226 000008D6 488B3C24                	mov rdi, qword [rsp]
  1227 000008DA 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
  1228 000008DE E811FDFFFF              	call print_sexpr
  1229 000008E3 5F                      	pop rdi
  1230 000008E4 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
  1231 000008E8 E95FFFFFFF              	jmp .Lcdr
  1232                                  
  1233                                  .Lvector:
  1234 000008ED 488B4701                	mov rax, qword [rdi + 1] ; length
  1235 000008F1 4883F800                	cmp rax, 0
  1236 000008F5 0F8484000000            	je .Lvector_empty
  1237 000008FB 57                      	push rdi
  1238 000008FC 48BF-                   	mov rdi, fmt_vector
  1238 000008FE [5508000000000000] 
  1239 00000906 B800000000              	mov rax, 0
  1240                                          ENTER
    44 0000090B C8000000            <1>  enter 0, 0
    45 0000090F 4883E4F0            <1>  and rsp, ~15
  1241 00000913 E8(00000000)            	call printf
  1242                                          LEAVE
    49 00000918 C9                  <1>  leave
  1243 00000919 488B3C24                	mov rdi, qword [rsp]
  1244 0000091D FF7701                  	push qword [rdi + 1]
  1245 00000920 6A01                    	push 1
  1246 00000922 488B7F09                	mov rdi, qword [rdi + 1 + 8] ; v[0]
  1247 00000926 E8C9FCFFFF              	call print_sexpr
  1248                                  .Lvector_loop:
  1249                                  	; [rsp] index
  1250                                  	; [rsp + 8*1] limit
  1251                                  	; [rsp + 8*2] vector
  1252 0000092B 488B0424                	mov rax, qword [rsp]
  1253 0000092F 483B442408              	cmp rax, qword [rsp + 8*1]
  1254 00000934 7436                    	je .Lvector_end
  1255 00000936 48BF-                   	mov rdi, fmt_space
  1255 00000938 [4F08000000000000] 
  1256 00000940 B800000000              	mov rax, 0
  1257                                          ENTER
    44 00000945 C8000000            <1>  enter 0, 0
    45 00000949 4883E4F0            <1>  and rsp, ~15
  1258 0000094D E8(00000000)            	call printf
  1259                                          LEAVE
    49 00000952 C9                  <1>  leave
  1260 00000953 488B0424                	mov rax, qword [rsp]
  1261 00000957 488B5C2410              	mov rbx, qword [rsp + 8*2]
  1262 0000095C 488B7CC309              	mov rdi, qword [rbx + 1 + 8 + 8 * rax] ; v[i]
  1263 00000961 E88EFCFFFF              	call print_sexpr
  1264 00000966 48FF0424                	inc qword [rsp]
  1265 0000096A EBBF                    	jmp .Lvector_loop
  1266                                  
  1267                                  .Lvector_end:
  1268 0000096C 4883C418                	add rsp, 8*3
  1269 00000970 48BF-                   	mov rdi, fmt_rparen
  1269 00000972 [4D08000000000000] 
  1270 0000097A E9F3010000              	jmp .Lemit	
  1271                                  
  1272                                  .Lvector_empty:
  1273 0000097F 48BF-                   	mov rdi, fmt_empty_vector
  1273 00000981 [5108000000000000] 
  1274 00000989 E9E4010000              	jmp .Lemit
  1275                                  
  1276                                  .Lreal:
  1277 0000098E FF7701                  	push qword [rdi + 1]
  1278 00000991 F20F100424              	movsd xmm0, qword [rsp]
  1279 00000996 4883C408                	add rsp, 8*1
  1280 0000099A 48BF-                   	mov rdi, fmt_real
  1280 0000099C [5808000000000000] 
  1281 000009A4 B801000000              	mov rax, 1
  1282                                  	ENTER
    44 000009A9 C8000000            <1>  enter 0, 0
    45 000009AD 4883E4F0            <1>  and rsp, ~15
  1283 000009B1 E8(00000000)            	call printf
  1284                                  	LEAVE
    49 000009B6 C9                  <1>  leave
  1285 000009B7 E9CB010000              	jmp .Lend
  1286                                  
  1287                                  .Lfraction:
  1288 000009BC 488B7701                	mov rsi, qword [rdi + 1]
  1289 000009C0 488B5709                	mov rdx, qword [rdi + 1 + 8]
  1290 000009C4 4883FE00                	cmp rsi, 0
  1291 000009C8 7415                    	je .Lrat_zero
  1292 000009CA 4883FA01                	cmp rdx, 1
  1293 000009CE 741E                    	je .Lrat_int
  1294 000009D0 48BF-                   	mov rdi, fmt_fraction
  1294 000009D2 [5B08000000000000] 
  1295 000009DA E993010000              	jmp .Lemit
  1296                                  
  1297                                  .Lrat_zero:
  1298 000009DF 48BF-                   	mov rdi, fmt_zero
  1298 000009E1 [6308000000000000] 
  1299 000009E9 E984010000              	jmp .Lemit
  1300                                  
  1301                                  .Lrat_int:
  1302 000009EE 48BF-                   	mov rdi, fmt_int
  1302 000009F0 [6508000000000000] 
  1303 000009F8 E975010000              	jmp .Lemit
  1304                                  
  1305                                  .Linteger:
  1306 000009FD 488B7701                	mov rsi, qword [rdi + 1]
  1307 00000A01 48BF-                   	mov rdi, fmt_int
  1307 00000A03 [6508000000000000] 
  1308 00000A0B E962010000              	jmp .Lemit
  1309                                  
  1310                                  .Lstring:
  1311 00000A10 488D4709                	lea rax, [rdi + 1 + 8]
  1312 00000A14 50                      	push rax
  1313 00000A15 FF7701                  	push qword [rdi + 1]
  1314 00000A18 48BF-                   	mov rdi, fmt_dquote
  1314 00000A1A [AE08000000000000] 
  1315 00000A22 B800000000              	mov rax, 0
  1316                                  	ENTER
    44 00000A27 C8000000            <1>  enter 0, 0
    45 00000A2B 4883E4F0            <1>  and rsp, ~15
  1317 00000A2F E8(00000000)            	call printf
  1318                                  	LEAVE
    49 00000A34 C9                  <1>  leave
  1319                                  .Lstring_loop:
  1320                                  	; qword [rsp]: limit
  1321                                  	; qword [rsp + 8*1]: char *
  1322 00000A35 48833C2400              	cmp qword [rsp], 0
  1323 00000A3A 0F84EF000000            	je .Lstring_end
  1324 00000A40 488B442408              	mov rax, qword [rsp + 8*1]
  1325 00000A45 8A00                    	mov al, byte [rax]
  1326 00000A47 4825FF000000            	and rax, 255
  1327 00000A4D 3C07                    	cmp al, 7
  1328 00000A4F 745D                            je .Lstring_char_7
  1329 00000A51 3C08                            cmp al, 8
  1330 00000A53 7465                            je .Lstring_char_8
  1331 00000A55 3C09                            cmp al, 9
  1332 00000A57 746D                            je .Lstring_char_9
  1333 00000A59 3C0A                            cmp al, 10
  1334 00000A5B 7475                            je .Lstring_char_10
  1335 00000A5D 3C0B                            cmp al, 11
  1336 00000A5F 747D                            je .Lstring_char_11
  1337 00000A61 3C0C                            cmp al, 12
  1338 00000A63 0F8481000000                    je .Lstring_char_12
  1339 00000A69 3C0D                            cmp al, 13
  1340 00000A6B 0F8485000000                    je .Lstring_char_13
  1341 00000A71 3C22                            cmp al, 34
  1342 00000A73 0F8489000000                    je .Lstring_char_34
  1343 00000A79 3C5C                            cmp al, 92              ;         je .Lstring_char_92
  1345 00000A7B 3C20                            cmp al, ' '
  1346 00000A7D 0F8C9A000000                    jl .Lstring_char_hex
  1347 00000A83 48BF-                           mov rdi, fmt_string_char
  1347 00000A85 [B008000000000000] 
  1348 00000A8D 4889C6                          mov rsi, rax
  1349                                  .Lstring_char_emit:
  1350 00000A90 B800000000                      mov rax, 0
  1351                                          ENTER
    44 00000A95 C8000000            <1>  enter 0, 0
    45 00000A99 4883E4F0            <1>  and rsp, ~15
  1352 00000A9D E8(00000000)                    call printf
  1353                                          LEAVE
    49 00000AA2 C9                  <1>  leave
  1354 00000AA3 48FF0C24                        dec qword [rsp]
  1355 00000AA7 48FF442408                      inc qword [rsp + 8*1]
  1356 00000AAC EB87                            jmp .Lstring_loop
  1357                                  
  1358                                  .Lstring_char_7:
  1359 00000AAE 48BF-                           mov rdi, fmt_string_char_7
  1359 00000AB0 [B308000000000000] 
  1360 00000AB8 EBD6                            jmp .Lstring_char_emit
  1361                                  
  1362                                  .Lstring_char_8:
  1363 00000ABA 48BF-                           mov rdi, fmt_string_char_8
  1363 00000ABC [B608000000000000] 
  1364 00000AC4 EBCA                            jmp .Lstring_char_emit
  1365                                          
  1366                                  .Lstring_char_9:
  1367 00000AC6 48BF-                           mov rdi, fmt_string_char_9
  1367 00000AC8 [B908000000000000] 
  1368 00000AD0 EBBE                            jmp .Lstring_char_emit
  1369                                  
  1370                                  .Lstring_char_10:
  1371 00000AD2 48BF-                           mov rdi, fmt_string_char_10
  1371 00000AD4 [BC08000000000000] 
  1372 00000ADC EBB2                            jmp .Lstring_char_emit
  1373                                  
  1374                                  .Lstring_char_11:
  1375 00000ADE 48BF-                           mov rdi, fmt_string_char_11
  1375 00000AE0 [BF08000000000000] 
  1376 00000AE8 EBA6                            jmp .Lstring_char_emit
  1377                                  
  1378                                  .Lstring_char_12:
  1379 00000AEA 48BF-                           mov rdi, fmt_string_char_12
  1379 00000AEC [C208000000000000] 
  1380 00000AF4 EB9A                            jmp .Lstring_char_emit
  1381                                  
  1382                                  .Lstring_char_13:
  1383 00000AF6 48BF-                           mov rdi, fmt_string_char_13
  1383 00000AF8 [C508000000000000] 
  1384 00000B00 EB8E                            jmp .Lstring_char_emit
  1385                                  
  1386                                  .Lstring_char_34:
  1387 00000B02 48BF-                           mov rdi, fmt_string_char_34
  1387 00000B04 [C808000000000000] 
  1388 00000B0C EB82                            jmp .Lstring_char_emit
  1389                                  
  1390                                  .Lstring_char_92:
  1391 00000B0E 48BF-                           mov rdi, fmt_string_char_92
  1391 00000B10 [CB08000000000000] 
  1392 00000B18 E973FFFFFF                      jmp .Lstring_char_emit
  1393                                  
  1394                                  .Lstring_char_hex:
  1395 00000B1D 48BF-                           mov rdi, fmt_string_char_hex
  1395 00000B1F [CE08000000000000] 
  1396 00000B27 4889C6                          mov rsi, rax
  1397 00000B2A E961FFFFFF                      jmp .Lstring_char_emit        
  1398                                  
  1399                                  .Lstring_end:
  1400 00000B2F 4883C410                	add rsp, 8 * 2
  1401 00000B33 48BF-                   	mov rdi, fmt_dquote
  1401 00000B35 [AE08000000000000] 
  1402 00000B3D EB33                    	jmp .Lemit
  1403                                  
  1404                                  .Lunknown_sexpr_type:
  1405 00000B3F 48BE-                   	mov rsi, fmt_unknown_scheme_object_error
  1405 00000B41 [6908000000000000] 
  1406 00000B49 4825FF000000            	and rax, 255
  1407 00000B4F 4889C2                  	mov rdx, rax
  1408 00000B52 4889F9                  	mov rcx, rdi
  1409 00000B55 488B3C25[00000000]      	mov rdi, qword [stderr]
  1410 00000B5D B800000000              	mov rax, 0
  1411                                          ENTER
    44 00000B62 C8000000            <1>  enter 0, 0
    45 00000B66 4883E4F0            <1>  and rsp, ~15
  1412 00000B6A E8(00000000)            	call fprintf
  1413                                          LEAVE
    49 00000B6F C9                  <1>  leave
  1414 00000B70 C9                              leave
  1415 00000B71 C3                              ret
  1416                                  
  1417                                  .Lemit:
  1418 00000B72 B800000000              	mov rax, 0
  1419                                          ENTER
    44 00000B77 C8000000            <1>  enter 0, 0
    45 00000B7B 4883E4F0            <1>  and rsp, ~15
  1420 00000B7F E8(00000000)            	call printf
  1421                                          LEAVE
    49 00000B84 C9                  <1>  leave
  1422 00000B85 EB00                    	jmp .Lend
  1423                                  
  1424                                  .Lend:
  1425                                  	LEAVE
    49 00000B87 C9                  <1>  leave
  1426 00000B88 C3                      	ret
  1427                                  
  1428                                  ;;; rdi: address of free variable
  1429                                  ;;; rsi: address of code-pointer
  1430                                  bind_primitive:
  1431 00000B89 C8000000                        enter 0, 0
  1432 00000B8D 57                              push rdi
  1433 00000B8E BF11000000                      mov rdi, (1 + 8 + 8)
  1434 00000B93 E8DBF7FFFF                      call malloc
  1435 00000B98 5F                              pop rdi
  1436 00000B99 C60004                          mov byte [rax], T_closure
  1437 00000B9C 48C7400100000000                mov SOB_CLOSURE_ENV(rax), 0 ; dummy, lexical environment
  1438 00000BA4 48897009                        mov SOB_CLOSURE_CODE(rax), rsi ; code pointer
  1439 00000BA8 488907                          mov qword [rdi], rax
  1440 00000BAB 48B8-                           mov rax, sob_void
  1440 00000BAD [0000000000000000] 
  1441 00000BB5 C9                              leave
  1442 00000BB6 C3                              ret
  1443                                  
  1444                                  L_code_ptr_ash:
  1445 00000BB7 C8000000                        enter 0, 0
  1446 00000BBB 48837D1802                      cmp COUNT, 2
  1447 00000BC0 0F8510140000                    jne L_error_arg_count_2
  1448 00000BC6 488B7D20                        mov rdi, PARAM(0)
  1449                                          assert_integer(rdi)
    53 00000BCA 803F11              <1>  cmp byte [%1], %2
    54 00000BCD 0F85A2140000        <1>  jne L_error_incorrect_type
  1450 00000BD3 488B4D28                        mov rcx, PARAM(1)
  1451                                          assert_integer(rcx)
    53 00000BD7 803911              <1>  cmp byte [%1], %2
    54 00000BDA 0F8595140000        <1>  jne L_error_incorrect_type
  1452 00000BE0 488B7F01                        mov rdi, qword [rdi + 1]
  1453 00000BE4 488B4901                        mov rcx, qword [rcx + 1]
  1454 00000BE8 4883F900                        cmp rcx, 0
  1455 00000BEC 7C0F                            jl .L_negative
  1456                                  .L_loop_positive:
  1457 00000BEE 4883F900                        cmp rcx, 0
  1458 00000BF2 741B                            je .L_exit
  1459 00000BF4 48D3E7                          sal rdi, cl
  1460 00000BF7 48C1E908                        shr rcx, 8
  1461 00000BFB EBF1                            jmp .L_loop_positive
  1462                                  .L_negative:
  1463 00000BFD 48F7D9                          neg rcx
  1464                                  .L_loop_negative:
  1465 00000C00 4883F900                        cmp rcx, 0
  1466 00000C04 7409                            je .L_exit
  1467 00000C06 48D3FF                          sar rdi, cl
  1468 00000C09 48C1E908                        shr rcx, 8
  1469 00000C0D EBF1                            jmp .L_loop_negative
  1470                                  .L_exit:
  1471 00000C0F E8DC120000                      call make_integer
  1472 00000C14 C9                              leave
  1473 00000C15 C22000                          ret AND_KILL_FRAME(2)
  1474                                  
  1475                                  L_code_ptr_logand:
  1476 00000C18 C8000000                        enter 0, 0
  1477 00000C1C 48837D1802                      cmp COUNT, 2
  1478 00000C21 0F85AF130000                    jne L_error_arg_count_2
  1479 00000C27 4C8B4520                        mov r8, PARAM(0)
  1480                                          assert_integer(r8)
    53 00000C2B 41803811            <1>  cmp byte [%1], %2
    54 00000C2F 0F8540140000        <1>  jne L_error_incorrect_type
  1481 00000C35 4C8B4D28                        mov r9, PARAM(1)
  1482                                          assert_integer(r9)
    53 00000C39 41803911            <1>  cmp byte [%1], %2
    54 00000C3D 0F8532140000        <1>  jne L_error_incorrect_type
  1483 00000C43 498B7801                        mov rdi, qword [r8 + 1]
  1484 00000C47 49237901                        and rdi, qword [r9 + 1]
  1485 00000C4B E8A0120000                      call make_integer
  1486 00000C50 C9                              leave
  1487 00000C51 C22000                          ret AND_KILL_FRAME(2)
  1488                                  
  1489                                  L_code_ptr_logor:
  1490 00000C54 C8000000                        enter 0, 0
  1491 00000C58 48837D1802                      cmp COUNT, 2
  1492 00000C5D 0F8573130000                    jne L_error_arg_count_2
  1493 00000C63 4C8B4520                        mov r8, PARAM(0)
  1494                                          assert_integer(r8)
    53 00000C67 41803811            <1>  cmp byte [%1], %2
    54 00000C6B 0F8504140000        <1>  jne L_error_incorrect_type
  1495 00000C71 4C8B4D28                        mov r9, PARAM(1)
  1496                                          assert_integer(r9)
    53 00000C75 41803911            <1>  cmp byte [%1], %2
    54 00000C79 0F85F6130000        <1>  jne L_error_incorrect_type
  1497 00000C7F 498B7801                        mov rdi, qword [r8 + 1]
  1498 00000C83 490B7901                        or rdi, qword [r9 + 1]
  1499 00000C87 E864120000                      call make_integer
  1500 00000C8C C9                              leave
  1501 00000C8D C22000                          ret AND_KILL_FRAME(2)
  1502                                  
  1503                                  L_code_ptr_logxor:
  1504 00000C90 C8000000                        enter 0, 0
  1505 00000C94 48837D1802                      cmp COUNT, 2
  1506 00000C99 0F8537130000                    jne L_error_arg_count_2
  1507 00000C9F 4C8B4520                        mov r8, PARAM(0)
  1508                                          assert_integer(r8)
    53 00000CA3 41803811            <1>  cmp byte [%1], %2
    54 00000CA7 0F85C8130000        <1>  jne L_error_incorrect_type
  1509 00000CAD 4C8B4D28                        mov r9, PARAM(1)
  1510                                          assert_integer(r9)
    53 00000CB1 41803911            <1>  cmp byte [%1], %2
    54 00000CB5 0F85BA130000        <1>  jne L_error_incorrect_type
  1511 00000CBB 498B7801                        mov rdi, qword [r8 + 1]
  1512 00000CBF 49337901                        xor rdi, qword [r9 + 1]
  1513 00000CC3 E828120000                      call make_integer
  1514                                          LEAVE
    49 00000CC8 C9                  <1>  leave
  1515 00000CC9 C22000                          ret AND_KILL_FRAME(2)
  1516                                  
  1517                                  L_code_ptr_lognot:
  1518 00000CCC C8000000                        enter 0, 0
  1519 00000CD0 48837D1801                      cmp COUNT, 1
  1520 00000CD5 0F85C6120000                    jne L_error_arg_count_1
  1521 00000CDB 4C8B4520                        mov r8, PARAM(0)
  1522                                          assert_integer(r8)
    53 00000CDF 41803811            <1>  cmp byte [%1], %2
    54 00000CE3 0F858C130000        <1>  jne L_error_incorrect_type
  1523 00000CE9 498B7801                        mov rdi, qword [r8 + 1]
  1524 00000CED 48F7D7                          not rdi
  1525 00000CF0 E8FB110000                      call make_integer
  1526 00000CF5 C9                              leave
  1527 00000CF6 C21800                          ret AND_KILL_FRAME(1)
  1528                                  
  1529                                  L_code_ptr_bin_apply:
  1530                                  ;;; fill in for final project!
  1531                                  
  1532                                  L_code_ptr_is_null:
  1533 00000CF9 C8000000                        enter 0, 0
  1534 00000CFD 48837D1801                      cmp COUNT, 1
  1535 00000D02 0F8599120000                    jne L_error_arg_count_1
  1536 00000D08 488B4520                        mov rax, PARAM(0)
  1537 00000D0C 803801                          cmp byte [rax], T_nil
  1538 00000D0F 750C                            jne .L_false
  1539 00000D11 48B8-                           mov rax, sob_boolean_true
  1539 00000D13 [0300000000000000] 
  1540 00000D1B EB0A                            jmp .L_end
  1541                                  .L_false:
  1542 00000D1D 48B8-                           mov rax, sob_boolean_false
  1542 00000D1F [0200000000000000] 
  1543                                  .L_end:
  1544 00000D27 C9                              leave
  1545 00000D28 C21800                          ret AND_KILL_FRAME(1)
  1546                                  
  1547                                  L_code_ptr_is_pair:
  1548 00000D2B C8000000                        enter 0, 0
  1549 00000D2F 48837D1801                      cmp COUNT, 1
  1550 00000D34 0F8567120000                    jne L_error_arg_count_1
  1551 00000D3A 488B4520                        mov rax, PARAM(0)
  1552 00000D3E 803821                          cmp byte [rax], T_pair
  1553 00000D41 750C                            jne .L_false
  1554 00000D43 48B8-                           mov rax, sob_boolean_true
  1554 00000D45 [0300000000000000] 
  1555 00000D4D EB0A                            jmp .L_end
  1556                                  .L_false:
  1557 00000D4F 48B8-                           mov rax, sob_boolean_false
  1557 00000D51 [0200000000000000] 
  1558                                  .L_end:
  1559 00000D59 C9                              leave
  1560 00000D5A C21800                          ret AND_KILL_FRAME(1)
  1561                                          
  1562                                  L_code_ptr_is_void:
  1563 00000D5D C8000000                        enter 0, 0
  1564 00000D61 48837D1801                      cmp COUNT, 1
  1565 00000D66 0F8535120000                    jne L_error_arg_count_1
  1566 00000D6C 488B4520                        mov rax, PARAM(0)
  1567 00000D70 803800                          cmp byte [rax], T_void
  1568 00000D73 750C                            jne .L_false
  1569 00000D75 48B8-                           mov rax, sob_boolean_true
  1569 00000D77 [0300000000000000] 
  1570 00000D7F EB0A                            jmp .L_end
  1571                                  .L_false:
  1572 00000D81 48B8-                           mov rax, sob_boolean_false
  1572 00000D83 [0200000000000000] 
  1573                                  .L_end:
  1574 00000D8B C9                              leave
  1575 00000D8C C21800                          ret AND_KILL_FRAME(1)
  1576                                  
  1577                                  L_code_ptr_is_char:
  1578 00000D8F C8000000                        enter 0, 0
  1579 00000D93 48837D1801                      cmp COUNT, 1
  1580 00000D98 0F8503120000                    jne L_error_arg_count_1
  1581 00000D9E 488B4520                        mov rax, PARAM(0)
  1582 00000DA2 803802                          cmp byte [rax], T_char
  1583 00000DA5 750C                            jne .L_false
  1584 00000DA7 48B8-                           mov rax, sob_boolean_true
  1584 00000DA9 [0300000000000000] 
  1585 00000DB1 EB0A                            jmp .L_end
  1586                                  .L_false:
  1587 00000DB3 48B8-                           mov rax, sob_boolean_false
  1587 00000DB5 [0200000000000000] 
  1588                                  .L_end:
  1589 00000DBD C9                              leave
  1590 00000DBE C21800                          ret AND_KILL_FRAME(1)
  1591                                  
  1592                                  L_code_ptr_is_string:
  1593 00000DC1 C8000000                        enter 0, 0
  1594 00000DC5 48837D1801                      cmp COUNT, 1
  1595 00000DCA 0F85D1110000                    jne L_error_arg_count_1
  1596 00000DD0 488B4520                        mov rax, PARAM(0)
  1597 00000DD4 803803                          cmp byte [rax], T_string
  1598 00000DD7 750C                            jne .L_false
  1599 00000DD9 48B8-                           mov rax, sob_boolean_true
  1599 00000DDB [0300000000000000] 
  1600 00000DE3 EB0A                            jmp .L_end
  1601                                  .L_false:
  1602 00000DE5 48B8-                           mov rax, sob_boolean_false
  1602 00000DE7 [0200000000000000] 
  1603                                  .L_end:
  1604 00000DEF C9                              leave
  1605 00000DF0 C21800                          ret AND_KILL_FRAME(1)
  1606                                  
  1607                                  L_code_ptr_is_symbol:
  1608 00000DF3 C8000000                        enter 0, 0
  1609 00000DF7 48837D1801                      cmp COUNT, 1
  1610 00000DFC 0F859F110000                    jne L_error_arg_count_1
  1611 00000E02 4C8B4520                        mov r8, PARAM(0)
  1612 00000E06 41802040                        and byte [r8], T_symbol
  1613 00000E0A 740C                            jz .L_false
  1614 00000E0C 48B8-                           mov rax, sob_boolean_true
  1614 00000E0E [0300000000000000] 
  1615 00000E16 EB0A                            jmp .L_exit
  1616                                  .L_false:
  1617 00000E18 48B8-                           mov rax, sob_boolean_false
  1617 00000E1A [0200000000000000] 
  1618                                  .L_exit:
  1619 00000E22 C9                              leave
  1620 00000E23 C21800                          ret AND_KILL_FRAME(1)
  1621                                  
  1622                                  L_code_ptr_is_uninterned_symbol:
  1623 00000E26 C8000000                        enter 0, 0
  1624 00000E2A 48837D1801                      cmp COUNT, 1
  1625 00000E2F 0F856C110000                    jne L_error_arg_count_1
  1626 00000E35 4C8B4520                        mov r8, PARAM(0)
  1627 00000E39 41803842                        cmp byte [r8], T_uninterned_symbol
  1628 00000E3D 750C                            jne .L_false
  1629 00000E3F 48B8-                           mov rax, sob_boolean_true
  1629 00000E41 [0300000000000000] 
  1630 00000E49 EB0A                            jmp .L_exit
  1631                                  .L_false:
  1632 00000E4B 48B8-                           mov rax, sob_boolean_false
  1632 00000E4D [0200000000000000] 
  1633                                  .L_exit:
  1634 00000E55 C9                              leave
  1635 00000E56 C21800                          ret AND_KILL_FRAME(1)
  1636                                  
  1637                                  L_code_ptr_is_interned_symbol:
  1638 00000E59 C8000000                        enter 0, 0
  1639 00000E5D 48837D1801                      cmp COUNT, 1
  1640 00000E62 0F8539110000                    jne L_error_arg_count_1
  1641 00000E68 488B4520                        mov rax, PARAM(0)
  1642 00000E6C 803841                          cmp byte [rax], T_interned_symbol
  1643 00000E6F 750C                            jne .L_false
  1644 00000E71 48B8-                           mov rax, sob_boolean_true
  1644 00000E73 [0300000000000000] 
  1645 00000E7B EB0A                            jmp .L_end
  1646                                  .L_false:
  1647 00000E7D 48B8-                           mov rax, sob_boolean_false
  1647 00000E7F [0200000000000000] 
  1648                                  .L_end:
  1649 00000E87 C9                              leave
  1650 00000E88 C21800                          ret AND_KILL_FRAME(1)
  1651                                  
  1652                                  L_code_ptr_gensym:
  1653 00000E8B C8000000                        enter 0, 0
  1654 00000E8F 48837D1800                      cmp COUNT, 0
  1655 00000E94 0F85D2100000                    jne L_error_arg_count_0
  1656 00000E9A 48FF0425[D4080000]              inc qword [gensym_count]
  1657 00000EA2 BF09000000                      mov rdi, (1 + 8)
  1658 00000EA7 E8C7F4FFFF                      call malloc
  1659 00000EAC C60042                          mov byte [rax], T_uninterned_symbol
  1660 00000EAF 488B0C25[D4080000]              mov rcx, qword [gensym_count]
  1661 00000EB7 48894801                        mov qword [rax + 1], rcx
  1662 00000EBB C9                              leave
  1663 00000EBC C21000                          ret AND_KILL_FRAME(0)
  1664                                  
  1665                                  L_code_ptr_is_vector:
  1666 00000EBF C8000000                        enter 0, 0
  1667 00000EC3 48837D1801                      cmp COUNT, 1
  1668 00000EC8 0F85D3100000                    jne L_error_arg_count_1
  1669 00000ECE 488B4520                        mov rax, PARAM(0)
  1670 00000ED2 803822                          cmp byte [rax], T_vector
  1671 00000ED5 750C                            jne .L_false
  1672 00000ED7 48B8-                           mov rax, sob_boolean_true
  1672 00000ED9 [0300000000000000] 
  1673 00000EE1 EB0A                            jmp .L_end
  1674                                  .L_false:
  1675 00000EE3 48B8-                           mov rax, sob_boolean_false
  1675 00000EE5 [0200000000000000] 
  1676                                  .L_end:
  1677 00000EED C9                              leave
  1678 00000EEE C21800                          ret AND_KILL_FRAME(1)
  1679                                  
  1680                                  L_code_ptr_is_closure:
  1681 00000EF1 C8000000                        enter 0, 0
  1682 00000EF5 48837D1801                      cmp COUNT, 1
  1683 00000EFA 0F85A1100000                    jne L_error_arg_count_1
  1684 00000F00 488B4520                        mov rax, PARAM(0)
  1685 00000F04 803804                          cmp byte [rax], T_closure
  1686 00000F07 750C                            jne .L_false
  1687 00000F09 48B8-                           mov rax, sob_boolean_true
  1687 00000F0B [0300000000000000] 
  1688 00000F13 EB0A                            jmp .L_end
  1689                                  .L_false:
  1690 00000F15 48B8-                           mov rax, sob_boolean_false
  1690 00000F17 [0200000000000000] 
  1691                                  .L_end:
  1692 00000F1F C9                              leave
  1693 00000F20 C21800                          ret AND_KILL_FRAME(1)
  1694                                  
  1695                                  L_code_ptr_is_real:
  1696 00000F23 C8000000                        enter 0, 0
  1697 00000F27 48837D1801                      cmp COUNT, 1
  1698 00000F2C 0F856F100000                    jne L_error_arg_count_1
  1699 00000F32 488B4520                        mov rax, PARAM(0)
  1700 00000F36 803813                          cmp byte [rax], T_real
  1701 00000F39 750C                            jne .L_false
  1702 00000F3B 48B8-                           mov rax, sob_boolean_true
  1702 00000F3D [0300000000000000] 
  1703 00000F45 EB0A                            jmp .L_end
  1704                                  .L_false:
  1705 00000F47 48B8-                           mov rax, sob_boolean_false
  1705 00000F49 [0200000000000000] 
  1706                                  .L_end:
  1707 00000F51 C9                              leave
  1708 00000F52 C21800                          ret AND_KILL_FRAME(1)
  1709                                  
  1710                                  L_code_ptr_is_fraction:
  1711 00000F55 C8000000                        enter 0, 0
  1712 00000F59 48837D1801                      cmp COUNT, 1
  1713 00000F5E 0F853D100000                    jne L_error_arg_count_1
  1714 00000F64 488B4520                        mov rax, PARAM(0)
  1715 00000F68 803812                          cmp byte [rax], T_fraction
  1716 00000F6B 750C                            jne .L_false
  1717 00000F6D 48B8-                           mov rax, sob_boolean_true
  1717 00000F6F [0300000000000000] 
  1718 00000F77 EB0A                            jmp .L_end
  1719                                  .L_false:
  1720 00000F79 48B8-                           mov rax, sob_boolean_false
  1720 00000F7B [0200000000000000] 
  1721                                  .L_end:
  1722 00000F83 C9                              leave
  1723 00000F84 C21800                          ret AND_KILL_FRAME(1)
  1724                                  
  1725                                  L_code_ptr_is_boolean:
  1726 00000F87 C8000000                        enter 0, 0
  1727 00000F8B 48837D1801                      cmp COUNT, 1
  1728 00000F90 0F850B100000                    jne L_error_arg_count_1
  1729 00000F96 488B4520                        mov rax, PARAM(0)
  1730 00000F9A 8A18                            mov bl, byte [rax]
  1731 00000F9C 80E308                          and bl, T_boolean
  1732 00000F9F 740C                            je .L_false
  1733 00000FA1 48B8-                           mov rax, sob_boolean_true
  1733 00000FA3 [0300000000000000] 
  1734 00000FAB EB0A                            jmp .L_end
  1735                                  .L_false:
  1736 00000FAD 48B8-                           mov rax, sob_boolean_false
  1736 00000FAF [0200000000000000] 
  1737                                  .L_end:
  1738 00000FB7 C9                              leave
  1739 00000FB8 C21800                          ret AND_KILL_FRAME(1)
  1740                                          
  1741                                  L_code_ptr_is_boolean_false:
  1742 00000FBB C8000000                        enter 0, 0
  1743 00000FBF 48837D1801                      cmp COUNT, 1
  1744 00000FC4 0F85D70F0000                    jne L_error_arg_count_1
  1745 00000FCA 488B4520                        mov rax, PARAM(0)
  1746 00000FCE 8A18                            mov bl, byte [rax]
  1747 00000FD0 80FB09                          cmp bl, T_boolean_false
  1748 00000FD3 750C                            jne .L_false
  1749 00000FD5 48B8-                           mov rax, sob_boolean_true
  1749 00000FD7 [0300000000000000] 
  1750 00000FDF EB0A                            jmp .L_end
  1751                                  .L_false:
  1752 00000FE1 48B8-                           mov rax, sob_boolean_false
  1752 00000FE3 [0200000000000000] 
  1753                                  .L_end:
  1754 00000FEB C9                              leave
  1755 00000FEC C21800                          ret AND_KILL_FRAME(1)
  1756                                  
  1757                                  L_code_ptr_is_boolean_true:
  1758 00000FEF C8000000                        enter 0, 0
  1759 00000FF3 48837D1801                      cmp COUNT, 1
  1760 00000FF8 0F85A30F0000                    jne L_error_arg_count_1
  1761 00000FFE 488B4520                        mov rax, PARAM(0)
  1762 00001002 8A18                            mov bl, byte [rax]
  1763 00001004 80FB0A                          cmp bl, T_boolean_true
  1764 00001007 750C                            jne .L_false
  1765 00001009 48B8-                           mov rax, sob_boolean_true
  1765 0000100B [0300000000000000] 
  1766 00001013 EB0A                            jmp .L_end
  1767                                  .L_false:
  1768 00001015 48B8-                           mov rax, sob_boolean_false
  1768 00001017 [0200000000000000] 
  1769                                  .L_end:
  1770 0000101F C9                              leave
  1771 00001020 C21800                          ret AND_KILL_FRAME(1)
  1772                                  
  1773                                  L_code_ptr_is_number:
  1774 00001023 C8000000                        enter 0, 0
  1775 00001027 48837D1801                      cmp COUNT, 1
  1776 0000102C 0F856F0F0000                    jne L_error_arg_count_1
  1777 00001032 488B4520                        mov rax, PARAM(0)
  1778 00001036 8A18                            mov bl, byte [rax]
  1779 00001038 80E310                          and bl, T_number
  1780 0000103B 740C                            jz .L_false
  1781 0000103D 48B8-                           mov rax, sob_boolean_true
  1781 0000103F [0300000000000000] 
  1782 00001047 EB0A                            jmp .L_end
  1783                                  .L_false:
  1784 00001049 48B8-                           mov rax, sob_boolean_false
  1784 0000104B [0200000000000000] 
  1785                                  .L_end:
  1786 00001053 C9                              leave
  1787 00001054 C21800                          ret AND_KILL_FRAME(1)
  1788                                          
  1789                                  L_code_ptr_is_collection:
  1790 00001057 C8000000                        enter 0, 0
  1791 0000105B 48837D1801                      cmp COUNT, 1
  1792 00001060 0F853B0F0000                    jne L_error_arg_count_1
  1793 00001066 488B4520                        mov rax, PARAM(0)
  1794 0000106A 8A18                            mov bl, byte [rax]
  1795 0000106C 80E320                          and bl, T_collection
  1796 0000106F 740C                            je .L_false
  1797 00001071 48B8-                           mov rax, sob_boolean_true
  1797 00001073 [0300000000000000] 
  1798 0000107B EB0A                            jmp .L_end
  1799                                  .L_false:
  1800 0000107D 48B8-                           mov rax, sob_boolean_false
  1800 0000107F [0200000000000000] 
  1801                                  .L_end:
  1802 00001087 C9                              leave
  1803 00001088 C21800                          ret AND_KILL_FRAME(1)
  1804                                  
  1805                                  L_code_ptr_cons:
  1806 0000108B C8000000                        enter 0, 0
  1807 0000108F 48837D1802                      cmp COUNT, 2
  1808 00001094 0F853C0F0000                    jne L_error_arg_count_2
  1809 0000109A BF11000000                      mov rdi, (1 + 8 + 8)
  1810 0000109F E8CFF2FFFF                      call malloc
  1811 000010A4 C60021                          mov byte [rax], T_pair
  1812 000010A7 488B5D20                        mov rbx, PARAM(0)
  1813 000010AB 48895801                        mov SOB_PAIR_CAR(rax), rbx
  1814 000010AF 488B5D28                        mov rbx, PARAM(1)
  1815 000010B3 48895809                        mov SOB_PAIR_CDR(rax), rbx
  1816 000010B7 C9                              leave
  1817 000010B8 C22000                          ret AND_KILL_FRAME(2)
  1818                                  
  1819                                  L_code_ptr_display_sexpr:
  1820 000010BB C8000000                        enter 0, 0
  1821 000010BF 48837D1801                      cmp COUNT, 1
  1822 000010C4 0F85D70E0000                    jne L_error_arg_count_1
  1823 000010CA 488B7D20                        mov rdi, PARAM(0)
  1824 000010CE E821F5FFFF                      call print_sexpr
  1825 000010D3 48B8-                           mov rax, sob_void
  1825 000010D5 [0000000000000000] 
  1826 000010DD C9                              leave
  1827 000010DE C21800                          ret AND_KILL_FRAME(1)
  1828                                  
  1829                                  L_code_ptr_write_char:
  1830 000010E1 C8000000                        enter 0, 0
  1831 000010E5 48837D1801                      cmp COUNT, 1
  1832 000010EA 0F85B10E0000                    jne L_error_arg_count_1
  1833 000010F0 488B4520                        mov rax, PARAM(0)
  1834                                          assert_char(rax)
    53 000010F4 803802              <1>  cmp byte [%1], %2
    54 000010F7 0F85780F0000        <1>  jne L_error_incorrect_type
  1835 000010FD 8A4001                          mov al, SOB_CHAR_VALUE(rax)
  1836 00001100 4825FF000000                    and rax, 255
  1837 00001106 48BF-                           mov rdi, fmt_char
  1837 00001108 [DC08000000000000] 
  1838 00001110 4889C6                          mov rsi, rax
  1839 00001113 B800000000                      mov rax, 0
  1840                                          ENTER
    44 00001118 C8000000            <1>  enter 0, 0
    45 0000111C 4883E4F0            <1>  and rsp, ~15
  1841 00001120 E8(00000000)                    call printf
  1842                                          LEAVE
    49 00001125 C9                  <1>  leave
  1843 00001126 48B8-                           mov rax, sob_void
  1843 00001128 [0000000000000000] 
  1844 00001130 C9                              leave
  1845 00001131 C21800                          ret AND_KILL_FRAME(1)
  1846                                  
  1847                                  L_code_ptr_car:
  1848 00001134 C8000000                        enter 0, 0
  1849 00001138 48837D1801                      cmp COUNT, 1
  1850 0000113D 0F855E0E0000                    jne L_error_arg_count_1
  1851 00001143 488B4520                        mov rax, PARAM(0)
  1852                                          assert_pair(rax)
    53 00001147 803821              <1>  cmp byte [%1], %2
    54 0000114A 0F85250F0000        <1>  jne L_error_incorrect_type
  1853 00001150 488B4001                        mov rax, SOB_PAIR_CAR(rax)
  1854 00001154 C9                              leave
  1855 00001155 C21800                          ret AND_KILL_FRAME(1)
  1856                                          
  1857                                  L_code_ptr_cdr:
  1858 00001158 C8000000                        enter 0, 0
  1859 0000115C 48837D1801                      cmp COUNT, 1
  1860 00001161 0F853A0E0000                    jne L_error_arg_count_1
  1861 00001167 488B4520                        mov rax, PARAM(0)
  1862                                          assert_pair(rax)
    53 0000116B 803821              <1>  cmp byte [%1], %2
    54 0000116E 0F85010F0000        <1>  jne L_error_incorrect_type
  1863 00001174 488B4009                        mov rax, SOB_PAIR_CDR(rax)
  1864 00001178 C9                              leave
  1865 00001179 C21800                          ret AND_KILL_FRAME(1)
  1866                                          
  1867                                  L_code_ptr_string_length:
  1868 0000117C C8000000                        enter 0, 0
  1869 00001180 48837D1801                      cmp COUNT, 1
  1870 00001185 0F85160E0000                    jne L_error_arg_count_1
  1871 0000118B 488B4520                        mov rax, PARAM(0)
  1872                                          assert_string(rax)
    53 0000118F 803803              <1>  cmp byte [%1], %2
    54 00001192 0F85DD0E0000        <1>  jne L_error_incorrect_type
  1873 00001198 488B7801                        mov rdi, SOB_STRING_LENGTH(rax)
  1874 0000119C E84F0D0000                      call make_integer
  1875 000011A1 C9                              leave
  1876 000011A2 C21800                          ret AND_KILL_FRAME(1)
  1877                                  
  1878                                  L_code_ptr_vector_length:
  1879 000011A5 C8000000                        enter 0, 0
  1880 000011A9 48837D1801                      cmp COUNT, 1
  1881 000011AE 0F85ED0D0000                    jne L_error_arg_count_1
  1882 000011B4 488B4520                        mov rax, PARAM(0)
  1883                                          assert_vector(rax)
    53 000011B8 803822              <1>  cmp byte [%1], %2
    54 000011BB 0F85B40E0000        <1>  jne L_error_incorrect_type
  1884 000011C1 488B7801                        mov rdi, SOB_VECTOR_LENGTH(rax)
  1885 000011C5 E8260D0000                      call make_integer
  1886 000011CA C9                              leave
  1887 000011CB C21800                          ret AND_KILL_FRAME(1)
  1888                                  
  1889                                  L_code_ptr_real_to_integer:
  1890 000011CE C8000000                        enter 0, 0
  1891 000011D2 48837D1801                      cmp COUNT, 1
  1892 000011D7 0F85C40D0000                    jne L_error_arg_count_1
  1893 000011DD 488B5D20                        mov rbx, PARAM(0)
  1894                                          assert_real(rbx)
    53 000011E1 803B13              <1>  cmp byte [%1], %2
    54 000011E4 0F858B0E0000        <1>  jne L_error_incorrect_type
  1895 000011EA F20F104301                      movsd xmm0, qword [rbx + 1]
  1896 000011EF F2480F2CF8                      cvttsd2si rdi, xmm0
  1897 000011F4 E8F70C0000                      call make_integer
  1898 000011F9 C9                              leave
  1899 000011FA C21800                          ret AND_KILL_FRAME(1)
  1900                                  
  1901                                  L_code_ptr_exit:
  1902 000011FD C8000000                        enter 0, 0
  1903 00001201 48837D1800                      cmp COUNT, 0
  1904 00001206 0F85600D0000                    jne L_error_arg_count_0
  1905 0000120C B800000000                      mov rax, 0
  1906 00001211 E8(00000000)                    call exit
  1907                                  
  1908                                  L_code_ptr_integer_to_real:
  1909 00001216 C8000000                        enter 0, 0
  1910 0000121A 48837D1801                      cmp COUNT, 1
  1911 0000121F 0F857C0D0000                    jne L_error_arg_count_1
  1912 00001225 488B4520                        mov rax, PARAM(0)
  1913                                          assert_integer(rax)
    53 00001229 803811              <1>  cmp byte [%1], %2
    54 0000122C 0F85430E0000        <1>  jne L_error_incorrect_type
  1914 00001232 FF7001                          push qword [rax + 1]
  1915 00001235 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1916 0000123B E8980C0000                      call make_real
  1917 00001240 C9                              leave
  1918 00001241 C21800                          ret AND_KILL_FRAME(1)
  1919                                  
  1920                                  L_code_ptr_fraction_to_real:
  1921 00001244 C8000000                        enter 0, 0
  1922 00001248 48837D1801                      cmp COUNT, 1
  1923 0000124D 0F854E0D0000                    jne L_error_arg_count_1
  1924 00001253 488B4520                        mov rax, PARAM(0)
  1925                                          assert_fraction(rax)
    53 00001257 803812              <1>  cmp byte [%1], %2
    54 0000125A 0F85150E0000        <1>  jne L_error_incorrect_type
  1926 00001260 FF7001                          push qword [rax + 1]
  1927 00001263 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1928 00001269 FF7009                          push qword [rax + 1 + 8]
  1929 0000126C F2480F2A0C24                    cvtsi2sd xmm1, qword [rsp]
  1930 00001272 F20F5EC1                        divsd xmm0, xmm1
  1931 00001276 E85D0C0000                      call make_real
  1932 0000127B C9                              leave
  1933 0000127C C21800                          ret AND_KILL_FRAME(1)
  1934                                  
  1935                                  L_code_ptr_char_to_integer:
  1936 0000127F C8000000                        enter 0, 0
  1937 00001283 48837D1801                      cmp COUNT, 1
  1938 00001288 0F85130D0000                    jne L_error_arg_count_1
  1939 0000128E 488B4520                        mov rax, PARAM(0)
  1940                                          assert_char(rax)
    53 00001292 803802              <1>  cmp byte [%1], %2
    54 00001295 0F85DA0D0000        <1>  jne L_error_incorrect_type
  1941 0000129B 8A4001                          mov al, byte [rax + 1]
  1942 0000129E 4825FF000000                    and rax, 255
  1943 000012A4 4889C7                          mov rdi, rax
  1944 000012A7 E8440C0000                      call make_integer
  1945 000012AC C9                              leave
  1946 000012AD C21800                          ret AND_KILL_FRAME(1)
  1947                                  
  1948                                  L_code_ptr_integer_to_fraction:
  1949 000012B0 C8000000                        enter 0, 0
  1950 000012B4 48837D1801                      cmp COUNT, 1
  1951 000012B9 0F85E20C0000                    jne L_error_arg_count_1
  1952 000012BF 4C8B4520                        mov r8, PARAM(0)
  1953                                          assert_integer(r8)
    53 000012C3 41803811            <1>  cmp byte [%1], %2
    54 000012C7 0F85A80D0000        <1>  jne L_error_incorrect_type
  1954 000012CD BF11000000                      mov rdi, (1 + 8 + 8)
  1955 000012D2 E89CF0FFFF                      call malloc
  1956 000012D7 498B5801                        mov rbx, qword [r8 + 1]
  1957 000012DB C60012                          mov byte [rax], T_fraction
  1958 000012DE 48895801                        mov qword [rax + 1], rbx
  1959 000012E2 48C7400901000000                mov qword [rax + 1 + 8], 1
  1960 000012EA C9                              leave
  1961 000012EB C21800                          ret AND_KILL_FRAME(1)
  1962                                  
  1963                                  L_code_ptr_integer_to_char:
  1964 000012EE C8000000                        enter 0, 0
  1965 000012F2 48837D1801                      cmp COUNT, 1
  1966 000012F7 0F85A40C0000                    jne L_error_arg_count_1
  1967 000012FD 488B4520                        mov rax, PARAM(0)
  1968                                          assert_integer(rax)
    53 00001301 803811              <1>  cmp byte [%1], %2
    54 00001304 0F856B0D0000        <1>  jne L_error_incorrect_type
  1969 0000130A 488B5801                        mov rbx, qword [rax + 1]
  1970 0000130E 4883FB00                        cmp rbx, 0
  1971 00001312 0F8EF20B0000                    jle L_error_integer_range
  1972 00001318 4881FB00010000                  cmp rbx, 256
  1973 0000131F 0F8DE50B0000                    jge L_error_integer_range
  1974 00001325 BF02000000                      mov rdi, (1 + 1)
  1975 0000132A E844F0FFFF                      call malloc
  1976 0000132F C60002                          mov byte [rax], T_char
  1977 00001332 885801                          mov byte [rax + 1], bl
  1978 00001335 C9                              leave
  1979 00001336 C21800                          ret AND_KILL_FRAME(1)
  1980                                  
  1981                                  L_code_ptr_trng:
  1982 00001339 C8000000                        enter 0, 0
  1983 0000133D 48837D1800                      cmp COUNT, 0
  1984 00001342 0F85240C0000                    jne L_error_arg_count_0
  1985 00001348 480FC7F7                        rdrand rdi
  1986 0000134C 48D1EF                          shr rdi, 1
  1987 0000134F E89C0B0000                      call make_integer
  1988 00001354 C9                              leave
  1989 00001355 C21000                          ret AND_KILL_FRAME(0)
  1990                                  
  1991                                  L_code_ptr_is_zero:
  1992 00001358 C8000000                        enter 0, 0
  1993 0000135C 48837D1801                      cmp COUNT, 1
  1994 00001361 0F853A0C0000                    jne L_error_arg_count_1
  1995 00001367 488B4520                        mov rax, PARAM(0)
  1996 0000136B 803811                          cmp byte [rax], T_integer
  1997 0000136E 740F                            je .L_integer
  1998 00001370 803812                          cmp byte [rax], T_fraction
  1999 00001373 7413                            je .L_fraction
  2000 00001375 803813                          cmp byte [rax], T_real
  2001 00001378 7417                            je .L_real
  2002 0000137A E9F60C0000                      jmp L_error_incorrect_type
  2003                                  .L_integer:
  2004 0000137F 4883780100                      cmp qword [rax + 1], 0
  2005 00001384 7429                            je .L_zero
  2006 00001386 EB1B                            jmp .L_not_zero
  2007                                  .L_fraction:
  2008 00001388 4883780100                      cmp qword [rax + 1], 0
  2009 0000138D 7420                            je .L_zero
  2010 0000138F EB12                            jmp .L_not_zero
  2011                                  .L_real:
  2012 00001391 660FEFC0                        pxor xmm0, xmm0
  2013 00001395 FF7001                          push qword [rax + 1]
  2014 00001398 F20F100C24                      movsd xmm1, qword [rsp]
  2015 0000139D 660F2EC1                        ucomisd xmm0, xmm1
  2016 000013A1 740C                            je .L_zero
  2017                                  .L_not_zero:
  2018 000013A3 48B8-                           mov rax, sob_boolean_false
  2018 000013A5 [0200000000000000] 
  2019 000013AD EB0A                            jmp .L_end
  2020                                  .L_zero:
  2021 000013AF 48B8-                           mov rax, sob_boolean_true
  2021 000013B1 [0300000000000000] 
  2022                                  .L_end:
  2023 000013B9 C9                              leave
  2024 000013BA C21800                          ret AND_KILL_FRAME(1)
  2025                                  
  2026                                  L_code_ptr_is_integer:
  2027 000013BD C8000000                        enter 0, 0
  2028 000013C1 48837D1801                      cmp COUNT, 1
  2029 000013C6 0F85D50B0000                    jne L_error_arg_count_1
  2030 000013CC 488B4520                        mov rax, PARAM(0)
  2031 000013D0 803811                          cmp byte [rax], T_integer
  2032 000013D3 750C                            jne .L_false
  2033 000013D5 48B8-                           mov rax, sob_boolean_true
  2033 000013D7 [0300000000000000] 
  2034 000013DF EB0A                            jmp .L_exit
  2035                                  .L_false:
  2036 000013E1 48B8-                           mov rax, sob_boolean_false
  2036 000013E3 [0200000000000000] 
  2037                                  .L_exit:
  2038 000013EB C9                              leave
  2039 000013EC C21800                          ret AND_KILL_FRAME(1)
  2040                                  
  2041                                  L_code_ptr_raw_bin_add_rr:
  2042 000013EF C8000000                        enter 0, 0
  2043 000013F3 48837D1802                      cmp COUNT, 2
  2044 000013F8 0F85D80B0000                    jne L_error_arg_count_2
  2045 000013FE 488B5D20                        mov rbx, PARAM(0)
  2046                                          assert_real(rbx)
    53 00001402 803B13              <1>  cmp byte [%1], %2
    54 00001405 0F856A0C0000        <1>  jne L_error_incorrect_type
  2047 0000140B 488B4D28                        mov rcx, PARAM(1)
  2048                                          assert_real(rcx)
    53 0000140F 803913              <1>  cmp byte [%1], %2
    54 00001412 0F855D0C0000        <1>  jne L_error_incorrect_type
  2049 00001418 F20F104301                      movsd xmm0, qword [rbx + 1]
  2050 0000141D F20F104901                      movsd xmm1, qword [rcx + 1]
  2051 00001422 F20F58C1                        addsd xmm0, xmm1
  2052 00001426 E8AD0A0000                      call make_real
  2053 0000142B C9                              leave
  2054 0000142C C22000                          ret AND_KILL_FRAME(2)
  2055                                  
  2056                                  L_code_ptr_raw_bin_sub_rr:
  2057 0000142F C8000000                        enter 0, 0
  2058 00001433 48837D1802                      cmp COUNT, 2
  2059 00001438 0F85980B0000                    jne L_error_arg_count_2
  2060 0000143E 488B5D20                        mov rbx, PARAM(0)
  2061                                          assert_real(rbx)
    53 00001442 803B13              <1>  cmp byte [%1], %2
    54 00001445 0F852A0C0000        <1>  jne L_error_incorrect_type
  2062 0000144B 488B4D28                        mov rcx, PARAM(1)
  2063                                          assert_real(rcx)
    53 0000144F 803913              <1>  cmp byte [%1], %2
    54 00001452 0F851D0C0000        <1>  jne L_error_incorrect_type
  2064 00001458 F20F104301                      movsd xmm0, qword [rbx + 1]
  2065 0000145D F20F104901                      movsd xmm1, qword [rcx + 1]
  2066 00001462 F20F5CC1                        subsd xmm0, xmm1
  2067 00001466 E86D0A0000                      call make_real
  2068 0000146B C9                              leave
  2069 0000146C C22000                          ret AND_KILL_FRAME(2)
  2070                                  
  2071                                  L_code_ptr_raw_bin_mul_rr:
  2072 0000146F C8000000                        enter 0, 0
  2073 00001473 48837D1802                      cmp COUNT, 2
  2074 00001478 0F85580B0000                    jne L_error_arg_count_2
  2075 0000147E 488B5D20                        mov rbx, PARAM(0)
  2076                                          assert_real(rbx)
    53 00001482 803B13              <1>  cmp byte [%1], %2
    54 00001485 0F85EA0B0000        <1>  jne L_error_incorrect_type
  2077 0000148B 488B4D28                        mov rcx, PARAM(1)
  2078                                          assert_real(rcx)
    53 0000148F 803913              <1>  cmp byte [%1], %2
    54 00001492 0F85DD0B0000        <1>  jne L_error_incorrect_type
  2079 00001498 F20F104301                      movsd xmm0, qword [rbx + 1]
  2080 0000149D F20F104901                      movsd xmm1, qword [rcx + 1]
  2081 000014A2 F20F59C1                        mulsd xmm0, xmm1
  2082 000014A6 E82D0A0000                      call make_real
  2083 000014AB C9                              leave
  2084 000014AC C22000                          ret AND_KILL_FRAME(2)
  2085                                  
  2086                                  L_code_ptr_raw_bin_div_rr:
  2087 000014AF C8000000                        enter 0, 0
  2088 000014B3 48837D1802                      cmp COUNT, 2
  2089 000014B8 0F85180B0000                    jne L_error_arg_count_2
  2090 000014BE 488B5D20                        mov rbx, PARAM(0)
  2091                                          assert_real(rbx)
    53 000014C2 803B13              <1>  cmp byte [%1], %2
    54 000014C5 0F85AA0B0000        <1>  jne L_error_incorrect_type
  2092 000014CB 488B4D28                        mov rcx, PARAM(1)
  2093                                          assert_real(rcx)
    53 000014CF 803913              <1>  cmp byte [%1], %2
    54 000014D2 0F859D0B0000        <1>  jne L_error_incorrect_type
  2094 000014D8 F20F104301                      movsd xmm0, qword [rbx + 1]
  2095 000014DD F20F104901                      movsd xmm1, qword [rcx + 1]
  2096 000014E2 660FEFD2                        pxor xmm2, xmm2
  2097 000014E6 660F2ECA                        ucomisd xmm1, xmm2
  2098 000014EA 0F84B60B0000                    je L_error_division_by_zero
  2099 000014F0 F20F5EC1                        divsd xmm0, xmm1
  2100 000014F4 E8DF090000                      call make_real
  2101 000014F9 C9                              leave
  2102 000014FA C22000                          ret AND_KILL_FRAME(2)
  2103                                  
  2104                                  L_code_ptr_raw_bin_add_zz:
  2105 000014FD C8000000                	enter 0, 0
  2106 00001501 48837D1802              	cmp COUNT, 2
  2107 00001506 0F85CA0A0000            	jne L_error_arg_count_2
  2108 0000150C 4C8B4520                	mov r8, PARAM(0)
  2109                                  	assert_integer(r8)
    53 00001510 41803811            <1>  cmp byte [%1], %2
    54 00001514 0F855B0B0000        <1>  jne L_error_incorrect_type
  2110 0000151A 4C8B4D28                	mov r9, PARAM(1)
  2111                                  	assert_integer(r9)
    53 0000151E 41803911            <1>  cmp byte [%1], %2
    54 00001522 0F854D0B0000        <1>  jne L_error_incorrect_type
  2112 00001528 498B7801                	mov rdi, qword [r8 + 1]
  2113 0000152C 49037901                	add rdi, qword [r9 + 1]
  2114 00001530 E8BB090000              	call make_integer
  2115 00001535 C9                      	leave
  2116 00001536 C22000                  	ret AND_KILL_FRAME(2)
  2117                                  
  2118                                  L_code_ptr_raw_bin_add_qq:
  2119 00001539 C8000000                        enter 0, 0
  2120 0000153D 48837D1802                      cmp COUNT, 2
  2121 00001542 0F858E0A0000                    jne L_error_arg_count_2
  2122 00001548 4C8B4520                        mov r8, PARAM(0)
  2123                                          assert_fraction(r8)
    53 0000154C 41803812            <1>  cmp byte [%1], %2
    54 00001550 0F851F0B0000        <1>  jne L_error_incorrect_type
  2124 00001556 4C8B4D28                        mov r9, PARAM(1)
  2125                                          assert_fraction(r9)
    53 0000155A 41803912            <1>  cmp byte [%1], %2
    54 0000155E 0F85110B0000        <1>  jne L_error_incorrect_type
  2126 00001564 498B4001                        mov rax, qword [r8 + 1] ; num1
  2127 00001568 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  2128 0000156C 4899                            cqo
  2129 0000156E 48F7EB                          imul rbx
  2130 00001571 4889C6                          mov rsi, rax
  2131 00001574 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2132 00001578 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  2133 0000157C 4899                            cqo
  2134 0000157E 48F7EB                          imul rbx
  2135 00001581 4801C6                          add rsi, rax
  2136 00001584 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2137 00001588 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  2138 0000158C 4899                            cqo
  2139 0000158E 48F7EB                          imul rbx
  2140 00001591 4889C7                          mov rdi, rax
  2141 00001594 E8DE010000                      call normalize_fraction
  2142 00001599 C9                              leave
  2143 0000159A C22000                          ret AND_KILL_FRAME(2)
  2144                                  
  2145                                  L_code_ptr_raw_bin_sub_zz:
  2146 0000159D C8000000                	enter 0, 0
  2147 000015A1 48837D1802              	cmp COUNT, 2
  2148 000015A6 0F852A0A0000            	jne L_error_arg_count_2
  2149 000015AC 4C8B4520                	mov r8, PARAM(0)
  2150                                  	assert_integer(r8)
    53 000015B0 41803811            <1>  cmp byte [%1], %2
    54 000015B4 0F85BB0A0000        <1>  jne L_error_incorrect_type
  2151 000015BA 4C8B4D28                	mov r9, PARAM(1)
  2152                                  	assert_integer(r9)
    53 000015BE 41803911            <1>  cmp byte [%1], %2
    54 000015C2 0F85AD0A0000        <1>  jne L_error_incorrect_type
  2153 000015C8 498B7801                	mov rdi, qword [r8 + 1]
  2154 000015CC 492B7901                	sub rdi, qword [r9 + 1]
  2155 000015D0 E81B090000              	call make_integer
  2156 000015D5 C9                      	leave
  2157 000015D6 C22000                  	ret AND_KILL_FRAME(2)
  2158                                  
  2159                                  L_code_ptr_raw_bin_sub_qq:
  2160 000015D9 C8000000                        enter 0, 0
  2161 000015DD 48837D1802                      cmp COUNT, 2
  2162 000015E2 0F85EE090000                    jne L_error_arg_count_2
  2163 000015E8 4C8B4520                        mov r8, PARAM(0)
  2164                                          assert_fraction(r8)
    53 000015EC 41803812            <1>  cmp byte [%1], %2
    54 000015F0 0F857F0A0000        <1>  jne L_error_incorrect_type
  2165 000015F6 4C8B4D28                        mov r9, PARAM(1)
  2166                                          assert_fraction(r9)
    53 000015FA 41803912            <1>  cmp byte [%1], %2
    54 000015FE 0F85710A0000        <1>  jne L_error_incorrect_type
  2167 00001604 498B4001                        mov rax, qword [r8 + 1] ; num1
  2168 00001608 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  2169 0000160C 4899                            cqo
  2170 0000160E 48F7EB                          imul rbx
  2171 00001611 4889C6                          mov rsi, rax
  2172 00001614 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2173 00001618 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  2174 0000161C 4899                            cqo
  2175 0000161E 48F7EB                          imul rbx
  2176 00001621 4829C6                          sub rsi, rax
  2177 00001624 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2178 00001628 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  2179 0000162C 4899                            cqo
  2180 0000162E 48F7EB                          imul rbx
  2181 00001631 4889C7                          mov rdi, rax
  2182 00001634 E83E010000                      call normalize_fraction
  2183 00001639 C9                              leave
  2184 0000163A C22000                          ret AND_KILL_FRAME(2)
  2185                                  
  2186                                  L_code_ptr_raw_bin_mul_zz:
  2187 0000163D C8000000                	enter 0, 0
  2188 00001641 48837D1802              	cmp COUNT, 2
  2189 00001646 0F858A090000            	jne L_error_arg_count_2
  2190 0000164C 4C8B4520                	mov r8, PARAM(0)
  2191                                  	assert_integer(r8)
    53 00001650 41803811            <1>  cmp byte [%1], %2
    54 00001654 0F851B0A0000        <1>  jne L_error_incorrect_type
  2192 0000165A 4C8B4D28                	mov r9, PARAM(1)
  2193                                  	assert_integer(r9)
    53 0000165E 41803911            <1>  cmp byte [%1], %2
    54 00001662 0F850D0A0000        <1>  jne L_error_incorrect_type
  2194 00001668 4899                    	cqo
  2195 0000166A 498B4001                	mov rax, qword [r8 + 1]
  2196 0000166E 49F76101                	mul qword [r9 + 1]
  2197 00001672 4889C7                  	mov rdi, rax
  2198 00001675 E876080000              	call make_integer
  2199 0000167A C9                      	leave
  2200 0000167B C22000                  	ret AND_KILL_FRAME(2)
  2201                                  
  2202                                  L_code_ptr_raw_bin_mul_qq:
  2203 0000167E C8000000                        enter 0, 0
  2204 00001682 48837D1802                      cmp COUNT, 2
  2205 00001687 0F8549090000                    jne L_error_arg_count_2
  2206 0000168D 4C8B4520                        mov r8, PARAM(0)
  2207                                          assert_fraction(r8)
    53 00001691 41803812            <1>  cmp byte [%1], %2
    54 00001695 0F85DA090000        <1>  jne L_error_incorrect_type
  2208 0000169B 4C8B4D28                        mov r9, PARAM(1)
  2209                                          assert_fraction(r9)
    53 0000169F 41803912            <1>  cmp byte [%1], %2
    54 000016A3 0F85CC090000        <1>  jne L_error_incorrect_type
  2210 000016A9 498B4001                        mov rax, qword [r8 + 1] ; num1
  2211 000016AD 498B5901                        mov rbx, qword [r9 + 1] ; num2
  2212 000016B1 4899                            cqo
  2213 000016B3 48F7EB                          imul rbx
  2214 000016B6 4889C6                          mov rsi, rax
  2215 000016B9 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2216 000016BD 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  2217 000016C1 4899                            cqo
  2218 000016C3 48F7EB                          imul rbx
  2219 000016C6 4889C7                          mov rdi, rax
  2220 000016C9 E8A9000000                      call normalize_fraction
  2221 000016CE C9                              leave
  2222 000016CF C22000                          ret AND_KILL_FRAME(2)
  2223                                          
  2224                                  L_code_ptr_raw_bin_div_zz:
  2225 000016D2 C8000000                	enter 0, 0
  2226 000016D6 48837D1802              	cmp COUNT, 2
  2227 000016DB 0F85F5080000            	jne L_error_arg_count_2
  2228 000016E1 4C8B4520                	mov r8, PARAM(0)
  2229                                  	assert_integer(r8)
    53 000016E5 41803811            <1>  cmp byte [%1], %2
    54 000016E9 0F8586090000        <1>  jne L_error_incorrect_type
  2230 000016EF 4C8B4D28                	mov r9, PARAM(1)
  2231                                  	assert_integer(r9)
    53 000016F3 41803911            <1>  cmp byte [%1], %2
    54 000016F7 0F8578090000        <1>  jne L_error_incorrect_type
  2232 000016FD 498B7901                	mov rdi, qword [r9 + 1]
  2233 00001701 4883FF00                	cmp rdi, 0
  2234 00001705 0F849B090000            	je L_error_division_by_zero
  2235 0000170B 498B7001                	mov rsi, qword [r8 + 1]
  2236 0000170F E863000000              	call normalize_fraction
  2237 00001714 C9                      	leave
  2238 00001715 C22000                  	ret AND_KILL_FRAME(2)
  2239                                  
  2240                                  L_code_ptr_raw_bin_div_qq:
  2241 00001718 C8000000                        enter 0, 0
  2242 0000171C 48837D1802                      cmp COUNT, 2
  2243 00001721 0F85AF080000                    jne L_error_arg_count_2
  2244 00001727 4C8B4520                        mov r8, PARAM(0)
  2245                                          assert_fraction(r8)
    53 0000172B 41803812            <1>  cmp byte [%1], %2
    54 0000172F 0F8540090000        <1>  jne L_error_incorrect_type
  2246 00001735 4C8B4D28                        mov r9, PARAM(1)
  2247                                          assert_fraction(r9)
    53 00001739 41803912            <1>  cmp byte [%1], %2
    54 0000173D 0F8532090000        <1>  jne L_error_incorrect_type
  2248 00001743 4983790100                      cmp qword [r9 + 1], 0
  2249 00001748 0F8458090000                    je L_error_division_by_zero
  2250 0000174E 498B4001                        mov rax, qword [r8 + 1] ; num1
  2251 00001752 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  2252 00001756 4899                            cqo
  2253 00001758 48F7EB                          imul rbx
  2254 0000175B 4889C6                          mov rsi, rax
  2255 0000175E 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2256 00001762 498B5901                        mov rbx, qword [r9 + 1] ; num2
  2257 00001766 4899                            cqo
  2258 00001768 48F7EB                          imul rbx
  2259 0000176B 4889C7                          mov rdi, rax
  2260 0000176E E804000000                      call normalize_fraction
  2261 00001773 C9                              leave
  2262 00001774 C22000                          ret AND_KILL_FRAME(2)
  2263                                          
  2264                                  normalize_fraction:
  2265 00001777 56                              push rsi
  2266 00001778 57                              push rdi
  2267 00001779 E859000000                      call gcd
  2268 0000177E 4889C3                          mov rbx, rax
  2269 00001781 58                              pop rax
  2270 00001782 4899                            cqo
  2271 00001784 48F7FB                          idiv rbx
  2272 00001787 4989C0                          mov r8, rax
  2273 0000178A 58                              pop rax
  2274 0000178B 4899                            cqo
  2275 0000178D 48F7FB                          idiv rbx
  2276 00001790 4989C1                          mov r9, rax
  2277 00001793 4983F900                        cmp r9, 0
  2278 00001797 741C                            je .L_zero
  2279 00001799 4983F801                        cmp r8, 1
  2280 0000179D 7421                            je .L_int
  2281 0000179F BF11000000                      mov rdi, (1 + 8 + 8)
  2282 000017A4 E8CAEBFFFF                      call malloc
  2283 000017A9 C60012                          mov byte [rax], T_fraction
  2284 000017AC 4C894801                        mov qword [rax + 1], r9
  2285 000017B0 4C894009                        mov qword [rax + 1 + 8], r8
  2286 000017B4 C3                              ret
  2287                                  .L_zero:
  2288 000017B5 BF00000000                      mov rdi, 0
  2289 000017BA E831070000                      call make_integer
  2290 000017BF C3                              ret
  2291                                  .L_int:
  2292 000017C0 4C89CF                          mov rdi, r9
  2293 000017C3 E828070000                      call make_integer
  2294 000017C8 C3                              ret
  2295                                  
  2296                                  iabs:
  2297 000017C9 4889F8                          mov rax, rdi
  2298 000017CC 4883F800                        cmp rax, 0
  2299 000017D0 7C01                            jl .Lneg
  2300 000017D2 C3                              ret
  2301                                  .Lneg:
  2302 000017D3 48F7D8                          neg rax
  2303 000017D6 C3                              ret
  2304                                  
  2305                                  gcd:
  2306 000017D7 E8EDFFFFFF                      call iabs
  2307 000017DC 4889C3                          mov rbx, rax
  2308 000017DF 4889F7                          mov rdi, rsi
  2309 000017E2 E8E2FFFFFF                      call iabs
  2310 000017E7 4883F800                        cmp rax, 0
  2311 000017EB 7502                            jne .L0
  2312 000017ED 4893                            xchg rax, rbx
  2313                                  .L0:
  2314 000017EF 4883FB00                        cmp rbx, 0
  2315 000017F3 740C                            je .L1
  2316 000017F5 4899                            cqo
  2317 000017F7 48F7F3                          div rbx
  2318 000017FA 4889D0                          mov rax, rdx
  2319 000017FD 4893                            xchg rax, rbx
  2320 000017FF EBEE                            jmp .L0
  2321                                  .L1:
  2322 00001801 C3                              ret
  2323                                  
  2324                                  L_code_ptr_error:
  2325 00001802 C8000000                        enter 0, 0
  2326 00001806 48837D1802                      cmp COUNT, 2
  2327 0000180B 0F85C5070000                    jne L_error_arg_count_2
  2328 00001811 488B7520                        mov rsi, PARAM(0)
  2329                                          assert_interned_symbol(rsi)
    53 00001815 803E41              <1>  cmp byte [%1], %2
    54 00001818 0F8557080000        <1>  jne L_error_incorrect_type
  2330 0000181E 488B7528                        mov rsi, PARAM(1)
  2331                                          assert_string(rsi)
    53 00001822 803E03              <1>  cmp byte [%1], %2
    54 00001825 0F854A080000        <1>  jne L_error_incorrect_type
  2332 0000182B 48BF-                           mov rdi, fmt_scheme_error_part_1
  2332 0000182D [3A0A000000000000] 
  2333 00001835 B800000000                      mov rax, 0
  2334                                          ENTER
    44 0000183A C8000000            <1>  enter 0, 0
    45 0000183E 4883E4F0            <1>  and rsp, ~15
  2335 00001842 E8(00000000)                    call printf
  2336                                          LEAVE
    49 00001847 C9                  <1>  leave
  2337 00001848 488B7D20                        mov rdi, PARAM(0)
  2338 0000184C E8A3EDFFFF                      call print_sexpr
  2339 00001851 48BF-                           mov rdi, fmt_scheme_error_part_2
  2339 00001853 [4E0A000000000000] 
  2340 0000185B B800000000                      mov rax, 0
  2341                                          ENTER
    44 00001860 C8000000            <1>  enter 0, 0
    45 00001864 4883E4F0            <1>  and rsp, ~15
  2342 00001868 E8(00000000)                    call printf
  2343                                          LEAVE
    49 0000186D C9                  <1>  leave
  2344 0000186E 488B4528                        mov rax, PARAM(1)       ; sob_string
  2345 00001872 BE01000000                      mov rsi, 1              ; size = 1 byte
  2346 00001877 488B5001                        mov rdx, qword [rax + 1] ; length
  2347 0000187B 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
  2348 0000187F 488B0C25[00000000]              mov rcx, qword [stdout]  ; FILE*
  2349                                  	ENTER
    44 00001887 C8000000            <1>  enter 0, 0
    45 0000188B 4883E4F0            <1>  and rsp, ~15
  2350 0000188F E8(00000000)                    call fwrite
  2351                                  	LEAVE
    49 00001894 C9                  <1>  leave
  2352 00001895 48BF-                           mov rdi, fmt_scheme_error_part_3
  2352 00001897 [900A000000000000] 
  2353 0000189F B800000000                      mov rax, 0
  2354                                          ENTER
    44 000018A4 C8000000            <1>  enter 0, 0
    45 000018A8 4883E4F0            <1>  and rsp, ~15
  2355 000018AC E8(00000000)                    call printf
  2356                                          LEAVE
    49 000018B1 C9                  <1>  leave
  2357 000018B2 48C7C0F7FFFFFF                  mov rax, -9
  2358 000018B9 E8(00000000)                    call exit
  2359                                  
  2360                                  L_code_ptr_raw_less_than_rr:
  2361 000018BE C8000000                        enter 0, 0
  2362 000018C2 48837D1802                      cmp COUNT, 2
  2363 000018C7 0F8509070000                    jne L_error_arg_count_2
  2364 000018CD 488B7520                        mov rsi, PARAM(0)
  2365                                          assert_real(rsi)
    53 000018D1 803E13              <1>  cmp byte [%1], %2
    54 000018D4 0F859B070000        <1>  jne L_error_incorrect_type
  2366 000018DA 488B7D28                        mov rdi, PARAM(1)
  2367                                          assert_real(rdi)
    53 000018DE 803F13              <1>  cmp byte [%1], %2
    54 000018E1 0F858E070000        <1>  jne L_error_incorrect_type
  2368 000018E7 F20F104601                      movsd xmm0, qword [rsi + 1]
  2369 000018EC F20F104F01                      movsd xmm1, qword [rdi + 1]
  2370 000018F1 660F2FC1                        comisd xmm0, xmm1
  2371 000018F5 730C                            jae .L_false
  2372 000018F7 48B8-                           mov rax, sob_boolean_true
  2372 000018F9 [0300000000000000] 
  2373 00001901 EB0A                            jmp .L_exit
  2374                                  .L_false:
  2375 00001903 48B8-                           mov rax, sob_boolean_false
  2375 00001905 [0200000000000000] 
  2376                                  .L_exit:
  2377 0000190D C9                              leave
  2378 0000190E C22000                          ret AND_KILL_FRAME(2)
  2379                                          
  2380                                  L_code_ptr_raw_less_than_zz:
  2381 00001911 C8000000                	enter 0, 0
  2382 00001915 48837D1802              	cmp COUNT, 2
  2383 0000191A 0F85B6060000            	jne L_error_arg_count_2
  2384 00001920 4C8B4520                	mov r8, PARAM(0)
  2385                                  	assert_integer(r8)
    53 00001924 41803811            <1>  cmp byte [%1], %2
    54 00001928 0F8547070000        <1>  jne L_error_incorrect_type
  2386 0000192E 4C8B4D28                	mov r9, PARAM(1)
  2387                                  	assert_integer(r9)
    53 00001932 41803911            <1>  cmp byte [%1], %2
    54 00001936 0F8539070000        <1>  jne L_error_incorrect_type
  2388 0000193C 498B7801                	mov rdi, qword [r8 + 1]
  2389 00001940 493B7901                	cmp rdi, qword [r9 + 1]
  2390 00001944 7D0C                    	jge .L_false
  2391 00001946 48B8-                   	mov rax, sob_boolean_true
  2391 00001948 [0300000000000000] 
  2392 00001950 EB0A                    	jmp .L_exit
  2393                                  .L_false:
  2394 00001952 48B8-                   	mov rax, sob_boolean_false
  2394 00001954 [0200000000000000] 
  2395                                  .L_exit:
  2396 0000195C C9                      	leave
  2397 0000195D C22000                  	ret AND_KILL_FRAME(2)
  2398                                  
  2399                                  L_code_ptr_raw_less_than_qq:
  2400 00001960 C8000000                        enter 0, 0
  2401 00001964 48837D1802                      cmp COUNT, 2
  2402 00001969 0F8567060000                    jne L_error_arg_count_2
  2403 0000196F 488B7520                        mov rsi, PARAM(0)
  2404                                          assert_fraction(rsi)
    53 00001973 803E12              <1>  cmp byte [%1], %2
    54 00001976 0F85F9060000        <1>  jne L_error_incorrect_type
  2405 0000197C 488B7D28                        mov rdi, PARAM(1)
  2406                                          assert_fraction(rdi)
    53 00001980 803F12              <1>  cmp byte [%1], %2
    54 00001983 0F85EC060000        <1>  jne L_error_incorrect_type
  2407 00001989 488B4601                        mov rax, qword [rsi + 1] ; num1
  2408 0000198D 4899                            cqo
  2409 0000198F 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  2410 00001993 4889C1                          mov rcx, rax
  2411 00001996 488B4609                        mov rax, qword [rsi + 1 + 8] ; den1
  2412 0000199A 4899                            cqo
  2413 0000199C 48F76F01                        imul qword [rdi + 1]          ; num2
  2414 000019A0 4829C1                          sub rcx, rax
  2415 000019A3 7D0C                            jge .L_false
  2416 000019A5 48B8-                           mov rax, sob_boolean_true
  2416 000019A7 [0300000000000000] 
  2417 000019AF EB0A                            jmp .L_exit
  2418                                  .L_false:
  2419 000019B1 48B8-                           mov rax, sob_boolean_false
  2419 000019B3 [0200000000000000] 
  2420                                  .L_exit:
  2421 000019BB C9                              leave
  2422 000019BC C22000                          ret AND_KILL_FRAME(2)
  2423                                  
  2424                                  L_code_ptr_raw_equal_rr:
  2425 000019BF C8000000                        enter 0, 0
  2426 000019C3 48837D1802                      cmp COUNT, 2
  2427 000019C8 0F8508060000                    jne L_error_arg_count_2
  2428 000019CE 488B7520                        mov rsi, PARAM(0)
  2429                                          assert_real(rsi)
    53 000019D2 803E13              <1>  cmp byte [%1], %2
    54 000019D5 0F859A060000        <1>  jne L_error_incorrect_type
  2430 000019DB 488B7D28                        mov rdi, PARAM(1)
  2431                                          assert_real(rdi)
    53 000019DF 803F13              <1>  cmp byte [%1], %2
    54 000019E2 0F858D060000        <1>  jne L_error_incorrect_type
  2432 000019E8 F20F104601                      movsd xmm0, qword [rsi + 1]
  2433 000019ED F20F104F01                      movsd xmm1, qword [rdi + 1]
  2434 000019F2 660F2FC1                        comisd xmm0, xmm1
  2435 000019F6 750C                            jne .L_false
  2436 000019F8 48B8-                           mov rax, sob_boolean_true
  2436 000019FA [0300000000000000] 
  2437 00001A02 EB0A                            jmp .L_exit
  2438                                  .L_false:
  2439 00001A04 48B8-                           mov rax, sob_boolean_false
  2439 00001A06 [0200000000000000] 
  2440                                  .L_exit:
  2441 00001A0E C9                              leave
  2442 00001A0F C22000                          ret AND_KILL_FRAME(2)
  2443                                          
  2444                                  L_code_ptr_raw_equal_zz:
  2445 00001A12 C8000000                	enter 0, 0
  2446 00001A16 48837D1802              	cmp COUNT, 2
  2447 00001A1B 0F85B5050000            	jne L_error_arg_count_2
  2448 00001A21 4C8B4520                	mov r8, PARAM(0)
  2449                                  	assert_integer(r8)
    53 00001A25 41803811            <1>  cmp byte [%1], %2
    54 00001A29 0F8546060000        <1>  jne L_error_incorrect_type
  2450 00001A2F 4C8B4D28                	mov r9, PARAM(1)
  2451                                  	assert_integer(r9)
    53 00001A33 41803911            <1>  cmp byte [%1], %2
    54 00001A37 0F8538060000        <1>  jne L_error_incorrect_type
  2452 00001A3D 498B7801                	mov rdi, qword [r8 + 1]
  2453 00001A41 493B7901                	cmp rdi, qword [r9 + 1]
  2454 00001A45 750C                    	jne .L_false
  2455 00001A47 48B8-                   	mov rax, sob_boolean_true
  2455 00001A49 [0300000000000000] 
  2456 00001A51 EB0A                    	jmp .L_exit
  2457                                  .L_false:
  2458 00001A53 48B8-                   	mov rax, sob_boolean_false
  2458 00001A55 [0200000000000000] 
  2459                                  .L_exit:
  2460 00001A5D C9                      	leave
  2461 00001A5E C22000                  	ret AND_KILL_FRAME(2)
  2462                                  
  2463                                  L_code_ptr_raw_equal_qq:
  2464 00001A61 C8000000                        enter 0, 0
  2465 00001A65 48837D1802                      cmp COUNT, 2
  2466 00001A6A 0F8566050000                    jne L_error_arg_count_2
  2467 00001A70 488B7520                        mov rsi, PARAM(0)
  2468                                          assert_fraction(rsi)
    53 00001A74 803E12              <1>  cmp byte [%1], %2
    54 00001A77 0F85F8050000        <1>  jne L_error_incorrect_type
  2469 00001A7D 488B7D28                        mov rdi, PARAM(1)
  2470                                          assert_fraction(rdi)
    53 00001A81 803F12              <1>  cmp byte [%1], %2
    54 00001A84 0F85EB050000        <1>  jne L_error_incorrect_type
  2471 00001A8A 488B4601                        mov rax, qword [rsi + 1] ; num1
  2472 00001A8E 4899                            cqo
  2473 00001A90 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  2474 00001A94 4889C1                          mov rcx, rax
  2475 00001A97 488B4709                        mov rax, qword [rdi + 1 + 8] ; den1
  2476 00001A9B 4899                            cqo
  2477 00001A9D 48F76F01                        imul qword [rdi + 1]          ; num2
  2478 00001AA1 4829C1                          sub rcx, rax
  2479 00001AA4 750C                            jne .L_false
  2480 00001AA6 48B8-                           mov rax, sob_boolean_true
  2480 00001AA8 [0300000000000000] 
  2481 00001AB0 EB0A                            jmp .L_exit
  2482                                  .L_false:
  2483 00001AB2 48B8-                           mov rax, sob_boolean_false
  2483 00001AB4 [0200000000000000] 
  2484                                  .L_exit:
  2485 00001ABC C9                              leave
  2486 00001ABD C22000                          ret AND_KILL_FRAME(2)
  2487                                  
  2488                                  L_code_ptr_quotient:
  2489 00001AC0 C8000000                        enter 0, 0
  2490 00001AC4 48837D1802                      cmp COUNT, 2
  2491 00001AC9 0F8507050000                    jne L_error_arg_count_2
  2492 00001ACF 488B7520                        mov rsi, PARAM(0)
  2493                                          assert_integer(rsi)
    53 00001AD3 803E11              <1>  cmp byte [%1], %2
    54 00001AD6 0F8599050000        <1>  jne L_error_incorrect_type
  2494 00001ADC 488B7D28                        mov rdi, PARAM(1)
  2495                                          assert_integer(rdi)
    53 00001AE0 803F11              <1>  cmp byte [%1], %2
    54 00001AE3 0F858C050000        <1>  jne L_error_incorrect_type
  2496 00001AE9 488B4601                        mov rax, qword [rsi + 1]
  2497 00001AED 488B5F01                        mov rbx, qword [rdi + 1]
  2498 00001AF1 4883FB00                        cmp rbx, 0
  2499 00001AF5 0F84AB050000                    je L_error_division_by_zero
  2500 00001AFB 4899                            cqo
  2501 00001AFD 48F7FB                          idiv rbx
  2502 00001B00 4889C7                          mov rdi, rax
  2503 00001B03 E8E8030000                      call make_integer
  2504 00001B08 C9                              leave
  2505 00001B09 C22000                          ret AND_KILL_FRAME(2)
  2506                                          
  2507                                  L_code_ptr_remainder:
  2508 00001B0C C8000000                        enter 0, 0
  2509 00001B10 48837D1802                      cmp COUNT, 2
  2510 00001B15 0F85BB040000                    jne L_error_arg_count_2
  2511 00001B1B 488B7520                        mov rsi, PARAM(0)
  2512                                          assert_integer(rsi)
    53 00001B1F 803E11              <1>  cmp byte [%1], %2
    54 00001B22 0F854D050000        <1>  jne L_error_incorrect_type
  2513 00001B28 488B7D28                        mov rdi, PARAM(1)
  2514                                          assert_integer(rdi)
    53 00001B2C 803F11              <1>  cmp byte [%1], %2
    54 00001B2F 0F8540050000        <1>  jne L_error_incorrect_type
  2515 00001B35 488B4601                        mov rax, qword [rsi + 1]
  2516 00001B39 488B5F01                        mov rbx, qword [rdi + 1]
  2517 00001B3D 4883FB00                        cmp rbx, 0
  2518 00001B41 0F845F050000                    je L_error_division_by_zero
  2519 00001B47 4899                            cqo
  2520 00001B49 48F7FB                          idiv rbx
  2521 00001B4C 4889D7                          mov rdi, rdx
  2522 00001B4F E89C030000                      call make_integer
  2523 00001B54 C9                              leave
  2524 00001B55 C22000                          ret AND_KILL_FRAME(2)
  2525                                  
  2526                                  L_code_ptr_set_car:
  2527 00001B58 C8000000                        enter 0, 0
  2528 00001B5C 48837D1802                      cmp COUNT, 2
  2529 00001B61 0F856F040000                    jne L_error_arg_count_2
  2530 00001B67 488B4520                        mov rax, PARAM(0)
  2531                                          assert_pair(rax)
    53 00001B6B 803821              <1>  cmp byte [%1], %2
    54 00001B6E 0F8501050000        <1>  jne L_error_incorrect_type
  2532 00001B74 488B5D28                        mov rbx, PARAM(1)
  2533 00001B78 48895801                        mov SOB_PAIR_CAR(rax), rbx
  2534 00001B7C 48B8-                           mov rax, sob_void
  2534 00001B7E [0000000000000000] 
  2535 00001B86 C9                              leave
  2536 00001B87 C22000                          ret AND_KILL_FRAME(2)
  2537                                  
  2538                                  L_code_ptr_set_cdr:
  2539 00001B8A C8000000                        enter 0, 0
  2540 00001B8E 48837D1802                      cmp COUNT, 2
  2541 00001B93 0F853D040000                    jne L_error_arg_count_2
  2542 00001B99 488B4520                        mov rax, PARAM(0)
  2543                                          assert_pair(rax)
    53 00001B9D 803821              <1>  cmp byte [%1], %2
    54 00001BA0 0F85CF040000        <1>  jne L_error_incorrect_type
  2544 00001BA6 488B5D28                        mov rbx, PARAM(1)
  2545 00001BAA 48895809                        mov SOB_PAIR_CDR(rax), rbx
  2546 00001BAE 48B8-                           mov rax, sob_void
  2546 00001BB0 [0000000000000000] 
  2547 00001BB8 C9                              leave
  2548 00001BB9 C22000                          ret AND_KILL_FRAME(2)
  2549                                  
  2550                                  L_code_ptr_string_ref:
  2551 00001BBC C8000000                        enter 0, 0
  2552 00001BC0 48837D1802                      cmp COUNT, 2
  2553 00001BC5 0F850B040000                    jne L_error_arg_count_2
  2554 00001BCB 488B7D20                        mov rdi, PARAM(0)
  2555                                          assert_string(rdi)
    53 00001BCF 803F03              <1>  cmp byte [%1], %2
    54 00001BD2 0F859D040000        <1>  jne L_error_incorrect_type
  2556 00001BD8 488B7528                        mov rsi, PARAM(1)
  2557                                          assert_integer(rsi)
    53 00001BDC 803E11              <1>  cmp byte [%1], %2
    54 00001BDF 0F8590040000        <1>  jne L_error_incorrect_type
  2558 00001BE5 488B5701                        mov rdx, qword [rdi + 1]
  2559 00001BE9 488B4E01                        mov rcx, qword [rsi + 1]
  2560 00001BED 4839D1                          cmp rcx, rdx
  2561 00001BF0 0F8D14030000                    jge L_error_integer_range
  2562 00001BF6 4883F900                        cmp rcx, 0
  2563 00001BFA 0F8C0A030000                    jl L_error_integer_range
  2564 00001C00 8A5C3909                        mov bl, byte [rdi + 1 + 8 + 1 * rcx]
  2565 00001C04 BF02000000                      mov rdi, 2
  2566 00001C09 E865E7FFFF                      call malloc
  2567 00001C0E C60002                          mov byte [rax], T_char
  2568 00001C11 885801                          mov byte [rax + 1], bl
  2569 00001C14 C9                              leave
  2570 00001C15 C22000                          ret AND_KILL_FRAME(2)
  2571                                  
  2572                                  L_code_ptr_vector_ref:
  2573 00001C18 C8000000                        enter 0, 0
  2574 00001C1C 48837D1802                      cmp COUNT, 2
  2575 00001C21 0F85AF030000                    jne L_error_arg_count_2
  2576 00001C27 488B7D20                        mov rdi, PARAM(0)
  2577                                          assert_vector(rdi)
    53 00001C2B 803F22              <1>  cmp byte [%1], %2
    54 00001C2E 0F8541040000        <1>  jne L_error_incorrect_type
  2578 00001C34 488B7528                        mov rsi, PARAM(1)
  2579                                          assert_integer(rsi)
    53 00001C38 803E11              <1>  cmp byte [%1], %2
    54 00001C3B 0F8534040000        <1>  jne L_error_incorrect_type
  2580 00001C41 488B5701                        mov rdx, qword [rdi + 1]
  2581 00001C45 488B4E01                        mov rcx, qword [rsi + 1]
  2582 00001C49 4839D1                          cmp rcx, rdx
  2583 00001C4C 0F8DB8020000                    jge L_error_integer_range
  2584 00001C52 4883F900                        cmp rcx, 0
  2585 00001C56 0F8CAE020000                    jl L_error_integer_range
  2586 00001C5C 488B44CF09                      mov rax, [rdi + 1 + 8 + 8 * rcx]
  2587 00001C61 C9                              leave
  2588 00001C62 C22000                          ret AND_KILL_FRAME(2)
  2589                                  
  2590                                  L_code_ptr_vector_set:
  2591 00001C65 C8000000                        enter 0, 0
  2592 00001C69 48837D1803                      cmp COUNT, 3
  2593 00001C6E 0F85CC030000                    jne L_error_arg_count_3
  2594 00001C74 488B7D20                        mov rdi, PARAM(0)
  2595                                          assert_vector(rdi)
    53 00001C78 803F22              <1>  cmp byte [%1], %2
    54 00001C7B 0F85F4030000        <1>  jne L_error_incorrect_type
  2596 00001C81 488B7528                        mov rsi, PARAM(1)
  2597                                          assert_integer(rsi)
    53 00001C85 803E11              <1>  cmp byte [%1], %2
    54 00001C88 0F85E7030000        <1>  jne L_error_incorrect_type
  2598 00001C8E 488B5701                        mov rdx, qword [rdi + 1]
  2599 00001C92 488B4E01                        mov rcx, qword [rsi + 1]
  2600 00001C96 4839D1                          cmp rcx, rdx
  2601 00001C99 0F8D6B020000                    jge L_error_integer_range
  2602 00001C9F 4883F900                        cmp rcx, 0
  2603 00001CA3 0F8C61020000                    jl L_error_integer_range
  2604 00001CA9 488B4530                        mov rax, PARAM(2)
  2605 00001CAD 488944CF09                      mov qword [rdi + 1 + 8 + 8 * rcx], rax
  2606 00001CB2 48B8-                           mov rax, sob_void
  2606 00001CB4 [0000000000000000] 
  2607 00001CBC C9                              leave
  2608 00001CBD C22800                          ret AND_KILL_FRAME(3)
  2609                                  
  2610                                  L_code_ptr_string_set:
  2611 00001CC0 C8000000                        enter 0, 0
  2612 00001CC4 48837D1803                      cmp COUNT, 3
  2613 00001CC9 0F8571030000                    jne L_error_arg_count_3
  2614 00001CCF 488B7D20                        mov rdi, PARAM(0)
  2615                                          assert_string(rdi)
    53 00001CD3 803F03              <1>  cmp byte [%1], %2
    54 00001CD6 0F8599030000        <1>  jne L_error_incorrect_type
  2616 00001CDC 488B7528                        mov rsi, PARAM(1)
  2617                                          assert_integer(rsi)
    53 00001CE0 803E11              <1>  cmp byte [%1], %2
    54 00001CE3 0F858C030000        <1>  jne L_error_incorrect_type
  2618 00001CE9 488B5701                        mov rdx, qword [rdi + 1]
  2619 00001CED 488B4E01                        mov rcx, qword [rsi + 1]
  2620 00001CF1 4839D1                          cmp rcx, rdx
  2621 00001CF4 0F8D10020000                    jge L_error_integer_range
  2622 00001CFA 4883F900                        cmp rcx, 0
  2623 00001CFE 0F8C06020000                    jl L_error_integer_range
  2624 00001D04 488B4530                        mov rax, PARAM(2)
  2625                                          assert_char(rax)
    53 00001D08 803802              <1>  cmp byte [%1], %2
    54 00001D0B 0F8564030000        <1>  jne L_error_incorrect_type
  2626 00001D11 8A4001                          mov al, byte [rax + 1]
  2627 00001D14 88443909                        mov byte [rdi + 1 + 8 + 1 * rcx], al
  2628 00001D18 48B8-                           mov rax, sob_void
  2628 00001D1A [0000000000000000] 
  2629 00001D22 C9                              leave
  2630 00001D23 C22800                          ret AND_KILL_FRAME(3)
  2631                                  
  2632                                  L_code_ptr_make_vector:
  2633 00001D26 C8000000                        enter 0, 0
  2634 00001D2A 48837D1802                      cmp COUNT, 2
  2635 00001D2F 0F85A1020000                    jne L_error_arg_count_2
  2636 00001D35 488B4D20                        mov rcx, PARAM(0)
  2637                                          assert_integer(rcx)
    53 00001D39 803911              <1>  cmp byte [%1], %2
    54 00001D3C 0F8533030000        <1>  jne L_error_incorrect_type
  2638 00001D42 488B4901                        mov rcx, qword [rcx + 1]
  2639 00001D46 4883F900                        cmp rcx, 0
  2640 00001D4A 0F8CBA010000                    jl L_error_integer_range
  2641 00001D50 488B5528                        mov rdx, PARAM(1)
  2642 00001D54 488D3CCD09000000                lea rdi, [1 + 8 + 8 * rcx]
  2643 00001D5C E812E6FFFF                      call malloc
  2644 00001D61 C60022                          mov byte [rax], T_vector
  2645 00001D64 48894801                        mov qword [rax + 1], rcx
  2646 00001D68 41B800000000                    mov r8, 0
  2647                                  .L0:
  2648 00001D6E 4939C8                          cmp r8, rcx
  2649 00001D71 740A                            je .L1
  2650 00001D73 4A8954C009                      mov qword [rax + 1 + 8 + 8 * r8], rdx
  2651 00001D78 49FFC0                          inc r8
  2652 00001D7B EBF1                            jmp .L0
  2653                                  .L1:
  2654 00001D7D C9                              leave
  2655 00001D7E C22000                          ret AND_KILL_FRAME(2)
  2656                                          
  2657                                  L_code_ptr_make_string:
  2658 00001D81 C8000000                        enter 0, 0
  2659 00001D85 48837D1802                      cmp COUNT, 2
  2660 00001D8A 0F8546020000                    jne L_error_arg_count_2
  2661 00001D90 488B4D20                        mov rcx, PARAM(0)
  2662                                          assert_integer(rcx)
    53 00001D94 803911              <1>  cmp byte [%1], %2
    54 00001D97 0F85D8020000        <1>  jne L_error_incorrect_type
  2663 00001D9D 488B4901                        mov rcx, qword [rcx + 1]
  2664 00001DA1 4883F900                        cmp rcx, 0
  2665 00001DA5 0F8C5F010000                    jl L_error_integer_range
  2666 00001DAB 488B5528                        mov rdx, PARAM(1)
  2667                                          assert_char(rdx)
    53 00001DAF 803A02              <1>  cmp byte [%1], %2
    54 00001DB2 0F85BD020000        <1>  jne L_error_incorrect_type
  2668 00001DB8 8A5201                          mov dl, byte [rdx + 1]
  2669 00001DBB 488D7909                        lea rdi, [1 + 8 + 1 * rcx]
  2670 00001DBF E8AFE5FFFF                      call malloc
  2671 00001DC4 C60003                          mov byte [rax], T_string
  2672 00001DC7 48894801                        mov qword [rax + 1], rcx
  2673 00001DCB 41B800000000                    mov r8, 0
  2674                                  .L0:
  2675 00001DD1 4939C8                          cmp r8, rcx
  2676 00001DD4 740A                            je .L1
  2677 00001DD6 4188540009                      mov byte [rax + 1 + 8 + 1 * r8], dl
  2678 00001DDB 49FFC0                          inc r8
  2679 00001DDE EBF1                            jmp .L0
  2680                                  .L1:
  2681 00001DE0 C9                              leave
  2682 00001DE1 C22000                          ret AND_KILL_FRAME(2)
  2683                                  
  2684                                  L_code_ptr_numerator:
  2685 00001DE4 C8000000                        enter 0, 0
  2686 00001DE8 48837D1801                      cmp COUNT, 1
  2687 00001DED 0F85AE010000                    jne L_error_arg_count_1
  2688 00001DF3 488B4520                        mov rax, PARAM(0)
  2689                                          assert_fraction(rax)
    53 00001DF7 803812              <1>  cmp byte [%1], %2
    54 00001DFA 0F8575020000        <1>  jne L_error_incorrect_type
  2690 00001E00 488B7801                        mov rdi, qword [rax + 1]
  2691 00001E04 E8E7000000                      call make_integer
  2692 00001E09 C9                              leave
  2693 00001E0A C21800                          ret AND_KILL_FRAME(1)
  2694                                          
  2695                                  L_code_ptr_denominator:
  2696 00001E0D C8000000                        enter 0, 0
  2697 00001E11 48837D1801                      cmp COUNT, 1
  2698 00001E16 0F8585010000                    jne L_error_arg_count_1
  2699 00001E1C 488B4520                        mov rax, PARAM(0)
  2700                                          assert_fraction(rax)
    53 00001E20 803812              <1>  cmp byte [%1], %2
    54 00001E23 0F854C020000        <1>  jne L_error_incorrect_type
  2701 00001E29 488B7809                        mov rdi, qword [rax + 1 + 8]
  2702 00001E2D E8BE000000                      call make_integer
  2703 00001E32 C9                              leave
  2704 00001E33 C21800                          ret AND_KILL_FRAME(1)
  2705                                  
  2706                                  L_code_ptr_is_eq:
  2707 00001E36 C8000000                	enter 0, 0
  2708 00001E3A 48837D1802              	cmp COUNT, 2
  2709 00001E3F 0F8591010000            	jne L_error_arg_count_2
  2710 00001E45 488B7D20                	mov rdi, PARAM(0)
  2711 00001E49 488B7528                	mov rsi, PARAM(1)
  2712 00001E4D 4839F7                  	cmp rdi, rsi
  2713 00001E50 746C                    	je .L_eq_true
  2714 00001E52 8A17                    	mov dl, byte [rdi]
  2715 00001E54 3A16                    	cmp dl, byte [rsi]
  2716 00001E56 7572                    	jne .L_eq_false
  2717 00001E58 80FA02                  	cmp dl, T_char
  2718 00001E5B 7459                    	je .L_char
  2719 00001E5D 80FA41                  	cmp dl, T_interned_symbol
  2720 00001E60 7440                    	je .L_interned_symbol
  2721 00001E62 80FA42                          cmp dl, T_uninterned_symbol
  2722 00001E65 7443                            je .L_uninterned_symbol
  2723 00001E67 80FA13                  	cmp dl, T_real
  2724 00001E6A 742E                    	je .L_real
  2725 00001E6C 80FA12                  	cmp dl, T_fraction
  2726 00001E6F 7413                    	je .L_fraction
  2727 00001E71 80FA11                          cmp dl, T_integer
  2728 00001E74 7402                            je .L_integer
  2729 00001E76 EB52                    	jmp .L_eq_false
  2730                                  .L_integer:
  2731 00001E78 488B4601                        mov rax, qword [rsi + 1]
  2732 00001E7C 483B4701                        cmp rax, qword [rdi + 1]
  2733 00001E80 7548                            jne .L_eq_false
  2734 00001E82 EB3A                            jmp .L_eq_true
  2735                                  .L_fraction:
  2736 00001E84 488B4601                	mov rax, qword [rsi + 1]
  2737 00001E88 483B4701                	cmp rax, qword [rdi + 1]
  2738 00001E8C 753C                    	jne .L_eq_false
  2739 00001E8E 488B4609                	mov rax, qword [rsi + 1 + 8]
  2740 00001E92 483B4709                	cmp rax, qword [rdi + 1 + 8]
  2741 00001E96 7532                    	jne .L_eq_false
  2742 00001E98 EB24                    	jmp .L_eq_true
  2743                                  .L_real:
  2744 00001E9A 488B4601                	mov rax, qword [rsi + 1]
  2745 00001E9E 483B4701                	cmp rax, qword [rdi + 1]
  2746                                  .L_interned_symbol:
  2747                                  	; never reached, because interned_symbols are static!
  2748                                  	; but I'm keeping it in case, I'll ever change
  2749                                  	; the implementation
  2750 00001EA2 488B4601                	mov rax, qword [rsi + 1]
  2751 00001EA6 483B4701                	cmp rax, qword [rdi + 1]
  2752                                  .L_uninterned_symbol:
  2753 00001EAA 4C8B4701                        mov r8, qword [rdi + 1]
  2754 00001EAE 4C3B4601                        cmp r8, qword [rsi + 1]
  2755 00001EB2 7516                            jne .L_eq_false
  2756 00001EB4 EB08                            jmp .L_eq_true
  2757                                  .L_char:
  2758 00001EB6 8A5E01                  	mov bl, byte [rsi + 1]
  2759 00001EB9 3A5F01                  	cmp bl, byte [rdi + 1]
  2760 00001EBC 750C                    	jne .L_eq_false
  2761                                  .L_eq_true:
  2762 00001EBE 48B8-                   	mov rax, sob_boolean_true
  2762 00001EC0 [0300000000000000] 
  2763 00001EC8 EB0A                    	jmp .L_eq_exit
  2764                                  .L_eq_false:
  2765 00001ECA 48B8-                   	mov rax, sob_boolean_false
  2765 00001ECC [0200000000000000] 
  2766                                  .L_eq_exit:
  2767 00001ED4 C9                      	leave
  2768 00001ED5 C22000                  	ret AND_KILL_FRAME(2)
  2769                                  
  2770                                  make_real:
  2771 00001ED8 C8000000                        enter 0, 0
  2772 00001EDC BF09000000                      mov rdi, (1 + 8)
  2773 00001EE1 E88DE4FFFF                      call malloc
  2774 00001EE6 C60013                          mov byte [rax], T_real
  2775 00001EE9 F20F114001                      movsd qword [rax + 1], xmm0
  2776 00001EEE C9                              leave 
  2777 00001EEF C3                              ret
  2778                                          
  2779                                  make_integer:
  2780 00001EF0 C8000000                        enter 0, 0
  2781 00001EF4 4889FE                          mov rsi, rdi
  2782 00001EF7 BF09000000                      mov rdi, (1 + 8)
  2783 00001EFC E872E4FFFF                      call malloc
  2784 00001F01 C60011                          mov byte [rax], T_integer
  2785 00001F04 48897001                        mov qword [rax + 1], rsi
  2786 00001F08 C9                              leave
  2787 00001F09 C3                              ret
  2788                                          
  2789                                  L_error_integer_range:
  2790 00001F0A 488B3C25[00000000]              mov rdi, qword [stderr]
  2791 00001F12 48BE-                           mov rsi, fmt_integer_range
  2791 00001F14 [070A000000000000] 
  2792 00001F1C B800000000                      mov rax, 0
  2793                                          ENTER
    44 00001F21 C8000000            <1>  enter 0, 0
    45 00001F25 4883E4F0            <1>  and rsp, ~15
  2794 00001F29 E8(00000000)                    call fprintf
  2795                                          LEAVE
    49 00001F2E C9                  <1>  leave
  2796 00001F2F 48C7C0FBFFFFFF                  mov rax, -5
  2797 00001F36 E8(00000000)                    call exit
  2798                                  
  2799                                  L_error_arg_negative:
  2800 00001F3B 488B3C25[00000000]              mov rdi, qword [stderr]
  2801 00001F43 48BE-                           mov rsi, fmt_arg_negative
  2801 00001F45 [DF08000000000000] 
  2802 00001F4D B800000000                      mov rax, 0
  2803                                          ENTER
    44 00001F52 C8000000            <1>  enter 0, 0
    45 00001F56 4883E4F0            <1>  and rsp, ~15
  2804 00001F5A E8(00000000)                    call fprintf
  2805                                          LEAVE
    49 00001F5F C9                  <1>  leave
  2806 00001F60 48C7C0FDFFFFFF                  mov rax, -3
  2807 00001F67 E8(00000000)                    call exit
  2808                                  
  2809                                  L_error_arg_count_0:
  2810 00001F6C 488B3C25[00000000]              mov rdi, qword [stderr]
  2811 00001F74 48BE-                           mov rsi, fmt_arg_count_0
  2811 00001F76 [0509000000000000] 
  2812 00001F7E 488B5518                        mov rdx, COUNT
  2813 00001F82 B800000000                      mov rax, 0
  2814                                          ENTER
    44 00001F87 C8000000            <1>  enter 0, 0
    45 00001F8B 4883E4F0            <1>  and rsp, ~15
  2815 00001F8F E8(00000000)                    call fprintf
  2816                                          LEAVE
    49 00001F94 C9                  <1>  leave
  2817 00001F95 48C7C0FDFFFFFF                  mov rax, -3
  2818 00001F9C E8(00000000)                    call exit
  2819                                  
  2820                                  L_error_arg_count_1:
  2821 00001FA1 488B3C25[00000000]              mov rdi, qword [stderr]
  2822 00001FA9 48BE-                           mov rsi, fmt_arg_count_1
  2822 00001FAB [2D09000000000000] 
  2823 00001FB3 488B5518                        mov rdx, COUNT
  2824 00001FB7 B800000000                      mov rax, 0
  2825                                          ENTER
    44 00001FBC C8000000            <1>  enter 0, 0
    45 00001FC0 4883E4F0            <1>  and rsp, ~15
  2826 00001FC4 E8(00000000)                    call fprintf
  2827                                          LEAVE
    49 00001FC9 C9                  <1>  leave
  2828 00001FCA 48C7C0FDFFFFFF                  mov rax, -3
  2829 00001FD1 E8(00000000)                    call exit
  2830                                  
  2831                                  L_error_arg_count_2:
  2832 00001FD6 488B3C25[00000000]              mov rdi, qword [stderr]
  2833 00001FDE 48BE-                           mov rsi, fmt_arg_count_2
  2833 00001FE0 [9309000000000000] 
  2834 00001FE8 488B5518                        mov rdx, COUNT
  2835 00001FEC B800000000                      mov rax, 0
  2836                                          ENTER
    44 00001FF1 C8000000            <1>  enter 0, 0
    45 00001FF5 4883E4F0            <1>  and rsp, ~15
  2837 00001FF9 E8(00000000)                    call fprintf
  2838                                          LEAVE
    49 00001FFE C9                  <1>  leave
  2839 00001FFF 48C7C0FDFFFFFF                  mov rax, -3
  2840 00002006 E8(00000000)                    call exit
  2841                                  
  2842                                  L_error_arg_count_12:
  2843 0000200B 488B3C25[00000000]              mov rdi, qword [stderr]
  2844 00002013 48BE-                           mov rsi, fmt_arg_count_12
  2844 00002015 [5309000000000000] 
  2845 0000201D 488B5518                        mov rdx, COUNT
  2846 00002021 B800000000                      mov rax, 0
  2847                                          ENTER
    44 00002026 C8000000            <1>  enter 0, 0
    45 0000202A 4883E4F0            <1>  and rsp, ~15
  2848 0000202E E8(00000000)                    call fprintf
  2849                                          LEAVE
    49 00002033 C9                  <1>  leave
  2850 00002034 48C7C0FDFFFFFF                  mov rax, -3
  2851 0000203B E8(00000000)                    call exit
  2852                                  
  2853                                  L_error_arg_count_3:
  2854 00002040 488B3C25[00000000]              mov rdi, qword [stderr]
  2855 00002048 48BE-                           mov rsi, fmt_arg_count_3
  2855 0000204A [BA09000000000000] 
  2856 00002052 488B5518                        mov rdx, COUNT
  2857 00002056 B800000000                      mov rax, 0
  2858                                          ENTER
    44 0000205B C8000000            <1>  enter 0, 0
    45 0000205F 4883E4F0            <1>  and rsp, ~15
  2859 00002063 E8(00000000)                    call fprintf
  2860                                          LEAVE
    49 00002068 C9                  <1>  leave
  2861 00002069 48C7C0FDFFFFFF                  mov rax, -3
  2862 00002070 E8(00000000)                    call exit
  2863                                          
  2864                                  L_error_incorrect_type:
  2865 00002075 488B3C25[00000000]              mov rdi, qword [stderr]
  2866 0000207D 48BE-                           mov rsi, fmt_type
  2866 0000207F [E309000000000000] 
  2867 00002087 B800000000                      mov rax, 0
  2868                                          ENTER
    44 0000208C C8000000            <1>  enter 0, 0
    45 00002090 4883E4F0            <1>  and rsp, ~15
  2869 00002094 E8(00000000)                    call fprintf
  2870                                          LEAVE
    49 00002099 C9                  <1>  leave
  2871 0000209A 48C7C0FCFFFFFF                  mov rax, -4
  2872 000020A1 E8(00000000)                    call exit
  2873                                  
  2874                                  L_error_division_by_zero:
  2875 000020A6 488B3C25[00000000]              mov rdi, qword [stderr]
  2876 000020AE 48BE-                           mov rsi, fmt_division_by_zero
  2876 000020B0 [240A000000000000] 
  2877 000020B8 B800000000                      mov rax, 0
  2878                                          ENTER
    44 000020BD C8000000            <1>  enter 0, 0
    45 000020C1 4883E4F0            <1>  and rsp, ~15
  2879 000020C5 E8(00000000)                    call fprintf
  2880                                          LEAVE
    49 000020CA C9                  <1>  leave
  2881 000020CB 48C7C0F8FFFFFF                  mov rax, -8
  2882 000020D2 E8(00000000)                    call exit
  2883                                  
  2884                                  section .data
  2885                                  gensym_count:
  2886 000008D4 0000000000000000                dq 0
  2887                                  fmt_char:
  2888 000008DC 256300                          db `%c\0`
  2889                                  fmt_arg_negative:
  2890 000008DF 212121205468652061-             db `!!! The argument cannot be negative.\n\0`
  2890 000008E8 7267756D656E742063-
  2890 000008F1 616E6E6F7420626520-
  2890 000008FA 6E656761746976652E-
  2890 00000903 0A00               
  2891                                  fmt_arg_count_0:
  2892 00000905 212121204578706563-             db `!!! Expecting zero arguments. Found %d\n\0`
  2892 0000090E 74696E67207A65726F-
  2892 00000917 20617267756D656E74-
  2892 00000920 732E20466F756E6420-
  2892 00000929 25640A00           
  2893                                  fmt_arg_count_1:
  2894 0000092D 212121204578706563-             db `!!! Expecting one argument. Found %d\n\0`
  2894 00000936 74696E67206F6E6520-
  2894 0000093F 617267756D656E742E-
  2894 00000948 20466F756E64202564-
  2894 00000951 0A00               
  2895                                  fmt_arg_count_12:
  2896 00000953 212121204578706563-             db `!!! Expecting one required and one optional argument. Found %d\n\0`
  2896 0000095C 74696E67206F6E6520-
  2896 00000965 726571756972656420-
  2896 0000096E 616E64206F6E65206F-
  2896 00000977 7074696F6E616C2061-
  2896 00000980 7267756D656E742E20-
  2896 00000989 466F756E642025640A-
  2896 00000992 00                 
  2897                                  fmt_arg_count_2:
  2898 00000993 212121204578706563-             db `!!! Expecting two arguments. Found %d\n\0`
  2898 0000099C 74696E672074776F20-
  2898 000009A5 617267756D656E7473-
  2898 000009AE 2E20466F756E642025-
  2898 000009B7 640A00             
  2899                                  fmt_arg_count_3:
  2900 000009BA 212121204578706563-             db `!!! Expecting three arguments. Found %d\n\0`
  2900 000009C3 74696E672074687265-
  2900 000009CC 6520617267756D656E-
  2900 000009D5 74732E20466F756E64-
  2900 000009DE 2025640A00         
  2901                                  fmt_type:
  2902 000009E3 2121212046756E6374-             db `!!! Function passed incorrect type\n\0`
  2902 000009EC 696F6E207061737365-
  2902 000009F5 6420696E636F727265-
  2902 000009FE 637420747970650A00 
  2903                                  fmt_integer_range:
  2904 00000A07 21212120496E636F72-             db `!!! Incorrect integer range\n\0`
  2904 00000A10 7265637420696E7465-
  2904 00000A19 6765722072616E6765-
  2904 00000A22 0A00               
  2905                                  fmt_division_by_zero:
  2906 00000A24 212121204469766973-             db `!!! Division by zero\n\0`
  2906 00000A2D 696F6E206279207A65-
  2906 00000A36 726F0A00           
  2907                                  fmt_scheme_error_part_1:
  2908 00000A3A 0A2121212054686520-             db `\n!!! The procedure \0`
  2908 00000A43 70726F636564757265-
  2908 00000A4C 2000               
  2909                                  fmt_scheme_error_part_2:
  2910 00000A4E 2061736B656420746F-             db ` asked to terminate the program\n`
  2910 00000A57 207465726D696E6174-
  2910 00000A60 65207468652070726F-
  2910 00000A69 6772616D0A         
  2911 00000A6E 202020207769746820-             db `    with the following message:\n\n\0`
  2911 00000A77 74686520666F6C6C6F-
  2911 00000A80 77696E67206D657373-
  2911 00000A89 6167653A0A0A00     
  2912                                  fmt_scheme_error_part_3:
  2913 00000A90 0A0A476F6F64627965-             db `\n\nGoodbye!\n\n\0`
  2913 00000A99 210A0A00           
