     1                                  ;;; prologue-1.asm
     2                                  ;;; The first part of the standard prologue for compiled programs
     3                                  ;;;
     4                                  ;;; Programmer: Mayer Goldberg, 2023
     5                                  
     6                                  %define T_void 				0
     7                                  %define T_nil 				1
     8                                  %define T_char 				2
     9                                  %define T_string 			3
    10                                  %define T_closure 			4
    11                                  %define T_undefined			5
    12                                  %define T_boolean 			8
    13                                  %define T_boolean_false 		(T_boolean | 1)
    14                                  %define T_boolean_true 			(T_boolean | 2)
    15                                  %define T_number 			16
    16                                  %define T_integer			(T_number | 1)
    17                                  %define T_fraction 			(T_number | 2)
    18                                  %define T_real 				(T_number | 3)
    19                                  %define T_collection 			32
    20                                  %define T_pair 				(T_collection | 1)
    21                                  %define T_vector 			(T_collection | 2)
    22                                  %define T_symbol 			64
    23                                  %define T_interned_symbol		(T_symbol | 1)
    24                                  %define T_uninterned_symbol		(T_symbol | 2)
    25                                  
    26                                  %define SOB_CHAR_VALUE(reg) 		byte [reg + 1]
    27                                  %define SOB_PAIR_CAR(reg)		qword [reg + 1]
    28                                  %define SOB_PAIR_CDR(reg)		qword [reg + 1 + 8]
    29                                  %define SOB_STRING_LENGTH(reg)		qword [reg + 1]
    30                                  %define SOB_VECTOR_LENGTH(reg)		qword [reg + 1]
    31                                  %define SOB_CLOSURE_ENV(reg)		qword [reg + 1]
    32                                  %define SOB_CLOSURE_CODE(reg)		qword [reg + 1 + 8]
    33                                  
    34                                  %define OLD_RBP 			qword [rbp]
    35                                  %define RET_ADDR 			qword [rbp + 8 * 1]
    36                                  %define ENV 				qword [rbp + 8 * 2]
    37                                  %define COUNT 				qword [rbp + 8 * 3]
    38                                  %define PARAM(n) 			qword [rbp + 8 * (4 + n)]
    39                                  %define AND_KILL_FRAME(n)		(8 * (2 + n))
    40                                  
    41                                  %define MAGIC				496351
    42                                  
    43                                  %macro ENTER 0
    44                                  	enter 0, 0
    45                                  	and rsp, ~15
    46                                  %endmacro
    47                                  
    48                                  %macro LEAVE 0
    49                                  	leave
    50                                  %endmacro
    51                                  
    52                                  %macro assert_type 2
    53                                          cmp byte [%1], %2
    54                                          jne L_error_incorrect_type
    55                                  %endmacro
    56                                  
    57                                  %define assert_void(reg)		assert_type reg, T_void
    58                                  %define assert_nil(reg)			assert_type reg, T_nil
    59                                  %define assert_char(reg)		assert_type reg, T_char
    60                                  %define assert_string(reg)		assert_type reg, T_string
    61                                  %define assert_symbol(reg)		assert_type reg, T_symbol
    62                                  %define assert_interned_symbol(reg)	assert_type reg, T_interned_symbol
    63                                  %define assert_uninterned_symbol(reg)	assert_type reg, T_uninterned_symbol
    64                                  %define assert_closure(reg)		assert_type reg, T_closure
    65                                  %define assert_boolean(reg)		assert_type reg, T_boolean
    66                                  %define assert_integer(reg)		assert_type reg, T_integer
    67                                  %define assert_fraction(reg)		assert_type reg, T_fraction
    68                                  %define assert_real(reg)		assert_type reg, T_real
    69                                  %define assert_pair(reg)		assert_type reg, T_pair
    70                                  %define assert_vector(reg)		assert_type reg, T_vector
    71                                  
    72                                  %define sob_void			(L_constants + 0)
    73                                  %define sob_nil				(L_constants + 1)
    74                                  %define sob_boolean_false		(L_constants + 2)
    75                                  %define sob_boolean_true		(L_constants + 3)
    76                                  %define sob_char_nul			(L_constants + 4)
    77                                  
    78                                  %define bytes(n)			(n)
    79                                  %define kbytes(n) 			(bytes(n) << 10)
    80                                  %define mbytes(n) 			(kbytes(n) << 10)
    81                                  %define gbytes(n) 			(mbytes(n) << 10)
    82                                  
    83                                  section .data
    84                                  L_constants:
    85                                  	; L_constants + 0:
    86 00000000 00                      	db T_void
    87                                  	; L_constants + 1:
    88 00000001 01                      	db T_nil
    89                                  	; L_constants + 2:
    90 00000002 09                      	db T_boolean_false
    91                                  	; L_constants + 3:
    92 00000003 0A                      	db T_boolean_true
    93                                  	; L_constants + 4:
    94 00000004 0200                    	db T_char, 0x00	; #\nul
    95                                  	; L_constants + 6:
    96 00000006 03                      	db T_string	; "null?"
    97 00000007 0500000000000000        	dq 5
    98 0000000F 6E756C6C3F              	db 0x6E, 0x75, 0x6C, 0x6C, 0x3F
    99                                  	; L_constants + 20:
   100 00000014 03                      	db T_string	; "pair?"
   101 00000015 0500000000000000        	dq 5
   102 0000001D 706169723F              	db 0x70, 0x61, 0x69, 0x72, 0x3F
   103                                  	; L_constants + 34:
   104 00000022 03                      	db T_string	; "void?"
   105 00000023 0500000000000000        	dq 5
   106 0000002B 766F69643F              	db 0x76, 0x6F, 0x69, 0x64, 0x3F
   107                                  	; L_constants + 48:
   108 00000030 03                      	db T_string	; "char?"
   109 00000031 0500000000000000        	dq 5
   110 00000039 636861723F              	db 0x63, 0x68, 0x61, 0x72, 0x3F
   111                                  	; L_constants + 62:
   112 0000003E 03                      	db T_string	; "string?"
   113 0000003F 0700000000000000        	dq 7
   114 00000047 737472696E673F          	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x3F
   115                                  	; L_constants + 78:
   116 0000004E 03                      	db T_string	; "interned-symbol?"
   117 0000004F 1000000000000000        	dq 16
   118 00000057 696E7465726E6564        	db 0x69, 0x6E, 0x74, 0x65, 0x72, 0x6E, 0x65, 0x64
   119 0000005F 2D73796D626F6C3F        	db 0x2D, 0x73, 0x79, 0x6D, 0x62, 0x6F, 0x6C, 0x3F
   120                                  	; L_constants + 103:
   121 00000067 03                      	db T_string	; "vector?"
   122 00000068 0700000000000000        	dq 7
   123 00000070 766563746F723F          	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x3F
   124                                  	; L_constants + 119:
   125 00000077 03                      	db T_string	; "procedure?"
   126 00000078 0A00000000000000        	dq 10
   127 00000080 70726F6365647572        	db 0x70, 0x72, 0x6F, 0x63, 0x65, 0x64, 0x75, 0x72
   128 00000088 653F                    	db 0x65, 0x3F
   129                                  	; L_constants + 138:
   130 0000008A 03                      	db T_string	; "real?"
   131 0000008B 0500000000000000        	dq 5
   132 00000093 7265616C3F              	db 0x72, 0x65, 0x61, 0x6C, 0x3F
   133                                  	; L_constants + 152:
   134 00000098 03                      	db T_string	; "fraction?"
   135 00000099 0900000000000000        	dq 9
   136 000000A1 6672616374696F6E        	db 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E
   137 000000A9 3F                      	db 0x3F
   138                                  	; L_constants + 170:
   139 000000AA 03                      	db T_string	; "boolean?"
   140 000000AB 0800000000000000        	dq 8
   141 000000B3 626F6F6C65616E3F        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x3F
   142                                  	; L_constants + 187:
   143 000000BB 03                      	db T_string	; "number?"
   144 000000BC 0700000000000000        	dq 7
   145 000000C4 6E756D6265723F          	db 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72, 0x3F
   146                                  	; L_constants + 203:
   147 000000CB 03                      	db T_string	; "collection?"
   148 000000CC 0B00000000000000        	dq 11
   149 000000D4 636F6C6C65637469        	db 0x63, 0x6F, 0x6C, 0x6C, 0x65, 0x63, 0x74, 0x69
   150 000000DC 6F6E3F                  	db 0x6F, 0x6E, 0x3F
   151                                  	; L_constants + 223:
   152 000000DF 03                      	db T_string	; "cons"
   153 000000E0 0400000000000000        	dq 4
   154 000000E8 636F6E73                	db 0x63, 0x6F, 0x6E, 0x73
   155                                  	; L_constants + 236:
   156 000000EC 03                      	db T_string	; "display-sexpr"
   157 000000ED 0D00000000000000        	dq 13
   158 000000F5 646973706C61792D        	db 0x64, 0x69, 0x73, 0x70, 0x6C, 0x61, 0x79, 0x2D
   159 000000FD 7365787072              	db 0x73, 0x65, 0x78, 0x70, 0x72
   160                                  	; L_constants + 258:
   161 00000102 03                      	db T_string	; "write-char"
   162 00000103 0A00000000000000        	dq 10
   163 0000010B 77726974652D6368        	db 0x77, 0x72, 0x69, 0x74, 0x65, 0x2D, 0x63, 0x68
   164 00000113 6172                    	db 0x61, 0x72
   165                                  	; L_constants + 277:
   166 00000115 03                      	db T_string	; "car"
   167 00000116 0300000000000000        	dq 3
   168 0000011E 636172                  	db 0x63, 0x61, 0x72
   169                                  	; L_constants + 289:
   170 00000121 03                      	db T_string	; "cdr"
   171 00000122 0300000000000000        	dq 3
   172 0000012A 636472                  	db 0x63, 0x64, 0x72
   173                                  	; L_constants + 301:
   174 0000012D 03                      	db T_string	; "string-length"
   175 0000012E 0D00000000000000        	dq 13
   176 00000136 737472696E672D6C        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x6C
   177 0000013E 656E677468              	db 0x65, 0x6E, 0x67, 0x74, 0x68
   178                                  	; L_constants + 323:
   179 00000143 03                      	db T_string	; "vector-length"
   180 00000144 0D00000000000000        	dq 13
   181 0000014C 766563746F722D6C        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x6C
   182 00000154 656E677468              	db 0x65, 0x6E, 0x67, 0x74, 0x68
   183                                  	; L_constants + 345:
   184 00000159 03                      	db T_string	; "real->integer"
   185 0000015A 0D00000000000000        	dq 13
   186 00000162 7265616C2D3E696E        	db 0x72, 0x65, 0x61, 0x6C, 0x2D, 0x3E, 0x69, 0x6E
   187 0000016A 7465676572              	db 0x74, 0x65, 0x67, 0x65, 0x72
   188                                  	; L_constants + 367:
   189 0000016F 03                      	db T_string	; "exit"
   190 00000170 0400000000000000        	dq 4
   191 00000178 65786974                	db 0x65, 0x78, 0x69, 0x74
   192                                  	; L_constants + 380:
   193 0000017C 03                      	db T_string	; "integer->real"
   194 0000017D 0D00000000000000        	dq 13
   195 00000185 696E74656765722D        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x2D
   196 0000018D 3E7265616C              	db 0x3E, 0x72, 0x65, 0x61, 0x6C
   197                                  	; L_constants + 402:
   198 00000192 03                      	db T_string	; "fraction->real"
   199 00000193 0E00000000000000        	dq 14
   200 0000019B 6672616374696F6E        	db 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E
   201 000001A3 2D3E7265616C            	db 0x2D, 0x3E, 0x72, 0x65, 0x61, 0x6C
   202                                  	; L_constants + 425:
   203 000001A9 03                      	db T_string	; "char->integer"
   204 000001AA 0D00000000000000        	dq 13
   205 000001B2 636861722D3E696E        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x3E, 0x69, 0x6E
   206 000001BA 7465676572              	db 0x74, 0x65, 0x67, 0x65, 0x72
   207                                  	; L_constants + 447:
   208 000001BF 03                      	db T_string	; "integer->char"
   209 000001C0 0D00000000000000        	dq 13
   210 000001C8 696E74656765722D        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x2D
   211 000001D0 3E63686172              	db 0x3E, 0x63, 0x68, 0x61, 0x72
   212                                  	; L_constants + 469:
   213 000001D5 03                      	db T_string	; "trng"
   214 000001D6 0400000000000000        	dq 4
   215 000001DE 74726E67                	db 0x74, 0x72, 0x6E, 0x67
   216                                  	; L_constants + 482:
   217 000001E2 03                      	db T_string	; "zero?"
   218 000001E3 0500000000000000        	dq 5
   219 000001EB 7A65726F3F              	db 0x7A, 0x65, 0x72, 0x6F, 0x3F
   220                                  	; L_constants + 496:
   221 000001F0 03                      	db T_string	; "integer?"
   222 000001F1 0800000000000000        	dq 8
   223 000001F9 696E74656765723F        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x3F
   224                                  	; L_constants + 513:
   225 00000201 03                      	db T_string	; "__bin-apply"
   226 00000202 0B00000000000000        	dq 11
   227 0000020A 5F5F62696E2D6170        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x70
   228 00000212 706C79                  	db 0x70, 0x6C, 0x79
   229                                  	; L_constants + 533:
   230 00000215 03                      	db T_string	; "__bin-add-rr"
   231 00000216 0C00000000000000        	dq 12
   232 0000021E 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   233 00000226 642D7272                	db 0x64, 0x2D, 0x72, 0x72
   234                                  	; L_constants + 554:
   235 0000022A 03                      	db T_string	; "__bin-sub-rr"
   236 0000022B 0C00000000000000        	dq 12
   237 00000233 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   238 0000023B 622D7272                	db 0x62, 0x2D, 0x72, 0x72
   239                                  	; L_constants + 575:
   240 0000023F 03                      	db T_string	; "__bin-mul-rr"
   241 00000240 0C00000000000000        	dq 12
   242 00000248 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   243 00000250 6C2D7272                	db 0x6C, 0x2D, 0x72, 0x72
   244                                  	; L_constants + 596:
   245 00000254 03                      	db T_string	; "__bin-div-rr"
   246 00000255 0C00000000000000        	dq 12
   247 0000025D 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   248 00000265 762D7272                	db 0x76, 0x2D, 0x72, 0x72
   249                                  	; L_constants + 617:
   250 00000269 03                      	db T_string	; "__bin-add-qq"
   251 0000026A 0C00000000000000        	dq 12
   252 00000272 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   253 0000027A 642D7171                	db 0x64, 0x2D, 0x71, 0x71
   254                                  	; L_constants + 638:
   255 0000027E 03                      	db T_string	; "__bin-sub-qq"
   256 0000027F 0C00000000000000        	dq 12
   257 00000287 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   258 0000028F 622D7171                	db 0x62, 0x2D, 0x71, 0x71
   259                                  	; L_constants + 659:
   260 00000293 03                      	db T_string	; "__bin-mul-qq"
   261 00000294 0C00000000000000        	dq 12
   262 0000029C 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   263 000002A4 6C2D7171                	db 0x6C, 0x2D, 0x71, 0x71
   264                                  	; L_constants + 680:
   265 000002A8 03                      	db T_string	; "__bin-div-qq"
   266 000002A9 0C00000000000000        	dq 12
   267 000002B1 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   268 000002B9 762D7171                	db 0x76, 0x2D, 0x71, 0x71
   269                                  	; L_constants + 701:
   270 000002BD 03                      	db T_string	; "__bin-add-zz"
   271 000002BE 0C00000000000000        	dq 12
   272 000002C6 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   273 000002CE 642D7A7A                	db 0x64, 0x2D, 0x7A, 0x7A
   274                                  	; L_constants + 722:
   275 000002D2 03                      	db T_string	; "__bin-sub-zz"
   276 000002D3 0C00000000000000        	dq 12
   277 000002DB 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   278 000002E3 622D7A7A                	db 0x62, 0x2D, 0x7A, 0x7A
   279                                  	; L_constants + 743:
   280 000002E7 03                      	db T_string	; "__bin-mul-zz"
   281 000002E8 0C00000000000000        	dq 12
   282 000002F0 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   283 000002F8 6C2D7A7A                	db 0x6C, 0x2D, 0x7A, 0x7A
   284                                  	; L_constants + 764:
   285 000002FC 03                      	db T_string	; "__bin-div-zz"
   286 000002FD 0C00000000000000        	dq 12
   287 00000305 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   288 0000030D 762D7A7A                	db 0x76, 0x2D, 0x7A, 0x7A
   289                                  	; L_constants + 785:
   290 00000311 03                      	db T_string	; "error"
   291 00000312 0500000000000000        	dq 5
   292 0000031A 6572726F72              	db 0x65, 0x72, 0x72, 0x6F, 0x72
   293                                  	; L_constants + 799:
   294 0000031F 03                      	db T_string	; "__bin-less-than-rr"
   295 00000320 1200000000000000        	dq 18
   296 00000328 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   297 00000330 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   298 00000338 7272                    	db 0x72, 0x72
   299                                  	; L_constants + 826:
   300 0000033A 03                      	db T_string	; "__bin-less-than-qq"
   301 0000033B 1200000000000000        	dq 18
   302 00000343 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   303 0000034B 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   304 00000353 7171                    	db 0x71, 0x71
   305                                  	; L_constants + 853:
   306 00000355 03                      	db T_string	; "__bin-less-than-zz"
   307 00000356 1200000000000000        	dq 18
   308 0000035E 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   309 00000366 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   310 0000036E 7A7A                    	db 0x7A, 0x7A
   311                                  	; L_constants + 880:
   312 00000370 03                      	db T_string	; "__bin-equal-rr"
   313 00000371 0E00000000000000        	dq 14
   314 00000379 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   315 00000381 75616C2D7272            	db 0x75, 0x61, 0x6C, 0x2D, 0x72, 0x72
   316                                  	; L_constants + 903:
   317 00000387 03                      	db T_string	; "__bin-equal-qq"
   318 00000388 0E00000000000000        	dq 14
   319 00000390 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   320 00000398 75616C2D7171            	db 0x75, 0x61, 0x6C, 0x2D, 0x71, 0x71
   321                                  	; L_constants + 926:
   322 0000039E 03                      	db T_string	; "__bin-equal-zz"
   323 0000039F 0E00000000000000        	dq 14
   324 000003A7 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   325 000003AF 75616C2D7A7A            	db 0x75, 0x61, 0x6C, 0x2D, 0x7A, 0x7A
   326                                  	; L_constants + 949:
   327 000003B5 03                      	db T_string	; "quotient"
   328 000003B6 0800000000000000        	dq 8
   329 000003BE 71756F7469656E74        	db 0x71, 0x75, 0x6F, 0x74, 0x69, 0x65, 0x6E, 0x74
   330                                  	; L_constants + 966:
   331 000003C6 03                      	db T_string	; "remainder"
   332 000003C7 0900000000000000        	dq 9
   333 000003CF 72656D61696E6465        	db 0x72, 0x65, 0x6D, 0x61, 0x69, 0x6E, 0x64, 0x65
   334 000003D7 72                      	db 0x72
   335                                  	; L_constants + 984:
   336 000003D8 03                      	db T_string	; "set-car!"
   337 000003D9 0800000000000000        	dq 8
   338 000003E1 7365742D63617221        	db 0x73, 0x65, 0x74, 0x2D, 0x63, 0x61, 0x72, 0x21
   339                                  	; L_constants + 1001:
   340 000003E9 03                      	db T_string	; "set-cdr!"
   341 000003EA 0800000000000000        	dq 8
   342 000003F2 7365742D63647221        	db 0x73, 0x65, 0x74, 0x2D, 0x63, 0x64, 0x72, 0x21
   343                                  	; L_constants + 1018:
   344 000003FA 03                      	db T_string	; "string-ref"
   345 000003FB 0A00000000000000        	dq 10
   346 00000403 737472696E672D72        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x72
   347 0000040B 6566                    	db 0x65, 0x66
   348                                  	; L_constants + 1037:
   349 0000040D 03                      	db T_string	; "vector-ref"
   350 0000040E 0A00000000000000        	dq 10
   351 00000416 766563746F722D72        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x72
   352 0000041E 6566                    	db 0x65, 0x66
   353                                  	; L_constants + 1056:
   354 00000420 03                      	db T_string	; "vector-set!"
   355 00000421 0B00000000000000        	dq 11
   356 00000429 766563746F722D73        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x73
   357 00000431 657421                  	db 0x65, 0x74, 0x21
   358                                  	; L_constants + 1076:
   359 00000434 03                      	db T_string	; "string-set!"
   360 00000435 0B00000000000000        	dq 11
   361 0000043D 737472696E672D73        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x73
   362 00000445 657421                  	db 0x65, 0x74, 0x21
   363                                  	; L_constants + 1096:
   364 00000448 03                      	db T_string	; "make-vector"
   365 00000449 0B00000000000000        	dq 11
   366 00000451 6D616B652D766563        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x76, 0x65, 0x63
   367 00000459 746F72                  	db 0x74, 0x6F, 0x72
   368                                  	; L_constants + 1116:
   369 0000045C 03                      	db T_string	; "make-string"
   370 0000045D 0B00000000000000        	dq 11
   371 00000465 6D616B652D737472        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x73, 0x74, 0x72
   372 0000046D 696E67                  	db 0x69, 0x6E, 0x67
   373                                  	; L_constants + 1136:
   374 00000470 03                      	db T_string	; "numerator"
   375 00000471 0900000000000000        	dq 9
   376 00000479 6E756D657261746F        	db 0x6E, 0x75, 0x6D, 0x65, 0x72, 0x61, 0x74, 0x6F
   377 00000481 72                      	db 0x72
   378                                  	; L_constants + 1154:
   379 00000482 03                      	db T_string	; "denominator"
   380 00000483 0B00000000000000        	dq 11
   381 0000048B 64656E6F6D696E61        	db 0x64, 0x65, 0x6E, 0x6F, 0x6D, 0x69, 0x6E, 0x61
   382 00000493 746F72                  	db 0x74, 0x6F, 0x72
   383                                  	; L_constants + 1174:
   384 00000496 03                      	db T_string	; "eq?"
   385 00000497 0300000000000000        	dq 3
   386 0000049F 65713F                  	db 0x65, 0x71, 0x3F
   387                                  	; L_constants + 1186:
   388 000004A2 03                      	db T_string	; "__integer-to-fracti...
   389 000004A3 1500000000000000        	dq 21
   390 000004AB 5F5F696E74656765        	db 0x5F, 0x5F, 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65
   391 000004B3 722D746F2D667261        	db 0x72, 0x2D, 0x74, 0x6F, 0x2D, 0x66, 0x72, 0x61
   392 000004BB 6374696F6E              	db 0x63, 0x74, 0x69, 0x6F, 0x6E
   393                                  	; L_constants + 1216:
   394 000004C0 03                      	db T_string	; "logand"
   395 000004C1 0600000000000000        	dq 6
   396 000004C9 6C6F67616E64            	db 0x6C, 0x6F, 0x67, 0x61, 0x6E, 0x64
   397                                  	; L_constants + 1231:
   398 000004CF 03                      	db T_string	; "logor"
   399 000004D0 0500000000000000        	dq 5
   400 000004D8 6C6F676F72              	db 0x6C, 0x6F, 0x67, 0x6F, 0x72
   401                                  	; L_constants + 1245:
   402 000004DD 03                      	db T_string	; "logxor"
   403 000004DE 0600000000000000        	dq 6
   404 000004E6 6C6F67786F72            	db 0x6C, 0x6F, 0x67, 0x78, 0x6F, 0x72
   405                                  	; L_constants + 1260:
   406 000004EC 03                      	db T_string	; "lognot"
   407 000004ED 0600000000000000        	dq 6
   408 000004F5 6C6F676E6F74            	db 0x6C, 0x6F, 0x67, 0x6E, 0x6F, 0x74
   409                                  	; L_constants + 1275:
   410 000004FB 03                      	db T_string	; "ash"
   411 000004FC 0300000000000000        	dq 3
   412 00000504 617368                  	db 0x61, 0x73, 0x68
   413                                  	; L_constants + 1287:
   414 00000507 03                      	db T_string	; "symbol?"
   415 00000508 0700000000000000        	dq 7
   416 00000510 73796D626F6C3F          	db 0x73, 0x79, 0x6D, 0x62, 0x6F, 0x6C, 0x3F
   417                                  	; L_constants + 1303:
   418 00000517 03                      	db T_string	; "uninterned-symbol?"
   419 00000518 1200000000000000        	dq 18
   420 00000520 756E696E7465726E        	db 0x75, 0x6E, 0x69, 0x6E, 0x74, 0x65, 0x72, 0x6E
   421 00000528 65642D73796D626F        	db 0x65, 0x64, 0x2D, 0x73, 0x79, 0x6D, 0x62, 0x6F
   422 00000530 6C3F                    	db 0x6C, 0x3F
   423                                  	; L_constants + 1330:
   424 00000532 03                      	db T_string	; "gensym?"
   425 00000533 0700000000000000        	dq 7
   426 0000053B 67656E73796D3F          	db 0x67, 0x65, 0x6E, 0x73, 0x79, 0x6D, 0x3F
   427                                  	; L_constants + 1346:
   428 00000542 03                      	db T_string	; "gensym"
   429 00000543 0600000000000000        	dq 6
   430 0000054B 67656E73796D            	db 0x67, 0x65, 0x6E, 0x73, 0x79, 0x6D
   431                                  	; L_constants + 1361:
   432 00000551 03                      	db T_string	; "frame"
   433 00000552 0500000000000000        	dq 5
   434 0000055A 6672616D65              	db 0x66, 0x72, 0x61, 0x6D, 0x65
   435                                  	; L_constants + 1375:
   436 0000055F 03                      	db T_string	; "break"
   437 00000560 0500000000000000        	dq 5
   438 00000568 627265616B              	db 0x62, 0x72, 0x65, 0x61, 0x6B
   439                                  	; L_constants + 1389:
   440 0000056D 03                      	db T_string	; "boolean-false?"
   441 0000056E 0E00000000000000        	dq 14
   442 00000576 626F6F6C65616E2D        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x2D
   443 0000057E 66616C73653F            	db 0x66, 0x61, 0x6C, 0x73, 0x65, 0x3F
   444                                  	; L_constants + 1412:
   445 00000584 03                      	db T_string	; "boolean-true?"
   446 00000585 0D00000000000000        	dq 13
   447 0000058D 626F6F6C65616E2D        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x2D
   448 00000595 747275653F              	db 0x74, 0x72, 0x75, 0x65, 0x3F
   449                                  	; L_constants + 1434:
   450 0000059A 03                      	db T_string	; "primitive?"
   451 0000059B 0A00000000000000        	dq 10
   452 000005A3 7072696D69746976        	db 0x70, 0x72, 0x69, 0x6D, 0x69, 0x74, 0x69, 0x76
   453 000005AB 653F                    	db 0x65, 0x3F
   454                                  	; L_constants + 1453:
   455 000005AD 03                      	db T_string	; "length"
   456 000005AE 0600000000000000        	dq 6
   457 000005B6 6C656E677468            	db 0x6C, 0x65, 0x6E, 0x67, 0x74, 0x68
   458                                  	; L_constants + 1468:
   459 000005BC 03                      	db T_string	; "make-list"
   460 000005BD 0900000000000000        	dq 9
   461 000005C5 6D616B652D6C6973        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x6C, 0x69, 0x73
   462 000005CD 74                      	db 0x74
   463                                  	; L_constants + 1486:
   464 000005CE 03                      	db T_string	; "return"
   465 000005CF 0600000000000000        	dq 6
   466 000005D7 72657475726E            	db 0x72, 0x65, 0x74, 0x75, 0x72, 0x6E
   467                                  	; L_constants + 1501:
   468 000005DD 11                      	db T_integer	; 5
   469 000005DE 0500000000000000        	dq 5
   470                                  	; L_constants + 1510:
   471 000005E6 11                      	db T_integer	; 6
   472 000005E7 0600000000000000        	dq 6
   473                                  	; L_constants + 1519:
   474 000005EF 11                      	db T_integer	; 7
   475 000005F0 0700000000000000        	dq 7
   476                                  	; L_constants + 1528:
   477 000005F8 11                      	db T_integer	; 8
   478 000005F9 0800000000000000        	dq 8
   479                                  
   480                                  
   481                                  extern printf, fprintf, stdout, stderr, fwrite, exit, putchar, getchar
   482                                  global main
   483                                  section .text
   484                                  main:
   485 00000000 C8000000                        enter 0, 0
   486 00000004 6A00                            push 0
   487 00000006 6A00                            push 0
   488 00000008 68[D3010000]                    push Lend
   489 0000000D C8000000                        enter 0, 0
   490                                  
   491                                  	; preparing a non-tail-call
   492 00000011 48B8-                   	mov rax, L_constants + 1528
   492 00000013 [F805000000000000] 
   493 0000001B 50                      	push rax
   494 0000001C 48B8-                   	mov rax, L_constants + 1519
   494 0000001E [EF05000000000000] 
   495 00000026 50                      	push rax
   496 00000027 48B8-                   	mov rax, L_constants + 1510
   496 00000029 [E605000000000000] 
   497 00000031 50                      	push rax
   498 00000032 48B8-                   	mov rax, L_constants + 1501
   498 00000034 [DD05000000000000] 
   499 0000003C 50                      	push rax
   500 0000003D 6A04                    	push 4	; arg count
   501 0000003F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   502 00000044 E8F5020000              	call malloc
   503 00000049 50                      	push rax
   504 0000004A BF00000000              	mov rdi, 8 * 0	; new rib
   505 0000004F E8EA020000              	call malloc
   506 00000054 50                      	push rax
   507 00000055 BF08000000              	mov rdi, 8 * 1	; extended env
   508 0000005A E8DF020000              	call malloc
   509 0000005F 488B7D10                	mov rdi, ENV
   510 00000063 BE00000000              	mov rsi, 0
   511 00000068 BA01000000              	mov rdx, 1
   512                                  .L_lambda_opt_env_loop_0001:	; ext_env[i + 1] <-- env[i]
   513 0000006D 4883FE00                	cmp rsi, 0
   514 00000071 7410                    	je .L_lambda_opt_env_end_0001
   515 00000073 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
   516 00000077 48890CD0                	mov qword [rax + 8 * rdx], rcx
   517 0000007B 48FFC6                  	inc rsi
   518 0000007E 48FFC2                  	inc rdx
   519 00000081 EBEA                    	jmp .L_lambda_opt_env_loop_0001
   520                                  .L_lambda_opt_env_end_0001:
   521 00000083 5B                      	pop rbx
   522 00000084 BE00000000              	mov rsi, 0
   523                                  .L_lambda_opt_params_loop_0001:	; copy params
   524 00000089 4883FE00                	cmp rsi, 0
   525 0000008D 740E                    	je .L_lambda_opt_params_end_0001
   526 0000008F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   527 00000094 488914F3                	mov qword [rbx + 8 * rsi], rdx
   528 00000098 48FFC6                  	inc rsi
   529 0000009B EBEC                    	jmp .L_lambda_opt_params_loop_0001
   530                                  .L_lambda_opt_params_end_0001:
   531 0000009D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   532 000000A0 4889C3                  	mov rbx, rax
   533 000000A3 58                      	pop rax
   534 000000A4 C60004                  	mov byte [rax], T_closure
   535 000000A7 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   536 000000AB 48C74009[B8000000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0001
   537 000000B3 E90C010000              	jmp .L_lambda_opt_end_0001
   538                                  .L_lambda_opt_code_0001:
   539                                  	; Load number of arguments from stack into r10
   540 000000B8 4C8B542410              	mov r10, qword [rsp + 8 * 2]         ; Total number of arguments into r10
   541 000000BD 4983FA03                	cmp r10, 3         ; Compare r10 (argument count) with required params
   542 000000C1 7407                    	je .L_lambda_opt_arity_check_exact_0001	; Jump if arity matches
   543 000000C3 7F4C                    	jg .L_lambda_opt_arity_check_more_0001	; Jump if more arguments passed
   544                                  	; If no match, jump to error
   545 000000C5 E941020000              	jmp L_error_incorrect_arity_opt
   546                                  .L_lambda_opt_arity_check_exact_0001:
   547 000000CA 4D89D6                  	mov r14, r10 ; num of iterations
   548 000000CD 4983C603                	add r14, 3
   549 000000D1 41BF00000000            	mov r15, 0 ; index
   550 000000D7 4883EC08                	sub rsp, 8 ; Allocate one extra space on the stack
   551 000000DB 48C70424[01000000]      	mov qword [rsp], sob_nil ; Initialize the new space with sob_nil
   552 000000E3 EB00                    	jmp .L_lambda_opt_stack_shrink_loop_0001
   553                                  .L_lambda_opt_stack_shrink_loop_0001:
   554 000000E5 4983FE00                	cmp r14, 0
   555 000000E9 7E11                    	jle .L_make_lambda_opt_exact_finish_0001
   556 000000EB 4E8B5CFC08              	mov r11, qword [rsp + 8 * (r15 + 1)] 
   557 000000F0 4E891CFC                	mov qword [rsp + 8 * r15], r11 
   558 000000F4 49FFCE                  	dec r14 ; next iteration
   559 000000F7 49FFC7                  	inc r15 ; next iteration
   560 000000FA EBE9                    	jmp .L_lambda_opt_stack_shrink_loop_0001
   561                                  .L_make_lambda_opt_exact_finish_0001:
   562 000000FC 4AC704FC[01000000]      	mov qword [rsp + 8 * r15], sob_nil ; Add sob_nil to the stack
   563 00000104 49FFC2                  	inc r10
   564 00000107 4C89542410              	mov qword [rsp + 8 * 2], r10
   565 0000010C E9A7000000              	jmp .L_lambda_opt_stack_adjusted_0001
   566                                  .L_lambda_opt_arity_check_more_0001:
   567 00000111 4D89D6                  	mov r14, r10 ; num of iterations
   568 00000114 4D89D7                  	mov r15, r10 ; num of iterations
   569 00000117 41B903000000            	mov r9, 3
   570 0000011D 4D29CE                  	sub r14, r9 ; Calculate number of extra arguments
   571 00000120 4D01F1                  	add r9, r14 ; all args
   572 00000123 48BA-                   	mov rdx, sob_nil ; Initialize the new space with sob_nil
   572 00000125 [0100000000000000] 
   573 0000012D EB00                    	jmp .L_make_lambda_opt_arg_list_0001
   574                                  .L_make_lambda_opt_arg_list_0001:
   575 0000012F 4983FE00                	cmp r14, 0
   576 00000133 7E2C                    	jle .L_make_lambda_opt_stack_fixed_0001
   577 00000135 4A8B7CCC10              	mov rdi, qword [rsp + 8 * (r9 + 2)] ; Load the current argument into rdi
   578 0000013A 4989C0                  	mov r8, rax                         ; Save closure pointer in r8
   579 0000013D 41BA11000000            	mov r10, (1 + 8 + 8)                ; Allocate memory for the new pair (T_PAIR + CAR + CDR)
   580 00000143 E8F6010000              	call malloc                         ; Allocate memory, result in rax
   581 00000148 C60021                  	mov byte [rax], T_pair              ; Mark as a pair
   582 0000014B 48897801                	mov qword [rax + 1], rdi         ; CAR: current argument
   583 0000014F 48895009                	mov qword [rax + 1 + 8], rdx           ; CDR: current list
   584 00000153 4889C2                  	mov rdx, rax                        ; Update rdx to point to the new pair
   585 00000156 4C89C0                  	mov rax, r8                         ; Restore closure to rax
   586 00000159 49FFC9                  	dec r9
   587 0000015C 49FFCE                  	dec r14 ; next iteration
   588 0000015F EBCE                    	jmp .L_make_lambda_opt_arg_list_0001
   589                                  .L_make_lambda_opt_stack_fixed_0001:
   590 00000161 4D89FE                  	mov r14, r15 ; 
   591 00000164 4D89F8                  	mov r8, r15 ; num of iterations
   592 00000167 4983C003                	add r8, 3
   593 0000016B 41BA03000000            	mov r10, 3
   594 00000171 4D29D6                  	sub r14, r10
   595 00000174 4D29F0                  	sub r8, r14 ;
   596 00000177 4A8954C418              	mov qword [rsp + 8 * (r8 + 3)], rdx ; Add list to the right place
   597 0000017C EB00                    	jmp .L_lambda_opt_stack_shrink_loop_more_0001
   598                                  .L_lambda_opt_stack_shrink_loop_more_0001:
   599 0000017E 4983F800                	cmp r8, 0
   600 00000182 7E16                    	jle .L_make_lambda_opt_more_finish_0001
   601 00000184 4D8D60FF                	lea r12, [r8 - 1]
   602 00000188 4E8B1CE4                	mov r11, qword [rsp + 8 * r12] 
   603 0000018C 4F8D6430FF              	lea r12, [r8 + r14 - 1]
   604 00000191 4E891CE4                	mov qword [rsp + 8 * r12], r11 
   605 00000195 49FFC8                  	dec r8 ; next iteration
   606 00000198 EBE4                    	jmp .L_lambda_opt_stack_shrink_loop_more_0001
   607                                  .L_make_lambda_opt_more_finish_0001:
   608 0000019A 4D89F8                  	mov r8, r15 ; num of iterations
   609 0000019D 41BA03000000            	mov r10, 3
   610 000001A3 4D29D0                  	sub r8, r10 ; num of iterations
   611 000001A6 49FFC0                  	inc r8
   612 000001A9 4A0324F500000000        	add rsp, [8 * r14] 
   613 000001B1 4C89442410              	mov qword [rsp + 8 * 2], r8
   614 000001B6 EB00                    	jmp .L_lambda_opt_stack_adjusted_0001
   615                                  .L_lambda_opt_stack_adjusted_0001:
   616 000001B8 C8000000                	enter 0, 0
   617 000001BC 488B4538                	mov rax, PARAM(3)	; param d
   618 000001C0 C9                      	leave
   619 000001C1 C22800                  	ret AND_KILL_FRAME(3)
   620                                  .L_lambda_opt_end_0001:	; new closure is in rax
   621 000001C4 803804                  	cmp byte [rax], T_closure
   622 000001C7 0F85C8000000            	jne L_error_non_closure
   623 000001CD FF7001                  	push SOB_CLOSURE_ENV(rax)
   624 000001D0 FF5009                  	call SOB_CLOSURE_CODE(rax)
   625                                  Lend:
   626 000001D3 4889C7                  	mov rdi, rax
   627 000001D6 E8B8030000              	call print_sexpr_if_not_void
   628 000001DB 48BF-                   mov rdi, fmt_memory_usage
   628 000001DD [9906000000000000] 
   629 000001E5 488B3425[1F070000]              mov rsi, qword [top_of_memory]
   630 000001ED 4881EE[00000000]                sub rsi, memory
   631 000001F4 B800000000                      mov rax, 0
   632                                          ENTER
    44 000001F9 C8000000            <1>  enter 0, 0
    45 000001FD 4883E4F0            <1>  and rsp, ~15
   633 00000201 E8(00000000)                    call printf
   634                                          LEAVE
    49 00000206 C9                  <1>  leave
   635 00000207 B800000000                      mov rax, 0
   636 0000020C E8(00000000)                    call exit
   637                                  
   638                                  L_error_fvar_undefined:
   639 00000211 50                              push rax
   640 00000212 488B3C25[00000000]              mov rdi, qword [stderr]  ; destination
   641 0000021A 48BE-                           mov rsi, fmt_undefined_free_var_1
   641 0000021C [0106000000000000] 
   642 00000224 B800000000                      mov rax, 0
   643                                          ENTER
    44 00000229 C8000000            <1>  enter 0, 0
    45 0000022D 4883E4F0            <1>  and rsp, ~15
   644 00000231 E8(00000000)                    call fprintf
   645                                          LEAVE
    49 00000236 C9                  <1>  leave
   646 00000237 58                              pop rax
   647 00000238 488B4001                        mov rax, qword [rax + 1] ; string
   648 0000023C 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
   649 00000240 BE01000000                      mov rsi, 1               ; sizeof(char)
   650 00000245 488B5001                        mov rdx, qword [rax + 1] ; string-length
   651 00000249 488B0C25[00000000]              mov rcx, qword [stderr]  ; destination
   652 00000251 B800000000                      mov rax, 0
   653                                          ENTER
    44 00000256 C8000000            <1>  enter 0, 0
    45 0000025A 4883E4F0            <1>  and rsp, ~15
   654 0000025E E8(00000000)                    call fwrite
   655                                          LEAVE
    49 00000263 C9                  <1>  leave
   656 00000264 488B3C25[00000000]              mov rdi, [stderr]       ; destination
   657 0000026C 48BE-                           mov rsi, fmt_undefined_free_var_2
   657 0000026E [1806000000000000] 
   658 00000276 B800000000                      mov rax, 0
   659                                          ENTER
    44 0000027B C8000000            <1>  enter 0, 0
    45 0000027F 4883E4F0            <1>  and rsp, ~15
   660 00000283 E8(00000000)                    call fprintf
   661                                          LEAVE
    49 00000288 C9                  <1>  leave
   662 00000289 48C7C0F6FFFFFF                  mov rax, -10
   663 00000290 E8(00000000)                    call exit
   664                                  
   665                                  L_error_non_closure:
   666 00000295 488B3C25[00000000]              mov rdi, qword [stderr]
   667 0000029D 48BE-                           mov rsi, fmt_non_closure
   667 0000029F [CF06000000000000] 
   668 000002A7 B800000000                      mov rax, 0
   669                                          ENTER
    44 000002AC C8000000            <1>  enter 0, 0
    45 000002B0 4883E4F0            <1>  and rsp, ~15
   670 000002B4 E8(00000000)                    call fprintf
   671                                          LEAVE
    49 000002B9 C9                  <1>  leave
   672 000002BA 48C7C0FEFFFFFF                  mov rax, -2
   673 000002C1 E8(00000000)                    call exit
   674                                  
   675                                  L_error_improper_list:
   676 000002C6 488B3C25[00000000]      	mov rdi, qword [stderr]
   677 000002CE 48BE-                   	mov rsi, fmt_error_improper_list
   677 000002D0 [F706000000000000] 
   678 000002D8 B800000000              	mov rax, 0
   679                                          ENTER
    44 000002DD C8000000            <1>  enter 0, 0
    45 000002E1 4883E4F0            <1>  and rsp, ~15
   680 000002E5 E8(00000000)            	call fprintf
   681                                          LEAVE
    49 000002EA C9                  <1>  leave
   682 000002EB 48C7C0F9FFFFFF          	mov rax, -7
   683 000002F2 E8(00000000)            	call exit
   684                                  
   685                                  L_error_incorrect_arity_simple:
   686 000002F7 488B3C25[00000000]              mov rdi, qword [stderr]
   687 000002FF 48BE-                           mov rsi, fmt_incorrect_arity_simple
   687 00000301 [3A06000000000000] 
   688 00000309 EB12                            jmp L_error_incorrect_arity_common
   689                                  L_error_incorrect_arity_opt:
   690 0000030B 488B3C25[00000000]              mov rdi, qword [stderr]
   691 00000313 48BE-                           mov rsi, fmt_incorrect_arity_opt
   691 00000315 [6506000000000000] 
   692                                  L_error_incorrect_arity_common:
   693 0000031D 5A                              pop rdx
   694 0000031E 59                              pop rcx
   695 0000031F B800000000                      mov rax, 0
   696                                          ENTER
    44 00000324 C8000000            <1>  enter 0, 0
    45 00000328 4883E4F0            <1>  and rsp, ~15
   697 0000032C E8(00000000)                    call fprintf
   698                                          LEAVE
    49 00000331 C9                  <1>  leave
   699 00000332 48C7C0FAFFFFFF                  mov rax, -6
   700 00000339 E8(00000000)                    call exit
   701                                  
   702                                  section .data
   703                                  fmt_undefined_free_var_1:
   704 00000601 212121205468652066-             db `!!! The free variable \0`
   704 0000060A 726565207661726961-
   704 00000613 626C652000         
   705                                  fmt_undefined_free_var_2:
   706 00000618 207761732075736564-             db ` was used before it was defined.\n\0`
   706 00000621 206265666F72652069-
   706 0000062A 742077617320646566-
   706 00000633 696E65642E0A00     
   707                                  fmt_incorrect_arity_simple:
   708 0000063A 212121204578706563-             db `!!! Expected %ld arguments, but given %ld\n\0`
   708 00000643 74656420256C642061-
   708 0000064C 7267756D656E74732C-
   708 00000655 206275742067697665-
   708 0000065E 6E20256C640A00     
   709                                  fmt_incorrect_arity_opt:
   710 00000665 212121204578706563-             db `!!! Expected at least %ld arguments, but given %ld\n\0`
   710 0000066E 746564206174206C65-
   710 00000677 61737420256C642061-
   710 00000680 7267756D656E74732C-
   710 00000689 206275742067697665-
   710 00000692 6E20256C640A00     
   711                                  fmt_memory_usage:
   712 00000699 0A2121212055736564-             db `\n!!! Used %ld bytes of dynamically-allocated memory\n\n\0`
   712 000006A2 20256C642062797465-
   712 000006AB 73206F662064796E61-
   712 000006B4 6D6963616C6C792D61-
   712 000006BD 6C6C6F636174656420-
   712 000006C6 6D656D6F72790A0A00 
   713                                  fmt_non_closure:
   714 000006CF 21212120417474656D-             db `!!! Attempting to apply a non-closure!\n\0`
   714 000006D8 7074696E6720746F20-
   714 000006E1 6170706C792061206E-
   714 000006EA 6F6E2D636C6F737572-
   714 000006F3 65210A00           
   715                                  fmt_error_improper_list:
   716 000006F7 212121205468652061-     	db `!!! The argument is not a proper list!\n\0`
   716 00000700 7267756D656E742069-
   716 00000709 73206E6F7420612070-
   716 00000712 726F706572206C6973-
   716 0000071B 74210A00           
   717                                  
   718                                  section .bss
   719                                  memory:
   720 00000000 <res 40000000h>         	resb gbytes(1)
   721                                  
   722                                  section .data
   723                                  top_of_memory:
   724 0000071F [0000000000000000]              dq memory
   725                                  
   726                                  section .text
   727                                  malloc:
   728 0000033E 488B0425[1F070000]              mov rax, qword [top_of_memory]
   729 00000346 48013C25[1F070000]              add qword [top_of_memory], rdi
   730 0000034E C3                              ret
   731                                  
   732                                  L_code_ptr_return:
   733 0000034F 48837C241002            	cmp qword [rsp + 8*2], 2
   734 00000355 0F85461C0000            	jne L_error_arg_count_2
   735 0000035B 488B4C2418              	mov rcx, qword [rsp + 8*3]
   736                                  	assert_integer(rcx)
    53 00000360 803911              <1>  cmp byte [%1], %2
    54 00000363 0F85D71C0000        <1>  jne L_error_incorrect_type
   737 00000369 488B4901                	mov rcx, qword [rcx + 1]
   738 0000036D 4883F900                	cmp rcx, 0
   739 00000371 0F8C5E1B0000            	jl L_error_integer_range
   740 00000377 488B442420              	mov rax, qword [rsp + 8*4]
   741                                  .L0:
   742 0000037C 4883F900                        cmp rcx, 0
   743 00000380 7409                            je .L1
   744 00000382 488B6D00                	mov rbp, qword [rbp]
   745 00000386 48FFC9                  	dec rcx
   746 00000389 7FF1                    	jg .L0
   747                                  .L1:
   748 0000038B 4889EC                  	mov rsp, rbp
   749 0000038E 5D                      	pop rbp
   750 0000038F 5B                              pop rbx
   751 00000390 488B4C2408                      mov rcx, qword [rsp + 8*1]
   752 00000395 488D64CC10                      lea rsp, [rsp + 8*rcx + 8*2]
   753 0000039A FFE3                    	jmp rbx
   754                                  
   755                                  L_code_ptr_make_list:
   756 0000039C C8000000                	enter 0, 0
   757 000003A0 48837D1801                      cmp COUNT, 1
   758 000003A5 740C                            je .L0
   759 000003A7 48837D1802                      cmp COUNT, 2
   760 000003AC 7411                            je .L1
   761 000003AE E9231C0000                      jmp L_error_arg_count_12
   762                                  .L0:
   763 000003B3 49B9-                           mov r9, sob_void
   763 000003B5 [0000000000000000] 
   764 000003BD EB04                            jmp .L2
   765                                  .L1:
   766 000003BF 4C8B4D28                        mov r9, PARAM(1)
   767                                  .L2:
   768 000003C3 488B4D20                        mov rcx, PARAM(0)
   769                                          assert_integer(rcx)
    53 000003C7 803911              <1>  cmp byte [%1], %2
    54 000003CA 0F85701C0000        <1>  jne L_error_incorrect_type
   770 000003D0 488B4901                        mov rcx, qword [rcx + 1]
   771 000003D4 4883F900                        cmp rcx, 0
   772 000003D8 0F8C281B0000                    jl L_error_arg_negative
   773 000003DE 49B8-                           mov r8, sob_nil
   773 000003E0 [0100000000000000] 
   774                                  .L3:
   775 000003E8 4883F900                        cmp rcx, 0
   776 000003EC 7E1D                            jle .L4
   777 000003EE BF11000000                      mov rdi, 1 + 8 + 8
   778 000003F3 E846FFFFFF                      call malloc
   779 000003F8 C60021                          mov byte [rax], T_pair
   780 000003FB 4C894801                        mov qword [rax + 1], r9
   781 000003FF 4C894009                        mov qword [rax + 1 + 8], r8
   782 00000403 4989C0                          mov r8, rax
   783 00000406 48FFC9                          dec rcx
   784 00000409 EBDD                            jmp .L3
   785                                  .L4:
   786 0000040B 4C89C0                          mov rax, r8
   787 0000040E 48837D1802                      cmp COUNT, 2
   788 00000413 7404                            je .L5
   789 00000415 C9                              leave
   790 00000416 C21800                          ret AND_KILL_FRAME(1)
   791                                  .L5:
   792 00000419 C9                      	leave
   793 0000041A C22000                  	ret AND_KILL_FRAME(2)
   794                                  
   795                                  L_code_ptr_is_primitive:
   796 0000041D C8000000                	enter 0, 0
   797 00000421 48837D1801              	cmp COUNT, 1
   798 00000426 0F85401B0000            	jne L_error_arg_count_1
   799 0000042C 488B4520                	mov rax, PARAM(0)
   800                                  	assert_closure(rax)
    53 00000430 803804              <1>  cmp byte [%1], %2
    54 00000433 0F85071C0000        <1>  jne L_error_incorrect_type
   801 00000439 4883780100              	cmp SOB_CLOSURE_ENV(rax), 0
   802 0000043E 750C                    	jne .L_false
   803 00000440 48B8-                   	mov rax, sob_boolean_true
   803 00000442 [0300000000000000] 
   804 0000044A EB0A                    	jmp .L_end
   805                                  .L_false:
   806 0000044C 48B8-                   	mov rax, sob_boolean_false
   806 0000044E [0200000000000000] 
   807                                  .L_end:
   808 00000456 C9                      	leave
   809 00000457 C21800                  	ret AND_KILL_FRAME(1)
   810                                  
   811                                  L_code_ptr_length:
   812 0000045A C8000000                	enter 0, 0
   813 0000045E 48837D1801              	cmp COUNT, 1
   814 00000463 0F85031B0000            	jne L_error_arg_count_1
   815 00000469 488B5D20                	mov rbx, PARAM(0)
   816 0000046D BF00000000              	mov rdi, 0
   817                                  .L:
   818 00000472 803B01                  	cmp byte [rbx], T_nil
   819 00000475 7412                    	je .L_end
   820                                  	assert_pair(rbx)
    53 00000477 803B21              <1>  cmp byte [%1], %2
    54 0000047A 0F85C01B0000        <1>  jne L_error_incorrect_type
   821 00000480 488B5B09                	mov rbx, SOB_PAIR_CDR(rbx)
   822 00000484 48FFC7                  	inc rdi
   823 00000487 EBE9                    	jmp .L
   824                                  .L_end:
   825 00000489 E82D1A0000              	call make_integer
   826 0000048E C9                      	leave
   827 0000048F C21800                  	ret AND_KILL_FRAME(1)
   828                                  
   829                                  L_code_ptr_break:
   830 00000492 48837C241000                    cmp qword [rsp + 8 * 2], 0
   831 00000498 0F85991A0000                    jne L_error_arg_count_0
   832 0000049E CC                              int3
   833 0000049F 48B8-                           mov rax, sob_void
   833 000004A1 [0000000000000000] 
   834 000004A9 C21000                          ret AND_KILL_FRAME(0)        
   835                                  
   836                                  L_code_ptr_frame:
   837 000004AC C8000000                        enter 0, 0
   838 000004B0 48837D1800                      cmp COUNT, 0
   839 000004B5 0F857C1A0000                    jne L_error_arg_count_0
   840                                  
   841 000004BB 48BF-                           mov rdi, fmt_frame
   841 000004BD [2707000000000000] 
   842 000004C5 488B7500                        mov rsi, qword [rbp]    ; old rbp
   843 000004C9 488B5608                        mov rdx, qword [rsi + 8*1] ; ret addr
   844 000004CD 488B4E10                        mov rcx, qword [rsi + 8*2] ; lexical environment
   845 000004D1 4C8B4618                        mov r8, qword [rsi + 8*3] ; count
   846 000004D5 4C8D4E20                        lea r9, [rsi + 8*4]       ; address of argument 0
   847 000004D9 6A00                            push 0
   848 000004DB 4151                            push r9
   849 000004DD 4150                            push r8                   ; we'll use it when printing the params
   850 000004DF B800000000                      mov rax, 0
   851                                          
   852                                          ENTER
    44 000004E4 C8000000            <1>  enter 0, 0
    45 000004E8 4883E4F0            <1>  and rsp, ~15
   853 000004EC E8(00000000)                    call printf
   854                                          LEAVE
    49 000004F1 C9                  <1>  leave
   855                                  
   856                                  .L:
   857 000004F2 488B0C24                        mov rcx, qword [rsp]
   858 000004F6 4883F900                        cmp rcx, 0
   859 000004FA 7467                            je .L_out
   860 000004FC 48BF-                           mov rdi, fmt_frame_param_prefix
   860 000004FE [6007000000000000] 
   861 00000506 488B742410                      mov rsi, qword [rsp + 8*2]
   862 0000050B B800000000                      mov rax, 0
   863                                          
   864                                          ENTER
    44 00000510 C8000000            <1>  enter 0, 0
    45 00000514 4883E4F0            <1>  and rsp, ~15
   865 00000518 E8(00000000)                    call printf
   866                                          LEAVE
    49 0000051D C9                  <1>  leave
   867                                  
   868 0000051E 488B0C24                        mov rcx, qword [rsp]
   869 00000522 48FFC9                          dec rcx
   870 00000525 48890C24                        mov qword [rsp], rcx    ; dec arg count
   871 00000529 48FF442410                      inc qword [rsp + 8*2]   ; increment index of current arg
   872 0000052E 488B7C2408                      mov rdi, qword [rsp + 8*1] ; addr of addr current arg
   873 00000533 4C8D4F08                        lea r9, [rdi + 8]          ; addr of next arg
   874 00000537 4C894C2408                      mov qword [rsp + 8*1], r9  ; backup addr of next arg
   875 0000053C 488B3F                          mov rdi, qword [rdi]       ; addr of current arg
   876 0000053F E87B000000                      call print_sexpr
   877 00000544 48BF-                           mov rdi, fmt_newline
   877 00000546 [8C07000000000000] 
   878 0000054E B800000000                      mov rax, 0
   879                                          ENTER
    44 00000553 C8000000            <1>  enter 0, 0
    45 00000557 4883E4F0            <1>  and rsp, ~15
   880 0000055B E8(00000000)                    call printf
   881                                          LEAVE
    49 00000560 C9                  <1>  leave
   882 00000561 EB8F                            jmp .L
   883                                  .L_out:
   884 00000563 48BF-                           mov rdi, fmt_frame_continue
   884 00000565 [7107000000000000] 
   885 0000056D B800000000                      mov rax, 0
   886                                          ENTER
    44 00000572 C8000000            <1>  enter 0, 0
    45 00000576 4883E4F0            <1>  and rsp, ~15
   887 0000057A E8(00000000)                    call printf
   888 0000057F E8(00000000)                    call getchar
   889                                          LEAVE
    49 00000584 C9                  <1>  leave
   890                                          
   891 00000585 48B8-                           mov rax, sob_void
   891 00000587 [0000000000000000] 
   892 0000058F C9                              leave
   893 00000590 C21000                          ret AND_KILL_FRAME(0)
   894                                          
   895                                  print_sexpr_if_not_void:
   896 00000593 4881FF[00000000]        	cmp rdi, sob_void
   897 0000059A 7422                    	je .done
   898 0000059C E81E000000              	call print_sexpr
   899 000005A1 48BF-                   	mov rdi, fmt_newline
   899 000005A3 [8C07000000000000] 
   900 000005AB B800000000              	mov rax, 0
   901                                  	ENTER
    44 000005B0 C8000000            <1>  enter 0, 0
    45 000005B4 4883E4F0            <1>  and rsp, ~15
   902 000005B8 E8(00000000)            	call printf
   903                                  	LEAVE
    49 000005BD C9                  <1>  leave
   904                                  .done:
   905 000005BE C3                      	ret
   906                                  
   907                                  section .data
   908                                  fmt_frame:
   909 00000727 524250203D2025703B-             db `RBP = %p; ret addr = %p; lex env = %p; param count = %d\n\0`
   909 00000730 207265742061646472-
   909 00000739 203D2025703B206C65-
   909 00000742 7820656E76203D2025-
   909 0000074B 703B20706172616D20-
   909 00000754 636F756E74203D2025-
   909 0000075D 640A00             
   910                                  fmt_frame_param_prefix:
   911 00000760 3D3D5B706172616D20-             db `==[param %d]==> \0`
   911 00000769 25645D3D3D3E2000   
   912                                  fmt_frame_continue:
   913 00000771 486974203C456E7465-             db `Hit <Enter> to continue...\0`
   913 0000077A 723E20746F20636F6E-
   913 00000783 74696E75652E2E2E00 
   914                                  fmt_newline:
   915 0000078C 0A00                    	db `\n\0`
   916                                  fmt_void:
   917 0000078E 233C766F69643E00        	db `#<void>\0`
   918                                  fmt_nil:
   919 00000796 282900                  	db `()\0`
   920                                  fmt_boolean_false:
   921 00000799 236600                  	db `#f\0`
   922                                  fmt_boolean_true:
   923 0000079C 237400                  	db `#t\0`
   924                                  fmt_char_backslash:
   925 0000079F 235C5C00                	db `#\\\\\0`
   926                                  fmt_char_dquote:
   927 000007A3 235C2200                	db `#\\"\0`
   928                                  fmt_char_simple:
   929 000007A7 235C256300              	db `#\\%c\0`
   930                                  fmt_char_null:
   931 000007AC 235C6E756C00            	db `#\\nul\0`
   932                                  fmt_char_bell:
   933 000007B2 235C62656C6C00          	db `#\\bell\0`
   934                                  fmt_char_backspace:
   935 000007B9 235C6261636B737061-     	db `#\\backspace\0`
   935 000007C2 636500             
   936                                  fmt_char_tab:
   937 000007C5 235C74616200            	db `#\\tab\0`
   938                                  fmt_char_newline:
   939 000007CB 235C6E65776C696E65-     	db `#\\newline\0`
   939 000007D4 00                 
   940                                  fmt_char_formfeed:
   941 000007D5 235C7061676500          	db `#\\page\0`
   942                                  fmt_char_return:
   943 000007DC 235C72657475726E00      	db `#\\return\0`
   944                                  fmt_char_escape:
   945 000007E5 235C65736300            	db `#\\esc\0`
   946                                  fmt_char_space:
   947 000007EB 235C737061636500        	db `#\\space\0`
   948                                  fmt_char_hex:
   949 000007F3 235C782530325800        	db `#\\x%02X\0`
   950                                  fmt_gensym:
   951 000007FB 47256C6400                      db `G%ld\0`
   952                                  fmt_closure:
   953 00000800 233C636C6F73757265-     	db `#<closure at 0x%08X env=0x%08X code=0x%08X>\0`
   953 00000809 206174203078253038-
   953 00000812 5820656E763D307825-
   953 0000081B 30385820636F64653D-
   953 00000824 3078253038583E00   
   954                                  fmt_lparen:
   955 0000082C 2800                    	db `(\0`
   956                                  fmt_dotted_pair:
   957 0000082E 202E2000                	db ` . \0`
   958                                  fmt_rparen:
   959 00000832 2900                    	db `)\0`
   960                                  fmt_space:
   961 00000834 2000                    	db ` \0`
   962                                  fmt_empty_vector:
   963 00000836 23282900                	db `#()\0`
   964                                  fmt_vector:
   965 0000083A 232800                  	db `#(\0`
   966                                  fmt_real:
   967 0000083D 256600                  	db `%f\0`
   968                                  fmt_fraction:
   969 00000840 256C642F256C6400        	db `%ld/%ld\0`
   970                                  fmt_zero:
   971 00000848 3000                    	db `0\0`
   972                                  fmt_int:
   973 0000084A 256C6400                	db `%ld\0`
   974                                  fmt_unknown_scheme_object_error:
   975 0000084E 0A0A21212120457272-     	db `\n\n!!! Error: Unknown Scheme-object (RTTI 0x%02X) `
   975 00000857 6F723A20556E6B6E6F-
   975 00000860 776E20536368656D65-
   975 00000869 2D6F626A6563742028-
   975 00000872 525454492030782530-
   975 0000087B 32582920           
   976 0000087F 617420616464726573-     	db `at address 0x%08X\n\n\0`
   976 00000888 73203078253038580A-
   976 00000891 0A00               
   977                                  fmt_dquote:
   978 00000893 2200                    	db `\"\0`
   979                                  fmt_string_char:
   980 00000895 256300                          db `%c\0`
   981                                  fmt_string_char_7:
   982 00000898 5C6100                          db `\\a\0`
   983                                  fmt_string_char_8:
   984 0000089B 5C6200                          db `\\b\0`
   985                                  fmt_string_char_9:
   986 0000089E 5C7400                          db `\\t\0`
   987                                  fmt_string_char_10:
   988 000008A1 5C6E00                          db `\\n\0`
   989                                  fmt_string_char_11:
   990 000008A4 5C7600                          db `\\v\0`
   991                                  fmt_string_char_12:
   992 000008A7 5C6600                          db `\\f\0`
   993                                  fmt_string_char_13:
   994 000008AA 5C7200                          db `\\r\0`
   995                                  fmt_string_char_34:
   996 000008AD 5C2200                          db `\\"\0`
   997                                  fmt_string_char_92:
   998 000008B0 5C5C00                          db `\\\\\0`
   999                                  fmt_string_char_hex:
  1000 000008B3 5C7825583B00                    db `\\x%X;\0`
  1001                                  
  1002                                  section .text
  1003                                  
  1004                                  print_sexpr:
  1005 000005BF C8000000                	enter 0, 0
  1006 000005C3 8A07                    	mov al, byte [rdi]
  1007 000005C5 3C00                    	cmp al, T_void
  1008 000005C7 7465                    	je .Lvoid
  1009 000005C9 3C01                    	cmp al, T_nil
  1010 000005CB 7470                    	je .Lnil
  1011 000005CD 3C09                    	cmp al, T_boolean_false
  1012 000005CF 747B                    	je .Lboolean_false
  1013 000005D1 3C0A                    	cmp al, T_boolean_true
  1014 000005D3 0F8482000000            	je .Lboolean_true
  1015 000005D9 3C02                    	cmp al, T_char
  1016 000005DB 0F8489000000            	je .Lchar
  1017 000005E1 3C41                    	cmp al, T_interned_symbol
  1018 000005E3 0F84BF010000            	je .Linterned_symbol
  1019 000005E9 3C42                            cmp al, T_uninterned_symbol
  1020 000005EB 0F84E3010000                    je .Luninterned_symbol
  1021 000005F1 3C21                    	cmp al, T_pair
  1022 000005F3 0F84EE010000            	je .Lpair
  1023 000005F9 3C22                    	cmp al, T_vector
  1024 000005FB 0F84B7020000            	je .Lvector
  1025 00000601 3C04                    	cmp al, T_closure
  1026 00000603 0F8485010000            	je .Lclosure
  1027 00000609 3C13                    	cmp al, T_real
  1028 0000060B 0F8448030000            	je .Lreal
  1029 00000611 3C12                    	cmp al, T_fraction
  1030 00000613 0F846E030000            	je .Lfraction
  1031 00000619 3C11                    	cmp al, T_integer
  1032 0000061B 0F84A7030000            	je .Linteger
  1033 00000621 3C03                    	cmp al, T_string
  1034 00000623 0F84B2030000            	je .Lstring
  1035                                  
  1036 00000629 E9DC040000              	jmp .Lunknown_sexpr_type
  1037                                  
  1038                                  .Lvoid:
  1039 0000062E 48BF-                   	mov rdi, fmt_void
  1039 00000630 [8E07000000000000] 
  1040 00000638 E900050000              	jmp .Lemit
  1041                                  
  1042                                  .Lnil:
  1043 0000063D 48BF-                   	mov rdi, fmt_nil
  1043 0000063F [9607000000000000] 
  1044 00000647 E9F1040000              	jmp .Lemit
  1045                                  
  1046                                  .Lboolean_false:
  1047 0000064C 48BF-                   	mov rdi, fmt_boolean_false
  1047 0000064E [9907000000000000] 
  1048 00000656 E9E2040000              	jmp .Lemit
  1049                                  
  1050                                  .Lboolean_true:
  1051 0000065B 48BF-                   	mov rdi, fmt_boolean_true
  1051 0000065D [9C07000000000000] 
  1052 00000665 E9D3040000              	jmp .Lemit
  1053                                  
  1054                                  .Lchar:
  1055 0000066A 8A4701                  	mov al, byte [rdi + 1]
  1056 0000066D 3C20                    	cmp al, ' '
  1057 0000066F 7E20                    	jle .Lchar_whitespace
  1058 00000671 3C5C                    	cmp al, 92 		; backslash
  1059 00000673 7474                    	je .Lchar_backslash
  1060 00000675 3C22                    	cmp al, '"'
  1061 00000677 747F                    	je .Lchar_dquote
  1062 00000679 4825FF000000            	and rax, 255
  1063 0000067F 48BF-                   	mov rdi, fmt_char_simple
  1063 00000681 [A707000000000000] 
  1064 00000689 4889C6                  	mov rsi, rax
  1065 0000068C E9AC040000              	jmp .Lemit
  1066                                  
  1067                                  .Lchar_whitespace:
  1068 00000691 3C00                    	cmp al, 0
  1069 00000693 7472                    	je .Lchar_null
  1070 00000695 3C07                    	cmp al, 7
  1071 00000697 747D                    	je .Lchar_bell
  1072 00000699 3C08                    	cmp al, 8
  1073 0000069B 0F8484000000            	je .Lchar_backspace
  1074 000006A1 3C09                    	cmp al, 9
  1075 000006A3 0F848B000000            	je .Lchar_tab
  1076 000006A9 3C0A                    	cmp al, 10
  1077 000006AB 0F8492000000            	je .Lchar_newline
  1078 000006B1 3C0C                    	cmp al, 12
  1079 000006B3 0F8499000000            	je .Lchar_formfeed
  1080 000006B9 3C0D                    	cmp al, 13
  1081 000006BB 0F84A0000000            	je .Lchar_return
  1082 000006C1 3C1B                    	cmp al, 27
  1083 000006C3 0F84A7000000            	je .Lchar_escape
  1084 000006C9 4825FF000000            	and rax, 255
  1085 000006CF 3C20                    	cmp al, ' '
  1086 000006D1 0F84A8000000            	je .Lchar_space
  1087 000006D7 48BF-                   	mov rdi, fmt_char_hex
  1087 000006D9 [F307000000000000] 
  1088 000006E1 4889C6                  	mov rsi, rax
  1089 000006E4 E954040000              	jmp .Lemit	
  1090                                  
  1091                                  .Lchar_backslash:
  1092 000006E9 48BF-                   	mov rdi, fmt_char_backslash
  1092 000006EB [9F07000000000000] 
  1093 000006F3 E945040000              	jmp .Lemit
  1094                                  
  1095                                  .Lchar_dquote:
  1096 000006F8 48BF-                   	mov rdi, fmt_char_dquote
  1096 000006FA [A307000000000000] 
  1097 00000702 E936040000              	jmp .Lemit
  1098                                  
  1099                                  .Lchar_null:
  1100 00000707 48BF-                   	mov rdi, fmt_char_null
  1100 00000709 [AC07000000000000] 
  1101 00000711 E927040000              	jmp .Lemit
  1102                                  
  1103                                  .Lchar_bell:
  1104 00000716 48BF-                   	mov rdi, fmt_char_bell
  1104 00000718 [B207000000000000] 
  1105 00000720 E918040000              	jmp .Lemit
  1106                                  
  1107                                  .Lchar_backspace:
  1108 00000725 48BF-                   	mov rdi, fmt_char_backspace
  1108 00000727 [B907000000000000] 
  1109 0000072F E909040000              	jmp .Lemit
  1110                                  
  1111                                  .Lchar_tab:
  1112 00000734 48BF-                   	mov rdi, fmt_char_tab
  1112 00000736 [C507000000000000] 
  1113 0000073E E9FA030000              	jmp .Lemit
  1114                                  
  1115                                  .Lchar_newline:
  1116 00000743 48BF-                   	mov rdi, fmt_char_newline
  1116 00000745 [CB07000000000000] 
  1117 0000074D E9EB030000              	jmp .Lemit
  1118                                  
  1119                                  .Lchar_formfeed:
  1120 00000752 48BF-                   	mov rdi, fmt_char_formfeed
  1120 00000754 [D507000000000000] 
  1121 0000075C E9DC030000              	jmp .Lemit
  1122                                  
  1123                                  .Lchar_return:
  1124 00000761 48BF-                   	mov rdi, fmt_char_return
  1124 00000763 [DC07000000000000] 
  1125 0000076B E9CD030000              	jmp .Lemit
  1126                                  
  1127                                  .Lchar_escape:
  1128 00000770 48BF-                   	mov rdi, fmt_char_escape
  1128 00000772 [E507000000000000] 
  1129 0000077A E9BE030000              	jmp .Lemit
  1130                                  
  1131                                  .Lchar_space:
  1132 0000077F 48BF-                   	mov rdi, fmt_char_space
  1132 00000781 [EB07000000000000] 
  1133 00000789 E9AF030000              	jmp .Lemit
  1134                                  
  1135                                  .Lclosure:
  1136 0000078E 4889FE                  	mov rsi, qword rdi
  1137 00000791 48BF-                   	mov rdi, fmt_closure
  1137 00000793 [0008000000000000] 
  1138 0000079B 488B5601                	mov rdx, SOB_CLOSURE_ENV(rsi)
  1139 0000079F 488B4E09                	mov rcx, SOB_CLOSURE_CODE(rsi)
  1140 000007A3 E995030000              	jmp .Lemit
  1141                                  
  1142                                  .Linterned_symbol:
  1143 000007A8 488B7F01                	mov rdi, qword [rdi + 1] ; sob_string
  1144 000007AC BE01000000              	mov rsi, 1		 ; size = 1 byte
  1145 000007B1 488B5701                	mov rdx, qword [rdi + 1] ; length
  1146 000007B5 488D7F09                	lea rdi, [rdi + 1 + 8]	 ; actual characters
  1147 000007B9 488B0C25[00000000]      	mov rcx, qword [stdout]	 ; FILE *
  1148                                  	ENTER
    44 000007C1 C8000000            <1>  enter 0, 0
    45 000007C5 4883E4F0            <1>  and rsp, ~15
  1149 000007C9 E8(00000000)            	call fwrite
  1150                                  	LEAVE
    49 000007CE C9                  <1>  leave
  1151 000007CF E97E030000              	jmp .Lend
  1152                                  
  1153                                  .Luninterned_symbol:
  1154 000007D4 488B7701                        mov rsi, qword [rdi + 1] ; gensym counter
  1155 000007D8 48BF-                           mov rdi, fmt_gensym
  1155 000007DA [FB07000000000000] 
  1156 000007E2 E956030000                      jmp .Lemit
  1157                                  	
  1158                                  .Lpair:
  1159 000007E7 57                      	push rdi
  1160 000007E8 48BF-                   	mov rdi, fmt_lparen
  1160 000007EA [2C08000000000000] 
  1161 000007F2 B800000000              	mov rax, 0
  1162                                          ENTER
    44 000007F7 C8000000            <1>  enter 0, 0
    45 000007FB 4883E4F0            <1>  and rsp, ~15
  1163 000007FF E8(00000000)            	call printf
  1164                                          LEAVE
    49 00000804 C9                  <1>  leave
  1165 00000805 488B3C24                	mov rdi, qword [rsp] 	; pair
  1166 00000809 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
  1167 0000080D E8ADFDFFFF              	call print_sexpr
  1168 00000812 5F                      	pop rdi 		; pair
  1169 00000813 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
  1170                                  .Lcdr:
  1171 00000817 8A07                    	mov al, byte [rdi]
  1172 00000819 3C01                    	cmp al, T_nil
  1173 0000081B 7447                    	je .Lcdr_nil
  1174 0000081D 3C21                    	cmp al, T_pair
  1175 0000081F 7462                    	je .Lcdr_pair
  1176 00000821 57                      	push rdi
  1177 00000822 48BF-                   	mov rdi, fmt_dotted_pair
  1177 00000824 [2E08000000000000] 
  1178 0000082C B800000000              	mov rax, 0
  1179                                          ENTER
    44 00000831 C8000000            <1>  enter 0, 0
    45 00000835 4883E4F0            <1>  and rsp, ~15
  1180 00000839 E8(00000000)            	call printf
  1181                                          LEAVE
    49 0000083E C9                  <1>  leave
  1182 0000083F 5F                      	pop rdi
  1183 00000840 E87AFDFFFF              	call print_sexpr
  1184 00000845 48BF-                   	mov rdi, fmt_rparen
  1184 00000847 [3208000000000000] 
  1185 0000084F B800000000              	mov rax, 0
  1186                                          ENTER
    44 00000854 C8000000            <1>  enter 0, 0
    45 00000858 4883E4F0            <1>  and rsp, ~15
  1187 0000085C E8(00000000)            	call printf
  1188                                          LEAVE
    49 00000861 C9                  <1>  leave
  1189 00000862 C9                      	leave
  1190 00000863 C3                      	ret
  1191                                  
  1192                                  .Lcdr_nil:
  1193 00000864 48BF-                   	mov rdi, fmt_rparen
  1193 00000866 [3208000000000000] 
  1194 0000086E B800000000              	mov rax, 0
  1195                                          ENTER
    44 00000873 C8000000            <1>  enter 0, 0
    45 00000877 4883E4F0            <1>  and rsp, ~15
  1196 0000087B E8(00000000)            	call printf
  1197                                          LEAVE
    49 00000880 C9                  <1>  leave
  1198 00000881 C9                      	leave
  1199 00000882 C3                      	ret
  1200                                  
  1201                                  .Lcdr_pair:
  1202 00000883 57                      	push rdi
  1203 00000884 48BF-                   	mov rdi, fmt_space
  1203 00000886 [3408000000000000] 
  1204 0000088E B800000000              	mov rax, 0
  1205                                          ENTER
    44 00000893 C8000000            <1>  enter 0, 0
    45 00000897 4883E4F0            <1>  and rsp, ~15
  1206 0000089B E8(00000000)            	call printf
  1207                                          LEAVE
    49 000008A0 C9                  <1>  leave
  1208 000008A1 488B3C24                	mov rdi, qword [rsp]
  1209 000008A5 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
  1210 000008A9 E811FDFFFF              	call print_sexpr
  1211 000008AE 5F                      	pop rdi
  1212 000008AF 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
  1213 000008B3 E95FFFFFFF              	jmp .Lcdr
  1214                                  
  1215                                  .Lvector:
  1216 000008B8 488B4701                	mov rax, qword [rdi + 1] ; length
  1217 000008BC 4883F800                	cmp rax, 0
  1218 000008C0 0F8484000000            	je .Lvector_empty
  1219 000008C6 57                      	push rdi
  1220 000008C7 48BF-                   	mov rdi, fmt_vector
  1220 000008C9 [3A08000000000000] 
  1221 000008D1 B800000000              	mov rax, 0
  1222                                          ENTER
    44 000008D6 C8000000            <1>  enter 0, 0
    45 000008DA 4883E4F0            <1>  and rsp, ~15
  1223 000008DE E8(00000000)            	call printf
  1224                                          LEAVE
    49 000008E3 C9                  <1>  leave
  1225 000008E4 488B3C24                	mov rdi, qword [rsp]
  1226 000008E8 FF7701                  	push qword [rdi + 1]
  1227 000008EB 6A01                    	push 1
  1228 000008ED 488B7F09                	mov rdi, qword [rdi + 1 + 8] ; v[0]
  1229 000008F1 E8C9FCFFFF              	call print_sexpr
  1230                                  .Lvector_loop:
  1231                                  	; [rsp] index
  1232                                  	; [rsp + 8*1] limit
  1233                                  	; [rsp + 8*2] vector
  1234 000008F6 488B0424                	mov rax, qword [rsp]
  1235 000008FA 483B442408              	cmp rax, qword [rsp + 8*1]
  1236 000008FF 7436                    	je .Lvector_end
  1237 00000901 48BF-                   	mov rdi, fmt_space
  1237 00000903 [3408000000000000] 
  1238 0000090B B800000000              	mov rax, 0
  1239                                          ENTER
    44 00000910 C8000000            <1>  enter 0, 0
    45 00000914 4883E4F0            <1>  and rsp, ~15
  1240 00000918 E8(00000000)            	call printf
  1241                                          LEAVE
    49 0000091D C9                  <1>  leave
  1242 0000091E 488B0424                	mov rax, qword [rsp]
  1243 00000922 488B5C2410              	mov rbx, qword [rsp + 8*2]
  1244 00000927 488B7CC309              	mov rdi, qword [rbx + 1 + 8 + 8 * rax] ; v[i]
  1245 0000092C E88EFCFFFF              	call print_sexpr
  1246 00000931 48FF0424                	inc qword [rsp]
  1247 00000935 EBBF                    	jmp .Lvector_loop
  1248                                  
  1249                                  .Lvector_end:
  1250 00000937 4883C418                	add rsp, 8*3
  1251 0000093B 48BF-                   	mov rdi, fmt_rparen
  1251 0000093D [3208000000000000] 
  1252 00000945 E9F3010000              	jmp .Lemit	
  1253                                  
  1254                                  .Lvector_empty:
  1255 0000094A 48BF-                   	mov rdi, fmt_empty_vector
  1255 0000094C [3608000000000000] 
  1256 00000954 E9E4010000              	jmp .Lemit
  1257                                  
  1258                                  .Lreal:
  1259 00000959 FF7701                  	push qword [rdi + 1]
  1260 0000095C F20F100424              	movsd xmm0, qword [rsp]
  1261 00000961 4883C408                	add rsp, 8*1
  1262 00000965 48BF-                   	mov rdi, fmt_real
  1262 00000967 [3D08000000000000] 
  1263 0000096F B801000000              	mov rax, 1
  1264                                  	ENTER
    44 00000974 C8000000            <1>  enter 0, 0
    45 00000978 4883E4F0            <1>  and rsp, ~15
  1265 0000097C E8(00000000)            	call printf
  1266                                  	LEAVE
    49 00000981 C9                  <1>  leave
  1267 00000982 E9CB010000              	jmp .Lend
  1268                                  
  1269                                  .Lfraction:
  1270 00000987 488B7701                	mov rsi, qword [rdi + 1]
  1271 0000098B 488B5709                	mov rdx, qword [rdi + 1 + 8]
  1272 0000098F 4883FE00                	cmp rsi, 0
  1273 00000993 7415                    	je .Lrat_zero
  1274 00000995 4883FA01                	cmp rdx, 1
  1275 00000999 741E                    	je .Lrat_int
  1276 0000099B 48BF-                   	mov rdi, fmt_fraction
  1276 0000099D [4008000000000000] 
  1277 000009A5 E993010000              	jmp .Lemit
  1278                                  
  1279                                  .Lrat_zero:
  1280 000009AA 48BF-                   	mov rdi, fmt_zero
  1280 000009AC [4808000000000000] 
  1281 000009B4 E984010000              	jmp .Lemit
  1282                                  
  1283                                  .Lrat_int:
  1284 000009B9 48BF-                   	mov rdi, fmt_int
  1284 000009BB [4A08000000000000] 
  1285 000009C3 E975010000              	jmp .Lemit
  1286                                  
  1287                                  .Linteger:
  1288 000009C8 488B7701                	mov rsi, qword [rdi + 1]
  1289 000009CC 48BF-                   	mov rdi, fmt_int
  1289 000009CE [4A08000000000000] 
  1290 000009D6 E962010000              	jmp .Lemit
  1291                                  
  1292                                  .Lstring:
  1293 000009DB 488D4709                	lea rax, [rdi + 1 + 8]
  1294 000009DF 50                      	push rax
  1295 000009E0 FF7701                  	push qword [rdi + 1]
  1296 000009E3 48BF-                   	mov rdi, fmt_dquote
  1296 000009E5 [9308000000000000] 
  1297 000009ED B800000000              	mov rax, 0
  1298                                  	ENTER
    44 000009F2 C8000000            <1>  enter 0, 0
    45 000009F6 4883E4F0            <1>  and rsp, ~15
  1299 000009FA E8(00000000)            	call printf
  1300                                  	LEAVE
    49 000009FF C9                  <1>  leave
  1301                                  .Lstring_loop:
  1302                                  	; qword [rsp]: limit
  1303                                  	; qword [rsp + 8*1]: char *
  1304 00000A00 48833C2400              	cmp qword [rsp], 0
  1305 00000A05 0F84EF000000            	je .Lstring_end
  1306 00000A0B 488B442408              	mov rax, qword [rsp + 8*1]
  1307 00000A10 8A00                    	mov al, byte [rax]
  1308 00000A12 4825FF000000            	and rax, 255
  1309 00000A18 3C07                    	cmp al, 7
  1310 00000A1A 745D                            je .Lstring_char_7
  1311 00000A1C 3C08                            cmp al, 8
  1312 00000A1E 7465                            je .Lstring_char_8
  1313 00000A20 3C09                            cmp al, 9
  1314 00000A22 746D                            je .Lstring_char_9
  1315 00000A24 3C0A                            cmp al, 10
  1316 00000A26 7475                            je .Lstring_char_10
  1317 00000A28 3C0B                            cmp al, 11
  1318 00000A2A 747D                            je .Lstring_char_11
  1319 00000A2C 3C0C                            cmp al, 12
  1320 00000A2E 0F8481000000                    je .Lstring_char_12
  1321 00000A34 3C0D                            cmp al, 13
  1322 00000A36 0F8485000000                    je .Lstring_char_13
  1323 00000A3C 3C22                            cmp al, 34
  1324 00000A3E 0F8489000000                    je .Lstring_char_34
  1325 00000A44 3C5C                            cmp al, 92              ;         je .Lstring_char_92
  1327 00000A46 3C20                            cmp al, ' '
  1328 00000A48 0F8C9A000000                    jl .Lstring_char_hex
  1329 00000A4E 48BF-                           mov rdi, fmt_string_char
  1329 00000A50 [9508000000000000] 
  1330 00000A58 4889C6                          mov rsi, rax
  1331                                  .Lstring_char_emit:
  1332 00000A5B B800000000                      mov rax, 0
  1333                                          ENTER
    44 00000A60 C8000000            <1>  enter 0, 0
    45 00000A64 4883E4F0            <1>  and rsp, ~15
  1334 00000A68 E8(00000000)                    call printf
  1335                                          LEAVE
    49 00000A6D C9                  <1>  leave
  1336 00000A6E 48FF0C24                        dec qword [rsp]
  1337 00000A72 48FF442408                      inc qword [rsp + 8*1]
  1338 00000A77 EB87                            jmp .Lstring_loop
  1339                                  
  1340                                  .Lstring_char_7:
  1341 00000A79 48BF-                           mov rdi, fmt_string_char_7
  1341 00000A7B [9808000000000000] 
  1342 00000A83 EBD6                            jmp .Lstring_char_emit
  1343                                  
  1344                                  .Lstring_char_8:
  1345 00000A85 48BF-                           mov rdi, fmt_string_char_8
  1345 00000A87 [9B08000000000000] 
  1346 00000A8F EBCA                            jmp .Lstring_char_emit
  1347                                          
  1348                                  .Lstring_char_9:
  1349 00000A91 48BF-                           mov rdi, fmt_string_char_9
  1349 00000A93 [9E08000000000000] 
  1350 00000A9B EBBE                            jmp .Lstring_char_emit
  1351                                  
  1352                                  .Lstring_char_10:
  1353 00000A9D 48BF-                           mov rdi, fmt_string_char_10
  1353 00000A9F [A108000000000000] 
  1354 00000AA7 EBB2                            jmp .Lstring_char_emit
  1355                                  
  1356                                  .Lstring_char_11:
  1357 00000AA9 48BF-                           mov rdi, fmt_string_char_11
  1357 00000AAB [A408000000000000] 
  1358 00000AB3 EBA6                            jmp .Lstring_char_emit
  1359                                  
  1360                                  .Lstring_char_12:
  1361 00000AB5 48BF-                           mov rdi, fmt_string_char_12
  1361 00000AB7 [A708000000000000] 
  1362 00000ABF EB9A                            jmp .Lstring_char_emit
  1363                                  
  1364                                  .Lstring_char_13:
  1365 00000AC1 48BF-                           mov rdi, fmt_string_char_13
  1365 00000AC3 [AA08000000000000] 
  1366 00000ACB EB8E                            jmp .Lstring_char_emit
  1367                                  
  1368                                  .Lstring_char_34:
  1369 00000ACD 48BF-                           mov rdi, fmt_string_char_34
  1369 00000ACF [AD08000000000000] 
  1370 00000AD7 EB82                            jmp .Lstring_char_emit
  1371                                  
  1372                                  .Lstring_char_92:
  1373 00000AD9 48BF-                           mov rdi, fmt_string_char_92
  1373 00000ADB [B008000000000000] 
  1374 00000AE3 E973FFFFFF                      jmp .Lstring_char_emit
  1375                                  
  1376                                  .Lstring_char_hex:
  1377 00000AE8 48BF-                           mov rdi, fmt_string_char_hex
  1377 00000AEA [B308000000000000] 
  1378 00000AF2 4889C6                          mov rsi, rax
  1379 00000AF5 E961FFFFFF                      jmp .Lstring_char_emit        
  1380                                  
  1381                                  .Lstring_end:
  1382 00000AFA 4883C410                	add rsp, 8 * 2
  1383 00000AFE 48BF-                   	mov rdi, fmt_dquote
  1383 00000B00 [9308000000000000] 
  1384 00000B08 EB33                    	jmp .Lemit
  1385                                  
  1386                                  .Lunknown_sexpr_type:
  1387 00000B0A 48BE-                   	mov rsi, fmt_unknown_scheme_object_error
  1387 00000B0C [4E08000000000000] 
  1388 00000B14 4825FF000000            	and rax, 255
  1389 00000B1A 4889C2                  	mov rdx, rax
  1390 00000B1D 4889F9                  	mov rcx, rdi
  1391 00000B20 488B3C25[00000000]      	mov rdi, qword [stderr]
  1392 00000B28 B800000000              	mov rax, 0
  1393                                          ENTER
    44 00000B2D C8000000            <1>  enter 0, 0
    45 00000B31 4883E4F0            <1>  and rsp, ~15
  1394 00000B35 E8(00000000)            	call fprintf
  1395                                          LEAVE
    49 00000B3A C9                  <1>  leave
  1396 00000B3B C9                              leave
  1397 00000B3C C3                              ret
  1398                                  
  1399                                  .Lemit:
  1400 00000B3D B800000000              	mov rax, 0
  1401                                          ENTER
    44 00000B42 C8000000            <1>  enter 0, 0
    45 00000B46 4883E4F0            <1>  and rsp, ~15
  1402 00000B4A E8(00000000)            	call printf
  1403                                          LEAVE
    49 00000B4F C9                  <1>  leave
  1404 00000B50 EB00                    	jmp .Lend
  1405                                  
  1406                                  .Lend:
  1407                                  	LEAVE
    49 00000B52 C9                  <1>  leave
  1408 00000B53 C3                      	ret
  1409                                  
  1410                                  ;;; rdi: address of free variable
  1411                                  ;;; rsi: address of code-pointer
  1412                                  bind_primitive:
  1413 00000B54 C8000000                        enter 0, 0
  1414 00000B58 57                              push rdi
  1415 00000B59 BF11000000                      mov rdi, (1 + 8 + 8)
  1416 00000B5E E8DBF7FFFF                      call malloc
  1417 00000B63 5F                              pop rdi
  1418 00000B64 C60004                          mov byte [rax], T_closure
  1419 00000B67 48C7400100000000                mov SOB_CLOSURE_ENV(rax), 0 ; dummy, lexical environment
  1420 00000B6F 48897009                        mov SOB_CLOSURE_CODE(rax), rsi ; code pointer
  1421 00000B73 488907                          mov qword [rdi], rax
  1422 00000B76 48B8-                           mov rax, sob_void
  1422 00000B78 [0000000000000000] 
  1423 00000B80 C9                              leave
  1424 00000B81 C3                              ret
  1425                                  
  1426                                  L_code_ptr_ash:
  1427 00000B82 C8000000                        enter 0, 0
  1428 00000B86 48837D1802                      cmp COUNT, 2
  1429 00000B8B 0F8510140000                    jne L_error_arg_count_2
  1430 00000B91 488B7D20                        mov rdi, PARAM(0)
  1431                                          assert_integer(rdi)
    53 00000B95 803F11              <1>  cmp byte [%1], %2
    54 00000B98 0F85A2140000        <1>  jne L_error_incorrect_type
  1432 00000B9E 488B4D28                        mov rcx, PARAM(1)
  1433                                          assert_integer(rcx)
    53 00000BA2 803911              <1>  cmp byte [%1], %2
    54 00000BA5 0F8595140000        <1>  jne L_error_incorrect_type
  1434 00000BAB 488B7F01                        mov rdi, qword [rdi + 1]
  1435 00000BAF 488B4901                        mov rcx, qword [rcx + 1]
  1436 00000BB3 4883F900                        cmp rcx, 0
  1437 00000BB7 7C0F                            jl .L_negative
  1438                                  .L_loop_positive:
  1439 00000BB9 4883F900                        cmp rcx, 0
  1440 00000BBD 741B                            je .L_exit
  1441 00000BBF 48D3E7                          sal rdi, cl
  1442 00000BC2 48C1E908                        shr rcx, 8
  1443 00000BC6 EBF1                            jmp .L_loop_positive
  1444                                  .L_negative:
  1445 00000BC8 48F7D9                          neg rcx
  1446                                  .L_loop_negative:
  1447 00000BCB 4883F900                        cmp rcx, 0
  1448 00000BCF 7409                            je .L_exit
  1449 00000BD1 48D3FF                          sar rdi, cl
  1450 00000BD4 48C1E908                        shr rcx, 8
  1451 00000BD8 EBF1                            jmp .L_loop_negative
  1452                                  .L_exit:
  1453 00000BDA E8DC120000                      call make_integer
  1454 00000BDF C9                              leave
  1455 00000BE0 C22000                          ret AND_KILL_FRAME(2)
  1456                                  
  1457                                  L_code_ptr_logand:
  1458 00000BE3 C8000000                        enter 0, 0
  1459 00000BE7 48837D1802                      cmp COUNT, 2
  1460 00000BEC 0F85AF130000                    jne L_error_arg_count_2
  1461 00000BF2 4C8B4520                        mov r8, PARAM(0)
  1462                                          assert_integer(r8)
    53 00000BF6 41803811            <1>  cmp byte [%1], %2
    54 00000BFA 0F8540140000        <1>  jne L_error_incorrect_type
  1463 00000C00 4C8B4D28                        mov r9, PARAM(1)
  1464                                          assert_integer(r9)
    53 00000C04 41803911            <1>  cmp byte [%1], %2
    54 00000C08 0F8532140000        <1>  jne L_error_incorrect_type
  1465 00000C0E 498B7801                        mov rdi, qword [r8 + 1]
  1466 00000C12 49237901                        and rdi, qword [r9 + 1]
  1467 00000C16 E8A0120000                      call make_integer
  1468 00000C1B C9                              leave
  1469 00000C1C C22000                          ret AND_KILL_FRAME(2)
  1470                                  
  1471                                  L_code_ptr_logor:
  1472 00000C1F C8000000                        enter 0, 0
  1473 00000C23 48837D1802                      cmp COUNT, 2
  1474 00000C28 0F8573130000                    jne L_error_arg_count_2
  1475 00000C2E 4C8B4520                        mov r8, PARAM(0)
  1476                                          assert_integer(r8)
    53 00000C32 41803811            <1>  cmp byte [%1], %2
    54 00000C36 0F8504140000        <1>  jne L_error_incorrect_type
  1477 00000C3C 4C8B4D28                        mov r9, PARAM(1)
  1478                                          assert_integer(r9)
    53 00000C40 41803911            <1>  cmp byte [%1], %2
    54 00000C44 0F85F6130000        <1>  jne L_error_incorrect_type
  1479 00000C4A 498B7801                        mov rdi, qword [r8 + 1]
  1480 00000C4E 490B7901                        or rdi, qword [r9 + 1]
  1481 00000C52 E864120000                      call make_integer
  1482 00000C57 C9                              leave
  1483 00000C58 C22000                          ret AND_KILL_FRAME(2)
  1484                                  
  1485                                  L_code_ptr_logxor:
  1486 00000C5B C8000000                        enter 0, 0
  1487 00000C5F 48837D1802                      cmp COUNT, 2
  1488 00000C64 0F8537130000                    jne L_error_arg_count_2
  1489 00000C6A 4C8B4520                        mov r8, PARAM(0)
  1490                                          assert_integer(r8)
    53 00000C6E 41803811            <1>  cmp byte [%1], %2
    54 00000C72 0F85C8130000        <1>  jne L_error_incorrect_type
  1491 00000C78 4C8B4D28                        mov r9, PARAM(1)
  1492                                          assert_integer(r9)
    53 00000C7C 41803911            <1>  cmp byte [%1], %2
    54 00000C80 0F85BA130000        <1>  jne L_error_incorrect_type
  1493 00000C86 498B7801                        mov rdi, qword [r8 + 1]
  1494 00000C8A 49337901                        xor rdi, qword [r9 + 1]
  1495 00000C8E E828120000                      call make_integer
  1496                                          LEAVE
    49 00000C93 C9                  <1>  leave
  1497 00000C94 C22000                          ret AND_KILL_FRAME(2)
  1498                                  
  1499                                  L_code_ptr_lognot:
  1500 00000C97 C8000000                        enter 0, 0
  1501 00000C9B 48837D1801                      cmp COUNT, 1
  1502 00000CA0 0F85C6120000                    jne L_error_arg_count_1
  1503 00000CA6 4C8B4520                        mov r8, PARAM(0)
  1504                                          assert_integer(r8)
    53 00000CAA 41803811            <1>  cmp byte [%1], %2
    54 00000CAE 0F858C130000        <1>  jne L_error_incorrect_type
  1505 00000CB4 498B7801                        mov rdi, qword [r8 + 1]
  1506 00000CB8 48F7D7                          not rdi
  1507 00000CBB E8FB110000                      call make_integer
  1508 00000CC0 C9                              leave
  1509 00000CC1 C21800                          ret AND_KILL_FRAME(1)
  1510                                  
  1511                                  L_code_ptr_bin_apply:
  1512                                  ;;; fill in for final project!
  1513                                  
  1514                                  L_code_ptr_is_null:
  1515 00000CC4 C8000000                        enter 0, 0
  1516 00000CC8 48837D1801                      cmp COUNT, 1
  1517 00000CCD 0F8599120000                    jne L_error_arg_count_1
  1518 00000CD3 488B4520                        mov rax, PARAM(0)
  1519 00000CD7 803801                          cmp byte [rax], T_nil
  1520 00000CDA 750C                            jne .L_false
  1521 00000CDC 48B8-                           mov rax, sob_boolean_true
  1521 00000CDE [0300000000000000] 
  1522 00000CE6 EB0A                            jmp .L_end
  1523                                  .L_false:
  1524 00000CE8 48B8-                           mov rax, sob_boolean_false
  1524 00000CEA [0200000000000000] 
  1525                                  .L_end:
  1526 00000CF2 C9                              leave
  1527 00000CF3 C21800                          ret AND_KILL_FRAME(1)
  1528                                  
  1529                                  L_code_ptr_is_pair:
  1530 00000CF6 C8000000                        enter 0, 0
  1531 00000CFA 48837D1801                      cmp COUNT, 1
  1532 00000CFF 0F8567120000                    jne L_error_arg_count_1
  1533 00000D05 488B4520                        mov rax, PARAM(0)
  1534 00000D09 803821                          cmp byte [rax], T_pair
  1535 00000D0C 750C                            jne .L_false
  1536 00000D0E 48B8-                           mov rax, sob_boolean_true
  1536 00000D10 [0300000000000000] 
  1537 00000D18 EB0A                            jmp .L_end
  1538                                  .L_false:
  1539 00000D1A 48B8-                           mov rax, sob_boolean_false
  1539 00000D1C [0200000000000000] 
  1540                                  .L_end:
  1541 00000D24 C9                              leave
  1542 00000D25 C21800                          ret AND_KILL_FRAME(1)
  1543                                          
  1544                                  L_code_ptr_is_void:
  1545 00000D28 C8000000                        enter 0, 0
  1546 00000D2C 48837D1801                      cmp COUNT, 1
  1547 00000D31 0F8535120000                    jne L_error_arg_count_1
  1548 00000D37 488B4520                        mov rax, PARAM(0)
  1549 00000D3B 803800                          cmp byte [rax], T_void
  1550 00000D3E 750C                            jne .L_false
  1551 00000D40 48B8-                           mov rax, sob_boolean_true
  1551 00000D42 [0300000000000000] 
  1552 00000D4A EB0A                            jmp .L_end
  1553                                  .L_false:
  1554 00000D4C 48B8-                           mov rax, sob_boolean_false
  1554 00000D4E [0200000000000000] 
  1555                                  .L_end:
  1556 00000D56 C9                              leave
  1557 00000D57 C21800                          ret AND_KILL_FRAME(1)
  1558                                  
  1559                                  L_code_ptr_is_char:
  1560 00000D5A C8000000                        enter 0, 0
  1561 00000D5E 48837D1801                      cmp COUNT, 1
  1562 00000D63 0F8503120000                    jne L_error_arg_count_1
  1563 00000D69 488B4520                        mov rax, PARAM(0)
  1564 00000D6D 803802                          cmp byte [rax], T_char
  1565 00000D70 750C                            jne .L_false
  1566 00000D72 48B8-                           mov rax, sob_boolean_true
  1566 00000D74 [0300000000000000] 
  1567 00000D7C EB0A                            jmp .L_end
  1568                                  .L_false:
  1569 00000D7E 48B8-                           mov rax, sob_boolean_false
  1569 00000D80 [0200000000000000] 
  1570                                  .L_end:
  1571 00000D88 C9                              leave
  1572 00000D89 C21800                          ret AND_KILL_FRAME(1)
  1573                                  
  1574                                  L_code_ptr_is_string:
  1575 00000D8C C8000000                        enter 0, 0
  1576 00000D90 48837D1801                      cmp COUNT, 1
  1577 00000D95 0F85D1110000                    jne L_error_arg_count_1
  1578 00000D9B 488B4520                        mov rax, PARAM(0)
  1579 00000D9F 803803                          cmp byte [rax], T_string
  1580 00000DA2 750C                            jne .L_false
  1581 00000DA4 48B8-                           mov rax, sob_boolean_true
  1581 00000DA6 [0300000000000000] 
  1582 00000DAE EB0A                            jmp .L_end
  1583                                  .L_false:
  1584 00000DB0 48B8-                           mov rax, sob_boolean_false
  1584 00000DB2 [0200000000000000] 
  1585                                  .L_end:
  1586 00000DBA C9                              leave
  1587 00000DBB C21800                          ret AND_KILL_FRAME(1)
  1588                                  
  1589                                  L_code_ptr_is_symbol:
  1590 00000DBE C8000000                        enter 0, 0
  1591 00000DC2 48837D1801                      cmp COUNT, 1
  1592 00000DC7 0F859F110000                    jne L_error_arg_count_1
  1593 00000DCD 4C8B4520                        mov r8, PARAM(0)
  1594 00000DD1 41802040                        and byte [r8], T_symbol
  1595 00000DD5 740C                            jz .L_false
  1596 00000DD7 48B8-                           mov rax, sob_boolean_true
  1596 00000DD9 [0300000000000000] 
  1597 00000DE1 EB0A                            jmp .L_exit
  1598                                  .L_false:
  1599 00000DE3 48B8-                           mov rax, sob_boolean_false
  1599 00000DE5 [0200000000000000] 
  1600                                  .L_exit:
  1601 00000DED C9                              leave
  1602 00000DEE C21800                          ret AND_KILL_FRAME(1)
  1603                                  
  1604                                  L_code_ptr_is_uninterned_symbol:
  1605 00000DF1 C8000000                        enter 0, 0
  1606 00000DF5 48837D1801                      cmp COUNT, 1
  1607 00000DFA 0F856C110000                    jne L_error_arg_count_1
  1608 00000E00 4C8B4520                        mov r8, PARAM(0)
  1609 00000E04 41803842                        cmp byte [r8], T_uninterned_symbol
  1610 00000E08 750C                            jne .L_false
  1611 00000E0A 48B8-                           mov rax, sob_boolean_true
  1611 00000E0C [0300000000000000] 
  1612 00000E14 EB0A                            jmp .L_exit
  1613                                  .L_false:
  1614 00000E16 48B8-                           mov rax, sob_boolean_false
  1614 00000E18 [0200000000000000] 
  1615                                  .L_exit:
  1616 00000E20 C9                              leave
  1617 00000E21 C21800                          ret AND_KILL_FRAME(1)
  1618                                  
  1619                                  L_code_ptr_is_interned_symbol:
  1620 00000E24 C8000000                        enter 0, 0
  1621 00000E28 48837D1801                      cmp COUNT, 1
  1622 00000E2D 0F8539110000                    jne L_error_arg_count_1
  1623 00000E33 488B4520                        mov rax, PARAM(0)
  1624 00000E37 803841                          cmp byte [rax], T_interned_symbol
  1625 00000E3A 750C                            jne .L_false
  1626 00000E3C 48B8-                           mov rax, sob_boolean_true
  1626 00000E3E [0300000000000000] 
  1627 00000E46 EB0A                            jmp .L_end
  1628                                  .L_false:
  1629 00000E48 48B8-                           mov rax, sob_boolean_false
  1629 00000E4A [0200000000000000] 
  1630                                  .L_end:
  1631 00000E52 C9                              leave
  1632 00000E53 C21800                          ret AND_KILL_FRAME(1)
  1633                                  
  1634                                  L_code_ptr_gensym:
  1635 00000E56 C8000000                        enter 0, 0
  1636 00000E5A 48837D1800                      cmp COUNT, 0
  1637 00000E5F 0F85D2100000                    jne L_error_arg_count_0
  1638 00000E65 48FF0425[B9080000]              inc qword [gensym_count]
  1639 00000E6D BF09000000                      mov rdi, (1 + 8)
  1640 00000E72 E8C7F4FFFF                      call malloc
  1641 00000E77 C60042                          mov byte [rax], T_uninterned_symbol
  1642 00000E7A 488B0C25[B9080000]              mov rcx, qword [gensym_count]
  1643 00000E82 48894801                        mov qword [rax + 1], rcx
  1644 00000E86 C9                              leave
  1645 00000E87 C21000                          ret AND_KILL_FRAME(0)
  1646                                  
  1647                                  L_code_ptr_is_vector:
  1648 00000E8A C8000000                        enter 0, 0
  1649 00000E8E 48837D1801                      cmp COUNT, 1
  1650 00000E93 0F85D3100000                    jne L_error_arg_count_1
  1651 00000E99 488B4520                        mov rax, PARAM(0)
  1652 00000E9D 803822                          cmp byte [rax], T_vector
  1653 00000EA0 750C                            jne .L_false
  1654 00000EA2 48B8-                           mov rax, sob_boolean_true
  1654 00000EA4 [0300000000000000] 
  1655 00000EAC EB0A                            jmp .L_end
  1656                                  .L_false:
  1657 00000EAE 48B8-                           mov rax, sob_boolean_false
  1657 00000EB0 [0200000000000000] 
  1658                                  .L_end:
  1659 00000EB8 C9                              leave
  1660 00000EB9 C21800                          ret AND_KILL_FRAME(1)
  1661                                  
  1662                                  L_code_ptr_is_closure:
  1663 00000EBC C8000000                        enter 0, 0
  1664 00000EC0 48837D1801                      cmp COUNT, 1
  1665 00000EC5 0F85A1100000                    jne L_error_arg_count_1
  1666 00000ECB 488B4520                        mov rax, PARAM(0)
  1667 00000ECF 803804                          cmp byte [rax], T_closure
  1668 00000ED2 750C                            jne .L_false
  1669 00000ED4 48B8-                           mov rax, sob_boolean_true
  1669 00000ED6 [0300000000000000] 
  1670 00000EDE EB0A                            jmp .L_end
  1671                                  .L_false:
  1672 00000EE0 48B8-                           mov rax, sob_boolean_false
  1672 00000EE2 [0200000000000000] 
  1673                                  .L_end:
  1674 00000EEA C9                              leave
  1675 00000EEB C21800                          ret AND_KILL_FRAME(1)
  1676                                  
  1677                                  L_code_ptr_is_real:
  1678 00000EEE C8000000                        enter 0, 0
  1679 00000EF2 48837D1801                      cmp COUNT, 1
  1680 00000EF7 0F856F100000                    jne L_error_arg_count_1
  1681 00000EFD 488B4520                        mov rax, PARAM(0)
  1682 00000F01 803813                          cmp byte [rax], T_real
  1683 00000F04 750C                            jne .L_false
  1684 00000F06 48B8-                           mov rax, sob_boolean_true
  1684 00000F08 [0300000000000000] 
  1685 00000F10 EB0A                            jmp .L_end
  1686                                  .L_false:
  1687 00000F12 48B8-                           mov rax, sob_boolean_false
  1687 00000F14 [0200000000000000] 
  1688                                  .L_end:
  1689 00000F1C C9                              leave
  1690 00000F1D C21800                          ret AND_KILL_FRAME(1)
  1691                                  
  1692                                  L_code_ptr_is_fraction:
  1693 00000F20 C8000000                        enter 0, 0
  1694 00000F24 48837D1801                      cmp COUNT, 1
  1695 00000F29 0F853D100000                    jne L_error_arg_count_1
  1696 00000F2F 488B4520                        mov rax, PARAM(0)
  1697 00000F33 803812                          cmp byte [rax], T_fraction
  1698 00000F36 750C                            jne .L_false
  1699 00000F38 48B8-                           mov rax, sob_boolean_true
  1699 00000F3A [0300000000000000] 
  1700 00000F42 EB0A                            jmp .L_end
  1701                                  .L_false:
  1702 00000F44 48B8-                           mov rax, sob_boolean_false
  1702 00000F46 [0200000000000000] 
  1703                                  .L_end:
  1704 00000F4E C9                              leave
  1705 00000F4F C21800                          ret AND_KILL_FRAME(1)
  1706                                  
  1707                                  L_code_ptr_is_boolean:
  1708 00000F52 C8000000                        enter 0, 0
  1709 00000F56 48837D1801                      cmp COUNT, 1
  1710 00000F5B 0F850B100000                    jne L_error_arg_count_1
  1711 00000F61 488B4520                        mov rax, PARAM(0)
  1712 00000F65 8A18                            mov bl, byte [rax]
  1713 00000F67 80E308                          and bl, T_boolean
  1714 00000F6A 740C                            je .L_false
  1715 00000F6C 48B8-                           mov rax, sob_boolean_true
  1715 00000F6E [0300000000000000] 
  1716 00000F76 EB0A                            jmp .L_end
  1717                                  .L_false:
  1718 00000F78 48B8-                           mov rax, sob_boolean_false
  1718 00000F7A [0200000000000000] 
  1719                                  .L_end:
  1720 00000F82 C9                              leave
  1721 00000F83 C21800                          ret AND_KILL_FRAME(1)
  1722                                          
  1723                                  L_code_ptr_is_boolean_false:
  1724 00000F86 C8000000                        enter 0, 0
  1725 00000F8A 48837D1801                      cmp COUNT, 1
  1726 00000F8F 0F85D70F0000                    jne L_error_arg_count_1
  1727 00000F95 488B4520                        mov rax, PARAM(0)
  1728 00000F99 8A18                            mov bl, byte [rax]
  1729 00000F9B 80FB09                          cmp bl, T_boolean_false
  1730 00000F9E 750C                            jne .L_false
  1731 00000FA0 48B8-                           mov rax, sob_boolean_true
  1731 00000FA2 [0300000000000000] 
  1732 00000FAA EB0A                            jmp .L_end
  1733                                  .L_false:
  1734 00000FAC 48B8-                           mov rax, sob_boolean_false
  1734 00000FAE [0200000000000000] 
  1735                                  .L_end:
  1736 00000FB6 C9                              leave
  1737 00000FB7 C21800                          ret AND_KILL_FRAME(1)
  1738                                  
  1739                                  L_code_ptr_is_boolean_true:
  1740 00000FBA C8000000                        enter 0, 0
  1741 00000FBE 48837D1801                      cmp COUNT, 1
  1742 00000FC3 0F85A30F0000                    jne L_error_arg_count_1
  1743 00000FC9 488B4520                        mov rax, PARAM(0)
  1744 00000FCD 8A18                            mov bl, byte [rax]
  1745 00000FCF 80FB0A                          cmp bl, T_boolean_true
  1746 00000FD2 750C                            jne .L_false
  1747 00000FD4 48B8-                           mov rax, sob_boolean_true
  1747 00000FD6 [0300000000000000] 
  1748 00000FDE EB0A                            jmp .L_end
  1749                                  .L_false:
  1750 00000FE0 48B8-                           mov rax, sob_boolean_false
  1750 00000FE2 [0200000000000000] 
  1751                                  .L_end:
  1752 00000FEA C9                              leave
  1753 00000FEB C21800                          ret AND_KILL_FRAME(1)
  1754                                  
  1755                                  L_code_ptr_is_number:
  1756 00000FEE C8000000                        enter 0, 0
  1757 00000FF2 48837D1801                      cmp COUNT, 1
  1758 00000FF7 0F856F0F0000                    jne L_error_arg_count_1
  1759 00000FFD 488B4520                        mov rax, PARAM(0)
  1760 00001001 8A18                            mov bl, byte [rax]
  1761 00001003 80E310                          and bl, T_number
  1762 00001006 740C                            jz .L_false
  1763 00001008 48B8-                           mov rax, sob_boolean_true
  1763 0000100A [0300000000000000] 
  1764 00001012 EB0A                            jmp .L_end
  1765                                  .L_false:
  1766 00001014 48B8-                           mov rax, sob_boolean_false
  1766 00001016 [0200000000000000] 
  1767                                  .L_end:
  1768 0000101E C9                              leave
  1769 0000101F C21800                          ret AND_KILL_FRAME(1)
  1770                                          
  1771                                  L_code_ptr_is_collection:
  1772 00001022 C8000000                        enter 0, 0
  1773 00001026 48837D1801                      cmp COUNT, 1
  1774 0000102B 0F853B0F0000                    jne L_error_arg_count_1
  1775 00001031 488B4520                        mov rax, PARAM(0)
  1776 00001035 8A18                            mov bl, byte [rax]
  1777 00001037 80E320                          and bl, T_collection
  1778 0000103A 740C                            je .L_false
  1779 0000103C 48B8-                           mov rax, sob_boolean_true
  1779 0000103E [0300000000000000] 
  1780 00001046 EB0A                            jmp .L_end
  1781                                  .L_false:
  1782 00001048 48B8-                           mov rax, sob_boolean_false
  1782 0000104A [0200000000000000] 
  1783                                  .L_end:
  1784 00001052 C9                              leave
  1785 00001053 C21800                          ret AND_KILL_FRAME(1)
  1786                                  
  1787                                  L_code_ptr_cons:
  1788 00001056 C8000000                        enter 0, 0
  1789 0000105A 48837D1802                      cmp COUNT, 2
  1790 0000105F 0F853C0F0000                    jne L_error_arg_count_2
  1791 00001065 BF11000000                      mov rdi, (1 + 8 + 8)
  1792 0000106A E8CFF2FFFF                      call malloc
  1793 0000106F C60021                          mov byte [rax], T_pair
  1794 00001072 488B5D20                        mov rbx, PARAM(0)
  1795 00001076 48895801                        mov SOB_PAIR_CAR(rax), rbx
  1796 0000107A 488B5D28                        mov rbx, PARAM(1)
  1797 0000107E 48895809                        mov SOB_PAIR_CDR(rax), rbx
  1798 00001082 C9                              leave
  1799 00001083 C22000                          ret AND_KILL_FRAME(2)
  1800                                  
  1801                                  L_code_ptr_display_sexpr:
  1802 00001086 C8000000                        enter 0, 0
  1803 0000108A 48837D1801                      cmp COUNT, 1
  1804 0000108F 0F85D70E0000                    jne L_error_arg_count_1
  1805 00001095 488B7D20                        mov rdi, PARAM(0)
  1806 00001099 E821F5FFFF                      call print_sexpr
  1807 0000109E 48B8-                           mov rax, sob_void
  1807 000010A0 [0000000000000000] 
  1808 000010A8 C9                              leave
  1809 000010A9 C21800                          ret AND_KILL_FRAME(1)
  1810                                  
  1811                                  L_code_ptr_write_char:
  1812 000010AC C8000000                        enter 0, 0
  1813 000010B0 48837D1801                      cmp COUNT, 1
  1814 000010B5 0F85B10E0000                    jne L_error_arg_count_1
  1815 000010BB 488B4520                        mov rax, PARAM(0)
  1816                                          assert_char(rax)
    53 000010BF 803802              <1>  cmp byte [%1], %2
    54 000010C2 0F85780F0000        <1>  jne L_error_incorrect_type
  1817 000010C8 8A4001                          mov al, SOB_CHAR_VALUE(rax)
  1818 000010CB 4825FF000000                    and rax, 255
  1819 000010D1 48BF-                           mov rdi, fmt_char
  1819 000010D3 [C108000000000000] 
  1820 000010DB 4889C6                          mov rsi, rax
  1821 000010DE B800000000                      mov rax, 0
  1822                                          ENTER
    44 000010E3 C8000000            <1>  enter 0, 0
    45 000010E7 4883E4F0            <1>  and rsp, ~15
  1823 000010EB E8(00000000)                    call printf
  1824                                          LEAVE
    49 000010F0 C9                  <1>  leave
  1825 000010F1 48B8-                           mov rax, sob_void
  1825 000010F3 [0000000000000000] 
  1826 000010FB C9                              leave
  1827 000010FC C21800                          ret AND_KILL_FRAME(1)
  1828                                  
  1829                                  L_code_ptr_car:
  1830 000010FF C8000000                        enter 0, 0
  1831 00001103 48837D1801                      cmp COUNT, 1
  1832 00001108 0F855E0E0000                    jne L_error_arg_count_1
  1833 0000110E 488B4520                        mov rax, PARAM(0)
  1834                                          assert_pair(rax)
    53 00001112 803821              <1>  cmp byte [%1], %2
    54 00001115 0F85250F0000        <1>  jne L_error_incorrect_type
  1835 0000111B 488B4001                        mov rax, SOB_PAIR_CAR(rax)
  1836 0000111F C9                              leave
  1837 00001120 C21800                          ret AND_KILL_FRAME(1)
  1838                                          
  1839                                  L_code_ptr_cdr:
  1840 00001123 C8000000                        enter 0, 0
  1841 00001127 48837D1801                      cmp COUNT, 1
  1842 0000112C 0F853A0E0000                    jne L_error_arg_count_1
  1843 00001132 488B4520                        mov rax, PARAM(0)
  1844                                          assert_pair(rax)
    53 00001136 803821              <1>  cmp byte [%1], %2
    54 00001139 0F85010F0000        <1>  jne L_error_incorrect_type
  1845 0000113F 488B4009                        mov rax, SOB_PAIR_CDR(rax)
  1846 00001143 C9                              leave
  1847 00001144 C21800                          ret AND_KILL_FRAME(1)
  1848                                          
  1849                                  L_code_ptr_string_length:
  1850 00001147 C8000000                        enter 0, 0
  1851 0000114B 48837D1801                      cmp COUNT, 1
  1852 00001150 0F85160E0000                    jne L_error_arg_count_1
  1853 00001156 488B4520                        mov rax, PARAM(0)
  1854                                          assert_string(rax)
    53 0000115A 803803              <1>  cmp byte [%1], %2
    54 0000115D 0F85DD0E0000        <1>  jne L_error_incorrect_type
  1855 00001163 488B7801                        mov rdi, SOB_STRING_LENGTH(rax)
  1856 00001167 E84F0D0000                      call make_integer
  1857 0000116C C9                              leave
  1858 0000116D C21800                          ret AND_KILL_FRAME(1)
  1859                                  
  1860                                  L_code_ptr_vector_length:
  1861 00001170 C8000000                        enter 0, 0
  1862 00001174 48837D1801                      cmp COUNT, 1
  1863 00001179 0F85ED0D0000                    jne L_error_arg_count_1
  1864 0000117F 488B4520                        mov rax, PARAM(0)
  1865                                          assert_vector(rax)
    53 00001183 803822              <1>  cmp byte [%1], %2
    54 00001186 0F85B40E0000        <1>  jne L_error_incorrect_type
  1866 0000118C 488B7801                        mov rdi, SOB_VECTOR_LENGTH(rax)
  1867 00001190 E8260D0000                      call make_integer
  1868 00001195 C9                              leave
  1869 00001196 C21800                          ret AND_KILL_FRAME(1)
  1870                                  
  1871                                  L_code_ptr_real_to_integer:
  1872 00001199 C8000000                        enter 0, 0
  1873 0000119D 48837D1801                      cmp COUNT, 1
  1874 000011A2 0F85C40D0000                    jne L_error_arg_count_1
  1875 000011A8 488B5D20                        mov rbx, PARAM(0)
  1876                                          assert_real(rbx)
    53 000011AC 803B13              <1>  cmp byte [%1], %2
    54 000011AF 0F858B0E0000        <1>  jne L_error_incorrect_type
  1877 000011B5 F20F104301                      movsd xmm0, qword [rbx + 1]
  1878 000011BA F2480F2CF8                      cvttsd2si rdi, xmm0
  1879 000011BF E8F70C0000                      call make_integer
  1880 000011C4 C9                              leave
  1881 000011C5 C21800                          ret AND_KILL_FRAME(1)
  1882                                  
  1883                                  L_code_ptr_exit:
  1884 000011C8 C8000000                        enter 0, 0
  1885 000011CC 48837D1800                      cmp COUNT, 0
  1886 000011D1 0F85600D0000                    jne L_error_arg_count_0
  1887 000011D7 B800000000                      mov rax, 0
  1888 000011DC E8(00000000)                    call exit
  1889                                  
  1890                                  L_code_ptr_integer_to_real:
  1891 000011E1 C8000000                        enter 0, 0
  1892 000011E5 48837D1801                      cmp COUNT, 1
  1893 000011EA 0F857C0D0000                    jne L_error_arg_count_1
  1894 000011F0 488B4520                        mov rax, PARAM(0)
  1895                                          assert_integer(rax)
    53 000011F4 803811              <1>  cmp byte [%1], %2
    54 000011F7 0F85430E0000        <1>  jne L_error_incorrect_type
  1896 000011FD FF7001                          push qword [rax + 1]
  1897 00001200 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1898 00001206 E8980C0000                      call make_real
  1899 0000120B C9                              leave
  1900 0000120C C21800                          ret AND_KILL_FRAME(1)
  1901                                  
  1902                                  L_code_ptr_fraction_to_real:
  1903 0000120F C8000000                        enter 0, 0
  1904 00001213 48837D1801                      cmp COUNT, 1
  1905 00001218 0F854E0D0000                    jne L_error_arg_count_1
  1906 0000121E 488B4520                        mov rax, PARAM(0)
  1907                                          assert_fraction(rax)
    53 00001222 803812              <1>  cmp byte [%1], %2
    54 00001225 0F85150E0000        <1>  jne L_error_incorrect_type
  1908 0000122B FF7001                          push qword [rax + 1]
  1909 0000122E F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1910 00001234 FF7009                          push qword [rax + 1 + 8]
  1911 00001237 F2480F2A0C24                    cvtsi2sd xmm1, qword [rsp]
  1912 0000123D F20F5EC1                        divsd xmm0, xmm1
  1913 00001241 E85D0C0000                      call make_real
  1914 00001246 C9                              leave
  1915 00001247 C21800                          ret AND_KILL_FRAME(1)
  1916                                  
  1917                                  L_code_ptr_char_to_integer:
  1918 0000124A C8000000                        enter 0, 0
  1919 0000124E 48837D1801                      cmp COUNT, 1
  1920 00001253 0F85130D0000                    jne L_error_arg_count_1
  1921 00001259 488B4520                        mov rax, PARAM(0)
  1922                                          assert_char(rax)
    53 0000125D 803802              <1>  cmp byte [%1], %2
    54 00001260 0F85DA0D0000        <1>  jne L_error_incorrect_type
  1923 00001266 8A4001                          mov al, byte [rax + 1]
  1924 00001269 4825FF000000                    and rax, 255
  1925 0000126F 4889C7                          mov rdi, rax
  1926 00001272 E8440C0000                      call make_integer
  1927 00001277 C9                              leave
  1928 00001278 C21800                          ret AND_KILL_FRAME(1)
  1929                                  
  1930                                  L_code_ptr_integer_to_fraction:
  1931 0000127B C8000000                        enter 0, 0
  1932 0000127F 48837D1801                      cmp COUNT, 1
  1933 00001284 0F85E20C0000                    jne L_error_arg_count_1
  1934 0000128A 4C8B4520                        mov r8, PARAM(0)
  1935                                          assert_integer(r8)
    53 0000128E 41803811            <1>  cmp byte [%1], %2
    54 00001292 0F85A80D0000        <1>  jne L_error_incorrect_type
  1936 00001298 BF11000000                      mov rdi, (1 + 8 + 8)
  1937 0000129D E89CF0FFFF                      call malloc
  1938 000012A2 498B5801                        mov rbx, qword [r8 + 1]
  1939 000012A6 C60012                          mov byte [rax], T_fraction
  1940 000012A9 48895801                        mov qword [rax + 1], rbx
  1941 000012AD 48C7400901000000                mov qword [rax + 1 + 8], 1
  1942 000012B5 C9                              leave
  1943 000012B6 C21800                          ret AND_KILL_FRAME(1)
  1944                                  
  1945                                  L_code_ptr_integer_to_char:
  1946 000012B9 C8000000                        enter 0, 0
  1947 000012BD 48837D1801                      cmp COUNT, 1
  1948 000012C2 0F85A40C0000                    jne L_error_arg_count_1
  1949 000012C8 488B4520                        mov rax, PARAM(0)
  1950                                          assert_integer(rax)
    53 000012CC 803811              <1>  cmp byte [%1], %2
    54 000012CF 0F856B0D0000        <1>  jne L_error_incorrect_type
  1951 000012D5 488B5801                        mov rbx, qword [rax + 1]
  1952 000012D9 4883FB00                        cmp rbx, 0
  1953 000012DD 0F8EF20B0000                    jle L_error_integer_range
  1954 000012E3 4881FB00010000                  cmp rbx, 256
  1955 000012EA 0F8DE50B0000                    jge L_error_integer_range
  1956 000012F0 BF02000000                      mov rdi, (1 + 1)
  1957 000012F5 E844F0FFFF                      call malloc
  1958 000012FA C60002                          mov byte [rax], T_char
  1959 000012FD 885801                          mov byte [rax + 1], bl
  1960 00001300 C9                              leave
  1961 00001301 C21800                          ret AND_KILL_FRAME(1)
  1962                                  
  1963                                  L_code_ptr_trng:
  1964 00001304 C8000000                        enter 0, 0
  1965 00001308 48837D1800                      cmp COUNT, 0
  1966 0000130D 0F85240C0000                    jne L_error_arg_count_0
  1967 00001313 480FC7F7                        rdrand rdi
  1968 00001317 48D1EF                          shr rdi, 1
  1969 0000131A E89C0B0000                      call make_integer
  1970 0000131F C9                              leave
  1971 00001320 C21000                          ret AND_KILL_FRAME(0)
  1972                                  
  1973                                  L_code_ptr_is_zero:
  1974 00001323 C8000000                        enter 0, 0
  1975 00001327 48837D1801                      cmp COUNT, 1
  1976 0000132C 0F853A0C0000                    jne L_error_arg_count_1
  1977 00001332 488B4520                        mov rax, PARAM(0)
  1978 00001336 803811                          cmp byte [rax], T_integer
  1979 00001339 740F                            je .L_integer
  1980 0000133B 803812                          cmp byte [rax], T_fraction
  1981 0000133E 7413                            je .L_fraction
  1982 00001340 803813                          cmp byte [rax], T_real
  1983 00001343 7417                            je .L_real
  1984 00001345 E9F60C0000                      jmp L_error_incorrect_type
  1985                                  .L_integer:
  1986 0000134A 4883780100                      cmp qword [rax + 1], 0
  1987 0000134F 7429                            je .L_zero
  1988 00001351 EB1B                            jmp .L_not_zero
  1989                                  .L_fraction:
  1990 00001353 4883780100                      cmp qword [rax + 1], 0
  1991 00001358 7420                            je .L_zero
  1992 0000135A EB12                            jmp .L_not_zero
  1993                                  .L_real:
  1994 0000135C 660FEFC0                        pxor xmm0, xmm0
  1995 00001360 FF7001                          push qword [rax + 1]
  1996 00001363 F20F100C24                      movsd xmm1, qword [rsp]
  1997 00001368 660F2EC1                        ucomisd xmm0, xmm1
  1998 0000136C 740C                            je .L_zero
  1999                                  .L_not_zero:
  2000 0000136E 48B8-                           mov rax, sob_boolean_false
  2000 00001370 [0200000000000000] 
  2001 00001378 EB0A                            jmp .L_end
  2002                                  .L_zero:
  2003 0000137A 48B8-                           mov rax, sob_boolean_true
  2003 0000137C [0300000000000000] 
  2004                                  .L_end:
  2005 00001384 C9                              leave
  2006 00001385 C21800                          ret AND_KILL_FRAME(1)
  2007                                  
  2008                                  L_code_ptr_is_integer:
  2009 00001388 C8000000                        enter 0, 0
  2010 0000138C 48837D1801                      cmp COUNT, 1
  2011 00001391 0F85D50B0000                    jne L_error_arg_count_1
  2012 00001397 488B4520                        mov rax, PARAM(0)
  2013 0000139B 803811                          cmp byte [rax], T_integer
  2014 0000139E 750C                            jne .L_false
  2015 000013A0 48B8-                           mov rax, sob_boolean_true
  2015 000013A2 [0300000000000000] 
  2016 000013AA EB0A                            jmp .L_exit
  2017                                  .L_false:
  2018 000013AC 48B8-                           mov rax, sob_boolean_false
  2018 000013AE [0200000000000000] 
  2019                                  .L_exit:
  2020 000013B6 C9                              leave
  2021 000013B7 C21800                          ret AND_KILL_FRAME(1)
  2022                                  
  2023                                  L_code_ptr_raw_bin_add_rr:
  2024 000013BA C8000000                        enter 0, 0
  2025 000013BE 48837D1802                      cmp COUNT, 2
  2026 000013C3 0F85D80B0000                    jne L_error_arg_count_2
  2027 000013C9 488B5D20                        mov rbx, PARAM(0)
  2028                                          assert_real(rbx)
    53 000013CD 803B13              <1>  cmp byte [%1], %2
    54 000013D0 0F856A0C0000        <1>  jne L_error_incorrect_type
  2029 000013D6 488B4D28                        mov rcx, PARAM(1)
  2030                                          assert_real(rcx)
    53 000013DA 803913              <1>  cmp byte [%1], %2
    54 000013DD 0F855D0C0000        <1>  jne L_error_incorrect_type
  2031 000013E3 F20F104301                      movsd xmm0, qword [rbx + 1]
  2032 000013E8 F20F104901                      movsd xmm1, qword [rcx + 1]
  2033 000013ED F20F58C1                        addsd xmm0, xmm1
  2034 000013F1 E8AD0A0000                      call make_real
  2035 000013F6 C9                              leave
  2036 000013F7 C22000                          ret AND_KILL_FRAME(2)
  2037                                  
  2038                                  L_code_ptr_raw_bin_sub_rr:
  2039 000013FA C8000000                        enter 0, 0
  2040 000013FE 48837D1802                      cmp COUNT, 2
  2041 00001403 0F85980B0000                    jne L_error_arg_count_2
  2042 00001409 488B5D20                        mov rbx, PARAM(0)
  2043                                          assert_real(rbx)
    53 0000140D 803B13              <1>  cmp byte [%1], %2
    54 00001410 0F852A0C0000        <1>  jne L_error_incorrect_type
  2044 00001416 488B4D28                        mov rcx, PARAM(1)
  2045                                          assert_real(rcx)
    53 0000141A 803913              <1>  cmp byte [%1], %2
    54 0000141D 0F851D0C0000        <1>  jne L_error_incorrect_type
  2046 00001423 F20F104301                      movsd xmm0, qword [rbx + 1]
  2047 00001428 F20F104901                      movsd xmm1, qword [rcx + 1]
  2048 0000142D F20F5CC1                        subsd xmm0, xmm1
  2049 00001431 E86D0A0000                      call make_real
  2050 00001436 C9                              leave
  2051 00001437 C22000                          ret AND_KILL_FRAME(2)
  2052                                  
  2053                                  L_code_ptr_raw_bin_mul_rr:
  2054 0000143A C8000000                        enter 0, 0
  2055 0000143E 48837D1802                      cmp COUNT, 2
  2056 00001443 0F85580B0000                    jne L_error_arg_count_2
  2057 00001449 488B5D20                        mov rbx, PARAM(0)
  2058                                          assert_real(rbx)
    53 0000144D 803B13              <1>  cmp byte [%1], %2
    54 00001450 0F85EA0B0000        <1>  jne L_error_incorrect_type
  2059 00001456 488B4D28                        mov rcx, PARAM(1)
  2060                                          assert_real(rcx)
    53 0000145A 803913              <1>  cmp byte [%1], %2
    54 0000145D 0F85DD0B0000        <1>  jne L_error_incorrect_type
  2061 00001463 F20F104301                      movsd xmm0, qword [rbx + 1]
  2062 00001468 F20F104901                      movsd xmm1, qword [rcx + 1]
  2063 0000146D F20F59C1                        mulsd xmm0, xmm1
  2064 00001471 E82D0A0000                      call make_real
  2065 00001476 C9                              leave
  2066 00001477 C22000                          ret AND_KILL_FRAME(2)
  2067                                  
  2068                                  L_code_ptr_raw_bin_div_rr:
  2069 0000147A C8000000                        enter 0, 0
  2070 0000147E 48837D1802                      cmp COUNT, 2
  2071 00001483 0F85180B0000                    jne L_error_arg_count_2
  2072 00001489 488B5D20                        mov rbx, PARAM(0)
  2073                                          assert_real(rbx)
    53 0000148D 803B13              <1>  cmp byte [%1], %2
    54 00001490 0F85AA0B0000        <1>  jne L_error_incorrect_type
  2074 00001496 488B4D28                        mov rcx, PARAM(1)
  2075                                          assert_real(rcx)
    53 0000149A 803913              <1>  cmp byte [%1], %2
    54 0000149D 0F859D0B0000        <1>  jne L_error_incorrect_type
  2076 000014A3 F20F104301                      movsd xmm0, qword [rbx + 1]
  2077 000014A8 F20F104901                      movsd xmm1, qword [rcx + 1]
  2078 000014AD 660FEFD2                        pxor xmm2, xmm2
  2079 000014B1 660F2ECA                        ucomisd xmm1, xmm2
  2080 000014B5 0F84B60B0000                    je L_error_division_by_zero
  2081 000014BB F20F5EC1                        divsd xmm0, xmm1
  2082 000014BF E8DF090000                      call make_real
  2083 000014C4 C9                              leave
  2084 000014C5 C22000                          ret AND_KILL_FRAME(2)
  2085                                  
  2086                                  L_code_ptr_raw_bin_add_zz:
  2087 000014C8 C8000000                	enter 0, 0
  2088 000014CC 48837D1802              	cmp COUNT, 2
  2089 000014D1 0F85CA0A0000            	jne L_error_arg_count_2
  2090 000014D7 4C8B4520                	mov r8, PARAM(0)
  2091                                  	assert_integer(r8)
    53 000014DB 41803811            <1>  cmp byte [%1], %2
    54 000014DF 0F855B0B0000        <1>  jne L_error_incorrect_type
  2092 000014E5 4C8B4D28                	mov r9, PARAM(1)
  2093                                  	assert_integer(r9)
    53 000014E9 41803911            <1>  cmp byte [%1], %2
    54 000014ED 0F854D0B0000        <1>  jne L_error_incorrect_type
  2094 000014F3 498B7801                	mov rdi, qword [r8 + 1]
  2095 000014F7 49037901                	add rdi, qword [r9 + 1]
  2096 000014FB E8BB090000              	call make_integer
  2097 00001500 C9                      	leave
  2098 00001501 C22000                  	ret AND_KILL_FRAME(2)
  2099                                  
  2100                                  L_code_ptr_raw_bin_add_qq:
  2101 00001504 C8000000                        enter 0, 0
  2102 00001508 48837D1802                      cmp COUNT, 2
  2103 0000150D 0F858E0A0000                    jne L_error_arg_count_2
  2104 00001513 4C8B4520                        mov r8, PARAM(0)
  2105                                          assert_fraction(r8)
    53 00001517 41803812            <1>  cmp byte [%1], %2
    54 0000151B 0F851F0B0000        <1>  jne L_error_incorrect_type
  2106 00001521 4C8B4D28                        mov r9, PARAM(1)
  2107                                          assert_fraction(r9)
    53 00001525 41803912            <1>  cmp byte [%1], %2
    54 00001529 0F85110B0000        <1>  jne L_error_incorrect_type
  2108 0000152F 498B4001                        mov rax, qword [r8 + 1] ; num1
  2109 00001533 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  2110 00001537 4899                            cqo
  2111 00001539 48F7EB                          imul rbx
  2112 0000153C 4889C6                          mov rsi, rax
  2113 0000153F 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2114 00001543 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  2115 00001547 4899                            cqo
  2116 00001549 48F7EB                          imul rbx
  2117 0000154C 4801C6                          add rsi, rax
  2118 0000154F 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2119 00001553 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  2120 00001557 4899                            cqo
  2121 00001559 48F7EB                          imul rbx
  2122 0000155C 4889C7                          mov rdi, rax
  2123 0000155F E8DE010000                      call normalize_fraction
  2124 00001564 C9                              leave
  2125 00001565 C22000                          ret AND_KILL_FRAME(2)
  2126                                  
  2127                                  L_code_ptr_raw_bin_sub_zz:
  2128 00001568 C8000000                	enter 0, 0
  2129 0000156C 48837D1802              	cmp COUNT, 2
  2130 00001571 0F852A0A0000            	jne L_error_arg_count_2
  2131 00001577 4C8B4520                	mov r8, PARAM(0)
  2132                                  	assert_integer(r8)
    53 0000157B 41803811            <1>  cmp byte [%1], %2
    54 0000157F 0F85BB0A0000        <1>  jne L_error_incorrect_type
  2133 00001585 4C8B4D28                	mov r9, PARAM(1)
  2134                                  	assert_integer(r9)
    53 00001589 41803911            <1>  cmp byte [%1], %2
    54 0000158D 0F85AD0A0000        <1>  jne L_error_incorrect_type
  2135 00001593 498B7801                	mov rdi, qword [r8 + 1]
  2136 00001597 492B7901                	sub rdi, qword [r9 + 1]
  2137 0000159B E81B090000              	call make_integer
  2138 000015A0 C9                      	leave
  2139 000015A1 C22000                  	ret AND_KILL_FRAME(2)
  2140                                  
  2141                                  L_code_ptr_raw_bin_sub_qq:
  2142 000015A4 C8000000                        enter 0, 0
  2143 000015A8 48837D1802                      cmp COUNT, 2
  2144 000015AD 0F85EE090000                    jne L_error_arg_count_2
  2145 000015B3 4C8B4520                        mov r8, PARAM(0)
  2146                                          assert_fraction(r8)
    53 000015B7 41803812            <1>  cmp byte [%1], %2
    54 000015BB 0F857F0A0000        <1>  jne L_error_incorrect_type
  2147 000015C1 4C8B4D28                        mov r9, PARAM(1)
  2148                                          assert_fraction(r9)
    53 000015C5 41803912            <1>  cmp byte [%1], %2
    54 000015C9 0F85710A0000        <1>  jne L_error_incorrect_type
  2149 000015CF 498B4001                        mov rax, qword [r8 + 1] ; num1
  2150 000015D3 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  2151 000015D7 4899                            cqo
  2152 000015D9 48F7EB                          imul rbx
  2153 000015DC 4889C6                          mov rsi, rax
  2154 000015DF 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2155 000015E3 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  2156 000015E7 4899                            cqo
  2157 000015E9 48F7EB                          imul rbx
  2158 000015EC 4829C6                          sub rsi, rax
  2159 000015EF 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2160 000015F3 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  2161 000015F7 4899                            cqo
  2162 000015F9 48F7EB                          imul rbx
  2163 000015FC 4889C7                          mov rdi, rax
  2164 000015FF E83E010000                      call normalize_fraction
  2165 00001604 C9                              leave
  2166 00001605 C22000                          ret AND_KILL_FRAME(2)
  2167                                  
  2168                                  L_code_ptr_raw_bin_mul_zz:
  2169 00001608 C8000000                	enter 0, 0
  2170 0000160C 48837D1802              	cmp COUNT, 2
  2171 00001611 0F858A090000            	jne L_error_arg_count_2
  2172 00001617 4C8B4520                	mov r8, PARAM(0)
  2173                                  	assert_integer(r8)
    53 0000161B 41803811            <1>  cmp byte [%1], %2
    54 0000161F 0F851B0A0000        <1>  jne L_error_incorrect_type
  2174 00001625 4C8B4D28                	mov r9, PARAM(1)
  2175                                  	assert_integer(r9)
    53 00001629 41803911            <1>  cmp byte [%1], %2
    54 0000162D 0F850D0A0000        <1>  jne L_error_incorrect_type
  2176 00001633 4899                    	cqo
  2177 00001635 498B4001                	mov rax, qword [r8 + 1]
  2178 00001639 49F76101                	mul qword [r9 + 1]
  2179 0000163D 4889C7                  	mov rdi, rax
  2180 00001640 E876080000              	call make_integer
  2181 00001645 C9                      	leave
  2182 00001646 C22000                  	ret AND_KILL_FRAME(2)
  2183                                  
  2184                                  L_code_ptr_raw_bin_mul_qq:
  2185 00001649 C8000000                        enter 0, 0
  2186 0000164D 48837D1802                      cmp COUNT, 2
  2187 00001652 0F8549090000                    jne L_error_arg_count_2
  2188 00001658 4C8B4520                        mov r8, PARAM(0)
  2189                                          assert_fraction(r8)
    53 0000165C 41803812            <1>  cmp byte [%1], %2
    54 00001660 0F85DA090000        <1>  jne L_error_incorrect_type
  2190 00001666 4C8B4D28                        mov r9, PARAM(1)
  2191                                          assert_fraction(r9)
    53 0000166A 41803912            <1>  cmp byte [%1], %2
    54 0000166E 0F85CC090000        <1>  jne L_error_incorrect_type
  2192 00001674 498B4001                        mov rax, qword [r8 + 1] ; num1
  2193 00001678 498B5901                        mov rbx, qword [r9 + 1] ; num2
  2194 0000167C 4899                            cqo
  2195 0000167E 48F7EB                          imul rbx
  2196 00001681 4889C6                          mov rsi, rax
  2197 00001684 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2198 00001688 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  2199 0000168C 4899                            cqo
  2200 0000168E 48F7EB                          imul rbx
  2201 00001691 4889C7                          mov rdi, rax
  2202 00001694 E8A9000000                      call normalize_fraction
  2203 00001699 C9                              leave
  2204 0000169A C22000                          ret AND_KILL_FRAME(2)
  2205                                          
  2206                                  L_code_ptr_raw_bin_div_zz:
  2207 0000169D C8000000                	enter 0, 0
  2208 000016A1 48837D1802              	cmp COUNT, 2
  2209 000016A6 0F85F5080000            	jne L_error_arg_count_2
  2210 000016AC 4C8B4520                	mov r8, PARAM(0)
  2211                                  	assert_integer(r8)
    53 000016B0 41803811            <1>  cmp byte [%1], %2
    54 000016B4 0F8586090000        <1>  jne L_error_incorrect_type
  2212 000016BA 4C8B4D28                	mov r9, PARAM(1)
  2213                                  	assert_integer(r9)
    53 000016BE 41803911            <1>  cmp byte [%1], %2
    54 000016C2 0F8578090000        <1>  jne L_error_incorrect_type
  2214 000016C8 498B7901                	mov rdi, qword [r9 + 1]
  2215 000016CC 4883FF00                	cmp rdi, 0
  2216 000016D0 0F849B090000            	je L_error_division_by_zero
  2217 000016D6 498B7001                	mov rsi, qword [r8 + 1]
  2218 000016DA E863000000              	call normalize_fraction
  2219 000016DF C9                      	leave
  2220 000016E0 C22000                  	ret AND_KILL_FRAME(2)
  2221                                  
  2222                                  L_code_ptr_raw_bin_div_qq:
  2223 000016E3 C8000000                        enter 0, 0
  2224 000016E7 48837D1802                      cmp COUNT, 2
  2225 000016EC 0F85AF080000                    jne L_error_arg_count_2
  2226 000016F2 4C8B4520                        mov r8, PARAM(0)
  2227                                          assert_fraction(r8)
    53 000016F6 41803812            <1>  cmp byte [%1], %2
    54 000016FA 0F8540090000        <1>  jne L_error_incorrect_type
  2228 00001700 4C8B4D28                        mov r9, PARAM(1)
  2229                                          assert_fraction(r9)
    53 00001704 41803912            <1>  cmp byte [%1], %2
    54 00001708 0F8532090000        <1>  jne L_error_incorrect_type
  2230 0000170E 4983790100                      cmp qword [r9 + 1], 0
  2231 00001713 0F8458090000                    je L_error_division_by_zero
  2232 00001719 498B4001                        mov rax, qword [r8 + 1] ; num1
  2233 0000171D 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  2234 00001721 4899                            cqo
  2235 00001723 48F7EB                          imul rbx
  2236 00001726 4889C6                          mov rsi, rax
  2237 00001729 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2238 0000172D 498B5901                        mov rbx, qword [r9 + 1] ; num2
  2239 00001731 4899                            cqo
  2240 00001733 48F7EB                          imul rbx
  2241 00001736 4889C7                          mov rdi, rax
  2242 00001739 E804000000                      call normalize_fraction
  2243 0000173E C9                              leave
  2244 0000173F C22000                          ret AND_KILL_FRAME(2)
  2245                                          
  2246                                  normalize_fraction:
  2247 00001742 56                              push rsi
  2248 00001743 57                              push rdi
  2249 00001744 E859000000                      call gcd
  2250 00001749 4889C3                          mov rbx, rax
  2251 0000174C 58                              pop rax
  2252 0000174D 4899                            cqo
  2253 0000174F 48F7FB                          idiv rbx
  2254 00001752 4989C0                          mov r8, rax
  2255 00001755 58                              pop rax
  2256 00001756 4899                            cqo
  2257 00001758 48F7FB                          idiv rbx
  2258 0000175B 4989C1                          mov r9, rax
  2259 0000175E 4983F900                        cmp r9, 0
  2260 00001762 741C                            je .L_zero
  2261 00001764 4983F801                        cmp r8, 1
  2262 00001768 7421                            je .L_int
  2263 0000176A BF11000000                      mov rdi, (1 + 8 + 8)
  2264 0000176F E8CAEBFFFF                      call malloc
  2265 00001774 C60012                          mov byte [rax], T_fraction
  2266 00001777 4C894801                        mov qword [rax + 1], r9
  2267 0000177B 4C894009                        mov qword [rax + 1 + 8], r8
  2268 0000177F C3                              ret
  2269                                  .L_zero:
  2270 00001780 BF00000000                      mov rdi, 0
  2271 00001785 E831070000                      call make_integer
  2272 0000178A C3                              ret
  2273                                  .L_int:
  2274 0000178B 4C89CF                          mov rdi, r9
  2275 0000178E E828070000                      call make_integer
  2276 00001793 C3                              ret
  2277                                  
  2278                                  iabs:
  2279 00001794 4889F8                          mov rax, rdi
  2280 00001797 4883F800                        cmp rax, 0
  2281 0000179B 7C01                            jl .Lneg
  2282 0000179D C3                              ret
  2283                                  .Lneg:
  2284 0000179E 48F7D8                          neg rax
  2285 000017A1 C3                              ret
  2286                                  
  2287                                  gcd:
  2288 000017A2 E8EDFFFFFF                      call iabs
  2289 000017A7 4889C3                          mov rbx, rax
  2290 000017AA 4889F7                          mov rdi, rsi
  2291 000017AD E8E2FFFFFF                      call iabs
  2292 000017B2 4883F800                        cmp rax, 0
  2293 000017B6 7502                            jne .L0
  2294 000017B8 4893                            xchg rax, rbx
  2295                                  .L0:
  2296 000017BA 4883FB00                        cmp rbx, 0
  2297 000017BE 740C                            je .L1
  2298 000017C0 4899                            cqo
  2299 000017C2 48F7F3                          div rbx
  2300 000017C5 4889D0                          mov rax, rdx
  2301 000017C8 4893                            xchg rax, rbx
  2302 000017CA EBEE                            jmp .L0
  2303                                  .L1:
  2304 000017CC C3                              ret
  2305                                  
  2306                                  L_code_ptr_error:
  2307 000017CD C8000000                        enter 0, 0
  2308 000017D1 48837D1802                      cmp COUNT, 2
  2309 000017D6 0F85C5070000                    jne L_error_arg_count_2
  2310 000017DC 488B7520                        mov rsi, PARAM(0)
  2311                                          assert_interned_symbol(rsi)
    53 000017E0 803E41              <1>  cmp byte [%1], %2
    54 000017E3 0F8557080000        <1>  jne L_error_incorrect_type
  2312 000017E9 488B7528                        mov rsi, PARAM(1)
  2313                                          assert_string(rsi)
    53 000017ED 803E03              <1>  cmp byte [%1], %2
    54 000017F0 0F854A080000        <1>  jne L_error_incorrect_type
  2314 000017F6 48BF-                           mov rdi, fmt_scheme_error_part_1
  2314 000017F8 [1F0A000000000000] 
  2315 00001800 B800000000                      mov rax, 0
  2316                                          ENTER
    44 00001805 C8000000            <1>  enter 0, 0
    45 00001809 4883E4F0            <1>  and rsp, ~15
  2317 0000180D E8(00000000)                    call printf
  2318                                          LEAVE
    49 00001812 C9                  <1>  leave
  2319 00001813 488B7D20                        mov rdi, PARAM(0)
  2320 00001817 E8A3EDFFFF                      call print_sexpr
  2321 0000181C 48BF-                           mov rdi, fmt_scheme_error_part_2
  2321 0000181E [330A000000000000] 
  2322 00001826 B800000000                      mov rax, 0
  2323                                          ENTER
    44 0000182B C8000000            <1>  enter 0, 0
    45 0000182F 4883E4F0            <1>  and rsp, ~15
  2324 00001833 E8(00000000)                    call printf
  2325                                          LEAVE
    49 00001838 C9                  <1>  leave
  2326 00001839 488B4528                        mov rax, PARAM(1)       ; sob_string
  2327 0000183D BE01000000                      mov rsi, 1              ; size = 1 byte
  2328 00001842 488B5001                        mov rdx, qword [rax + 1] ; length
  2329 00001846 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
  2330 0000184A 488B0C25[00000000]              mov rcx, qword [stdout]  ; FILE*
  2331                                  	ENTER
    44 00001852 C8000000            <1>  enter 0, 0
    45 00001856 4883E4F0            <1>  and rsp, ~15
  2332 0000185A E8(00000000)                    call fwrite
  2333                                  	LEAVE
    49 0000185F C9                  <1>  leave
  2334 00001860 48BF-                           mov rdi, fmt_scheme_error_part_3
  2334 00001862 [750A000000000000] 
  2335 0000186A B800000000                      mov rax, 0
  2336                                          ENTER
    44 0000186F C8000000            <1>  enter 0, 0
    45 00001873 4883E4F0            <1>  and rsp, ~15
  2337 00001877 E8(00000000)                    call printf
  2338                                          LEAVE
    49 0000187C C9                  <1>  leave
  2339 0000187D 48C7C0F7FFFFFF                  mov rax, -9
  2340 00001884 E8(00000000)                    call exit
  2341                                  
  2342                                  L_code_ptr_raw_less_than_rr:
  2343 00001889 C8000000                        enter 0, 0
  2344 0000188D 48837D1802                      cmp COUNT, 2
  2345 00001892 0F8509070000                    jne L_error_arg_count_2
  2346 00001898 488B7520                        mov rsi, PARAM(0)
  2347                                          assert_real(rsi)
    53 0000189C 803E13              <1>  cmp byte [%1], %2
    54 0000189F 0F859B070000        <1>  jne L_error_incorrect_type
  2348 000018A5 488B7D28                        mov rdi, PARAM(1)
  2349                                          assert_real(rdi)
    53 000018A9 803F13              <1>  cmp byte [%1], %2
    54 000018AC 0F858E070000        <1>  jne L_error_incorrect_type
  2350 000018B2 F20F104601                      movsd xmm0, qword [rsi + 1]
  2351 000018B7 F20F104F01                      movsd xmm1, qword [rdi + 1]
  2352 000018BC 660F2FC1                        comisd xmm0, xmm1
  2353 000018C0 730C                            jae .L_false
  2354 000018C2 48B8-                           mov rax, sob_boolean_true
  2354 000018C4 [0300000000000000] 
  2355 000018CC EB0A                            jmp .L_exit
  2356                                  .L_false:
  2357 000018CE 48B8-                           mov rax, sob_boolean_false
  2357 000018D0 [0200000000000000] 
  2358                                  .L_exit:
  2359 000018D8 C9                              leave
  2360 000018D9 C22000                          ret AND_KILL_FRAME(2)
  2361                                          
  2362                                  L_code_ptr_raw_less_than_zz:
  2363 000018DC C8000000                	enter 0, 0
  2364 000018E0 48837D1802              	cmp COUNT, 2
  2365 000018E5 0F85B6060000            	jne L_error_arg_count_2
  2366 000018EB 4C8B4520                	mov r8, PARAM(0)
  2367                                  	assert_integer(r8)
    53 000018EF 41803811            <1>  cmp byte [%1], %2
    54 000018F3 0F8547070000        <1>  jne L_error_incorrect_type
  2368 000018F9 4C8B4D28                	mov r9, PARAM(1)
  2369                                  	assert_integer(r9)
    53 000018FD 41803911            <1>  cmp byte [%1], %2
    54 00001901 0F8539070000        <1>  jne L_error_incorrect_type
  2370 00001907 498B7801                	mov rdi, qword [r8 + 1]
  2371 0000190B 493B7901                	cmp rdi, qword [r9 + 1]
  2372 0000190F 7D0C                    	jge .L_false
  2373 00001911 48B8-                   	mov rax, sob_boolean_true
  2373 00001913 [0300000000000000] 
  2374 0000191B EB0A                    	jmp .L_exit
  2375                                  .L_false:
  2376 0000191D 48B8-                   	mov rax, sob_boolean_false
  2376 0000191F [0200000000000000] 
  2377                                  .L_exit:
  2378 00001927 C9                      	leave
  2379 00001928 C22000                  	ret AND_KILL_FRAME(2)
  2380                                  
  2381                                  L_code_ptr_raw_less_than_qq:
  2382 0000192B C8000000                        enter 0, 0
  2383 0000192F 48837D1802                      cmp COUNT, 2
  2384 00001934 0F8567060000                    jne L_error_arg_count_2
  2385 0000193A 488B7520                        mov rsi, PARAM(0)
  2386                                          assert_fraction(rsi)
    53 0000193E 803E12              <1>  cmp byte [%1], %2
    54 00001941 0F85F9060000        <1>  jne L_error_incorrect_type
  2387 00001947 488B7D28                        mov rdi, PARAM(1)
  2388                                          assert_fraction(rdi)
    53 0000194B 803F12              <1>  cmp byte [%1], %2
    54 0000194E 0F85EC060000        <1>  jne L_error_incorrect_type
  2389 00001954 488B4601                        mov rax, qword [rsi + 1] ; num1
  2390 00001958 4899                            cqo
  2391 0000195A 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  2392 0000195E 4889C1                          mov rcx, rax
  2393 00001961 488B4609                        mov rax, qword [rsi + 1 + 8] ; den1
  2394 00001965 4899                            cqo
  2395 00001967 48F76F01                        imul qword [rdi + 1]          ; num2
  2396 0000196B 4829C1                          sub rcx, rax
  2397 0000196E 7D0C                            jge .L_false
  2398 00001970 48B8-                           mov rax, sob_boolean_true
  2398 00001972 [0300000000000000] 
  2399 0000197A EB0A                            jmp .L_exit
  2400                                  .L_false:
  2401 0000197C 48B8-                           mov rax, sob_boolean_false
  2401 0000197E [0200000000000000] 
  2402                                  .L_exit:
  2403 00001986 C9                              leave
  2404 00001987 C22000                          ret AND_KILL_FRAME(2)
  2405                                  
  2406                                  L_code_ptr_raw_equal_rr:
  2407 0000198A C8000000                        enter 0, 0
  2408 0000198E 48837D1802                      cmp COUNT, 2
  2409 00001993 0F8508060000                    jne L_error_arg_count_2
  2410 00001999 488B7520                        mov rsi, PARAM(0)
  2411                                          assert_real(rsi)
    53 0000199D 803E13              <1>  cmp byte [%1], %2
    54 000019A0 0F859A060000        <1>  jne L_error_incorrect_type
  2412 000019A6 488B7D28                        mov rdi, PARAM(1)
  2413                                          assert_real(rdi)
    53 000019AA 803F13              <1>  cmp byte [%1], %2
    54 000019AD 0F858D060000        <1>  jne L_error_incorrect_type
  2414 000019B3 F20F104601                      movsd xmm0, qword [rsi + 1]
  2415 000019B8 F20F104F01                      movsd xmm1, qword [rdi + 1]
  2416 000019BD 660F2FC1                        comisd xmm0, xmm1
  2417 000019C1 750C                            jne .L_false
  2418 000019C3 48B8-                           mov rax, sob_boolean_true
  2418 000019C5 [0300000000000000] 
  2419 000019CD EB0A                            jmp .L_exit
  2420                                  .L_false:
  2421 000019CF 48B8-                           mov rax, sob_boolean_false
  2421 000019D1 [0200000000000000] 
  2422                                  .L_exit:
  2423 000019D9 C9                              leave
  2424 000019DA C22000                          ret AND_KILL_FRAME(2)
  2425                                          
  2426                                  L_code_ptr_raw_equal_zz:
  2427 000019DD C8000000                	enter 0, 0
  2428 000019E1 48837D1802              	cmp COUNT, 2
  2429 000019E6 0F85B5050000            	jne L_error_arg_count_2
  2430 000019EC 4C8B4520                	mov r8, PARAM(0)
  2431                                  	assert_integer(r8)
    53 000019F0 41803811            <1>  cmp byte [%1], %2
    54 000019F4 0F8546060000        <1>  jne L_error_incorrect_type
  2432 000019FA 4C8B4D28                	mov r9, PARAM(1)
  2433                                  	assert_integer(r9)
    53 000019FE 41803911            <1>  cmp byte [%1], %2
    54 00001A02 0F8538060000        <1>  jne L_error_incorrect_type
  2434 00001A08 498B7801                	mov rdi, qword [r8 + 1]
  2435 00001A0C 493B7901                	cmp rdi, qword [r9 + 1]
  2436 00001A10 750C                    	jne .L_false
  2437 00001A12 48B8-                   	mov rax, sob_boolean_true
  2437 00001A14 [0300000000000000] 
  2438 00001A1C EB0A                    	jmp .L_exit
  2439                                  .L_false:
  2440 00001A1E 48B8-                   	mov rax, sob_boolean_false
  2440 00001A20 [0200000000000000] 
  2441                                  .L_exit:
  2442 00001A28 C9                      	leave
  2443 00001A29 C22000                  	ret AND_KILL_FRAME(2)
  2444                                  
  2445                                  L_code_ptr_raw_equal_qq:
  2446 00001A2C C8000000                        enter 0, 0
  2447 00001A30 48837D1802                      cmp COUNT, 2
  2448 00001A35 0F8566050000                    jne L_error_arg_count_2
  2449 00001A3B 488B7520                        mov rsi, PARAM(0)
  2450                                          assert_fraction(rsi)
    53 00001A3F 803E12              <1>  cmp byte [%1], %2
    54 00001A42 0F85F8050000        <1>  jne L_error_incorrect_type
  2451 00001A48 488B7D28                        mov rdi, PARAM(1)
  2452                                          assert_fraction(rdi)
    53 00001A4C 803F12              <1>  cmp byte [%1], %2
    54 00001A4F 0F85EB050000        <1>  jne L_error_incorrect_type
  2453 00001A55 488B4601                        mov rax, qword [rsi + 1] ; num1
  2454 00001A59 4899                            cqo
  2455 00001A5B 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  2456 00001A5F 4889C1                          mov rcx, rax
  2457 00001A62 488B4709                        mov rax, qword [rdi + 1 + 8] ; den1
  2458 00001A66 4899                            cqo
  2459 00001A68 48F76F01                        imul qword [rdi + 1]          ; num2
  2460 00001A6C 4829C1                          sub rcx, rax
  2461 00001A6F 750C                            jne .L_false
  2462 00001A71 48B8-                           mov rax, sob_boolean_true
  2462 00001A73 [0300000000000000] 
  2463 00001A7B EB0A                            jmp .L_exit
  2464                                  .L_false:
  2465 00001A7D 48B8-                           mov rax, sob_boolean_false
  2465 00001A7F [0200000000000000] 
  2466                                  .L_exit:
  2467 00001A87 C9                              leave
  2468 00001A88 C22000                          ret AND_KILL_FRAME(2)
  2469                                  
  2470                                  L_code_ptr_quotient:
  2471 00001A8B C8000000                        enter 0, 0
  2472 00001A8F 48837D1802                      cmp COUNT, 2
  2473 00001A94 0F8507050000                    jne L_error_arg_count_2
  2474 00001A9A 488B7520                        mov rsi, PARAM(0)
  2475                                          assert_integer(rsi)
    53 00001A9E 803E11              <1>  cmp byte [%1], %2
    54 00001AA1 0F8599050000        <1>  jne L_error_incorrect_type
  2476 00001AA7 488B7D28                        mov rdi, PARAM(1)
  2477                                          assert_integer(rdi)
    53 00001AAB 803F11              <1>  cmp byte [%1], %2
    54 00001AAE 0F858C050000        <1>  jne L_error_incorrect_type
  2478 00001AB4 488B4601                        mov rax, qword [rsi + 1]
  2479 00001AB8 488B5F01                        mov rbx, qword [rdi + 1]
  2480 00001ABC 4883FB00                        cmp rbx, 0
  2481 00001AC0 0F84AB050000                    je L_error_division_by_zero
  2482 00001AC6 4899                            cqo
  2483 00001AC8 48F7FB                          idiv rbx
  2484 00001ACB 4889C7                          mov rdi, rax
  2485 00001ACE E8E8030000                      call make_integer
  2486 00001AD3 C9                              leave
  2487 00001AD4 C22000                          ret AND_KILL_FRAME(2)
  2488                                          
  2489                                  L_code_ptr_remainder:
  2490 00001AD7 C8000000                        enter 0, 0
  2491 00001ADB 48837D1802                      cmp COUNT, 2
  2492 00001AE0 0F85BB040000                    jne L_error_arg_count_2
  2493 00001AE6 488B7520                        mov rsi, PARAM(0)
  2494                                          assert_integer(rsi)
    53 00001AEA 803E11              <1>  cmp byte [%1], %2
    54 00001AED 0F854D050000        <1>  jne L_error_incorrect_type
  2495 00001AF3 488B7D28                        mov rdi, PARAM(1)
  2496                                          assert_integer(rdi)
    53 00001AF7 803F11              <1>  cmp byte [%1], %2
    54 00001AFA 0F8540050000        <1>  jne L_error_incorrect_type
  2497 00001B00 488B4601                        mov rax, qword [rsi + 1]
  2498 00001B04 488B5F01                        mov rbx, qword [rdi + 1]
  2499 00001B08 4883FB00                        cmp rbx, 0
  2500 00001B0C 0F845F050000                    je L_error_division_by_zero
  2501 00001B12 4899                            cqo
  2502 00001B14 48F7FB                          idiv rbx
  2503 00001B17 4889D7                          mov rdi, rdx
  2504 00001B1A E89C030000                      call make_integer
  2505 00001B1F C9                              leave
  2506 00001B20 C22000                          ret AND_KILL_FRAME(2)
  2507                                  
  2508                                  L_code_ptr_set_car:
  2509 00001B23 C8000000                        enter 0, 0
  2510 00001B27 48837D1802                      cmp COUNT, 2
  2511 00001B2C 0F856F040000                    jne L_error_arg_count_2
  2512 00001B32 488B4520                        mov rax, PARAM(0)
  2513                                          assert_pair(rax)
    53 00001B36 803821              <1>  cmp byte [%1], %2
    54 00001B39 0F8501050000        <1>  jne L_error_incorrect_type
  2514 00001B3F 488B5D28                        mov rbx, PARAM(1)
  2515 00001B43 48895801                        mov SOB_PAIR_CAR(rax), rbx
  2516 00001B47 48B8-                           mov rax, sob_void
  2516 00001B49 [0000000000000000] 
  2517 00001B51 C9                              leave
  2518 00001B52 C22000                          ret AND_KILL_FRAME(2)
  2519                                  
  2520                                  L_code_ptr_set_cdr:
  2521 00001B55 C8000000                        enter 0, 0
  2522 00001B59 48837D1802                      cmp COUNT, 2
  2523 00001B5E 0F853D040000                    jne L_error_arg_count_2
  2524 00001B64 488B4520                        mov rax, PARAM(0)
  2525                                          assert_pair(rax)
    53 00001B68 803821              <1>  cmp byte [%1], %2
    54 00001B6B 0F85CF040000        <1>  jne L_error_incorrect_type
  2526 00001B71 488B5D28                        mov rbx, PARAM(1)
  2527 00001B75 48895809                        mov SOB_PAIR_CDR(rax), rbx
  2528 00001B79 48B8-                           mov rax, sob_void
  2528 00001B7B [0000000000000000] 
  2529 00001B83 C9                              leave
  2530 00001B84 C22000                          ret AND_KILL_FRAME(2)
  2531                                  
  2532                                  L_code_ptr_string_ref:
  2533 00001B87 C8000000                        enter 0, 0
  2534 00001B8B 48837D1802                      cmp COUNT, 2
  2535 00001B90 0F850B040000                    jne L_error_arg_count_2
  2536 00001B96 488B7D20                        mov rdi, PARAM(0)
  2537                                          assert_string(rdi)
    53 00001B9A 803F03              <1>  cmp byte [%1], %2
    54 00001B9D 0F859D040000        <1>  jne L_error_incorrect_type
  2538 00001BA3 488B7528                        mov rsi, PARAM(1)
  2539                                          assert_integer(rsi)
    53 00001BA7 803E11              <1>  cmp byte [%1], %2
    54 00001BAA 0F8590040000        <1>  jne L_error_incorrect_type
  2540 00001BB0 488B5701                        mov rdx, qword [rdi + 1]
  2541 00001BB4 488B4E01                        mov rcx, qword [rsi + 1]
  2542 00001BB8 4839D1                          cmp rcx, rdx
  2543 00001BBB 0F8D14030000                    jge L_error_integer_range
  2544 00001BC1 4883F900                        cmp rcx, 0
  2545 00001BC5 0F8C0A030000                    jl L_error_integer_range
  2546 00001BCB 8A5C3909                        mov bl, byte [rdi + 1 + 8 + 1 * rcx]
  2547 00001BCF BF02000000                      mov rdi, 2
  2548 00001BD4 E865E7FFFF                      call malloc
  2549 00001BD9 C60002                          mov byte [rax], T_char
  2550 00001BDC 885801                          mov byte [rax + 1], bl
  2551 00001BDF C9                              leave
  2552 00001BE0 C22000                          ret AND_KILL_FRAME(2)
  2553                                  
  2554                                  L_code_ptr_vector_ref:
  2555 00001BE3 C8000000                        enter 0, 0
  2556 00001BE7 48837D1802                      cmp COUNT, 2
  2557 00001BEC 0F85AF030000                    jne L_error_arg_count_2
  2558 00001BF2 488B7D20                        mov rdi, PARAM(0)
  2559                                          assert_vector(rdi)
    53 00001BF6 803F22              <1>  cmp byte [%1], %2
    54 00001BF9 0F8541040000        <1>  jne L_error_incorrect_type
  2560 00001BFF 488B7528                        mov rsi, PARAM(1)
  2561                                          assert_integer(rsi)
    53 00001C03 803E11              <1>  cmp byte [%1], %2
    54 00001C06 0F8534040000        <1>  jne L_error_incorrect_type
  2562 00001C0C 488B5701                        mov rdx, qword [rdi + 1]
  2563 00001C10 488B4E01                        mov rcx, qword [rsi + 1]
  2564 00001C14 4839D1                          cmp rcx, rdx
  2565 00001C17 0F8DB8020000                    jge L_error_integer_range
  2566 00001C1D 4883F900                        cmp rcx, 0
  2567 00001C21 0F8CAE020000                    jl L_error_integer_range
  2568 00001C27 488B44CF09                      mov rax, [rdi + 1 + 8 + 8 * rcx]
  2569 00001C2C C9                              leave
  2570 00001C2D C22000                          ret AND_KILL_FRAME(2)
  2571                                  
  2572                                  L_code_ptr_vector_set:
  2573 00001C30 C8000000                        enter 0, 0
  2574 00001C34 48837D1803                      cmp COUNT, 3
  2575 00001C39 0F85CC030000                    jne L_error_arg_count_3
  2576 00001C3F 488B7D20                        mov rdi, PARAM(0)
  2577                                          assert_vector(rdi)
    53 00001C43 803F22              <1>  cmp byte [%1], %2
    54 00001C46 0F85F4030000        <1>  jne L_error_incorrect_type
  2578 00001C4C 488B7528                        mov rsi, PARAM(1)
  2579                                          assert_integer(rsi)
    53 00001C50 803E11              <1>  cmp byte [%1], %2
    54 00001C53 0F85E7030000        <1>  jne L_error_incorrect_type
  2580 00001C59 488B5701                        mov rdx, qword [rdi + 1]
  2581 00001C5D 488B4E01                        mov rcx, qword [rsi + 1]
  2582 00001C61 4839D1                          cmp rcx, rdx
  2583 00001C64 0F8D6B020000                    jge L_error_integer_range
  2584 00001C6A 4883F900                        cmp rcx, 0
  2585 00001C6E 0F8C61020000                    jl L_error_integer_range
  2586 00001C74 488B4530                        mov rax, PARAM(2)
  2587 00001C78 488944CF09                      mov qword [rdi + 1 + 8 + 8 * rcx], rax
  2588 00001C7D 48B8-                           mov rax, sob_void
  2588 00001C7F [0000000000000000] 
  2589 00001C87 C9                              leave
  2590 00001C88 C22800                          ret AND_KILL_FRAME(3)
  2591                                  
  2592                                  L_code_ptr_string_set:
  2593 00001C8B C8000000                        enter 0, 0
  2594 00001C8F 48837D1803                      cmp COUNT, 3
  2595 00001C94 0F8571030000                    jne L_error_arg_count_3
  2596 00001C9A 488B7D20                        mov rdi, PARAM(0)
  2597                                          assert_string(rdi)
    53 00001C9E 803F03              <1>  cmp byte [%1], %2
    54 00001CA1 0F8599030000        <1>  jne L_error_incorrect_type
  2598 00001CA7 488B7528                        mov rsi, PARAM(1)
  2599                                          assert_integer(rsi)
    53 00001CAB 803E11              <1>  cmp byte [%1], %2
    54 00001CAE 0F858C030000        <1>  jne L_error_incorrect_type
  2600 00001CB4 488B5701                        mov rdx, qword [rdi + 1]
  2601 00001CB8 488B4E01                        mov rcx, qword [rsi + 1]
  2602 00001CBC 4839D1                          cmp rcx, rdx
  2603 00001CBF 0F8D10020000                    jge L_error_integer_range
  2604 00001CC5 4883F900                        cmp rcx, 0
  2605 00001CC9 0F8C06020000                    jl L_error_integer_range
  2606 00001CCF 488B4530                        mov rax, PARAM(2)
  2607                                          assert_char(rax)
    53 00001CD3 803802              <1>  cmp byte [%1], %2
    54 00001CD6 0F8564030000        <1>  jne L_error_incorrect_type
  2608 00001CDC 8A4001                          mov al, byte [rax + 1]
  2609 00001CDF 88443909                        mov byte [rdi + 1 + 8 + 1 * rcx], al
  2610 00001CE3 48B8-                           mov rax, sob_void
  2610 00001CE5 [0000000000000000] 
  2611 00001CED C9                              leave
  2612 00001CEE C22800                          ret AND_KILL_FRAME(3)
  2613                                  
  2614                                  L_code_ptr_make_vector:
  2615 00001CF1 C8000000                        enter 0, 0
  2616 00001CF5 48837D1802                      cmp COUNT, 2
  2617 00001CFA 0F85A1020000                    jne L_error_arg_count_2
  2618 00001D00 488B4D20                        mov rcx, PARAM(0)
  2619                                          assert_integer(rcx)
    53 00001D04 803911              <1>  cmp byte [%1], %2
    54 00001D07 0F8533030000        <1>  jne L_error_incorrect_type
  2620 00001D0D 488B4901                        mov rcx, qword [rcx + 1]
  2621 00001D11 4883F900                        cmp rcx, 0
  2622 00001D15 0F8CBA010000                    jl L_error_integer_range
  2623 00001D1B 488B5528                        mov rdx, PARAM(1)
  2624 00001D1F 488D3CCD09000000                lea rdi, [1 + 8 + 8 * rcx]
  2625 00001D27 E812E6FFFF                      call malloc
  2626 00001D2C C60022                          mov byte [rax], T_vector
  2627 00001D2F 48894801                        mov qword [rax + 1], rcx
  2628 00001D33 41B800000000                    mov r8, 0
  2629                                  .L0:
  2630 00001D39 4939C8                          cmp r8, rcx
  2631 00001D3C 740A                            je .L1
  2632 00001D3E 4A8954C009                      mov qword [rax + 1 + 8 + 8 * r8], rdx
  2633 00001D43 49FFC0                          inc r8
  2634 00001D46 EBF1                            jmp .L0
  2635                                  .L1:
  2636 00001D48 C9                              leave
  2637 00001D49 C22000                          ret AND_KILL_FRAME(2)
  2638                                          
  2639                                  L_code_ptr_make_string:
  2640 00001D4C C8000000                        enter 0, 0
  2641 00001D50 48837D1802                      cmp COUNT, 2
  2642 00001D55 0F8546020000                    jne L_error_arg_count_2
  2643 00001D5B 488B4D20                        mov rcx, PARAM(0)
  2644                                          assert_integer(rcx)
    53 00001D5F 803911              <1>  cmp byte [%1], %2
    54 00001D62 0F85D8020000        <1>  jne L_error_incorrect_type
  2645 00001D68 488B4901                        mov rcx, qword [rcx + 1]
  2646 00001D6C 4883F900                        cmp rcx, 0
  2647 00001D70 0F8C5F010000                    jl L_error_integer_range
  2648 00001D76 488B5528                        mov rdx, PARAM(1)
  2649                                          assert_char(rdx)
    53 00001D7A 803A02              <1>  cmp byte [%1], %2
    54 00001D7D 0F85BD020000        <1>  jne L_error_incorrect_type
  2650 00001D83 8A5201                          mov dl, byte [rdx + 1]
  2651 00001D86 488D7909                        lea rdi, [1 + 8 + 1 * rcx]
  2652 00001D8A E8AFE5FFFF                      call malloc
  2653 00001D8F C60003                          mov byte [rax], T_string
  2654 00001D92 48894801                        mov qword [rax + 1], rcx
  2655 00001D96 41B800000000                    mov r8, 0
  2656                                  .L0:
  2657 00001D9C 4939C8                          cmp r8, rcx
  2658 00001D9F 740A                            je .L1
  2659 00001DA1 4188540009                      mov byte [rax + 1 + 8 + 1 * r8], dl
  2660 00001DA6 49FFC0                          inc r8
  2661 00001DA9 EBF1                            jmp .L0
  2662                                  .L1:
  2663 00001DAB C9                              leave
  2664 00001DAC C22000                          ret AND_KILL_FRAME(2)
  2665                                  
  2666                                  L_code_ptr_numerator:
  2667 00001DAF C8000000                        enter 0, 0
  2668 00001DB3 48837D1801                      cmp COUNT, 1
  2669 00001DB8 0F85AE010000                    jne L_error_arg_count_1
  2670 00001DBE 488B4520                        mov rax, PARAM(0)
  2671                                          assert_fraction(rax)
    53 00001DC2 803812              <1>  cmp byte [%1], %2
    54 00001DC5 0F8575020000        <1>  jne L_error_incorrect_type
  2672 00001DCB 488B7801                        mov rdi, qword [rax + 1]
  2673 00001DCF E8E7000000                      call make_integer
  2674 00001DD4 C9                              leave
  2675 00001DD5 C21800                          ret AND_KILL_FRAME(1)
  2676                                          
  2677                                  L_code_ptr_denominator:
  2678 00001DD8 C8000000                        enter 0, 0
  2679 00001DDC 48837D1801                      cmp COUNT, 1
  2680 00001DE1 0F8585010000                    jne L_error_arg_count_1
  2681 00001DE7 488B4520                        mov rax, PARAM(0)
  2682                                          assert_fraction(rax)
    53 00001DEB 803812              <1>  cmp byte [%1], %2
    54 00001DEE 0F854C020000        <1>  jne L_error_incorrect_type
  2683 00001DF4 488B7809                        mov rdi, qword [rax + 1 + 8]
  2684 00001DF8 E8BE000000                      call make_integer
  2685 00001DFD C9                              leave
  2686 00001DFE C21800                          ret AND_KILL_FRAME(1)
  2687                                  
  2688                                  L_code_ptr_is_eq:
  2689 00001E01 C8000000                	enter 0, 0
  2690 00001E05 48837D1802              	cmp COUNT, 2
  2691 00001E0A 0F8591010000            	jne L_error_arg_count_2
  2692 00001E10 488B7D20                	mov rdi, PARAM(0)
  2693 00001E14 488B7528                	mov rsi, PARAM(1)
  2694 00001E18 4839F7                  	cmp rdi, rsi
  2695 00001E1B 746C                    	je .L_eq_true
  2696 00001E1D 8A17                    	mov dl, byte [rdi]
  2697 00001E1F 3A16                    	cmp dl, byte [rsi]
  2698 00001E21 7572                    	jne .L_eq_false
  2699 00001E23 80FA02                  	cmp dl, T_char
  2700 00001E26 7459                    	je .L_char
  2701 00001E28 80FA41                  	cmp dl, T_interned_symbol
  2702 00001E2B 7440                    	je .L_interned_symbol
  2703 00001E2D 80FA42                          cmp dl, T_uninterned_symbol
  2704 00001E30 7443                            je .L_uninterned_symbol
  2705 00001E32 80FA13                  	cmp dl, T_real
  2706 00001E35 742E                    	je .L_real
  2707 00001E37 80FA12                  	cmp dl, T_fraction
  2708 00001E3A 7413                    	je .L_fraction
  2709 00001E3C 80FA11                          cmp dl, T_integer
  2710 00001E3F 7402                            je .L_integer
  2711 00001E41 EB52                    	jmp .L_eq_false
  2712                                  .L_integer:
  2713 00001E43 488B4601                        mov rax, qword [rsi + 1]
  2714 00001E47 483B4701                        cmp rax, qword [rdi + 1]
  2715 00001E4B 7548                            jne .L_eq_false
  2716 00001E4D EB3A                            jmp .L_eq_true
  2717                                  .L_fraction:
  2718 00001E4F 488B4601                	mov rax, qword [rsi + 1]
  2719 00001E53 483B4701                	cmp rax, qword [rdi + 1]
  2720 00001E57 753C                    	jne .L_eq_false
  2721 00001E59 488B4609                	mov rax, qword [rsi + 1 + 8]
  2722 00001E5D 483B4709                	cmp rax, qword [rdi + 1 + 8]
  2723 00001E61 7532                    	jne .L_eq_false
  2724 00001E63 EB24                    	jmp .L_eq_true
  2725                                  .L_real:
  2726 00001E65 488B4601                	mov rax, qword [rsi + 1]
  2727 00001E69 483B4701                	cmp rax, qword [rdi + 1]
  2728                                  .L_interned_symbol:
  2729                                  	; never reached, because interned_symbols are static!
  2730                                  	; but I'm keeping it in case, I'll ever change
  2731                                  	; the implementation
  2732 00001E6D 488B4601                	mov rax, qword [rsi + 1]
  2733 00001E71 483B4701                	cmp rax, qword [rdi + 1]
  2734                                  .L_uninterned_symbol:
  2735 00001E75 4C8B4701                        mov r8, qword [rdi + 1]
  2736 00001E79 4C3B4601                        cmp r8, qword [rsi + 1]
  2737 00001E7D 7516                            jne .L_eq_false
  2738 00001E7F EB08                            jmp .L_eq_true
  2739                                  .L_char:
  2740 00001E81 8A5E01                  	mov bl, byte [rsi + 1]
  2741 00001E84 3A5F01                  	cmp bl, byte [rdi + 1]
  2742 00001E87 750C                    	jne .L_eq_false
  2743                                  .L_eq_true:
  2744 00001E89 48B8-                   	mov rax, sob_boolean_true
  2744 00001E8B [0300000000000000] 
  2745 00001E93 EB0A                    	jmp .L_eq_exit
  2746                                  .L_eq_false:
  2747 00001E95 48B8-                   	mov rax, sob_boolean_false
  2747 00001E97 [0200000000000000] 
  2748                                  .L_eq_exit:
  2749 00001E9F C9                      	leave
  2750 00001EA0 C22000                  	ret AND_KILL_FRAME(2)
  2751                                  
  2752                                  make_real:
  2753 00001EA3 C8000000                        enter 0, 0
  2754 00001EA7 BF09000000                      mov rdi, (1 + 8)
  2755 00001EAC E88DE4FFFF                      call malloc
  2756 00001EB1 C60013                          mov byte [rax], T_real
  2757 00001EB4 F20F114001                      movsd qword [rax + 1], xmm0
  2758 00001EB9 C9                              leave 
  2759 00001EBA C3                              ret
  2760                                          
  2761                                  make_integer:
  2762 00001EBB C8000000                        enter 0, 0
  2763 00001EBF 4889FE                          mov rsi, rdi
  2764 00001EC2 BF09000000                      mov rdi, (1 + 8)
  2765 00001EC7 E872E4FFFF                      call malloc
  2766 00001ECC C60011                          mov byte [rax], T_integer
  2767 00001ECF 48897001                        mov qword [rax + 1], rsi
  2768 00001ED3 C9                              leave
  2769 00001ED4 C3                              ret
  2770                                          
  2771                                  L_error_integer_range:
  2772 00001ED5 488B3C25[00000000]              mov rdi, qword [stderr]
  2773 00001EDD 48BE-                           mov rsi, fmt_integer_range
  2773 00001EDF [EC09000000000000] 
  2774 00001EE7 B800000000                      mov rax, 0
  2775                                          ENTER
    44 00001EEC C8000000            <1>  enter 0, 0
    45 00001EF0 4883E4F0            <1>  and rsp, ~15
  2776 00001EF4 E8(00000000)                    call fprintf
  2777                                          LEAVE
    49 00001EF9 C9                  <1>  leave
  2778 00001EFA 48C7C0FBFFFFFF                  mov rax, -5
  2779 00001F01 E8(00000000)                    call exit
  2780                                  
  2781                                  L_error_arg_negative:
  2782 00001F06 488B3C25[00000000]              mov rdi, qword [stderr]
  2783 00001F0E 48BE-                           mov rsi, fmt_arg_negative
  2783 00001F10 [C408000000000000] 
  2784 00001F18 B800000000                      mov rax, 0
  2785                                          ENTER
    44 00001F1D C8000000            <1>  enter 0, 0
    45 00001F21 4883E4F0            <1>  and rsp, ~15
  2786 00001F25 E8(00000000)                    call fprintf
  2787                                          LEAVE
    49 00001F2A C9                  <1>  leave
  2788 00001F2B 48C7C0FDFFFFFF                  mov rax, -3
  2789 00001F32 E8(00000000)                    call exit
  2790                                  
  2791                                  L_error_arg_count_0:
  2792 00001F37 488B3C25[00000000]              mov rdi, qword [stderr]
  2793 00001F3F 48BE-                           mov rsi, fmt_arg_count_0
  2793 00001F41 [EA08000000000000] 
  2794 00001F49 488B5518                        mov rdx, COUNT
  2795 00001F4D B800000000                      mov rax, 0
  2796                                          ENTER
    44 00001F52 C8000000            <1>  enter 0, 0
    45 00001F56 4883E4F0            <1>  and rsp, ~15
  2797 00001F5A E8(00000000)                    call fprintf
  2798                                          LEAVE
    49 00001F5F C9                  <1>  leave
  2799 00001F60 48C7C0FDFFFFFF                  mov rax, -3
  2800 00001F67 E8(00000000)                    call exit
  2801                                  
  2802                                  L_error_arg_count_1:
  2803 00001F6C 488B3C25[00000000]              mov rdi, qword [stderr]
  2804 00001F74 48BE-                           mov rsi, fmt_arg_count_1
  2804 00001F76 [1209000000000000] 
  2805 00001F7E 488B5518                        mov rdx, COUNT
  2806 00001F82 B800000000                      mov rax, 0
  2807                                          ENTER
    44 00001F87 C8000000            <1>  enter 0, 0
    45 00001F8B 4883E4F0            <1>  and rsp, ~15
  2808 00001F8F E8(00000000)                    call fprintf
  2809                                          LEAVE
    49 00001F94 C9                  <1>  leave
  2810 00001F95 48C7C0FDFFFFFF                  mov rax, -3
  2811 00001F9C E8(00000000)                    call exit
  2812                                  
  2813                                  L_error_arg_count_2:
  2814 00001FA1 488B3C25[00000000]              mov rdi, qword [stderr]
  2815 00001FA9 48BE-                           mov rsi, fmt_arg_count_2
  2815 00001FAB [7809000000000000] 
  2816 00001FB3 488B5518                        mov rdx, COUNT
  2817 00001FB7 B800000000                      mov rax, 0
  2818                                          ENTER
    44 00001FBC C8000000            <1>  enter 0, 0
    45 00001FC0 4883E4F0            <1>  and rsp, ~15
  2819 00001FC4 E8(00000000)                    call fprintf
  2820                                          LEAVE
    49 00001FC9 C9                  <1>  leave
  2821 00001FCA 48C7C0FDFFFFFF                  mov rax, -3
  2822 00001FD1 E8(00000000)                    call exit
  2823                                  
  2824                                  L_error_arg_count_12:
  2825 00001FD6 488B3C25[00000000]              mov rdi, qword [stderr]
  2826 00001FDE 48BE-                           mov rsi, fmt_arg_count_12
  2826 00001FE0 [3809000000000000] 
  2827 00001FE8 488B5518                        mov rdx, COUNT
  2828 00001FEC B800000000                      mov rax, 0
  2829                                          ENTER
    44 00001FF1 C8000000            <1>  enter 0, 0
    45 00001FF5 4883E4F0            <1>  and rsp, ~15
  2830 00001FF9 E8(00000000)                    call fprintf
  2831                                          LEAVE
    49 00001FFE C9                  <1>  leave
  2832 00001FFF 48C7C0FDFFFFFF                  mov rax, -3
  2833 00002006 E8(00000000)                    call exit
  2834                                  
  2835                                  L_error_arg_count_3:
  2836 0000200B 488B3C25[00000000]              mov rdi, qword [stderr]
  2837 00002013 48BE-                           mov rsi, fmt_arg_count_3
  2837 00002015 [9F09000000000000] 
  2838 0000201D 488B5518                        mov rdx, COUNT
  2839 00002021 B800000000                      mov rax, 0
  2840                                          ENTER
    44 00002026 C8000000            <1>  enter 0, 0
    45 0000202A 4883E4F0            <1>  and rsp, ~15
  2841 0000202E E8(00000000)                    call fprintf
  2842                                          LEAVE
    49 00002033 C9                  <1>  leave
  2843 00002034 48C7C0FDFFFFFF                  mov rax, -3
  2844 0000203B E8(00000000)                    call exit
  2845                                          
  2846                                  L_error_incorrect_type:
  2847 00002040 488B3C25[00000000]              mov rdi, qword [stderr]
  2848 00002048 48BE-                           mov rsi, fmt_type
  2848 0000204A [C809000000000000] 
  2849 00002052 B800000000                      mov rax, 0
  2850                                          ENTER
    44 00002057 C8000000            <1>  enter 0, 0
    45 0000205B 4883E4F0            <1>  and rsp, ~15
  2851 0000205F E8(00000000)                    call fprintf
  2852                                          LEAVE
    49 00002064 C9                  <1>  leave
  2853 00002065 48C7C0FCFFFFFF                  mov rax, -4
  2854 0000206C E8(00000000)                    call exit
  2855                                  
  2856                                  L_error_division_by_zero:
  2857 00002071 488B3C25[00000000]              mov rdi, qword [stderr]
  2858 00002079 48BE-                           mov rsi, fmt_division_by_zero
  2858 0000207B [090A000000000000] 
  2859 00002083 B800000000                      mov rax, 0
  2860                                          ENTER
    44 00002088 C8000000            <1>  enter 0, 0
    45 0000208C 4883E4F0            <1>  and rsp, ~15
  2861 00002090 E8(00000000)                    call fprintf
  2862                                          LEAVE
    49 00002095 C9                  <1>  leave
  2863 00002096 48C7C0F8FFFFFF                  mov rax, -8
  2864 0000209D E8(00000000)                    call exit
  2865                                  
  2866                                  section .data
  2867                                  gensym_count:
  2868 000008B9 0000000000000000                dq 0
  2869                                  fmt_char:
  2870 000008C1 256300                          db `%c\0`
  2871                                  fmt_arg_negative:
  2872 000008C4 212121205468652061-             db `!!! The argument cannot be negative.\n\0`
  2872 000008CD 7267756D656E742063-
  2872 000008D6 616E6E6F7420626520-
  2872 000008DF 6E656761746976652E-
  2872 000008E8 0A00               
  2873                                  fmt_arg_count_0:
  2874 000008EA 212121204578706563-             db `!!! Expecting zero arguments. Found %d\n\0`
  2874 000008F3 74696E67207A65726F-
  2874 000008FC 20617267756D656E74-
  2874 00000905 732E20466F756E6420-
  2874 0000090E 25640A00           
  2875                                  fmt_arg_count_1:
  2876 00000912 212121204578706563-             db `!!! Expecting one argument. Found %d\n\0`
  2876 0000091B 74696E67206F6E6520-
  2876 00000924 617267756D656E742E-
  2876 0000092D 20466F756E64202564-
  2876 00000936 0A00               
  2877                                  fmt_arg_count_12:
  2878 00000938 212121204578706563-             db `!!! Expecting one required and one optional argument. Found %d\n\0`
  2878 00000941 74696E67206F6E6520-
  2878 0000094A 726571756972656420-
  2878 00000953 616E64206F6E65206F-
  2878 0000095C 7074696F6E616C2061-
  2878 00000965 7267756D656E742E20-
  2878 0000096E 466F756E642025640A-
  2878 00000977 00                 
  2879                                  fmt_arg_count_2:
  2880 00000978 212121204578706563-             db `!!! Expecting two arguments. Found %d\n\0`
  2880 00000981 74696E672074776F20-
  2880 0000098A 617267756D656E7473-
  2880 00000993 2E20466F756E642025-
  2880 0000099C 640A00             
  2881                                  fmt_arg_count_3:
  2882 0000099F 212121204578706563-             db `!!! Expecting three arguments. Found %d\n\0`
  2882 000009A8 74696E672074687265-
  2882 000009B1 6520617267756D656E-
  2882 000009BA 74732E20466F756E64-
  2882 000009C3 2025640A00         
  2883                                  fmt_type:
  2884 000009C8 2121212046756E6374-             db `!!! Function passed incorrect type\n\0`
  2884 000009D1 696F6E207061737365-
  2884 000009DA 6420696E636F727265-
  2884 000009E3 637420747970650A00 
  2885                                  fmt_integer_range:
  2886 000009EC 21212120496E636F72-             db `!!! Incorrect integer range\n\0`
  2886 000009F5 7265637420696E7465-
  2886 000009FE 6765722072616E6765-
  2886 00000A07 0A00               
  2887                                  fmt_division_by_zero:
  2888 00000A09 212121204469766973-             db `!!! Division by zero\n\0`
  2888 00000A12 696F6E206279207A65-
  2888 00000A1B 726F0A00           
  2889                                  fmt_scheme_error_part_1:
  2890 00000A1F 0A2121212054686520-             db `\n!!! The procedure \0`
  2890 00000A28 70726F636564757265-
  2890 00000A31 2000               
  2891                                  fmt_scheme_error_part_2:
  2892 00000A33 2061736B656420746F-             db ` asked to terminate the program\n`
  2892 00000A3C 207465726D696E6174-
  2892 00000A45 65207468652070726F-
  2892 00000A4E 6772616D0A         
  2893 00000A53 202020207769746820-             db `    with the following message:\n\n\0`
  2893 00000A5C 74686520666F6C6C6F-
  2893 00000A65 77696E67206D657373-
  2893 00000A6E 6167653A0A0A00     
  2894                                  fmt_scheme_error_part_3:
  2895 00000A75 0A0A476F6F64627965-             db `\n\nGoodbye!\n\n\0`
  2895 00000A7E 210A0A00           
