     1                                  ;;; prologue-1.asm
     2                                  ;;; The first part of the standard prologue for compiled programs
     3                                  ;;;
     4                                  ;;; Programmer: Mayer Goldberg, 2023
     5                                  
     6                                  %define T_void 				0
     7                                  %define T_nil 				1
     8                                  %define T_char 				2
     9                                  %define T_string 			3
    10                                  %define T_closure 			4
    11                                  %define T_undefined			5
    12                                  %define T_boolean 			8
    13                                  %define T_boolean_false 		(T_boolean | 1)
    14                                  %define T_boolean_true 			(T_boolean | 2)
    15                                  %define T_number 			16
    16                                  %define T_integer			(T_number | 1)
    17                                  %define T_fraction 			(T_number | 2)
    18                                  %define T_real 				(T_number | 3)
    19                                  %define T_collection 			32
    20                                  %define T_pair 				(T_collection | 1)
    21                                  %define T_vector 			(T_collection | 2)
    22                                  %define T_symbol 			64
    23                                  %define T_interned_symbol		(T_symbol | 1)
    24                                  %define T_uninterned_symbol		(T_symbol | 2)
    25                                  
    26                                  %define SOB_CHAR_VALUE(reg) 		byte [reg + 1]
    27                                  %define SOB_PAIR_CAR(reg)		qword [reg + 1]
    28                                  %define SOB_PAIR_CDR(reg)		qword [reg + 1 + 8]
    29                                  %define SOB_STRING_LENGTH(reg)		qword [reg + 1]
    30                                  %define SOB_VECTOR_LENGTH(reg)		qword [reg + 1]
    31                                  %define SOB_CLOSURE_ENV(reg)		qword [reg + 1]
    32                                  %define SOB_CLOSURE_CODE(reg)		qword [reg + 1 + 8]
    33                                  
    34                                  %define OLD_RBP 			qword [rbp]
    35                                  %define RET_ADDR 			qword [rbp + 8 * 1]
    36                                  %define ENV 				qword [rbp + 8 * 2]
    37                                  %define COUNT 				qword [rbp + 8 * 3]
    38                                  %define PARAM(n) 			qword [rbp + 8 * (4 + n)]
    39                                  %define AND_KILL_FRAME(n)		(8 * (2 + n))
    40                                  
    41                                  %define MAGIC				496351
    42                                  
    43                                  %macro ENTER 0
    44                                  	enter 0, 0
    45                                  	and rsp, ~15
    46                                  %endmacro
    47                                  
    48                                  %macro LEAVE 0
    49                                  	leave
    50                                  %endmacro
    51                                  
    52                                  %macro assert_type 2
    53                                          cmp byte [%1], %2
    54                                          jne L_error_incorrect_type
    55                                  %endmacro
    56                                  
    57                                  %define assert_void(reg)		assert_type reg, T_void
    58                                  %define assert_nil(reg)			assert_type reg, T_nil
    59                                  %define assert_char(reg)		assert_type reg, T_char
    60                                  %define assert_string(reg)		assert_type reg, T_string
    61                                  %define assert_symbol(reg)		assert_type reg, T_symbol
    62                                  %define assert_interned_symbol(reg)	assert_type reg, T_interned_symbol
    63                                  %define assert_uninterned_symbol(reg)	assert_type reg, T_uninterned_symbol
    64                                  %define assert_closure(reg)		assert_type reg, T_closure
    65                                  %define assert_boolean(reg)		assert_type reg, T_boolean
    66                                  %define assert_integer(reg)		assert_type reg, T_integer
    67                                  %define assert_fraction(reg)		assert_type reg, T_fraction
    68                                  %define assert_real(reg)		assert_type reg, T_real
    69                                  %define assert_pair(reg)		assert_type reg, T_pair
    70                                  %define assert_vector(reg)		assert_type reg, T_vector
    71                                  
    72                                  %define sob_void			(L_constants + 0)
    73                                  %define sob_nil				(L_constants + 1)
    74                                  %define sob_boolean_false		(L_constants + 2)
    75                                  %define sob_boolean_true		(L_constants + 3)
    76                                  %define sob_char_nul			(L_constants + 4)
    77                                  
    78                                  %define bytes(n)			(n)
    79                                  %define kbytes(n) 			(bytes(n) << 10)
    80                                  %define mbytes(n) 			(kbytes(n) << 10)
    81                                  %define gbytes(n) 			(mbytes(n) << 10)
    82                                  
    83                                  section .data
    84                                  L_constants:
    85                                  	; L_constants + 0:
    86 00000000 00                      	db T_void
    87                                  	; L_constants + 1:
    88 00000001 01                      	db T_nil
    89                                  	; L_constants + 2:
    90 00000002 09                      	db T_boolean_false
    91                                  	; L_constants + 3:
    92 00000003 0A                      	db T_boolean_true
    93                                  	; L_constants + 4:
    94 00000004 0200                    	db T_char, 0x00	; #\nul
    95                                  	; L_constants + 6:
    96 00000006 03                      	db T_string	; "null?"
    97 00000007 0500000000000000        	dq 5
    98 0000000F 6E756C6C3F              	db 0x6E, 0x75, 0x6C, 0x6C, 0x3F
    99                                  	; L_constants + 20:
   100 00000014 03                      	db T_string	; "pair?"
   101 00000015 0500000000000000        	dq 5
   102 0000001D 706169723F              	db 0x70, 0x61, 0x69, 0x72, 0x3F
   103                                  	; L_constants + 34:
   104 00000022 03                      	db T_string	; "void?"
   105 00000023 0500000000000000        	dq 5
   106 0000002B 766F69643F              	db 0x76, 0x6F, 0x69, 0x64, 0x3F
   107                                  	; L_constants + 48:
   108 00000030 03                      	db T_string	; "char?"
   109 00000031 0500000000000000        	dq 5
   110 00000039 636861723F              	db 0x63, 0x68, 0x61, 0x72, 0x3F
   111                                  	; L_constants + 62:
   112 0000003E 03                      	db T_string	; "string?"
   113 0000003F 0700000000000000        	dq 7
   114 00000047 737472696E673F          	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x3F
   115                                  	; L_constants + 78:
   116 0000004E 03                      	db T_string	; "interned-symbol?"
   117 0000004F 1000000000000000        	dq 16
   118 00000057 696E7465726E6564        	db 0x69, 0x6E, 0x74, 0x65, 0x72, 0x6E, 0x65, 0x64
   119 0000005F 2D73796D626F6C3F        	db 0x2D, 0x73, 0x79, 0x6D, 0x62, 0x6F, 0x6C, 0x3F
   120                                  	; L_constants + 103:
   121 00000067 03                      	db T_string	; "vector?"
   122 00000068 0700000000000000        	dq 7
   123 00000070 766563746F723F          	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x3F
   124                                  	; L_constants + 119:
   125 00000077 03                      	db T_string	; "procedure?"
   126 00000078 0A00000000000000        	dq 10
   127 00000080 70726F6365647572        	db 0x70, 0x72, 0x6F, 0x63, 0x65, 0x64, 0x75, 0x72
   128 00000088 653F                    	db 0x65, 0x3F
   129                                  	; L_constants + 138:
   130 0000008A 03                      	db T_string	; "real?"
   131 0000008B 0500000000000000        	dq 5
   132 00000093 7265616C3F              	db 0x72, 0x65, 0x61, 0x6C, 0x3F
   133                                  	; L_constants + 152:
   134 00000098 03                      	db T_string	; "fraction?"
   135 00000099 0900000000000000        	dq 9
   136 000000A1 6672616374696F6E        	db 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E
   137 000000A9 3F                      	db 0x3F
   138                                  	; L_constants + 170:
   139 000000AA 03                      	db T_string	; "boolean?"
   140 000000AB 0800000000000000        	dq 8
   141 000000B3 626F6F6C65616E3F        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x3F
   142                                  	; L_constants + 187:
   143 000000BB 03                      	db T_string	; "number?"
   144 000000BC 0700000000000000        	dq 7
   145 000000C4 6E756D6265723F          	db 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72, 0x3F
   146                                  	; L_constants + 203:
   147 000000CB 03                      	db T_string	; "collection?"
   148 000000CC 0B00000000000000        	dq 11
   149 000000D4 636F6C6C65637469        	db 0x63, 0x6F, 0x6C, 0x6C, 0x65, 0x63, 0x74, 0x69
   150 000000DC 6F6E3F                  	db 0x6F, 0x6E, 0x3F
   151                                  	; L_constants + 223:
   152 000000DF 03                      	db T_string	; "cons"
   153 000000E0 0400000000000000        	dq 4
   154 000000E8 636F6E73                	db 0x63, 0x6F, 0x6E, 0x73
   155                                  	; L_constants + 236:
   156 000000EC 03                      	db T_string	; "apply"
   157 000000ED 0500000000000000        	dq 5
   158 000000F5 6170706C79              	db 0x61, 0x70, 0x70, 0x6C, 0x79
   159                                  	; L_constants + 250:
   160 000000FA 03                      	db T_string	; "display-sexpr"
   161 000000FB 0D00000000000000        	dq 13
   162 00000103 646973706C61792D        	db 0x64, 0x69, 0x73, 0x70, 0x6C, 0x61, 0x79, 0x2D
   163 0000010B 7365787072              	db 0x73, 0x65, 0x78, 0x70, 0x72
   164                                  	; L_constants + 272:
   165 00000110 03                      	db T_string	; "write-char"
   166 00000111 0A00000000000000        	dq 10
   167 00000119 77726974652D6368        	db 0x77, 0x72, 0x69, 0x74, 0x65, 0x2D, 0x63, 0x68
   168 00000121 6172                    	db 0x61, 0x72
   169                                  	; L_constants + 291:
   170 00000123 03                      	db T_string	; "car"
   171 00000124 0300000000000000        	dq 3
   172 0000012C 636172                  	db 0x63, 0x61, 0x72
   173                                  	; L_constants + 303:
   174 0000012F 03                      	db T_string	; "cdr"
   175 00000130 0300000000000000        	dq 3
   176 00000138 636472                  	db 0x63, 0x64, 0x72
   177                                  	; L_constants + 315:
   178 0000013B 03                      	db T_string	; "string-length"
   179 0000013C 0D00000000000000        	dq 13
   180 00000144 737472696E672D6C        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x6C
   181 0000014C 656E677468              	db 0x65, 0x6E, 0x67, 0x74, 0x68
   182                                  	; L_constants + 337:
   183 00000151 03                      	db T_string	; "vector-length"
   184 00000152 0D00000000000000        	dq 13
   185 0000015A 766563746F722D6C        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x6C
   186 00000162 656E677468              	db 0x65, 0x6E, 0x67, 0x74, 0x68
   187                                  	; L_constants + 359:
   188 00000167 03                      	db T_string	; "real->integer"
   189 00000168 0D00000000000000        	dq 13
   190 00000170 7265616C2D3E696E        	db 0x72, 0x65, 0x61, 0x6C, 0x2D, 0x3E, 0x69, 0x6E
   191 00000178 7465676572              	db 0x74, 0x65, 0x67, 0x65, 0x72
   192                                  	; L_constants + 381:
   193 0000017D 03                      	db T_string	; "exit"
   194 0000017E 0400000000000000        	dq 4
   195 00000186 65786974                	db 0x65, 0x78, 0x69, 0x74
   196                                  	; L_constants + 394:
   197 0000018A 03                      	db T_string	; "integer->real"
   198 0000018B 0D00000000000000        	dq 13
   199 00000193 696E74656765722D        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x2D
   200 0000019B 3E7265616C              	db 0x3E, 0x72, 0x65, 0x61, 0x6C
   201                                  	; L_constants + 416:
   202 000001A0 03                      	db T_string	; "fraction->real"
   203 000001A1 0E00000000000000        	dq 14
   204 000001A9 6672616374696F6E        	db 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E
   205 000001B1 2D3E7265616C            	db 0x2D, 0x3E, 0x72, 0x65, 0x61, 0x6C
   206                                  	; L_constants + 439:
   207 000001B7 03                      	db T_string	; "char->integer"
   208 000001B8 0D00000000000000        	dq 13
   209 000001C0 636861722D3E696E        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x3E, 0x69, 0x6E
   210 000001C8 7465676572              	db 0x74, 0x65, 0x67, 0x65, 0x72
   211                                  	; L_constants + 461:
   212 000001CD 03                      	db T_string	; "integer->char"
   213 000001CE 0D00000000000000        	dq 13
   214 000001D6 696E74656765722D        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x2D
   215 000001DE 3E63686172              	db 0x3E, 0x63, 0x68, 0x61, 0x72
   216                                  	; L_constants + 483:
   217 000001E3 03                      	db T_string	; "trng"
   218 000001E4 0400000000000000        	dq 4
   219 000001EC 74726E67                	db 0x74, 0x72, 0x6E, 0x67
   220                                  	; L_constants + 496:
   221 000001F0 03                      	db T_string	; "zero?"
   222 000001F1 0500000000000000        	dq 5
   223 000001F9 7A65726F3F              	db 0x7A, 0x65, 0x72, 0x6F, 0x3F
   224                                  	; L_constants + 510:
   225 000001FE 03                      	db T_string	; "integer?"
   226 000001FF 0800000000000000        	dq 8
   227 00000207 696E74656765723F        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x3F
   228                                  	; L_constants + 527:
   229 0000020F 03                      	db T_string	; "__bin-apply"
   230 00000210 0B00000000000000        	dq 11
   231 00000218 5F5F62696E2D6170        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x70
   232 00000220 706C79                  	db 0x70, 0x6C, 0x79
   233                                  	; L_constants + 547:
   234 00000223 03                      	db T_string	; "__bin-add-rr"
   235 00000224 0C00000000000000        	dq 12
   236 0000022C 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   237 00000234 642D7272                	db 0x64, 0x2D, 0x72, 0x72
   238                                  	; L_constants + 568:
   239 00000238 03                      	db T_string	; "__bin-sub-rr"
   240 00000239 0C00000000000000        	dq 12
   241 00000241 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   242 00000249 622D7272                	db 0x62, 0x2D, 0x72, 0x72
   243                                  	; L_constants + 589:
   244 0000024D 03                      	db T_string	; "__bin-mul-rr"
   245 0000024E 0C00000000000000        	dq 12
   246 00000256 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   247 0000025E 6C2D7272                	db 0x6C, 0x2D, 0x72, 0x72
   248                                  	; L_constants + 610:
   249 00000262 03                      	db T_string	; "__bin-div-rr"
   250 00000263 0C00000000000000        	dq 12
   251 0000026B 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   252 00000273 762D7272                	db 0x76, 0x2D, 0x72, 0x72
   253                                  	; L_constants + 631:
   254 00000277 03                      	db T_string	; "__bin-add-qq"
   255 00000278 0C00000000000000        	dq 12
   256 00000280 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   257 00000288 642D7171                	db 0x64, 0x2D, 0x71, 0x71
   258                                  	; L_constants + 652:
   259 0000028C 03                      	db T_string	; "__bin-sub-qq"
   260 0000028D 0C00000000000000        	dq 12
   261 00000295 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   262 0000029D 622D7171                	db 0x62, 0x2D, 0x71, 0x71
   263                                  	; L_constants + 673:
   264 000002A1 03                      	db T_string	; "__bin-mul-qq"
   265 000002A2 0C00000000000000        	dq 12
   266 000002AA 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   267 000002B2 6C2D7171                	db 0x6C, 0x2D, 0x71, 0x71
   268                                  	; L_constants + 694:
   269 000002B6 03                      	db T_string	; "__bin-div-qq"
   270 000002B7 0C00000000000000        	dq 12
   271 000002BF 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   272 000002C7 762D7171                	db 0x76, 0x2D, 0x71, 0x71
   273                                  	; L_constants + 715:
   274 000002CB 03                      	db T_string	; "__bin-add-zz"
   275 000002CC 0C00000000000000        	dq 12
   276 000002D4 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   277 000002DC 642D7A7A                	db 0x64, 0x2D, 0x7A, 0x7A
   278                                  	; L_constants + 736:
   279 000002E0 03                      	db T_string	; "__bin-sub-zz"
   280 000002E1 0C00000000000000        	dq 12
   281 000002E9 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   282 000002F1 622D7A7A                	db 0x62, 0x2D, 0x7A, 0x7A
   283                                  	; L_constants + 757:
   284 000002F5 03                      	db T_string	; "__bin-mul-zz"
   285 000002F6 0C00000000000000        	dq 12
   286 000002FE 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   287 00000306 6C2D7A7A                	db 0x6C, 0x2D, 0x7A, 0x7A
   288                                  	; L_constants + 778:
   289 0000030A 03                      	db T_string	; "__bin-div-zz"
   290 0000030B 0C00000000000000        	dq 12
   291 00000313 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   292 0000031B 762D7A7A                	db 0x76, 0x2D, 0x7A, 0x7A
   293                                  	; L_constants + 799:
   294 0000031F 03                      	db T_string	; "error"
   295 00000320 0500000000000000        	dq 5
   296 00000328 6572726F72              	db 0x65, 0x72, 0x72, 0x6F, 0x72
   297                                  	; L_constants + 813:
   298 0000032D 03                      	db T_string	; "__bin-less-than-rr"
   299 0000032E 1200000000000000        	dq 18
   300 00000336 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   301 0000033E 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   302 00000346 7272                    	db 0x72, 0x72
   303                                  	; L_constants + 840:
   304 00000348 03                      	db T_string	; "__bin-less-than-qq"
   305 00000349 1200000000000000        	dq 18
   306 00000351 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   307 00000359 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   308 00000361 7171                    	db 0x71, 0x71
   309                                  	; L_constants + 867:
   310 00000363 03                      	db T_string	; "__bin-less-than-zz"
   311 00000364 1200000000000000        	dq 18
   312 0000036C 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   313 00000374 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   314 0000037C 7A7A                    	db 0x7A, 0x7A
   315                                  	; L_constants + 894:
   316 0000037E 03                      	db T_string	; "__bin-equal-rr"
   317 0000037F 0E00000000000000        	dq 14
   318 00000387 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   319 0000038F 75616C2D7272            	db 0x75, 0x61, 0x6C, 0x2D, 0x72, 0x72
   320                                  	; L_constants + 917:
   321 00000395 03                      	db T_string	; "__bin-equal-qq"
   322 00000396 0E00000000000000        	dq 14
   323 0000039E 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   324 000003A6 75616C2D7171            	db 0x75, 0x61, 0x6C, 0x2D, 0x71, 0x71
   325                                  	; L_constants + 940:
   326 000003AC 03                      	db T_string	; "__bin-equal-zz"
   327 000003AD 0E00000000000000        	dq 14
   328 000003B5 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   329 000003BD 75616C2D7A7A            	db 0x75, 0x61, 0x6C, 0x2D, 0x7A, 0x7A
   330                                  	; L_constants + 963:
   331 000003C3 03                      	db T_string	; "quotient"
   332 000003C4 0800000000000000        	dq 8
   333 000003CC 71756F7469656E74        	db 0x71, 0x75, 0x6F, 0x74, 0x69, 0x65, 0x6E, 0x74
   334                                  	; L_constants + 980:
   335 000003D4 03                      	db T_string	; "remainder"
   336 000003D5 0900000000000000        	dq 9
   337 000003DD 72656D61696E6465        	db 0x72, 0x65, 0x6D, 0x61, 0x69, 0x6E, 0x64, 0x65
   338 000003E5 72                      	db 0x72
   339                                  	; L_constants + 998:
   340 000003E6 03                      	db T_string	; "set-car!"
   341 000003E7 0800000000000000        	dq 8
   342 000003EF 7365742D63617221        	db 0x73, 0x65, 0x74, 0x2D, 0x63, 0x61, 0x72, 0x21
   343                                  	; L_constants + 1015:
   344 000003F7 03                      	db T_string	; "set-cdr!"
   345 000003F8 0800000000000000        	dq 8
   346 00000400 7365742D63647221        	db 0x73, 0x65, 0x74, 0x2D, 0x63, 0x64, 0x72, 0x21
   347                                  	; L_constants + 1032:
   348 00000408 03                      	db T_string	; "string-ref"
   349 00000409 0A00000000000000        	dq 10
   350 00000411 737472696E672D72        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x72
   351 00000419 6566                    	db 0x65, 0x66
   352                                  	; L_constants + 1051:
   353 0000041B 03                      	db T_string	; "vector-ref"
   354 0000041C 0A00000000000000        	dq 10
   355 00000424 766563746F722D72        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x72
   356 0000042C 6566                    	db 0x65, 0x66
   357                                  	; L_constants + 1070:
   358 0000042E 03                      	db T_string	; "vector-set!"
   359 0000042F 0B00000000000000        	dq 11
   360 00000437 766563746F722D73        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x73
   361 0000043F 657421                  	db 0x65, 0x74, 0x21
   362                                  	; L_constants + 1090:
   363 00000442 03                      	db T_string	; "string-set!"
   364 00000443 0B00000000000000        	dq 11
   365 0000044B 737472696E672D73        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x73
   366 00000453 657421                  	db 0x65, 0x74, 0x21
   367                                  	; L_constants + 1110:
   368 00000456 03                      	db T_string	; "make-vector"
   369 00000457 0B00000000000000        	dq 11
   370 0000045F 6D616B652D766563        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x76, 0x65, 0x63
   371 00000467 746F72                  	db 0x74, 0x6F, 0x72
   372                                  	; L_constants + 1130:
   373 0000046A 03                      	db T_string	; "make-string"
   374 0000046B 0B00000000000000        	dq 11
   375 00000473 6D616B652D737472        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x73, 0x74, 0x72
   376 0000047B 696E67                  	db 0x69, 0x6E, 0x67
   377                                  	; L_constants + 1150:
   378 0000047E 03                      	db T_string	; "numerator"
   379 0000047F 0900000000000000        	dq 9
   380 00000487 6E756D657261746F        	db 0x6E, 0x75, 0x6D, 0x65, 0x72, 0x61, 0x74, 0x6F
   381 0000048F 72                      	db 0x72
   382                                  	; L_constants + 1168:
   383 00000490 03                      	db T_string	; "denominator"
   384 00000491 0B00000000000000        	dq 11
   385 00000499 64656E6F6D696E61        	db 0x64, 0x65, 0x6E, 0x6F, 0x6D, 0x69, 0x6E, 0x61
   386 000004A1 746F72                  	db 0x74, 0x6F, 0x72
   387                                  	; L_constants + 1188:
   388 000004A4 03                      	db T_string	; "eq?"
   389 000004A5 0300000000000000        	dq 3
   390 000004AD 65713F                  	db 0x65, 0x71, 0x3F
   391                                  	; L_constants + 1200:
   392 000004B0 03                      	db T_string	; "__integer-to-fracti...
   393 000004B1 1500000000000000        	dq 21
   394 000004B9 5F5F696E74656765        	db 0x5F, 0x5F, 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65
   395 000004C1 722D746F2D667261        	db 0x72, 0x2D, 0x74, 0x6F, 0x2D, 0x66, 0x72, 0x61
   396 000004C9 6374696F6E              	db 0x63, 0x74, 0x69, 0x6F, 0x6E
   397                                  	; L_constants + 1230:
   398 000004CE 03                      	db T_string	; "logand"
   399 000004CF 0600000000000000        	dq 6
   400 000004D7 6C6F67616E64            	db 0x6C, 0x6F, 0x67, 0x61, 0x6E, 0x64
   401                                  	; L_constants + 1245:
   402 000004DD 03                      	db T_string	; "logor"
   403 000004DE 0500000000000000        	dq 5
   404 000004E6 6C6F676F72              	db 0x6C, 0x6F, 0x67, 0x6F, 0x72
   405                                  	; L_constants + 1259:
   406 000004EB 03                      	db T_string	; "logxor"
   407 000004EC 0600000000000000        	dq 6
   408 000004F4 6C6F67786F72            	db 0x6C, 0x6F, 0x67, 0x78, 0x6F, 0x72
   409                                  	; L_constants + 1274:
   410 000004FA 03                      	db T_string	; "lognot"
   411 000004FB 0600000000000000        	dq 6
   412 00000503 6C6F676E6F74            	db 0x6C, 0x6F, 0x67, 0x6E, 0x6F, 0x74
   413                                  	; L_constants + 1289:
   414 00000509 03                      	db T_string	; "ash"
   415 0000050A 0300000000000000        	dq 3
   416 00000512 617368                  	db 0x61, 0x73, 0x68
   417                                  	; L_constants + 1301:
   418 00000515 03                      	db T_string	; "symbol?"
   419 00000516 0700000000000000        	dq 7
   420 0000051E 73796D626F6C3F          	db 0x73, 0x79, 0x6D, 0x62, 0x6F, 0x6C, 0x3F
   421                                  	; L_constants + 1317:
   422 00000525 03                      	db T_string	; "uninterned-symbol?"
   423 00000526 1200000000000000        	dq 18
   424 0000052E 756E696E7465726E        	db 0x75, 0x6E, 0x69, 0x6E, 0x74, 0x65, 0x72, 0x6E
   425 00000536 65642D73796D626F        	db 0x65, 0x64, 0x2D, 0x73, 0x79, 0x6D, 0x62, 0x6F
   426 0000053E 6C3F                    	db 0x6C, 0x3F
   427                                  	; L_constants + 1344:
   428 00000540 03                      	db T_string	; "gensym?"
   429 00000541 0700000000000000        	dq 7
   430 00000549 67656E73796D3F          	db 0x67, 0x65, 0x6E, 0x73, 0x79, 0x6D, 0x3F
   431                                  	; L_constants + 1360:
   432 00000550 03                      	db T_string	; "gensym"
   433 00000551 0600000000000000        	dq 6
   434 00000559 67656E73796D            	db 0x67, 0x65, 0x6E, 0x73, 0x79, 0x6D
   435                                  	; L_constants + 1375:
   436 0000055F 03                      	db T_string	; "frame"
   437 00000560 0500000000000000        	dq 5
   438 00000568 6672616D65              	db 0x66, 0x72, 0x61, 0x6D, 0x65
   439                                  	; L_constants + 1389:
   440 0000056D 03                      	db T_string	; "break"
   441 0000056E 0500000000000000        	dq 5
   442 00000576 627265616B              	db 0x62, 0x72, 0x65, 0x61, 0x6B
   443                                  	; L_constants + 1403:
   444 0000057B 03                      	db T_string	; "boolean-false?"
   445 0000057C 0E00000000000000        	dq 14
   446 00000584 626F6F6C65616E2D        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x2D
   447 0000058C 66616C73653F            	db 0x66, 0x61, 0x6C, 0x73, 0x65, 0x3F
   448                                  	; L_constants + 1426:
   449 00000592 03                      	db T_string	; "boolean-true?"
   450 00000593 0D00000000000000        	dq 13
   451 0000059B 626F6F6C65616E2D        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x2D
   452 000005A3 747275653F              	db 0x74, 0x72, 0x75, 0x65, 0x3F
   453                                  	; L_constants + 1448:
   454 000005A8 03                      	db T_string	; "primitive?"
   455 000005A9 0A00000000000000        	dq 10
   456 000005B1 7072696D69746976        	db 0x70, 0x72, 0x69, 0x6D, 0x69, 0x74, 0x69, 0x76
   457 000005B9 653F                    	db 0x65, 0x3F
   458                                  	; L_constants + 1467:
   459 000005BB 03                      	db T_string	; "length"
   460 000005BC 0600000000000000        	dq 6
   461 000005C4 6C656E677468            	db 0x6C, 0x65, 0x6E, 0x67, 0x74, 0x68
   462                                  	; L_constants + 1482:
   463 000005CA 03                      	db T_string	; "make-list"
   464 000005CB 0900000000000000        	dq 9
   465 000005D3 6D616B652D6C6973        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x6C, 0x69, 0x73
   466 000005DB 74                      	db 0x74
   467                                  	; L_constants + 1500:
   468 000005DC 03                      	db T_string	; "return"
   469 000005DD 0600000000000000        	dq 6
   470 000005E5 72657475726E            	db 0x72, 0x65, 0x74, 0x75, 0x72, 0x6E
   471                                  	; L_constants + 1515:
   472 000005EB 11                      	db T_integer	; 1
   473 000005EC 0100000000000000        	dq 1
   474                                  	; L_constants + 1524:
   475 000005F4 11                      	db T_integer	; 2
   476 000005F5 0200000000000000        	dq 2
   477                                  	; L_constants + 1533:
   478 000005FD 11                      	db T_integer	; 3
   479 000005FE 0300000000000000        	dq 3
   480                                  	; L_constants + 1542:
   481 00000606 11                      	db T_integer	; 4
   482 00000607 0400000000000000        	dq 4
   483                                  
   484                                  
   485                                  extern printf, fprintf, stdout, stderr, fwrite, exit, putchar, getchar
   486                                  global main
   487                                  section .text
   488                                  main:
   489 00000000 C8000000                        enter 0, 0
   490 00000004 6A00                            push 0
   491 00000006 6A00                            push 0
   492 00000008 68[58030000]                    push Lend
   493 0000000D C8000000                        enter 0, 0
   494                                  
   495                                  	; preparing a non-tail-call
   496 00000011 48B8-                   	mov rax, L_constants + 1542
   496 00000013 [0606000000000000] 
   497 0000001B 50                      	push rax
   498 0000001C 48B8-                   	mov rax, L_constants + 1533
   498 0000001E [FD05000000000000] 
   499 00000026 50                      	push rax
   500                                  	; preparing a non-tail-call
   501 00000027 48B8-                   	mov rax, L_constants + 1524
   501 00000029 [F405000000000000] 
   502 00000031 50                      	push rax
   503 00000032 48B8-                   	mov rax, L_constants + 1515
   503 00000034 [EB05000000000000] 
   504 0000003C 50                      	push rax
   505 0000003D 6A02                    	push 2	; arg count
   506 0000003F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   507 00000044 E87A040000              	call malloc
   508 00000049 50                      	push rax
   509 0000004A BF00000000              	mov rdi, 8 * 0	; new rib
   510 0000004F E86F040000              	call malloc
   511 00000054 50                      	push rax
   512 00000055 BF08000000              	mov rdi, 8 * 1	; extended env
   513 0000005A E864040000              	call malloc
   514 0000005F 488B7D10                	mov rdi, ENV
   515 00000063 BE00000000              	mov rsi, 0
   516 00000068 BA01000000              	mov rdx, 1
   517                                  .L_lambda_opt_env_loop_0001:	; ext_env[i + 1] <-- env[i]
   518 0000006D 4883FE00                	cmp rsi, 0
   519 00000071 7410                    	je .L_lambda_opt_env_end_0001
   520 00000073 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
   521 00000077 48890CD0                	mov qword [rax + 8 * rdx], rcx
   522 0000007B 48FFC6                  	inc rsi
   523 0000007E 48FFC2                  	inc rdx
   524 00000081 EBEA                    	jmp .L_lambda_opt_env_loop_0001
   525                                  .L_lambda_opt_env_end_0001:
   526 00000083 5B                      	pop rbx
   527 00000084 BE00000000              	mov rsi, 0
   528                                  .L_lambda_opt_params_loop_0001:	; copy params
   529 00000089 4883FE00                	cmp rsi, 0
   530 0000008D 740E                    	je .L_lambda_opt_params_end_0001
   531 0000008F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   532 00000094 488914F3                	mov qword [rbx + 8 * rsi], rdx
   533 00000098 48FFC6                  	inc rsi
   534 0000009B EBEC                    	jmp .L_lambda_opt_params_loop_0001
   535                                  .L_lambda_opt_params_end_0001:
   536 0000009D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   537 000000A0 4889C3                  	mov rbx, rax
   538 000000A3 58                      	pop rax
   539 000000A4 C60004                  	mov byte [rax], T_closure
   540 000000A7 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   541 000000AB 48C74009[B8000000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0001
   542 000000B3 E903010000              	jmp .L_lambda_opt_end_0001
   543                                  .L_lambda_opt_code_0001:
   544 000000B8 4C8B542410              	mov r10, qword [rsp + 8 * 2]         ; r10 = number of args 
   545 000000BD 4983FA00                	cmp r10, 0         ; Compare r10 (argument count) with required params
   546 000000C1 7407                    	je .L_lambda_opt_arity_check_exact_0001	; Jump if arity matches
   547 000000C3 7F4C                    	jg .L_lambda_opt_arity_check_more_0001	; Jump if more arguments passed
   548 000000C5 E9C6030000              	jmp L_error_incorrect_arity_opt
   549                                  .L_lambda_opt_arity_check_exact_0001:
   550 000000CA 4D89D6                  	mov r14, r10 ; r14 = num of iterations (args)
   551 000000CD 4983C603                	add r14, 3 ; add 3 first stack values
   552 000000D1 41BF00000000            	mov r15, 0 ; r15 = index
   553 000000D7 4883EC08                	sub rsp, 8 ; Allocate one extra space on the stack
   554 000000DB 48C70424[01000000]      	mov qword [rsp], sob_nil ; Initialize the new space with sob_nil
   555 000000E3 EB00                    	jmp .L_lambda_opt_stack_shrink_loop_0001
   556                                  .L_lambda_opt_stack_shrink_loop_0001:
   557 000000E5 4983FE00                	cmp r14, 0
   558 000000E9 7E11                    	jle .L_make_lambda_opt_exact_finish_0001
   559 000000EB 4E8B5CFC08              	mov r11, qword [rsp + 8 * (r15 + 1)] ; r11 = value of param
   560 000000F0 4E891CFC                	mov qword [rsp + 8 * r15], r11 ; move param to the right place
   561 000000F4 49FFCE                  	dec r14 ; next loop value
   562 000000F7 49FFC7                  	inc r15 ; update i
   563 000000FA EBE9                    	jmp .L_lambda_opt_stack_shrink_loop_0001
   564                                  .L_make_lambda_opt_exact_finish_0001:
   565 000000FC 4AC704FC[01000000]      	mov qword [rsp + 8 * r15], sob_nil ; Add sob_nil to the stack at the end
   566 00000104 49FFC2                  	inc r10
   567 00000107 4C89542410              	mov qword [rsp + 8 * 2], r10
   568 0000010C E99E000000              	jmp .L_lambda_opt_stack_adjusted_0001
   569                                  .L_lambda_opt_arity_check_more_0001:
   570 00000111 4D89D6                  	mov r14, r10 ; r14 = num args
   571 00000114 4D89D7                  	mov r15, r10 ; r15 = num args
   572 00000117 41B900000000            	mov r9, 0; r9 = number of params 
   573 0000011D 4D29CE                  	sub r14, r9 ; r14 = extra args
   574 00000120 4D01F1                  	add r9, r14 ; r9 = num args
   575 00000123 48BA-                   	mov rdx, sob_nil ; rdx = point to our list
   575 00000125 [0100000000000000] 
   576 0000012D EB00                    	jmp .L_make_lambda_opt_arg_list_0001
   577                                  .L_make_lambda_opt_arg_list_0001:
   578 0000012F 4983FE00                	cmp r14, 0
   579 00000133 7E25                    	jle .L_make_lambda_opt_stack_fixed_0001
   580 00000135 4E8B54CC10              	mov r10, qword [rsp + 8 * (r9 + 2)] ; r10 = Load the last arg
   581 0000013A BF11000000              	mov rdi, (1 + 8 + 8)                ; r10 = Allocate memory for the new pair (T_PAIR + CAR + CDR)
   582 0000013F E87F030000              	call malloc                         ; Allocate memory, result in rax
   583 00000144 C60021                  	mov byte [rax], T_pair              ; Mark as a pair
   584 00000147 4C895001                	mov qword [rax + 1], r10         ; CAR: current argument
   585 0000014B 48895009                	mov qword [rax + 1 + 8], rdx           ; CDR: current list
   586 0000014F 4889C2                  	mov rdx, rax                        ; rdx = Update rdx to point to the new pair
   587 00000152 49FFC9                  	dec r9                              ; args index minus 1
   588 00000155 49FFCE                  	dec r14                             ; next iteration
   589 00000158 EBD5                    	jmp .L_make_lambda_opt_arg_list_0001
   590                                  .L_make_lambda_opt_stack_fixed_0001:
   591 0000015A 4D89FE                  	mov r14, r15 ; r14 = num args
   592 0000015D 4D89F8                  	mov r8, r15 ; r14 = num args and num of iterations 
   593 00000160 4983C003                	add r8, 3 ; add the first 3 things in the stuff to num of iterations
   594 00000164 41BA00000000            	mov r10, 0; r10 = num of params
   595 0000016A 4D29D6                  	sub r14, r10 ; r14 = extra args
   596 0000016D 4D29F0                  	sub r8, r14 ; r8 = number of iterations (check this)
   597 00000170 49FFCE                  	dec r14 ; how much we need to change stack wise?
   598 00000173 4A8954C410              	mov qword [rsp + 8 * (r8 + 2)], rdx ; Add list to the right place
   599 00000178 EB00                    	jmp .L_lambda_opt_stack_shrink_loop_more_0001
   600                                  .L_lambda_opt_stack_shrink_loop_more_0001:
   601 0000017A 4983F800                	cmp r8, 0
   602 0000017E 7E15                    	jle .L_make_lambda_opt_more_finish_0001
   603 00000180 4D8D60FF                	lea r12, [r8 - 1]; r12 = position of the arg we need to move
   604 00000184 4E8B1CE4                	mov r11, qword [rsp + 8 * r12] 
   605 00000188 4D8D26                  	lea r12, [r14]
   606 0000018B 4E895CC408              	mov qword [rsp + 8 * (r8 + 1)], r11 
   607 00000190 49FFC8                  	dec r8 ; next iteration
   608 00000193 EBE5                    	jmp .L_lambda_opt_stack_shrink_loop_more_0001
   609                                  .L_make_lambda_opt_more_finish_0001:
   610 00000195 4D89F8                  	mov r8, r15 ; num of args
   611 00000198 41BA00000000            	mov r10, 0
   612 0000019E 4D29D0                  	sub r8, r10 ; num of new args
   613 000001A1 49FFC0                  	inc r8
   614 000001A4 4C89442420              	mov qword [rsp + 8 * 4], r8
   615 000001A9 4883C410                	add rsp, 8 * 2  ; 
   616 000001AD EB00                    	jmp .L_lambda_opt_stack_adjusted_0001
   617                                  .L_lambda_opt_stack_adjusted_0001:
   618 000001AF C8000000                	enter 0, 0
   619 000001B3 488B4520                	mov rax, PARAM(0)	; param d
   620 000001B7 C9                      	leave
   621 000001B8 C21800                  	ret AND_KILL_FRAME(1)
   622                                  .L_lambda_opt_end_0001:	; new closure is in rax
   623 000001BB 803804                  	cmp byte [rax], T_closure
   624 000001BE 0F8556020000            	jne L_error_non_closure
   625 000001C4 FF7001                  	push SOB_CLOSURE_ENV(rax)
   626 000001C7 FF5009                  	call SOB_CLOSURE_CODE(rax)
   627 000001CA 50                      	push rax
   628 000001CB 6A03                    	push 3	; arg count
   629 000001CD BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   630 000001D2 E8EC020000              	call malloc
   631 000001D7 50                      	push rax
   632 000001D8 BF00000000              	mov rdi, 8 * 0	; new rib
   633 000001DD E8E1020000              	call malloc
   634 000001E2 50                      	push rax
   635 000001E3 BF08000000              	mov rdi, 8 * 1	; extended env
   636 000001E8 E8D6020000              	call malloc
   637 000001ED 488B7D10                	mov rdi, ENV
   638 000001F1 BE00000000              	mov rsi, 0
   639 000001F6 BA01000000              	mov rdx, 1
   640                                  .L_lambda_opt_env_loop_0002:	; ext_env[i + 1] <-- env[i]
   641 000001FB 4883FE00                	cmp rsi, 0
   642 000001FF 7410                    	je .L_lambda_opt_env_end_0002
   643 00000201 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
   644 00000205 48890CD0                	mov qword [rax + 8 * rdx], rcx
   645 00000209 48FFC6                  	inc rsi
   646 0000020C 48FFC2                  	inc rdx
   647 0000020F EBEA                    	jmp .L_lambda_opt_env_loop_0002
   648                                  .L_lambda_opt_env_end_0002:
   649 00000211 5B                      	pop rbx
   650 00000212 BE00000000              	mov rsi, 0
   651                                  .L_lambda_opt_params_loop_0002:	; copy params
   652 00000217 4883FE00                	cmp rsi, 0
   653 0000021B 740E                    	je .L_lambda_opt_params_end_0002
   654 0000021D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   655 00000222 488914F3                	mov qword [rbx + 8 * rsi], rdx
   656 00000226 48FFC6                  	inc rsi
   657 00000229 EBEC                    	jmp .L_lambda_opt_params_loop_0002
   658                                  .L_lambda_opt_params_end_0002:
   659 0000022B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   660 0000022E 4889C3                  	mov rbx, rax
   661 00000231 58                      	pop rax
   662 00000232 C60004                  	mov byte [rax], T_closure
   663 00000235 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   664 00000239 48C74009[46020000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0002
   665 00000241 E903010000              	jmp .L_lambda_opt_end_0002
   666                                  .L_lambda_opt_code_0002:
   667 00000246 4C8B542410              	mov r10, qword [rsp + 8 * 2]         ; r10 = number of args 
   668 0000024B 4983FA01                	cmp r10, 1         ; Compare r10 (argument count) with required params
   669 0000024F 7407                    	je .L_lambda_opt_arity_check_exact_0002	; Jump if arity matches
   670 00000251 7F4C                    	jg .L_lambda_opt_arity_check_more_0002	; Jump if more arguments passed
   671 00000253 E938020000              	jmp L_error_incorrect_arity_opt
   672                                  .L_lambda_opt_arity_check_exact_0002:
   673 00000258 4D89D6                  	mov r14, r10 ; r14 = num of iterations (args)
   674 0000025B 4983C603                	add r14, 3 ; add 3 first stack values
   675 0000025F 41BF00000000            	mov r15, 0 ; r15 = index
   676 00000265 4883EC08                	sub rsp, 8 ; Allocate one extra space on the stack
   677 00000269 48C70424[01000000]      	mov qword [rsp], sob_nil ; Initialize the new space with sob_nil
   678 00000271 EB00                    	jmp .L_lambda_opt_stack_shrink_loop_0002
   679                                  .L_lambda_opt_stack_shrink_loop_0002:
   680 00000273 4983FE00                	cmp r14, 0
   681 00000277 7E11                    	jle .L_make_lambda_opt_exact_finish_0002
   682 00000279 4E8B5CFC08              	mov r11, qword [rsp + 8 * (r15 + 1)] ; r11 = value of param
   683 0000027E 4E891CFC                	mov qword [rsp + 8 * r15], r11 ; move param to the right place
   684 00000282 49FFCE                  	dec r14 ; next loop value
   685 00000285 49FFC7                  	inc r15 ; update i
   686 00000288 EBE9                    	jmp .L_lambda_opt_stack_shrink_loop_0002
   687                                  .L_make_lambda_opt_exact_finish_0002:
   688 0000028A 4AC704FC[01000000]      	mov qword [rsp + 8 * r15], sob_nil ; Add sob_nil to the stack at the end
   689 00000292 49FFC2                  	inc r10
   690 00000295 4C89542410              	mov qword [rsp + 8 * 2], r10
   691 0000029A E99E000000              	jmp .L_lambda_opt_stack_adjusted_0002
   692                                  .L_lambda_opt_arity_check_more_0002:
   693 0000029F 4D89D6                  	mov r14, r10 ; r14 = num args
   694 000002A2 4D89D7                  	mov r15, r10 ; r15 = num args
   695 000002A5 41B901000000            	mov r9, 1; r9 = number of params 
   696 000002AB 4D29CE                  	sub r14, r9 ; r14 = extra args
   697 000002AE 4D01F1                  	add r9, r14 ; r9 = num args
   698 000002B1 48BA-                   	mov rdx, sob_nil ; rdx = point to our list
   698 000002B3 [0100000000000000] 
   699 000002BB EB00                    	jmp .L_make_lambda_opt_arg_list_0002
   700                                  .L_make_lambda_opt_arg_list_0002:
   701 000002BD 4983FE00                	cmp r14, 0
   702 000002C1 7E25                    	jle .L_make_lambda_opt_stack_fixed_0002
   703 000002C3 4E8B54CC10              	mov r10, qword [rsp + 8 * (r9 + 2)] ; r10 = Load the last arg
   704 000002C8 BF11000000              	mov rdi, (1 + 8 + 8)                ; r10 = Allocate memory for the new pair (T_PAIR + CAR + CDR)
   705 000002CD E8F1010000              	call malloc                         ; Allocate memory, result in rax
   706 000002D2 C60021                  	mov byte [rax], T_pair              ; Mark as a pair
   707 000002D5 4C895001                	mov qword [rax + 1], r10         ; CAR: current argument
   708 000002D9 48895009                	mov qword [rax + 1 + 8], rdx           ; CDR: current list
   709 000002DD 4889C2                  	mov rdx, rax                        ; rdx = Update rdx to point to the new pair
   710 000002E0 49FFC9                  	dec r9                              ; args index minus 1
   711 000002E3 49FFCE                  	dec r14                             ; next iteration
   712 000002E6 EBD5                    	jmp .L_make_lambda_opt_arg_list_0002
   713                                  .L_make_lambda_opt_stack_fixed_0002:
   714 000002E8 4D89FE                  	mov r14, r15 ; r14 = num args
   715 000002EB 4D89F8                  	mov r8, r15 ; r14 = num args and num of iterations 
   716 000002EE 4983C003                	add r8, 3 ; add the first 3 things in the stuff to num of iterations
   717 000002F2 41BA01000000            	mov r10, 1; r10 = num of params
   718 000002F8 4D29D6                  	sub r14, r10 ; r14 = extra args
   719 000002FB 4D29F0                  	sub r8, r14 ; r8 = number of iterations (check this)
   720 000002FE 49FFCE                  	dec r14 ; how much we need to change stack wise?
   721 00000301 4A8954C410              	mov qword [rsp + 8 * (r8 + 2)], rdx ; Add list to the right place
   722 00000306 EB00                    	jmp .L_lambda_opt_stack_shrink_loop_more_0002
   723                                  .L_lambda_opt_stack_shrink_loop_more_0002:
   724 00000308 4983F800                	cmp r8, 0
   725 0000030C 7E15                    	jle .L_make_lambda_opt_more_finish_0002
   726 0000030E 4D8D60FF                	lea r12, [r8 - 1]; r12 = position of the arg we need to move
   727 00000312 4E8B1CE4                	mov r11, qword [rsp + 8 * r12] 
   728 00000316 4D8D26                  	lea r12, [r14]
   729 00000319 4E895CC408              	mov qword [rsp + 8 * (r8 + 1)], r11 
   730 0000031E 49FFC8                  	dec r8 ; next iteration
   731 00000321 EBE5                    	jmp .L_lambda_opt_stack_shrink_loop_more_0002
   732                                  .L_make_lambda_opt_more_finish_0002:
   733 00000323 4D89F8                  	mov r8, r15 ; num of args
   734 00000326 41BA01000000            	mov r10, 1
   735 0000032C 4D29D0                  	sub r8, r10 ; num of new args
   736 0000032F 49FFC0                  	inc r8
   737 00000332 4C89442420              	mov qword [rsp + 8 * 4], r8
   738 00000337 4883C410                	add rsp, 8 * 2  ; 
   739 0000033B EB00                    	jmp .L_lambda_opt_stack_adjusted_0002
   740                                  .L_lambda_opt_stack_adjusted_0002:
   741 0000033D C8000000                	enter 0, 0
   742 00000341 488B4528                	mov rax, PARAM(1)	; param b
   743 00000345 C9                      	leave
   744 00000346 C22000                  	ret AND_KILL_FRAME(2)
   745                                  .L_lambda_opt_end_0002:	; new closure is in rax
   746 00000349 803804                  	cmp byte [rax], T_closure
   747 0000034C 0F85C8000000            	jne L_error_non_closure
   748 00000352 FF7001                  	push SOB_CLOSURE_ENV(rax)
   749 00000355 FF5009                  	call SOB_CLOSURE_CODE(rax)
   750                                  Lend:
   751 00000358 4889C7                  	mov rdi, rax
   752 0000035B E8B8030000              	call print_sexpr_if_not_void
   753 00000360 48BF-                   mov rdi, fmt_memory_usage
   753 00000362 [A706000000000000] 
   754 0000036A 488B3425[2D070000]              mov rsi, qword [top_of_memory]
   755 00000372 4881EE[00000000]                sub rsi, memory
   756 00000379 B800000000                      mov rax, 0
   757                                          ENTER
    44 0000037E C8000000            <1>  enter 0, 0
    45 00000382 4883E4F0            <1>  and rsp, ~15
   758 00000386 E8(00000000)                    call printf
   759                                          LEAVE
    49 0000038B C9                  <1>  leave
   760 0000038C B800000000                      mov rax, 0
   761 00000391 E8(00000000)                    call exit
   762                                  
   763                                  L_error_fvar_undefined:
   764 00000396 50                              push rax
   765 00000397 488B3C25[00000000]              mov rdi, qword [stderr]  ; destination
   766 0000039F 48BE-                           mov rsi, fmt_undefined_free_var_1
   766 000003A1 [0F06000000000000] 
   767 000003A9 B800000000                      mov rax, 0
   768                                          ENTER
    44 000003AE C8000000            <1>  enter 0, 0
    45 000003B2 4883E4F0            <1>  and rsp, ~15
   769 000003B6 E8(00000000)                    call fprintf
   770                                          LEAVE
    49 000003BB C9                  <1>  leave
   771 000003BC 58                              pop rax
   772 000003BD 488B4001                        mov rax, qword [rax + 1] ; string
   773 000003C1 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
   774 000003C5 BE01000000                      mov rsi, 1               ; sizeof(char)
   775 000003CA 488B5001                        mov rdx, qword [rax + 1] ; string-length
   776 000003CE 488B0C25[00000000]              mov rcx, qword [stderr]  ; destination
   777 000003D6 B800000000                      mov rax, 0
   778                                          ENTER
    44 000003DB C8000000            <1>  enter 0, 0
    45 000003DF 4883E4F0            <1>  and rsp, ~15
   779 000003E3 E8(00000000)                    call fwrite
   780                                          LEAVE
    49 000003E8 C9                  <1>  leave
   781 000003E9 488B3C25[00000000]              mov rdi, [stderr]       ; destination
   782 000003F1 48BE-                           mov rsi, fmt_undefined_free_var_2
   782 000003F3 [2606000000000000] 
   783 000003FB B800000000                      mov rax, 0
   784                                          ENTER
    44 00000400 C8000000            <1>  enter 0, 0
    45 00000404 4883E4F0            <1>  and rsp, ~15
   785 00000408 E8(00000000)                    call fprintf
   786                                          LEAVE
    49 0000040D C9                  <1>  leave
   787 0000040E 48C7C0F6FFFFFF                  mov rax, -10
   788 00000415 E8(00000000)                    call exit
   789                                  
   790                                  L_error_non_closure:
   791 0000041A 488B3C25[00000000]              mov rdi, qword [stderr]
   792 00000422 48BE-                           mov rsi, fmt_non_closure
   792 00000424 [DD06000000000000] 
   793 0000042C B800000000                      mov rax, 0
   794                                          ENTER
    44 00000431 C8000000            <1>  enter 0, 0
    45 00000435 4883E4F0            <1>  and rsp, ~15
   795 00000439 E8(00000000)                    call fprintf
   796                                          LEAVE
    49 0000043E C9                  <1>  leave
   797 0000043F 48C7C0FEFFFFFF                  mov rax, -2
   798 00000446 E8(00000000)                    call exit
   799                                  
   800                                  L_error_improper_list:
   801 0000044B 488B3C25[00000000]      	mov rdi, qword [stderr]
   802 00000453 48BE-                   	mov rsi, fmt_error_improper_list
   802 00000455 [0507000000000000] 
   803 0000045D B800000000              	mov rax, 0
   804                                          ENTER
    44 00000462 C8000000            <1>  enter 0, 0
    45 00000466 4883E4F0            <1>  and rsp, ~15
   805 0000046A E8(00000000)            	call fprintf
   806                                          LEAVE
    49 0000046F C9                  <1>  leave
   807 00000470 48C7C0F9FFFFFF          	mov rax, -7
   808 00000477 E8(00000000)            	call exit
   809                                  
   810                                  L_error_incorrect_arity_simple:
   811 0000047C 488B3C25[00000000]              mov rdi, qword [stderr]
   812 00000484 48BE-                           mov rsi, fmt_incorrect_arity_simple
   812 00000486 [4806000000000000] 
   813 0000048E EB12                            jmp L_error_incorrect_arity_common
   814                                  L_error_incorrect_arity_opt:
   815 00000490 488B3C25[00000000]              mov rdi, qword [stderr]
   816 00000498 48BE-                           mov rsi, fmt_incorrect_arity_opt
   816 0000049A [7306000000000000] 
   817                                  L_error_incorrect_arity_common:
   818 000004A2 5A                              pop rdx
   819 000004A3 59                              pop rcx
   820 000004A4 B800000000                      mov rax, 0
   821                                          ENTER
    44 000004A9 C8000000            <1>  enter 0, 0
    45 000004AD 4883E4F0            <1>  and rsp, ~15
   822 000004B1 E8(00000000)                    call fprintf
   823                                          LEAVE
    49 000004B6 C9                  <1>  leave
   824 000004B7 48C7C0FAFFFFFF                  mov rax, -6
   825 000004BE E8(00000000)                    call exit
   826                                  
   827                                  section .data
   828                                  fmt_undefined_free_var_1:
   829 0000060F 212121205468652066-             db `!!! The free variable \0`
   829 00000618 726565207661726961-
   829 00000621 626C652000         
   830                                  fmt_undefined_free_var_2:
   831 00000626 207761732075736564-             db ` was used before it was defined.\n\0`
   831 0000062F 206265666F72652069-
   831 00000638 742077617320646566-
   831 00000641 696E65642E0A00     
   832                                  fmt_incorrect_arity_simple:
   833 00000648 212121204578706563-             db `!!! Expected %ld arguments, but given %ld\n\0`
   833 00000651 74656420256C642061-
   833 0000065A 7267756D656E74732C-
   833 00000663 206275742067697665-
   833 0000066C 6E20256C640A00     
   834                                  fmt_incorrect_arity_opt:
   835 00000673 212121204578706563-             db `!!! Expected at least %ld arguments, but given %ld\n\0`
   835 0000067C 746564206174206C65-
   835 00000685 61737420256C642061-
   835 0000068E 7267756D656E74732C-
   835 00000697 206275742067697665-
   835 000006A0 6E20256C640A00     
   836                                  fmt_memory_usage:
   837 000006A7 0A2121212055736564-             db `\n!!! Used %ld bytes of dynamically-allocated memory\n\n\0`
   837 000006B0 20256C642062797465-
   837 000006B9 73206F662064796E61-
   837 000006C2 6D6963616C6C792D61-
   837 000006CB 6C6C6F636174656420-
   837 000006D4 6D656D6F72790A0A00 
   838                                  fmt_non_closure:
   839 000006DD 21212120417474656D-             db `!!! Attempting to apply a non-closure!\n\0`
   839 000006E6 7074696E6720746F20-
   839 000006EF 6170706C792061206E-
   839 000006F8 6F6E2D636C6F737572-
   839 00000701 65210A00           
   840                                  fmt_error_improper_list:
   841 00000705 212121205468652061-     	db `!!! The argument is not a proper list!\n\0`
   841 0000070E 7267756D656E742069-
   841 00000717 73206E6F7420612070-
   841 00000720 726F706572206C6973-
   841 00000729 74210A00           
   842                                  
   843                                  section .bss
   844                                  memory:
   845 00000000 <res 40000000h>         	resb gbytes(1)
   846                                  
   847                                  section .data
   848                                  top_of_memory:
   849 0000072D [0000000000000000]              dq memory
   850                                  
   851                                  section .text
   852                                  malloc:
   853 000004C3 488B0425[2D070000]              mov rax, qword [top_of_memory]
   854 000004CB 48013C25[2D070000]              add qword [top_of_memory], rdi
   855 000004D3 C3                              ret
   856                                  
   857                                  L_code_ptr_return:
   858 000004D4 48837C241002            	cmp qword [rsp + 8*2], 2
   859 000004DA 0F85D51C0000            	jne L_error_arg_count_2
   860 000004E0 488B4C2418              	mov rcx, qword [rsp + 8*3]
   861                                  	assert_integer(rcx)
    53 000004E5 803911              <1>  cmp byte [%1], %2
    54 000004E8 0F85661D0000        <1>  jne L_error_incorrect_type
   862 000004EE 488B4901                	mov rcx, qword [rcx + 1]
   863 000004F2 4883F900                	cmp rcx, 0
   864 000004F6 0F8CED1B0000            	jl L_error_integer_range
   865 000004FC 488B442420              	mov rax, qword [rsp + 8*4]
   866                                  .L0:
   867 00000501 4883F900                        cmp rcx, 0
   868 00000505 7409                            je .L1
   869 00000507 488B6D00                	mov rbp, qword [rbp]
   870 0000050B 48FFC9                  	dec rcx
   871 0000050E 7FF1                    	jg .L0
   872                                  .L1:
   873 00000510 4889EC                  	mov rsp, rbp
   874 00000513 5D                      	pop rbp
   875 00000514 5B                              pop rbx
   876 00000515 488B4C2408                      mov rcx, qword [rsp + 8*1]
   877 0000051A 488D64CC10                      lea rsp, [rsp + 8*rcx + 8*2]
   878 0000051F FFE3                    	jmp rbx
   879                                  
   880                                  L_code_ptr_make_list:
   881 00000521 C8000000                	enter 0, 0
   882 00000525 48837D1801                      cmp COUNT, 1
   883 0000052A 740C                            je .L0
   884 0000052C 48837D1802                      cmp COUNT, 2
   885 00000531 7411                            je .L1
   886 00000533 E9B21C0000                      jmp L_error_arg_count_12
   887                                  .L0:
   888 00000538 49B9-                           mov r9, sob_void
   888 0000053A [0000000000000000] 
   889 00000542 EB04                            jmp .L2
   890                                  .L1:
   891 00000544 4C8B4D28                        mov r9, PARAM(1)
   892                                  .L2:
   893 00000548 488B4D20                        mov rcx, PARAM(0)
   894                                          assert_integer(rcx)
    53 0000054C 803911              <1>  cmp byte [%1], %2
    54 0000054F 0F85FF1C0000        <1>  jne L_error_incorrect_type
   895 00000555 488B4901                        mov rcx, qword [rcx + 1]
   896 00000559 4883F900                        cmp rcx, 0
   897 0000055D 0F8CB71B0000                    jl L_error_arg_negative
   898 00000563 49B8-                           mov r8, sob_nil
   898 00000565 [0100000000000000] 
   899                                  .L3:
   900 0000056D 4883F900                        cmp rcx, 0
   901 00000571 7E1D                            jle .L4
   902 00000573 BF11000000                      mov rdi, 1 + 8 + 8
   903 00000578 E846FFFFFF                      call malloc
   904 0000057D C60021                          mov byte [rax], T_pair
   905 00000580 4C894801                        mov qword [rax + 1], r9
   906 00000584 4C894009                        mov qword [rax + 1 + 8], r8
   907 00000588 4989C0                          mov r8, rax
   908 0000058B 48FFC9                          dec rcx
   909 0000058E EBDD                            jmp .L3
   910                                  .L4:
   911 00000590 4C89C0                          mov rax, r8
   912 00000593 48837D1802                      cmp COUNT, 2
   913 00000598 7404                            je .L5
   914 0000059A C9                              leave
   915 0000059B C21800                          ret AND_KILL_FRAME(1)
   916                                  .L5:
   917 0000059E C9                      	leave
   918 0000059F C22000                  	ret AND_KILL_FRAME(2)
   919                                  
   920                                  L_code_ptr_is_primitive:
   921 000005A2 C8000000                	enter 0, 0
   922 000005A6 48837D1801              	cmp COUNT, 1
   923 000005AB 0F85CF1B0000            	jne L_error_arg_count_1
   924 000005B1 488B4520                	mov rax, PARAM(0)
   925                                  	assert_closure(rax)
    53 000005B5 803804              <1>  cmp byte [%1], %2
    54 000005B8 0F85961C0000        <1>  jne L_error_incorrect_type
   926 000005BE 4883780100              	cmp SOB_CLOSURE_ENV(rax), 0
   927 000005C3 750C                    	jne .L_false
   928 000005C5 48B8-                   	mov rax, sob_boolean_true
   928 000005C7 [0300000000000000] 
   929 000005CF EB0A                    	jmp .L_end
   930                                  .L_false:
   931 000005D1 48B8-                   	mov rax, sob_boolean_false
   931 000005D3 [0200000000000000] 
   932                                  .L_end:
   933 000005DB C9                      	leave
   934 000005DC C21800                  	ret AND_KILL_FRAME(1)
   935                                  
   936                                  L_code_ptr_length:
   937 000005DF C8000000                	enter 0, 0
   938 000005E3 48837D1801              	cmp COUNT, 1
   939 000005E8 0F85921B0000            	jne L_error_arg_count_1
   940 000005EE 488B5D20                	mov rbx, PARAM(0)
   941 000005F2 BF00000000              	mov rdi, 0
   942                                  .L:
   943 000005F7 803B01                  	cmp byte [rbx], T_nil
   944 000005FA 7412                    	je .L_end
   945                                  	assert_pair(rbx)
    53 000005FC 803B21              <1>  cmp byte [%1], %2
    54 000005FF 0F854F1C0000        <1>  jne L_error_incorrect_type
   946 00000605 488B5B09                	mov rbx, SOB_PAIR_CDR(rbx)
   947 00000609 48FFC7                  	inc rdi
   948 0000060C EBE9                    	jmp .L
   949                                  .L_end:
   950 0000060E E8BC1A0000              	call make_integer
   951 00000613 C9                      	leave
   952 00000614 C21800                  	ret AND_KILL_FRAME(1)
   953                                  
   954                                  L_code_ptr_break:
   955 00000617 48837C241000                    cmp qword [rsp + 8 * 2], 0
   956 0000061D 0F85281B0000                    jne L_error_arg_count_0
   957 00000623 CC                              int3
   958 00000624 48B8-                           mov rax, sob_void
   958 00000626 [0000000000000000] 
   959 0000062E C21000                          ret AND_KILL_FRAME(0)        
   960                                  
   961                                  L_code_ptr_frame:
   962 00000631 C8000000                        enter 0, 0
   963 00000635 48837D1800                      cmp COUNT, 0
   964 0000063A 0F850B1B0000                    jne L_error_arg_count_0
   965                                  
   966 00000640 48BF-                           mov rdi, fmt_frame
   966 00000642 [3507000000000000] 
   967 0000064A 488B7500                        mov rsi, qword [rbp]    ; old rbp
   968 0000064E 488B5608                        mov rdx, qword [rsi + 8*1] ; ret addr
   969 00000652 488B4E10                        mov rcx, qword [rsi + 8*2] ; lexical environment
   970 00000656 4C8B4618                        mov r8, qword [rsi + 8*3] ; count
   971 0000065A 4C8D4E20                        lea r9, [rsi + 8*4]       ; address of argument 0
   972 0000065E 6A00                            push 0
   973 00000660 4151                            push r9
   974 00000662 4150                            push r8                   ; we'll use it when printing the params
   975 00000664 B800000000                      mov rax, 0
   976                                          
   977                                          ENTER
    44 00000669 C8000000            <1>  enter 0, 0
    45 0000066D 4883E4F0            <1>  and rsp, ~15
   978 00000671 E8(00000000)                    call printf
   979                                          LEAVE
    49 00000676 C9                  <1>  leave
   980                                  
   981                                  .L:
   982 00000677 488B0C24                        mov rcx, qword [rsp]
   983 0000067B 4883F900                        cmp rcx, 0
   984 0000067F 7467                            je .L_out
   985 00000681 48BF-                           mov rdi, fmt_frame_param_prefix
   985 00000683 [6E07000000000000] 
   986 0000068B 488B742410                      mov rsi, qword [rsp + 8*2]
   987 00000690 B800000000                      mov rax, 0
   988                                          
   989                                          ENTER
    44 00000695 C8000000            <1>  enter 0, 0
    45 00000699 4883E4F0            <1>  and rsp, ~15
   990 0000069D E8(00000000)                    call printf
   991                                          LEAVE
    49 000006A2 C9                  <1>  leave
   992                                  
   993 000006A3 488B0C24                        mov rcx, qword [rsp]
   994 000006A7 48FFC9                          dec rcx
   995 000006AA 48890C24                        mov qword [rsp], rcx    ; dec arg count
   996 000006AE 48FF442410                      inc qword [rsp + 8*2]   ; increment index of current arg
   997 000006B3 488B7C2408                      mov rdi, qword [rsp + 8*1] ; addr of addr current arg
   998 000006B8 4C8D4F08                        lea r9, [rdi + 8]          ; addr of next arg
   999 000006BC 4C894C2408                      mov qword [rsp + 8*1], r9  ; backup addr of next arg
  1000 000006C1 488B3F                          mov rdi, qword [rdi]       ; addr of current arg
  1001 000006C4 E87B000000                      call print_sexpr
  1002 000006C9 48BF-                           mov rdi, fmt_newline
  1002 000006CB [9A07000000000000] 
  1003 000006D3 B800000000                      mov rax, 0
  1004                                          ENTER
    44 000006D8 C8000000            <1>  enter 0, 0
    45 000006DC 4883E4F0            <1>  and rsp, ~15
  1005 000006E0 E8(00000000)                    call printf
  1006                                          LEAVE
    49 000006E5 C9                  <1>  leave
  1007 000006E6 EB8F                            jmp .L
  1008                                  .L_out:
  1009 000006E8 48BF-                           mov rdi, fmt_frame_continue
  1009 000006EA [7F07000000000000] 
  1010 000006F2 B800000000                      mov rax, 0
  1011                                          ENTER
    44 000006F7 C8000000            <1>  enter 0, 0
    45 000006FB 4883E4F0            <1>  and rsp, ~15
  1012 000006FF E8(00000000)                    call printf
  1013 00000704 E8(00000000)                    call getchar
  1014                                          LEAVE
    49 00000709 C9                  <1>  leave
  1015                                          
  1016 0000070A 48B8-                           mov rax, sob_void
  1016 0000070C [0000000000000000] 
  1017 00000714 C9                              leave
  1018 00000715 C21000                          ret AND_KILL_FRAME(0)
  1019                                          
  1020                                  print_sexpr_if_not_void:
  1021 00000718 4881FF[00000000]        	cmp rdi, sob_void
  1022 0000071F 7422                    	je .done
  1023 00000721 E81E000000              	call print_sexpr
  1024 00000726 48BF-                   	mov rdi, fmt_newline
  1024 00000728 [9A07000000000000] 
  1025 00000730 B800000000              	mov rax, 0
  1026                                  	ENTER
    44 00000735 C8000000            <1>  enter 0, 0
    45 00000739 4883E4F0            <1>  and rsp, ~15
  1027 0000073D E8(00000000)            	call printf
  1028                                  	LEAVE
    49 00000742 C9                  <1>  leave
  1029                                  .done:
  1030 00000743 C3                      	ret
  1031                                  
  1032                                  section .data
  1033                                  fmt_frame:
  1034 00000735 524250203D2025703B-             db `RBP = %p; ret addr = %p; lex env = %p; param count = %d\n\0`
  1034 0000073E 207265742061646472-
  1034 00000747 203D2025703B206C65-
  1034 00000750 7820656E76203D2025-
  1034 00000759 703B20706172616D20-
  1034 00000762 636F756E74203D2025-
  1034 0000076B 640A00             
  1035                                  fmt_frame_param_prefix:
  1036 0000076E 3D3D5B706172616D20-             db `==[param %d]==> \0`
  1036 00000777 25645D3D3D3E2000   
  1037                                  fmt_frame_continue:
  1038 0000077F 486974203C456E7465-             db `Hit <Enter> to continue...\0`
  1038 00000788 723E20746F20636F6E-
  1038 00000791 74696E75652E2E2E00 
  1039                                  fmt_newline:
  1040 0000079A 0A00                    	db `\n\0`
  1041                                  fmt_void:
  1042 0000079C 233C766F69643E00        	db `#<void>\0`
  1043                                  fmt_nil:
  1044 000007A4 282900                  	db `()\0`
  1045                                  fmt_boolean_false:
  1046 000007A7 236600                  	db `#f\0`
  1047                                  fmt_boolean_true:
  1048 000007AA 237400                  	db `#t\0`
  1049                                  fmt_char_backslash:
  1050 000007AD 235C5C00                	db `#\\\\\0`
  1051                                  fmt_char_dquote:
  1052 000007B1 235C2200                	db `#\\"\0`
  1053                                  fmt_char_simple:
  1054 000007B5 235C256300              	db `#\\%c\0`
  1055                                  fmt_char_null:
  1056 000007BA 235C6E756C00            	db `#\\nul\0`
  1057                                  fmt_char_bell:
  1058 000007C0 235C62656C6C00          	db `#\\bell\0`
  1059                                  fmt_char_backspace:
  1060 000007C7 235C6261636B737061-     	db `#\\backspace\0`
  1060 000007D0 636500             
  1061                                  fmt_char_tab:
  1062 000007D3 235C74616200            	db `#\\tab\0`
  1063                                  fmt_char_newline:
  1064 000007D9 235C6E65776C696E65-     	db `#\\newline\0`
  1064 000007E2 00                 
  1065                                  fmt_char_formfeed:
  1066 000007E3 235C7061676500          	db `#\\page\0`
  1067                                  fmt_char_return:
  1068 000007EA 235C72657475726E00      	db `#\\return\0`
  1069                                  fmt_char_escape:
  1070 000007F3 235C65736300            	db `#\\esc\0`
  1071                                  fmt_char_space:
  1072 000007F9 235C737061636500        	db `#\\space\0`
  1073                                  fmt_char_hex:
  1074 00000801 235C782530325800        	db `#\\x%02X\0`
  1075                                  fmt_gensym:
  1076 00000809 47256C6400                      db `G%ld\0`
  1077                                  fmt_closure:
  1078 0000080E 233C636C6F73757265-     	db `#<closure at 0x%08X env=0x%08X code=0x%08X>\0`
  1078 00000817 206174203078253038-
  1078 00000820 5820656E763D307825-
  1078 00000829 30385820636F64653D-
  1078 00000832 3078253038583E00   
  1079                                  fmt_lparen:
  1080 0000083A 2800                    	db `(\0`
  1081                                  fmt_dotted_pair:
  1082 0000083C 202E2000                	db ` . \0`
  1083                                  fmt_rparen:
  1084 00000840 2900                    	db `)\0`
  1085                                  fmt_space:
  1086 00000842 2000                    	db ` \0`
  1087                                  fmt_empty_vector:
  1088 00000844 23282900                	db `#()\0`
  1089                                  fmt_vector:
  1090 00000848 232800                  	db `#(\0`
  1091                                  fmt_real:
  1092 0000084B 256600                  	db `%f\0`
  1093                                  fmt_fraction:
  1094 0000084E 256C642F256C6400        	db `%ld/%ld\0`
  1095                                  fmt_zero:
  1096 00000856 3000                    	db `0\0`
  1097                                  fmt_int:
  1098 00000858 256C6400                	db `%ld\0`
  1099                                  fmt_unknown_scheme_object_error:
  1100 0000085C 0A0A21212120457272-     	db `\n\n!!! Error: Unknown Scheme-object (RTTI 0x%02X) `
  1100 00000865 6F723A20556E6B6E6F-
  1100 0000086E 776E20536368656D65-
  1100 00000877 2D6F626A6563742028-
  1100 00000880 525454492030782530-
  1100 00000889 32582920           
  1101 0000088D 617420616464726573-     	db `at address 0x%08X\n\n\0`
  1101 00000896 73203078253038580A-
  1101 0000089F 0A00               
  1102                                  fmt_dquote:
  1103 000008A1 2200                    	db `\"\0`
  1104                                  fmt_string_char:
  1105 000008A3 256300                          db `%c\0`
  1106                                  fmt_string_char_7:
  1107 000008A6 5C6100                          db `\\a\0`
  1108                                  fmt_string_char_8:
  1109 000008A9 5C6200                          db `\\b\0`
  1110                                  fmt_string_char_9:
  1111 000008AC 5C7400                          db `\\t\0`
  1112                                  fmt_string_char_10:
  1113 000008AF 5C6E00                          db `\\n\0`
  1114                                  fmt_string_char_11:
  1115 000008B2 5C7600                          db `\\v\0`
  1116                                  fmt_string_char_12:
  1117 000008B5 5C6600                          db `\\f\0`
  1118                                  fmt_string_char_13:
  1119 000008B8 5C7200                          db `\\r\0`
  1120                                  fmt_string_char_34:
  1121 000008BB 5C2200                          db `\\"\0`
  1122                                  fmt_string_char_92:
  1123 000008BE 5C5C00                          db `\\\\\0`
  1124                                  fmt_string_char_hex:
  1125 000008C1 5C7825583B00                    db `\\x%X;\0`
  1126                                  
  1127                                  section .text
  1128                                  
  1129                                  print_sexpr:
  1130 00000744 C8000000                	enter 0, 0
  1131 00000748 8A07                    	mov al, byte [rdi]
  1132 0000074A 3C00                    	cmp al, T_void
  1133 0000074C 7465                    	je .Lvoid
  1134 0000074E 3C01                    	cmp al, T_nil
  1135 00000750 7470                    	je .Lnil
  1136 00000752 3C09                    	cmp al, T_boolean_false
  1137 00000754 747B                    	je .Lboolean_false
  1138 00000756 3C0A                    	cmp al, T_boolean_true
  1139 00000758 0F8482000000            	je .Lboolean_true
  1140 0000075E 3C02                    	cmp al, T_char
  1141 00000760 0F8489000000            	je .Lchar
  1142 00000766 3C41                    	cmp al, T_interned_symbol
  1143 00000768 0F84BF010000            	je .Linterned_symbol
  1144 0000076E 3C42                            cmp al, T_uninterned_symbol
  1145 00000770 0F84E3010000                    je .Luninterned_symbol
  1146 00000776 3C21                    	cmp al, T_pair
  1147 00000778 0F84EE010000            	je .Lpair
  1148 0000077E 3C22                    	cmp al, T_vector
  1149 00000780 0F84B7020000            	je .Lvector
  1150 00000786 3C04                    	cmp al, T_closure
  1151 00000788 0F8485010000            	je .Lclosure
  1152 0000078E 3C13                    	cmp al, T_real
  1153 00000790 0F8448030000            	je .Lreal
  1154 00000796 3C12                    	cmp al, T_fraction
  1155 00000798 0F846E030000            	je .Lfraction
  1156 0000079E 3C11                    	cmp al, T_integer
  1157 000007A0 0F84A7030000            	je .Linteger
  1158 000007A6 3C03                    	cmp al, T_string
  1159 000007A8 0F84B2030000            	je .Lstring
  1160                                  
  1161 000007AE E9DC040000              	jmp .Lunknown_sexpr_type
  1162                                  
  1163                                  .Lvoid:
  1164 000007B3 48BF-                   	mov rdi, fmt_void
  1164 000007B5 [9C07000000000000] 
  1165 000007BD E900050000              	jmp .Lemit
  1166                                  
  1167                                  .Lnil:
  1168 000007C2 48BF-                   	mov rdi, fmt_nil
  1168 000007C4 [A407000000000000] 
  1169 000007CC E9F1040000              	jmp .Lemit
  1170                                  
  1171                                  .Lboolean_false:
  1172 000007D1 48BF-                   	mov rdi, fmt_boolean_false
  1172 000007D3 [A707000000000000] 
  1173 000007DB E9E2040000              	jmp .Lemit
  1174                                  
  1175                                  .Lboolean_true:
  1176 000007E0 48BF-                   	mov rdi, fmt_boolean_true
  1176 000007E2 [AA07000000000000] 
  1177 000007EA E9D3040000              	jmp .Lemit
  1178                                  
  1179                                  .Lchar:
  1180 000007EF 8A4701                  	mov al, byte [rdi + 1]
  1181 000007F2 3C20                    	cmp al, ' '
  1182 000007F4 7E20                    	jle .Lchar_whitespace
  1183 000007F6 3C5C                    	cmp al, 92 		; backslash
  1184 000007F8 7474                    	je .Lchar_backslash
  1185 000007FA 3C22                    	cmp al, '"'
  1186 000007FC 747F                    	je .Lchar_dquote
  1187 000007FE 4825FF000000            	and rax, 255
  1188 00000804 48BF-                   	mov rdi, fmt_char_simple
  1188 00000806 [B507000000000000] 
  1189 0000080E 4889C6                  	mov rsi, rax
  1190 00000811 E9AC040000              	jmp .Lemit
  1191                                  
  1192                                  .Lchar_whitespace:
  1193 00000816 3C00                    	cmp al, 0
  1194 00000818 7472                    	je .Lchar_null
  1195 0000081A 3C07                    	cmp al, 7
  1196 0000081C 747D                    	je .Lchar_bell
  1197 0000081E 3C08                    	cmp al, 8
  1198 00000820 0F8484000000            	je .Lchar_backspace
  1199 00000826 3C09                    	cmp al, 9
  1200 00000828 0F848B000000            	je .Lchar_tab
  1201 0000082E 3C0A                    	cmp al, 10
  1202 00000830 0F8492000000            	je .Lchar_newline
  1203 00000836 3C0C                    	cmp al, 12
  1204 00000838 0F8499000000            	je .Lchar_formfeed
  1205 0000083E 3C0D                    	cmp al, 13
  1206 00000840 0F84A0000000            	je .Lchar_return
  1207 00000846 3C1B                    	cmp al, 27
  1208 00000848 0F84A7000000            	je .Lchar_escape
  1209 0000084E 4825FF000000            	and rax, 255
  1210 00000854 3C20                    	cmp al, ' '
  1211 00000856 0F84A8000000            	je .Lchar_space
  1212 0000085C 48BF-                   	mov rdi, fmt_char_hex
  1212 0000085E [0108000000000000] 
  1213 00000866 4889C6                  	mov rsi, rax
  1214 00000869 E954040000              	jmp .Lemit	
  1215                                  
  1216                                  .Lchar_backslash:
  1217 0000086E 48BF-                   	mov rdi, fmt_char_backslash
  1217 00000870 [AD07000000000000] 
  1218 00000878 E945040000              	jmp .Lemit
  1219                                  
  1220                                  .Lchar_dquote:
  1221 0000087D 48BF-                   	mov rdi, fmt_char_dquote
  1221 0000087F [B107000000000000] 
  1222 00000887 E936040000              	jmp .Lemit
  1223                                  
  1224                                  .Lchar_null:
  1225 0000088C 48BF-                   	mov rdi, fmt_char_null
  1225 0000088E [BA07000000000000] 
  1226 00000896 E927040000              	jmp .Lemit
  1227                                  
  1228                                  .Lchar_bell:
  1229 0000089B 48BF-                   	mov rdi, fmt_char_bell
  1229 0000089D [C007000000000000] 
  1230 000008A5 E918040000              	jmp .Lemit
  1231                                  
  1232                                  .Lchar_backspace:
  1233 000008AA 48BF-                   	mov rdi, fmt_char_backspace
  1233 000008AC [C707000000000000] 
  1234 000008B4 E909040000              	jmp .Lemit
  1235                                  
  1236                                  .Lchar_tab:
  1237 000008B9 48BF-                   	mov rdi, fmt_char_tab
  1237 000008BB [D307000000000000] 
  1238 000008C3 E9FA030000              	jmp .Lemit
  1239                                  
  1240                                  .Lchar_newline:
  1241 000008C8 48BF-                   	mov rdi, fmt_char_newline
  1241 000008CA [D907000000000000] 
  1242 000008D2 E9EB030000              	jmp .Lemit
  1243                                  
  1244                                  .Lchar_formfeed:
  1245 000008D7 48BF-                   	mov rdi, fmt_char_formfeed
  1245 000008D9 [E307000000000000] 
  1246 000008E1 E9DC030000              	jmp .Lemit
  1247                                  
  1248                                  .Lchar_return:
  1249 000008E6 48BF-                   	mov rdi, fmt_char_return
  1249 000008E8 [EA07000000000000] 
  1250 000008F0 E9CD030000              	jmp .Lemit
  1251                                  
  1252                                  .Lchar_escape:
  1253 000008F5 48BF-                   	mov rdi, fmt_char_escape
  1253 000008F7 [F307000000000000] 
  1254 000008FF E9BE030000              	jmp .Lemit
  1255                                  
  1256                                  .Lchar_space:
  1257 00000904 48BF-                   	mov rdi, fmt_char_space
  1257 00000906 [F907000000000000] 
  1258 0000090E E9AF030000              	jmp .Lemit
  1259                                  
  1260                                  .Lclosure:
  1261 00000913 4889FE                  	mov rsi, qword rdi
  1262 00000916 48BF-                   	mov rdi, fmt_closure
  1262 00000918 [0E08000000000000] 
  1263 00000920 488B5601                	mov rdx, SOB_CLOSURE_ENV(rsi)
  1264 00000924 488B4E09                	mov rcx, SOB_CLOSURE_CODE(rsi)
  1265 00000928 E995030000              	jmp .Lemit
  1266                                  
  1267                                  .Linterned_symbol:
  1268 0000092D 488B7F01                	mov rdi, qword [rdi + 1] ; sob_string
  1269 00000931 BE01000000              	mov rsi, 1		 ; size = 1 byte
  1270 00000936 488B5701                	mov rdx, qword [rdi + 1] ; length
  1271 0000093A 488D7F09                	lea rdi, [rdi + 1 + 8]	 ; actual characters
  1272 0000093E 488B0C25[00000000]      	mov rcx, qword [stdout]	 ; FILE *
  1273                                  	ENTER
    44 00000946 C8000000            <1>  enter 0, 0
    45 0000094A 4883E4F0            <1>  and rsp, ~15
  1274 0000094E E8(00000000)            	call fwrite
  1275                                  	LEAVE
    49 00000953 C9                  <1>  leave
  1276 00000954 E97E030000              	jmp .Lend
  1277                                  
  1278                                  .Luninterned_symbol:
  1279 00000959 488B7701                        mov rsi, qword [rdi + 1] ; gensym counter
  1280 0000095D 48BF-                           mov rdi, fmt_gensym
  1280 0000095F [0908000000000000] 
  1281 00000967 E956030000                      jmp .Lemit
  1282                                  	
  1283                                  .Lpair:
  1284 0000096C 57                      	push rdi
  1285 0000096D 48BF-                   	mov rdi, fmt_lparen
  1285 0000096F [3A08000000000000] 
  1286 00000977 B800000000              	mov rax, 0
  1287                                          ENTER
    44 0000097C C8000000            <1>  enter 0, 0
    45 00000980 4883E4F0            <1>  and rsp, ~15
  1288 00000984 E8(00000000)            	call printf
  1289                                          LEAVE
    49 00000989 C9                  <1>  leave
  1290 0000098A 488B3C24                	mov rdi, qword [rsp] 	; pair
  1291 0000098E 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
  1292 00000992 E8ADFDFFFF              	call print_sexpr
  1293 00000997 5F                      	pop rdi 		; pair
  1294 00000998 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
  1295                                  .Lcdr:
  1296 0000099C 8A07                    	mov al, byte [rdi]
  1297 0000099E 3C01                    	cmp al, T_nil
  1298 000009A0 7447                    	je .Lcdr_nil
  1299 000009A2 3C21                    	cmp al, T_pair
  1300 000009A4 7462                    	je .Lcdr_pair
  1301 000009A6 57                      	push rdi
  1302 000009A7 48BF-                   	mov rdi, fmt_dotted_pair
  1302 000009A9 [3C08000000000000] 
  1303 000009B1 B800000000              	mov rax, 0
  1304                                          ENTER
    44 000009B6 C8000000            <1>  enter 0, 0
    45 000009BA 4883E4F0            <1>  and rsp, ~15
  1305 000009BE E8(00000000)            	call printf
  1306                                          LEAVE
    49 000009C3 C9                  <1>  leave
  1307 000009C4 5F                      	pop rdi
  1308 000009C5 E87AFDFFFF              	call print_sexpr
  1309 000009CA 48BF-                   	mov rdi, fmt_rparen
  1309 000009CC [4008000000000000] 
  1310 000009D4 B800000000              	mov rax, 0
  1311                                          ENTER
    44 000009D9 C8000000            <1>  enter 0, 0
    45 000009DD 4883E4F0            <1>  and rsp, ~15
  1312 000009E1 E8(00000000)            	call printf
  1313                                          LEAVE
    49 000009E6 C9                  <1>  leave
  1314 000009E7 C9                      	leave
  1315 000009E8 C3                      	ret
  1316                                  
  1317                                  .Lcdr_nil:
  1318 000009E9 48BF-                   	mov rdi, fmt_rparen
  1318 000009EB [4008000000000000] 
  1319 000009F3 B800000000              	mov rax, 0
  1320                                          ENTER
    44 000009F8 C8000000            <1>  enter 0, 0
    45 000009FC 4883E4F0            <1>  and rsp, ~15
  1321 00000A00 E8(00000000)            	call printf
  1322                                          LEAVE
    49 00000A05 C9                  <1>  leave
  1323 00000A06 C9                      	leave
  1324 00000A07 C3                      	ret
  1325                                  
  1326                                  .Lcdr_pair:
  1327 00000A08 57                      	push rdi
  1328 00000A09 48BF-                   	mov rdi, fmt_space
  1328 00000A0B [4208000000000000] 
  1329 00000A13 B800000000              	mov rax, 0
  1330                                          ENTER
    44 00000A18 C8000000            <1>  enter 0, 0
    45 00000A1C 4883E4F0            <1>  and rsp, ~15
  1331 00000A20 E8(00000000)            	call printf
  1332                                          LEAVE
    49 00000A25 C9                  <1>  leave
  1333 00000A26 488B3C24                	mov rdi, qword [rsp]
  1334 00000A2A 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
  1335 00000A2E E811FDFFFF              	call print_sexpr
  1336 00000A33 5F                      	pop rdi
  1337 00000A34 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
  1338 00000A38 E95FFFFFFF              	jmp .Lcdr
  1339                                  
  1340                                  .Lvector:
  1341 00000A3D 488B4701                	mov rax, qword [rdi + 1] ; length
  1342 00000A41 4883F800                	cmp rax, 0
  1343 00000A45 0F8484000000            	je .Lvector_empty
  1344 00000A4B 57                      	push rdi
  1345 00000A4C 48BF-                   	mov rdi, fmt_vector
  1345 00000A4E [4808000000000000] 
  1346 00000A56 B800000000              	mov rax, 0
  1347                                          ENTER
    44 00000A5B C8000000            <1>  enter 0, 0
    45 00000A5F 4883E4F0            <1>  and rsp, ~15
  1348 00000A63 E8(00000000)            	call printf
  1349                                          LEAVE
    49 00000A68 C9                  <1>  leave
  1350 00000A69 488B3C24                	mov rdi, qword [rsp]
  1351 00000A6D FF7701                  	push qword [rdi + 1]
  1352 00000A70 6A01                    	push 1
  1353 00000A72 488B7F09                	mov rdi, qword [rdi + 1 + 8] ; v[0]
  1354 00000A76 E8C9FCFFFF              	call print_sexpr
  1355                                  .Lvector_loop:
  1356                                  	; [rsp] index
  1357                                  	; [rsp + 8*1] limit
  1358                                  	; [rsp + 8*2] vector
  1359 00000A7B 488B0424                	mov rax, qword [rsp]
  1360 00000A7F 483B442408              	cmp rax, qword [rsp + 8*1]
  1361 00000A84 7436                    	je .Lvector_end
  1362 00000A86 48BF-                   	mov rdi, fmt_space
  1362 00000A88 [4208000000000000] 
  1363 00000A90 B800000000              	mov rax, 0
  1364                                          ENTER
    44 00000A95 C8000000            <1>  enter 0, 0
    45 00000A99 4883E4F0            <1>  and rsp, ~15
  1365 00000A9D E8(00000000)            	call printf
  1366                                          LEAVE
    49 00000AA2 C9                  <1>  leave
  1367 00000AA3 488B0424                	mov rax, qword [rsp]
  1368 00000AA7 488B5C2410              	mov rbx, qword [rsp + 8*2]
  1369 00000AAC 488B7CC309              	mov rdi, qword [rbx + 1 + 8 + 8 * rax] ; v[i]
  1370 00000AB1 E88EFCFFFF              	call print_sexpr
  1371 00000AB6 48FF0424                	inc qword [rsp]
  1372 00000ABA EBBF                    	jmp .Lvector_loop
  1373                                  
  1374                                  .Lvector_end:
  1375 00000ABC 4883C418                	add rsp, 8*3
  1376 00000AC0 48BF-                   	mov rdi, fmt_rparen
  1376 00000AC2 [4008000000000000] 
  1377 00000ACA E9F3010000              	jmp .Lemit	
  1378                                  
  1379                                  .Lvector_empty:
  1380 00000ACF 48BF-                   	mov rdi, fmt_empty_vector
  1380 00000AD1 [4408000000000000] 
  1381 00000AD9 E9E4010000              	jmp .Lemit
  1382                                  
  1383                                  .Lreal:
  1384 00000ADE FF7701                  	push qword [rdi + 1]
  1385 00000AE1 F20F100424              	movsd xmm0, qword [rsp]
  1386 00000AE6 4883C408                	add rsp, 8*1
  1387 00000AEA 48BF-                   	mov rdi, fmt_real
  1387 00000AEC [4B08000000000000] 
  1388 00000AF4 B801000000              	mov rax, 1
  1389                                  	ENTER
    44 00000AF9 C8000000            <1>  enter 0, 0
    45 00000AFD 4883E4F0            <1>  and rsp, ~15
  1390 00000B01 E8(00000000)            	call printf
  1391                                  	LEAVE
    49 00000B06 C9                  <1>  leave
  1392 00000B07 E9CB010000              	jmp .Lend
  1393                                  
  1394                                  .Lfraction:
  1395 00000B0C 488B7701                	mov rsi, qword [rdi + 1]
  1396 00000B10 488B5709                	mov rdx, qword [rdi + 1 + 8]
  1397 00000B14 4883FE00                	cmp rsi, 0
  1398 00000B18 7415                    	je .Lrat_zero
  1399 00000B1A 4883FA01                	cmp rdx, 1
  1400 00000B1E 741E                    	je .Lrat_int
  1401 00000B20 48BF-                   	mov rdi, fmt_fraction
  1401 00000B22 [4E08000000000000] 
  1402 00000B2A E993010000              	jmp .Lemit
  1403                                  
  1404                                  .Lrat_zero:
  1405 00000B2F 48BF-                   	mov rdi, fmt_zero
  1405 00000B31 [5608000000000000] 
  1406 00000B39 E984010000              	jmp .Lemit
  1407                                  
  1408                                  .Lrat_int:
  1409 00000B3E 48BF-                   	mov rdi, fmt_int
  1409 00000B40 [5808000000000000] 
  1410 00000B48 E975010000              	jmp .Lemit
  1411                                  
  1412                                  .Linteger:
  1413 00000B4D 488B7701                	mov rsi, qword [rdi + 1]
  1414 00000B51 48BF-                   	mov rdi, fmt_int
  1414 00000B53 [5808000000000000] 
  1415 00000B5B E962010000              	jmp .Lemit
  1416                                  
  1417                                  .Lstring:
  1418 00000B60 488D4709                	lea rax, [rdi + 1 + 8]
  1419 00000B64 50                      	push rax
  1420 00000B65 FF7701                  	push qword [rdi + 1]
  1421 00000B68 48BF-                   	mov rdi, fmt_dquote
  1421 00000B6A [A108000000000000] 
  1422 00000B72 B800000000              	mov rax, 0
  1423                                  	ENTER
    44 00000B77 C8000000            <1>  enter 0, 0
    45 00000B7B 4883E4F0            <1>  and rsp, ~15
  1424 00000B7F E8(00000000)            	call printf
  1425                                  	LEAVE
    49 00000B84 C9                  <1>  leave
  1426                                  .Lstring_loop:
  1427                                  	; qword [rsp]: limit
  1428                                  	; qword [rsp + 8*1]: char *
  1429 00000B85 48833C2400              	cmp qword [rsp], 0
  1430 00000B8A 0F84EF000000            	je .Lstring_end
  1431 00000B90 488B442408              	mov rax, qword [rsp + 8*1]
  1432 00000B95 8A00                    	mov al, byte [rax]
  1433 00000B97 4825FF000000            	and rax, 255
  1434 00000B9D 3C07                    	cmp al, 7
  1435 00000B9F 745D                            je .Lstring_char_7
  1436 00000BA1 3C08                            cmp al, 8
  1437 00000BA3 7465                            je .Lstring_char_8
  1438 00000BA5 3C09                            cmp al, 9
  1439 00000BA7 746D                            je .Lstring_char_9
  1440 00000BA9 3C0A                            cmp al, 10
  1441 00000BAB 7475                            je .Lstring_char_10
  1442 00000BAD 3C0B                            cmp al, 11
  1443 00000BAF 747D                            je .Lstring_char_11
  1444 00000BB1 3C0C                            cmp al, 12
  1445 00000BB3 0F8481000000                    je .Lstring_char_12
  1446 00000BB9 3C0D                            cmp al, 13
  1447 00000BBB 0F8485000000                    je .Lstring_char_13
  1448 00000BC1 3C22                            cmp al, 34
  1449 00000BC3 0F8489000000                    je .Lstring_char_34
  1450 00000BC9 3C5C                            cmp al, 92              ;         je .Lstring_char_92
  1452 00000BCB 3C20                            cmp al, ' '
  1453 00000BCD 0F8C9A000000                    jl .Lstring_char_hex
  1454 00000BD3 48BF-                           mov rdi, fmt_string_char
  1454 00000BD5 [A308000000000000] 
  1455 00000BDD 4889C6                          mov rsi, rax
  1456                                  .Lstring_char_emit:
  1457 00000BE0 B800000000                      mov rax, 0
  1458                                          ENTER
    44 00000BE5 C8000000            <1>  enter 0, 0
    45 00000BE9 4883E4F0            <1>  and rsp, ~15
  1459 00000BED E8(00000000)                    call printf
  1460                                          LEAVE
    49 00000BF2 C9                  <1>  leave
  1461 00000BF3 48FF0C24                        dec qword [rsp]
  1462 00000BF7 48FF442408                      inc qword [rsp + 8*1]
  1463 00000BFC EB87                            jmp .Lstring_loop
  1464                                  
  1465                                  .Lstring_char_7:
  1466 00000BFE 48BF-                           mov rdi, fmt_string_char_7
  1466 00000C00 [A608000000000000] 
  1467 00000C08 EBD6                            jmp .Lstring_char_emit
  1468                                  
  1469                                  .Lstring_char_8:
  1470 00000C0A 48BF-                           mov rdi, fmt_string_char_8
  1470 00000C0C [A908000000000000] 
  1471 00000C14 EBCA                            jmp .Lstring_char_emit
  1472                                          
  1473                                  .Lstring_char_9:
  1474 00000C16 48BF-                           mov rdi, fmt_string_char_9
  1474 00000C18 [AC08000000000000] 
  1475 00000C20 EBBE                            jmp .Lstring_char_emit
  1476                                  
  1477                                  .Lstring_char_10:
  1478 00000C22 48BF-                           mov rdi, fmt_string_char_10
  1478 00000C24 [AF08000000000000] 
  1479 00000C2C EBB2                            jmp .Lstring_char_emit
  1480                                  
  1481                                  .Lstring_char_11:
  1482 00000C2E 48BF-                           mov rdi, fmt_string_char_11
  1482 00000C30 [B208000000000000] 
  1483 00000C38 EBA6                            jmp .Lstring_char_emit
  1484                                  
  1485                                  .Lstring_char_12:
  1486 00000C3A 48BF-                           mov rdi, fmt_string_char_12
  1486 00000C3C [B508000000000000] 
  1487 00000C44 EB9A                            jmp .Lstring_char_emit
  1488                                  
  1489                                  .Lstring_char_13:
  1490 00000C46 48BF-                           mov rdi, fmt_string_char_13
  1490 00000C48 [B808000000000000] 
  1491 00000C50 EB8E                            jmp .Lstring_char_emit
  1492                                  
  1493                                  .Lstring_char_34:
  1494 00000C52 48BF-                           mov rdi, fmt_string_char_34
  1494 00000C54 [BB08000000000000] 
  1495 00000C5C EB82                            jmp .Lstring_char_emit
  1496                                  
  1497                                  .Lstring_char_92:
  1498 00000C5E 48BF-                           mov rdi, fmt_string_char_92
  1498 00000C60 [BE08000000000000] 
  1499 00000C68 E973FFFFFF                      jmp .Lstring_char_emit
  1500                                  
  1501                                  .Lstring_char_hex:
  1502 00000C6D 48BF-                           mov rdi, fmt_string_char_hex
  1502 00000C6F [C108000000000000] 
  1503 00000C77 4889C6                          mov rsi, rax
  1504 00000C7A E961FFFFFF                      jmp .Lstring_char_emit        
  1505                                  
  1506                                  .Lstring_end:
  1507 00000C7F 4883C410                	add rsp, 8 * 2
  1508 00000C83 48BF-                   	mov rdi, fmt_dquote
  1508 00000C85 [A108000000000000] 
  1509 00000C8D EB33                    	jmp .Lemit
  1510                                  
  1511                                  .Lunknown_sexpr_type:
  1512 00000C8F 48BE-                   	mov rsi, fmt_unknown_scheme_object_error
  1512 00000C91 [5C08000000000000] 
  1513 00000C99 4825FF000000            	and rax, 255
  1514 00000C9F 4889C2                  	mov rdx, rax
  1515 00000CA2 4889F9                  	mov rcx, rdi
  1516 00000CA5 488B3C25[00000000]      	mov rdi, qword [stderr]
  1517 00000CAD B800000000              	mov rax, 0
  1518                                          ENTER
    44 00000CB2 C8000000            <1>  enter 0, 0
    45 00000CB6 4883E4F0            <1>  and rsp, ~15
  1519 00000CBA E8(00000000)            	call fprintf
  1520                                          LEAVE
    49 00000CBF C9                  <1>  leave
  1521 00000CC0 C9                              leave
  1522 00000CC1 C3                              ret
  1523                                  
  1524                                  .Lemit:
  1525 00000CC2 B800000000              	mov rax, 0
  1526                                          ENTER
    44 00000CC7 C8000000            <1>  enter 0, 0
    45 00000CCB 4883E4F0            <1>  and rsp, ~15
  1527 00000CCF E8(00000000)            	call printf
  1528                                          LEAVE
    49 00000CD4 C9                  <1>  leave
  1529 00000CD5 EB00                    	jmp .Lend
  1530                                  
  1531                                  .Lend:
  1532                                  	LEAVE
    49 00000CD7 C9                  <1>  leave
  1533 00000CD8 C3                      	ret
  1534                                  
  1535                                  ;;; rdi: address of free variable
  1536                                  ;;; rsi: address of code-pointer
  1537                                  bind_primitive:
  1538 00000CD9 C8000000                        enter 0, 0
  1539 00000CDD 57                              push rdi
  1540 00000CDE BF11000000                      mov rdi, (1 + 8 + 8)
  1541 00000CE3 E8DBF7FFFF                      call malloc
  1542 00000CE8 5F                              pop rdi
  1543 00000CE9 C60004                          mov byte [rax], T_closure
  1544 00000CEC 48C7400100000000                mov SOB_CLOSURE_ENV(rax), 0 ; dummy, lexical environment
  1545 00000CF4 48897009                        mov SOB_CLOSURE_CODE(rax), rsi ; code pointer
  1546 00000CF8 488907                          mov qword [rdi], rax
  1547 00000CFB 48B8-                           mov rax, sob_void
  1547 00000CFD [0000000000000000] 
  1548 00000D05 C9                              leave
  1549 00000D06 C3                              ret
  1550                                  
  1551                                  L_code_ptr_ash:
  1552 00000D07 C8000000                        enter 0, 0
  1553 00000D0B 48837D1802                      cmp COUNT, 2
  1554 00000D10 0F859F140000                    jne L_error_arg_count_2
  1555 00000D16 488B7D20                        mov rdi, PARAM(0)
  1556                                          assert_integer(rdi)
    53 00000D1A 803F11              <1>  cmp byte [%1], %2
    54 00000D1D 0F8531150000        <1>  jne L_error_incorrect_type
  1557 00000D23 488B4D28                        mov rcx, PARAM(1)
  1558                                          assert_integer(rcx)
    53 00000D27 803911              <1>  cmp byte [%1], %2
    54 00000D2A 0F8524150000        <1>  jne L_error_incorrect_type
  1559 00000D30 488B7F01                        mov rdi, qword [rdi + 1]
  1560 00000D34 488B4901                        mov rcx, qword [rcx + 1]
  1561 00000D38 4883F900                        cmp rcx, 0
  1562 00000D3C 7C0F                            jl .L_negative
  1563                                  .L_loop_positive:
  1564 00000D3E 4883F900                        cmp rcx, 0
  1565 00000D42 741B                            je .L_exit
  1566 00000D44 48D3E7                          sal rdi, cl
  1567 00000D47 48C1E908                        shr rcx, 8
  1568 00000D4B EBF1                            jmp .L_loop_positive
  1569                                  .L_negative:
  1570 00000D4D 48F7D9                          neg rcx
  1571                                  .L_loop_negative:
  1572 00000D50 4883F900                        cmp rcx, 0
  1573 00000D54 7409                            je .L_exit
  1574 00000D56 48D3FF                          sar rdi, cl
  1575 00000D59 48C1E908                        shr rcx, 8
  1576 00000D5D EBF1                            jmp .L_loop_negative
  1577                                  .L_exit:
  1578 00000D5F E86B130000                      call make_integer
  1579 00000D64 C9                              leave
  1580 00000D65 C22000                          ret AND_KILL_FRAME(2)
  1581                                  
  1582                                  L_code_ptr_logand:
  1583 00000D68 C8000000                        enter 0, 0
  1584 00000D6C 48837D1802                      cmp COUNT, 2
  1585 00000D71 0F853E140000                    jne L_error_arg_count_2
  1586 00000D77 4C8B4520                        mov r8, PARAM(0)
  1587                                          assert_integer(r8)
    53 00000D7B 41803811            <1>  cmp byte [%1], %2
    54 00000D7F 0F85CF140000        <1>  jne L_error_incorrect_type
  1588 00000D85 4C8B4D28                        mov r9, PARAM(1)
  1589                                          assert_integer(r9)
    53 00000D89 41803911            <1>  cmp byte [%1], %2
    54 00000D8D 0F85C1140000        <1>  jne L_error_incorrect_type
  1590 00000D93 498B7801                        mov rdi, qword [r8 + 1]
  1591 00000D97 49237901                        and rdi, qword [r9 + 1]
  1592 00000D9B E82F130000                      call make_integer
  1593 00000DA0 C9                              leave
  1594 00000DA1 C22000                          ret AND_KILL_FRAME(2)
  1595                                  
  1596                                  L_code_ptr_logor:
  1597 00000DA4 C8000000                        enter 0, 0
  1598 00000DA8 48837D1802                      cmp COUNT, 2
  1599 00000DAD 0F8502140000                    jne L_error_arg_count_2
  1600 00000DB3 4C8B4520                        mov r8, PARAM(0)
  1601                                          assert_integer(r8)
    53 00000DB7 41803811            <1>  cmp byte [%1], %2
    54 00000DBB 0F8593140000        <1>  jne L_error_incorrect_type
  1602 00000DC1 4C8B4D28                        mov r9, PARAM(1)
  1603                                          assert_integer(r9)
    53 00000DC5 41803911            <1>  cmp byte [%1], %2
    54 00000DC9 0F8585140000        <1>  jne L_error_incorrect_type
  1604 00000DCF 498B7801                        mov rdi, qword [r8 + 1]
  1605 00000DD3 490B7901                        or rdi, qword [r9 + 1]
  1606 00000DD7 E8F3120000                      call make_integer
  1607 00000DDC C9                              leave
  1608 00000DDD C22000                          ret AND_KILL_FRAME(2)
  1609                                  
  1610                                  L_code_ptr_logxor:
  1611 00000DE0 C8000000                        enter 0, 0
  1612 00000DE4 48837D1802                      cmp COUNT, 2
  1613 00000DE9 0F85C6130000                    jne L_error_arg_count_2
  1614 00000DEF 4C8B4520                        mov r8, PARAM(0)
  1615                                          assert_integer(r8)
    53 00000DF3 41803811            <1>  cmp byte [%1], %2
    54 00000DF7 0F8557140000        <1>  jne L_error_incorrect_type
  1616 00000DFD 4C8B4D28                        mov r9, PARAM(1)
  1617                                          assert_integer(r9)
    53 00000E01 41803911            <1>  cmp byte [%1], %2
    54 00000E05 0F8549140000        <1>  jne L_error_incorrect_type
  1618 00000E0B 498B7801                        mov rdi, qword [r8 + 1]
  1619 00000E0F 49337901                        xor rdi, qword [r9 + 1]
  1620 00000E13 E8B7120000                      call make_integer
  1621                                          LEAVE
    49 00000E18 C9                  <1>  leave
  1622 00000E19 C22000                          ret AND_KILL_FRAME(2)
  1623                                  
  1624                                  L_code_ptr_lognot:
  1625 00000E1C C8000000                        enter 0, 0
  1626 00000E20 48837D1801                      cmp COUNT, 1
  1627 00000E25 0F8555130000                    jne L_error_arg_count_1
  1628 00000E2B 4C8B4520                        mov r8, PARAM(0)
  1629                                          assert_integer(r8)
    53 00000E2F 41803811            <1>  cmp byte [%1], %2
    54 00000E33 0F851B140000        <1>  jne L_error_incorrect_type
  1630 00000E39 498B7801                        mov rdi, qword [r8 + 1]
  1631 00000E3D 48F7D7                          not rdi
  1632 00000E40 E88A120000                      call make_integer
  1633 00000E45 C9                              leave
  1634 00000E46 C21800                          ret AND_KILL_FRAME(1)
  1635                                  
  1636                                  L_code_ptr_bin_apply:
  1637 00000E49 48837C241002                    cmp qword [rsp + 8 * 2], 2
  1638 00000E4F 0F8560130000                    jne L_error_arg_count_2
  1639 00000E55 4C8B642418                      mov r12, qword [rsp + 8 * 3]
  1640                                          assert_closure(r12)
    53 00000E5A 41803C2404          <1>  cmp byte [%1], %2
    54 00000E5F 0F85EF130000        <1>  jne L_error_incorrect_type
  1641 00000E65 4C8D542420                      lea r10, [rsp + 8 * 4]
  1642 00000E6A 4D8B1A                          mov r11, qword [r10]
  1643 00000E6D 4C8B0C24                        mov r9, qword [rsp]
  1644 00000E71 B900000000                      mov rcx, 0
  1645 00000E76 4C89DE                          mov rsi, r11
  1646                                  .L0:
  1647 00000E79 4881FE[01000000]                cmp rsi, sob_nil
  1648 00000E80 7412                            je .L0_out
  1649                                          assert_pair(rsi)
    53 00000E82 803E21              <1>  cmp byte [%1], %2
    54 00000E85 0F85C9130000        <1>  jne L_error_incorrect_type
  1650 00000E8B 48FFC1                          inc rcx
  1651 00000E8E 488B7609                        mov rsi, SOB_PAIR_CDR(rsi)
  1652 00000E92 EBE5                            jmp .L0
  1653                                  .L0_out:
  1654 00000E94 488D1CCDF0FFFFFF                lea rbx, [8 * (rcx - 2)]
  1655 00000E9C 4829DC                          sub rsp, rbx
  1656 00000E9F 4889E7                          mov rdi, rsp
  1657 00000EA2 FC                              cld
  1658                                          ; place ret addr
  1659 00000EA3 4C89C8                          mov rax, r9
  1660 00000EA6 48AB                            stosq
  1661                                          ; place env_f
  1662 00000EA8 498B442401                      mov rax, SOB_CLOSURE_ENV(r12)
  1663 00000EAD 48AB                            stosq
  1664                                          ; place COUNT = rcx
  1665 00000EAF 4889C8                          mov rax, rcx
  1666 00000EB2 48AB                            stosq
  1667                                  .L1:
  1668 00000EB4 4883F900                        cmp rcx, 0
  1669 00000EB8 740F                            je .L1_out
  1670 00000EBA 498B4301                        mov rax, SOB_PAIR_CAR(r11)
  1671 00000EBE 48AB                            stosq
  1672 00000EC0 4D8B5B09                        mov r11, SOB_PAIR_CDR(r11)
  1673 00000EC4 48FFC9                          dec rcx
  1674 00000EC7 EBEB                            jmp .L1
  1675                                  .L1_out:
  1676 00000EC9 4883EF08                        sub rdi, 8*1
  1677 00000ECD 4939FA                          cmp r10, rdi
  1678 00000ED0 7505                            jne .L_error_apply_stack_corrupted
  1679 00000ED2 41FF642409                      jmp SOB_CLOSURE_CODE(r12)
  1680                                  .L_error_apply_stack_corrupted:
  1681 00000ED7 CC                              int3
  1682                                  
  1683                                  
  1684                                  L_code_ptr_is_null:
  1685 00000ED8 C8000000                        enter 0, 0
  1686 00000EDC 48837D1801                      cmp COUNT, 1
  1687 00000EE1 0F8599120000                    jne L_error_arg_count_1
  1688 00000EE7 488B4520                        mov rax, PARAM(0)
  1689 00000EEB 803801                          cmp byte [rax], T_nil
  1690 00000EEE 750C                            jne .L_false
  1691 00000EF0 48B8-                           mov rax, sob_boolean_true
  1691 00000EF2 [0300000000000000] 
  1692 00000EFA EB0A                            jmp .L_end
  1693                                  .L_false:
  1694 00000EFC 48B8-                           mov rax, sob_boolean_false
  1694 00000EFE [0200000000000000] 
  1695                                  .L_end:
  1696 00000F06 C9                              leave
  1697 00000F07 C21800                          ret AND_KILL_FRAME(1)
  1698                                  
  1699                                  L_code_ptr_is_pair:
  1700 00000F0A C8000000                        enter 0, 0
  1701 00000F0E 48837D1801                      cmp COUNT, 1
  1702 00000F13 0F8567120000                    jne L_error_arg_count_1
  1703 00000F19 488B4520                        mov rax, PARAM(0)
  1704 00000F1D 803821                          cmp byte [rax], T_pair
  1705 00000F20 750C                            jne .L_false
  1706 00000F22 48B8-                           mov rax, sob_boolean_true
  1706 00000F24 [0300000000000000] 
  1707 00000F2C EB0A                            jmp .L_end
  1708                                  .L_false:
  1709 00000F2E 48B8-                           mov rax, sob_boolean_false
  1709 00000F30 [0200000000000000] 
  1710                                  .L_end:
  1711 00000F38 C9                              leave
  1712 00000F39 C21800                          ret AND_KILL_FRAME(1)
  1713                                          
  1714                                  L_code_ptr_is_void:
  1715 00000F3C C8000000                        enter 0, 0
  1716 00000F40 48837D1801                      cmp COUNT, 1
  1717 00000F45 0F8535120000                    jne L_error_arg_count_1
  1718 00000F4B 488B4520                        mov rax, PARAM(0)
  1719 00000F4F 803800                          cmp byte [rax], T_void
  1720 00000F52 750C                            jne .L_false
  1721 00000F54 48B8-                           mov rax, sob_boolean_true
  1721 00000F56 [0300000000000000] 
  1722 00000F5E EB0A                            jmp .L_end
  1723                                  .L_false:
  1724 00000F60 48B8-                           mov rax, sob_boolean_false
  1724 00000F62 [0200000000000000] 
  1725                                  .L_end:
  1726 00000F6A C9                              leave
  1727 00000F6B C21800                          ret AND_KILL_FRAME(1)
  1728                                  
  1729                                  L_code_ptr_is_char:
  1730 00000F6E C8000000                        enter 0, 0
  1731 00000F72 48837D1801                      cmp COUNT, 1
  1732 00000F77 0F8503120000                    jne L_error_arg_count_1
  1733 00000F7D 488B4520                        mov rax, PARAM(0)
  1734 00000F81 803802                          cmp byte [rax], T_char
  1735 00000F84 750C                            jne .L_false
  1736 00000F86 48B8-                           mov rax, sob_boolean_true
  1736 00000F88 [0300000000000000] 
  1737 00000F90 EB0A                            jmp .L_end
  1738                                  .L_false:
  1739 00000F92 48B8-                           mov rax, sob_boolean_false
  1739 00000F94 [0200000000000000] 
  1740                                  .L_end:
  1741 00000F9C C9                              leave
  1742 00000F9D C21800                          ret AND_KILL_FRAME(1)
  1743                                  
  1744                                  L_code_ptr_is_string:
  1745 00000FA0 C8000000                        enter 0, 0
  1746 00000FA4 48837D1801                      cmp COUNT, 1
  1747 00000FA9 0F85D1110000                    jne L_error_arg_count_1
  1748 00000FAF 488B4520                        mov rax, PARAM(0)
  1749 00000FB3 803803                          cmp byte [rax], T_string
  1750 00000FB6 750C                            jne .L_false
  1751 00000FB8 48B8-                           mov rax, sob_boolean_true
  1751 00000FBA [0300000000000000] 
  1752 00000FC2 EB0A                            jmp .L_end
  1753                                  .L_false:
  1754 00000FC4 48B8-                           mov rax, sob_boolean_false
  1754 00000FC6 [0200000000000000] 
  1755                                  .L_end:
  1756 00000FCE C9                              leave
  1757 00000FCF C21800                          ret AND_KILL_FRAME(1)
  1758                                  
  1759                                  L_code_ptr_is_symbol:
  1760 00000FD2 C8000000                        enter 0, 0
  1761 00000FD6 48837D1801                      cmp COUNT, 1
  1762 00000FDB 0F859F110000                    jne L_error_arg_count_1
  1763 00000FE1 4C8B4520                        mov r8, PARAM(0)
  1764 00000FE5 41802040                        and byte [r8], T_symbol
  1765 00000FE9 740C                            jz .L_false
  1766 00000FEB 48B8-                           mov rax, sob_boolean_true
  1766 00000FED [0300000000000000] 
  1767 00000FF5 EB0A                            jmp .L_exit
  1768                                  .L_false:
  1769 00000FF7 48B8-                           mov rax, sob_boolean_false
  1769 00000FF9 [0200000000000000] 
  1770                                  .L_exit:
  1771 00001001 C9                              leave
  1772 00001002 C21800                          ret AND_KILL_FRAME(1)
  1773                                  
  1774                                  L_code_ptr_is_uninterned_symbol:
  1775 00001005 C8000000                        enter 0, 0
  1776 00001009 48837D1801                      cmp COUNT, 1
  1777 0000100E 0F856C110000                    jne L_error_arg_count_1
  1778 00001014 4C8B4520                        mov r8, PARAM(0)
  1779 00001018 41803842                        cmp byte [r8], T_uninterned_symbol
  1780 0000101C 750C                            jne .L_false
  1781 0000101E 48B8-                           mov rax, sob_boolean_true
  1781 00001020 [0300000000000000] 
  1782 00001028 EB0A                            jmp .L_exit
  1783                                  .L_false:
  1784 0000102A 48B8-                           mov rax, sob_boolean_false
  1784 0000102C [0200000000000000] 
  1785                                  .L_exit:
  1786 00001034 C9                              leave
  1787 00001035 C21800                          ret AND_KILL_FRAME(1)
  1788                                  
  1789                                  L_code_ptr_is_interned_symbol:
  1790 00001038 C8000000                        enter 0, 0
  1791 0000103C 48837D1801                      cmp COUNT, 1
  1792 00001041 0F8539110000                    jne L_error_arg_count_1
  1793 00001047 488B4520                        mov rax, PARAM(0)
  1794 0000104B 803841                          cmp byte [rax], T_interned_symbol
  1795 0000104E 750C                            jne .L_false
  1796 00001050 48B8-                           mov rax, sob_boolean_true
  1796 00001052 [0300000000000000] 
  1797 0000105A EB0A                            jmp .L_end
  1798                                  .L_false:
  1799 0000105C 48B8-                           mov rax, sob_boolean_false
  1799 0000105E [0200000000000000] 
  1800                                  .L_end:
  1801 00001066 C9                              leave
  1802 00001067 C21800                          ret AND_KILL_FRAME(1)
  1803                                  
  1804                                  L_code_ptr_gensym:
  1805 0000106A C8000000                        enter 0, 0
  1806 0000106E 48837D1800                      cmp COUNT, 0
  1807 00001073 0F85D2100000                    jne L_error_arg_count_0
  1808 00001079 48FF0425[C7080000]              inc qword [gensym_count]
  1809 00001081 BF09000000                      mov rdi, (1 + 8)
  1810 00001086 E838F4FFFF                      call malloc
  1811 0000108B C60042                          mov byte [rax], T_uninterned_symbol
  1812 0000108E 488B0C25[C7080000]              mov rcx, qword [gensym_count]
  1813 00001096 48894801                        mov qword [rax + 1], rcx
  1814 0000109A C9                              leave
  1815 0000109B C21000                          ret AND_KILL_FRAME(0)
  1816                                  
  1817                                  L_code_ptr_is_vector:
  1818 0000109E C8000000                        enter 0, 0
  1819 000010A2 48837D1801                      cmp COUNT, 1
  1820 000010A7 0F85D3100000                    jne L_error_arg_count_1
  1821 000010AD 488B4520                        mov rax, PARAM(0)
  1822 000010B1 803822                          cmp byte [rax], T_vector
  1823 000010B4 750C                            jne .L_false
  1824 000010B6 48B8-                           mov rax, sob_boolean_true
  1824 000010B8 [0300000000000000] 
  1825 000010C0 EB0A                            jmp .L_end
  1826                                  .L_false:
  1827 000010C2 48B8-                           mov rax, sob_boolean_false
  1827 000010C4 [0200000000000000] 
  1828                                  .L_end:
  1829 000010CC C9                              leave
  1830 000010CD C21800                          ret AND_KILL_FRAME(1)
  1831                                  
  1832                                  L_code_ptr_is_closure:
  1833 000010D0 C8000000                        enter 0, 0
  1834 000010D4 48837D1801                      cmp COUNT, 1
  1835 000010D9 0F85A1100000                    jne L_error_arg_count_1
  1836 000010DF 488B4520                        mov rax, PARAM(0)
  1837 000010E3 803804                          cmp byte [rax], T_closure
  1838 000010E6 750C                            jne .L_false
  1839 000010E8 48B8-                           mov rax, sob_boolean_true
  1839 000010EA [0300000000000000] 
  1840 000010F2 EB0A                            jmp .L_end
  1841                                  .L_false:
  1842 000010F4 48B8-                           mov rax, sob_boolean_false
  1842 000010F6 [0200000000000000] 
  1843                                  .L_end:
  1844 000010FE C9                              leave
  1845 000010FF C21800                          ret AND_KILL_FRAME(1)
  1846                                  
  1847                                  L_code_ptr_is_real:
  1848 00001102 C8000000                        enter 0, 0
  1849 00001106 48837D1801                      cmp COUNT, 1
  1850 0000110B 0F856F100000                    jne L_error_arg_count_1
  1851 00001111 488B4520                        mov rax, PARAM(0)
  1852 00001115 803813                          cmp byte [rax], T_real
  1853 00001118 750C                            jne .L_false
  1854 0000111A 48B8-                           mov rax, sob_boolean_true
  1854 0000111C [0300000000000000] 
  1855 00001124 EB0A                            jmp .L_end
  1856                                  .L_false:
  1857 00001126 48B8-                           mov rax, sob_boolean_false
  1857 00001128 [0200000000000000] 
  1858                                  .L_end:
  1859 00001130 C9                              leave
  1860 00001131 C21800                          ret AND_KILL_FRAME(1)
  1861                                  
  1862                                  L_code_ptr_is_fraction:
  1863 00001134 C8000000                        enter 0, 0
  1864 00001138 48837D1801                      cmp COUNT, 1
  1865 0000113D 0F853D100000                    jne L_error_arg_count_1
  1866 00001143 488B4520                        mov rax, PARAM(0)
  1867 00001147 803812                          cmp byte [rax], T_fraction
  1868 0000114A 750C                            jne .L_false
  1869 0000114C 48B8-                           mov rax, sob_boolean_true
  1869 0000114E [0300000000000000] 
  1870 00001156 EB0A                            jmp .L_end
  1871                                  .L_false:
  1872 00001158 48B8-                           mov rax, sob_boolean_false
  1872 0000115A [0200000000000000] 
  1873                                  .L_end:
  1874 00001162 C9                              leave
  1875 00001163 C21800                          ret AND_KILL_FRAME(1)
  1876                                  
  1877                                  L_code_ptr_is_boolean:
  1878 00001166 C8000000                        enter 0, 0
  1879 0000116A 48837D1801                      cmp COUNT, 1
  1880 0000116F 0F850B100000                    jne L_error_arg_count_1
  1881 00001175 488B4520                        mov rax, PARAM(0)
  1882 00001179 8A18                            mov bl, byte [rax]
  1883 0000117B 80E308                          and bl, T_boolean
  1884 0000117E 740C                            je .L_false
  1885 00001180 48B8-                           mov rax, sob_boolean_true
  1885 00001182 [0300000000000000] 
  1886 0000118A EB0A                            jmp .L_end
  1887                                  .L_false:
  1888 0000118C 48B8-                           mov rax, sob_boolean_false
  1888 0000118E [0200000000000000] 
  1889                                  .L_end:
  1890 00001196 C9                              leave
  1891 00001197 C21800                          ret AND_KILL_FRAME(1)
  1892                                          
  1893                                  L_code_ptr_is_boolean_false:
  1894 0000119A C8000000                        enter 0, 0
  1895 0000119E 48837D1801                      cmp COUNT, 1
  1896 000011A3 0F85D70F0000                    jne L_error_arg_count_1
  1897 000011A9 488B4520                        mov rax, PARAM(0)
  1898 000011AD 8A18                            mov bl, byte [rax]
  1899 000011AF 80FB09                          cmp bl, T_boolean_false
  1900 000011B2 750C                            jne .L_false
  1901 000011B4 48B8-                           mov rax, sob_boolean_true
  1901 000011B6 [0300000000000000] 
  1902 000011BE EB0A                            jmp .L_end
  1903                                  .L_false:
  1904 000011C0 48B8-                           mov rax, sob_boolean_false
  1904 000011C2 [0200000000000000] 
  1905                                  .L_end:
  1906 000011CA C9                              leave
  1907 000011CB C21800                          ret AND_KILL_FRAME(1)
  1908                                  
  1909                                  L_code_ptr_is_boolean_true:
  1910 000011CE C8000000                        enter 0, 0
  1911 000011D2 48837D1801                      cmp COUNT, 1
  1912 000011D7 0F85A30F0000                    jne L_error_arg_count_1
  1913 000011DD 488B4520                        mov rax, PARAM(0)
  1914 000011E1 8A18                            mov bl, byte [rax]
  1915 000011E3 80FB0A                          cmp bl, T_boolean_true
  1916 000011E6 750C                            jne .L_false
  1917 000011E8 48B8-                           mov rax, sob_boolean_true
  1917 000011EA [0300000000000000] 
  1918 000011F2 EB0A                            jmp .L_end
  1919                                  .L_false:
  1920 000011F4 48B8-                           mov rax, sob_boolean_false
  1920 000011F6 [0200000000000000] 
  1921                                  .L_end:
  1922 000011FE C9                              leave
  1923 000011FF C21800                          ret AND_KILL_FRAME(1)
  1924                                  
  1925                                  L_code_ptr_is_number:
  1926 00001202 C8000000                        enter 0, 0
  1927 00001206 48837D1801                      cmp COUNT, 1
  1928 0000120B 0F856F0F0000                    jne L_error_arg_count_1
  1929 00001211 488B4520                        mov rax, PARAM(0)
  1930 00001215 8A18                            mov bl, byte [rax]
  1931 00001217 80E310                          and bl, T_number
  1932 0000121A 740C                            jz .L_false
  1933 0000121C 48B8-                           mov rax, sob_boolean_true
  1933 0000121E [0300000000000000] 
  1934 00001226 EB0A                            jmp .L_end
  1935                                  .L_false:
  1936 00001228 48B8-                           mov rax, sob_boolean_false
  1936 0000122A [0200000000000000] 
  1937                                  .L_end:
  1938 00001232 C9                              leave
  1939 00001233 C21800                          ret AND_KILL_FRAME(1)
  1940                                          
  1941                                  L_code_ptr_is_collection:
  1942 00001236 C8000000                        enter 0, 0
  1943 0000123A 48837D1801                      cmp COUNT, 1
  1944 0000123F 0F853B0F0000                    jne L_error_arg_count_1
  1945 00001245 488B4520                        mov rax, PARAM(0)
  1946 00001249 8A18                            mov bl, byte [rax]
  1947 0000124B 80E320                          and bl, T_collection
  1948 0000124E 740C                            je .L_false
  1949 00001250 48B8-                           mov rax, sob_boolean_true
  1949 00001252 [0300000000000000] 
  1950 0000125A EB0A                            jmp .L_end
  1951                                  .L_false:
  1952 0000125C 48B8-                           mov rax, sob_boolean_false
  1952 0000125E [0200000000000000] 
  1953                                  .L_end:
  1954 00001266 C9                              leave
  1955 00001267 C21800                          ret AND_KILL_FRAME(1)
  1956                                  
  1957                                  L_code_ptr_cons:
  1958 0000126A C8000000                        enter 0, 0
  1959 0000126E 48837D1802                      cmp COUNT, 2
  1960 00001273 0F853C0F0000                    jne L_error_arg_count_2
  1961 00001279 BF11000000                      mov rdi, (1 + 8 + 8)
  1962 0000127E E840F2FFFF                      call malloc
  1963 00001283 C60021                          mov byte [rax], T_pair
  1964 00001286 488B5D20                        mov rbx, PARAM(0)
  1965 0000128A 48895801                        mov SOB_PAIR_CAR(rax), rbx
  1966 0000128E 488B5D28                        mov rbx, PARAM(1)
  1967 00001292 48895809                        mov SOB_PAIR_CDR(rax), rbx
  1968 00001296 C9                              leave
  1969 00001297 C22000                          ret AND_KILL_FRAME(2)
  1970                                  
  1971                                  L_code_ptr_display_sexpr:
  1972 0000129A C8000000                        enter 0, 0
  1973 0000129E 48837D1801                      cmp COUNT, 1
  1974 000012A3 0F85D70E0000                    jne L_error_arg_count_1
  1975 000012A9 488B7D20                        mov rdi, PARAM(0)
  1976 000012AD E892F4FFFF                      call print_sexpr
  1977 000012B2 48B8-                           mov rax, sob_void
  1977 000012B4 [0000000000000000] 
  1978 000012BC C9                              leave
  1979 000012BD C21800                          ret AND_KILL_FRAME(1)
  1980                                  
  1981                                  L_code_ptr_write_char:
  1982 000012C0 C8000000                        enter 0, 0
  1983 000012C4 48837D1801                      cmp COUNT, 1
  1984 000012C9 0F85B10E0000                    jne L_error_arg_count_1
  1985 000012CF 488B4520                        mov rax, PARAM(0)
  1986                                          assert_char(rax)
    53 000012D3 803802              <1>  cmp byte [%1], %2
    54 000012D6 0F85780F0000        <1>  jne L_error_incorrect_type
  1987 000012DC 8A4001                          mov al, SOB_CHAR_VALUE(rax)
  1988 000012DF 4825FF000000                    and rax, 255
  1989 000012E5 48BF-                           mov rdi, fmt_char
  1989 000012E7 [CF08000000000000] 
  1990 000012EF 4889C6                          mov rsi, rax
  1991 000012F2 B800000000                      mov rax, 0
  1992                                          ENTER
    44 000012F7 C8000000            <1>  enter 0, 0
    45 000012FB 4883E4F0            <1>  and rsp, ~15
  1993 000012FF E8(00000000)                    call printf
  1994                                          LEAVE
    49 00001304 C9                  <1>  leave
  1995 00001305 48B8-                           mov rax, sob_void
  1995 00001307 [0000000000000000] 
  1996 0000130F C9                              leave
  1997 00001310 C21800                          ret AND_KILL_FRAME(1)
  1998                                  
  1999                                  L_code_ptr_car:
  2000 00001313 C8000000                        enter 0, 0
  2001 00001317 48837D1801                      cmp COUNT, 1
  2002 0000131C 0F855E0E0000                    jne L_error_arg_count_1
  2003 00001322 488B4520                        mov rax, PARAM(0)
  2004                                          assert_pair(rax)
    53 00001326 803821              <1>  cmp byte [%1], %2
    54 00001329 0F85250F0000        <1>  jne L_error_incorrect_type
  2005 0000132F 488B4001                        mov rax, SOB_PAIR_CAR(rax)
  2006 00001333 C9                              leave
  2007 00001334 C21800                          ret AND_KILL_FRAME(1)
  2008                                          
  2009                                  L_code_ptr_cdr:
  2010 00001337 C8000000                        enter 0, 0
  2011 0000133B 48837D1801                      cmp COUNT, 1
  2012 00001340 0F853A0E0000                    jne L_error_arg_count_1
  2013 00001346 488B4520                        mov rax, PARAM(0)
  2014                                          assert_pair(rax)
    53 0000134A 803821              <1>  cmp byte [%1], %2
    54 0000134D 0F85010F0000        <1>  jne L_error_incorrect_type
  2015 00001353 488B4009                        mov rax, SOB_PAIR_CDR(rax)
  2016 00001357 C9                              leave
  2017 00001358 C21800                          ret AND_KILL_FRAME(1)
  2018                                          
  2019                                  L_code_ptr_string_length:
  2020 0000135B C8000000                        enter 0, 0
  2021 0000135F 48837D1801                      cmp COUNT, 1
  2022 00001364 0F85160E0000                    jne L_error_arg_count_1
  2023 0000136A 488B4520                        mov rax, PARAM(0)
  2024                                          assert_string(rax)
    53 0000136E 803803              <1>  cmp byte [%1], %2
    54 00001371 0F85DD0E0000        <1>  jne L_error_incorrect_type
  2025 00001377 488B7801                        mov rdi, SOB_STRING_LENGTH(rax)
  2026 0000137B E84F0D0000                      call make_integer
  2027 00001380 C9                              leave
  2028 00001381 C21800                          ret AND_KILL_FRAME(1)
  2029                                  
  2030                                  L_code_ptr_vector_length:
  2031 00001384 C8000000                        enter 0, 0
  2032 00001388 48837D1801                      cmp COUNT, 1
  2033 0000138D 0F85ED0D0000                    jne L_error_arg_count_1
  2034 00001393 488B4520                        mov rax, PARAM(0)
  2035                                          assert_vector(rax)
    53 00001397 803822              <1>  cmp byte [%1], %2
    54 0000139A 0F85B40E0000        <1>  jne L_error_incorrect_type
  2036 000013A0 488B7801                        mov rdi, SOB_VECTOR_LENGTH(rax)
  2037 000013A4 E8260D0000                      call make_integer
  2038 000013A9 C9                              leave
  2039 000013AA C21800                          ret AND_KILL_FRAME(1)
  2040                                  
  2041                                  L_code_ptr_real_to_integer:
  2042 000013AD C8000000                        enter 0, 0
  2043 000013B1 48837D1801                      cmp COUNT, 1
  2044 000013B6 0F85C40D0000                    jne L_error_arg_count_1
  2045 000013BC 488B5D20                        mov rbx, PARAM(0)
  2046                                          assert_real(rbx)
    53 000013C0 803B13              <1>  cmp byte [%1], %2
    54 000013C3 0F858B0E0000        <1>  jne L_error_incorrect_type
  2047 000013C9 F20F104301                      movsd xmm0, qword [rbx + 1]
  2048 000013CE F2480F2CF8                      cvttsd2si rdi, xmm0
  2049 000013D3 E8F70C0000                      call make_integer
  2050 000013D8 C9                              leave
  2051 000013D9 C21800                          ret AND_KILL_FRAME(1)
  2052                                  
  2053                                  L_code_ptr_exit:
  2054 000013DC C8000000                        enter 0, 0
  2055 000013E0 48837D1800                      cmp COUNT, 0
  2056 000013E5 0F85600D0000                    jne L_error_arg_count_0
  2057 000013EB B800000000                      mov rax, 0
  2058 000013F0 E8(00000000)                    call exit
  2059                                  
  2060                                  L_code_ptr_integer_to_real:
  2061 000013F5 C8000000                        enter 0, 0
  2062 000013F9 48837D1801                      cmp COUNT, 1
  2063 000013FE 0F857C0D0000                    jne L_error_arg_count_1
  2064 00001404 488B4520                        mov rax, PARAM(0)
  2065                                          assert_integer(rax)
    53 00001408 803811              <1>  cmp byte [%1], %2
    54 0000140B 0F85430E0000        <1>  jne L_error_incorrect_type
  2066 00001411 FF7001                          push qword [rax + 1]
  2067 00001414 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  2068 0000141A E8980C0000                      call make_real
  2069 0000141F C9                              leave
  2070 00001420 C21800                          ret AND_KILL_FRAME(1)
  2071                                  
  2072                                  L_code_ptr_fraction_to_real:
  2073 00001423 C8000000                        enter 0, 0
  2074 00001427 48837D1801                      cmp COUNT, 1
  2075 0000142C 0F854E0D0000                    jne L_error_arg_count_1
  2076 00001432 488B4520                        mov rax, PARAM(0)
  2077                                          assert_fraction(rax)
    53 00001436 803812              <1>  cmp byte [%1], %2
    54 00001439 0F85150E0000        <1>  jne L_error_incorrect_type
  2078 0000143F FF7001                          push qword [rax + 1]
  2079 00001442 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  2080 00001448 FF7009                          push qword [rax + 1 + 8]
  2081 0000144B F2480F2A0C24                    cvtsi2sd xmm1, qword [rsp]
  2082 00001451 F20F5EC1                        divsd xmm0, xmm1
  2083 00001455 E85D0C0000                      call make_real
  2084 0000145A C9                              leave
  2085 0000145B C21800                          ret AND_KILL_FRAME(1)
  2086                                  
  2087                                  L_code_ptr_char_to_integer:
  2088 0000145E C8000000                        enter 0, 0
  2089 00001462 48837D1801                      cmp COUNT, 1
  2090 00001467 0F85130D0000                    jne L_error_arg_count_1
  2091 0000146D 488B4520                        mov rax, PARAM(0)
  2092                                          assert_char(rax)
    53 00001471 803802              <1>  cmp byte [%1], %2
    54 00001474 0F85DA0D0000        <1>  jne L_error_incorrect_type
  2093 0000147A 8A4001                          mov al, byte [rax + 1]
  2094 0000147D 4825FF000000                    and rax, 255
  2095 00001483 4889C7                          mov rdi, rax
  2096 00001486 E8440C0000                      call make_integer
  2097 0000148B C9                              leave
  2098 0000148C C21800                          ret AND_KILL_FRAME(1)
  2099                                  
  2100                                  L_code_ptr_integer_to_fraction:
  2101 0000148F C8000000                        enter 0, 0
  2102 00001493 48837D1801                      cmp COUNT, 1
  2103 00001498 0F85E20C0000                    jne L_error_arg_count_1
  2104 0000149E 4C8B4520                        mov r8, PARAM(0)
  2105                                          assert_integer(r8)
    53 000014A2 41803811            <1>  cmp byte [%1], %2
    54 000014A6 0F85A80D0000        <1>  jne L_error_incorrect_type
  2106 000014AC BF11000000                      mov rdi, (1 + 8 + 8)
  2107 000014B1 E80DF0FFFF                      call malloc
  2108 000014B6 498B5801                        mov rbx, qword [r8 + 1]
  2109 000014BA C60012                          mov byte [rax], T_fraction
  2110 000014BD 48895801                        mov qword [rax + 1], rbx
  2111 000014C1 48C7400901000000                mov qword [rax + 1 + 8], 1
  2112 000014C9 C9                              leave
  2113 000014CA C21800                          ret AND_KILL_FRAME(1)
  2114                                  
  2115                                  L_code_ptr_integer_to_char:
  2116 000014CD C8000000                        enter 0, 0
  2117 000014D1 48837D1801                      cmp COUNT, 1
  2118 000014D6 0F85A40C0000                    jne L_error_arg_count_1
  2119 000014DC 488B4520                        mov rax, PARAM(0)
  2120                                          assert_integer(rax)
    53 000014E0 803811              <1>  cmp byte [%1], %2
    54 000014E3 0F856B0D0000        <1>  jne L_error_incorrect_type
  2121 000014E9 488B5801                        mov rbx, qword [rax + 1]
  2122 000014ED 4883FB00                        cmp rbx, 0
  2123 000014F1 0F8EF20B0000                    jle L_error_integer_range
  2124 000014F7 4881FB00010000                  cmp rbx, 256
  2125 000014FE 0F8DE50B0000                    jge L_error_integer_range
  2126 00001504 BF02000000                      mov rdi, (1 + 1)
  2127 00001509 E8B5EFFFFF                      call malloc
  2128 0000150E C60002                          mov byte [rax], T_char
  2129 00001511 885801                          mov byte [rax + 1], bl
  2130 00001514 C9                              leave
  2131 00001515 C21800                          ret AND_KILL_FRAME(1)
  2132                                  
  2133                                  L_code_ptr_trng:
  2134 00001518 C8000000                        enter 0, 0
  2135 0000151C 48837D1800                      cmp COUNT, 0
  2136 00001521 0F85240C0000                    jne L_error_arg_count_0
  2137 00001527 480FC7F7                        rdrand rdi
  2138 0000152B 48D1EF                          shr rdi, 1
  2139 0000152E E89C0B0000                      call make_integer
  2140 00001533 C9                              leave
  2141 00001534 C21000                          ret AND_KILL_FRAME(0)
  2142                                  
  2143                                  L_code_ptr_is_zero:
  2144 00001537 C8000000                        enter 0, 0
  2145 0000153B 48837D1801                      cmp COUNT, 1
  2146 00001540 0F853A0C0000                    jne L_error_arg_count_1
  2147 00001546 488B4520                        mov rax, PARAM(0)
  2148 0000154A 803811                          cmp byte [rax], T_integer
  2149 0000154D 740F                            je .L_integer
  2150 0000154F 803812                          cmp byte [rax], T_fraction
  2151 00001552 7413                            je .L_fraction
  2152 00001554 803813                          cmp byte [rax], T_real
  2153 00001557 7417                            je .L_real
  2154 00001559 E9F60C0000                      jmp L_error_incorrect_type
  2155                                  .L_integer:
  2156 0000155E 4883780100                      cmp qword [rax + 1], 0
  2157 00001563 7429                            je .L_zero
  2158 00001565 EB1B                            jmp .L_not_zero
  2159                                  .L_fraction:
  2160 00001567 4883780100                      cmp qword [rax + 1], 0
  2161 0000156C 7420                            je .L_zero
  2162 0000156E EB12                            jmp .L_not_zero
  2163                                  .L_real:
  2164 00001570 660FEFC0                        pxor xmm0, xmm0
  2165 00001574 FF7001                          push qword [rax + 1]
  2166 00001577 F20F100C24                      movsd xmm1, qword [rsp]
  2167 0000157C 660F2EC1                        ucomisd xmm0, xmm1
  2168 00001580 740C                            je .L_zero
  2169                                  .L_not_zero:
  2170 00001582 48B8-                           mov rax, sob_boolean_false
  2170 00001584 [0200000000000000] 
  2171 0000158C EB0A                            jmp .L_end
  2172                                  .L_zero:
  2173 0000158E 48B8-                           mov rax, sob_boolean_true
  2173 00001590 [0300000000000000] 
  2174                                  .L_end:
  2175 00001598 C9                              leave
  2176 00001599 C21800                          ret AND_KILL_FRAME(1)
  2177                                  
  2178                                  L_code_ptr_is_integer:
  2179 0000159C C8000000                        enter 0, 0
  2180 000015A0 48837D1801                      cmp COUNT, 1
  2181 000015A5 0F85D50B0000                    jne L_error_arg_count_1
  2182 000015AB 488B4520                        mov rax, PARAM(0)
  2183 000015AF 803811                          cmp byte [rax], T_integer
  2184 000015B2 750C                            jne .L_false
  2185 000015B4 48B8-                           mov rax, sob_boolean_true
  2185 000015B6 [0300000000000000] 
  2186 000015BE EB0A                            jmp .L_exit
  2187                                  .L_false:
  2188 000015C0 48B8-                           mov rax, sob_boolean_false
  2188 000015C2 [0200000000000000] 
  2189                                  .L_exit:
  2190 000015CA C9                              leave
  2191 000015CB C21800                          ret AND_KILL_FRAME(1)
  2192                                  
  2193                                  L_code_ptr_raw_bin_add_rr:
  2194 000015CE C8000000                        enter 0, 0
  2195 000015D2 48837D1802                      cmp COUNT, 2
  2196 000015D7 0F85D80B0000                    jne L_error_arg_count_2
  2197 000015DD 488B5D20                        mov rbx, PARAM(0)
  2198                                          assert_real(rbx)
    53 000015E1 803B13              <1>  cmp byte [%1], %2
    54 000015E4 0F856A0C0000        <1>  jne L_error_incorrect_type
  2199 000015EA 488B4D28                        mov rcx, PARAM(1)
  2200                                          assert_real(rcx)
    53 000015EE 803913              <1>  cmp byte [%1], %2
    54 000015F1 0F855D0C0000        <1>  jne L_error_incorrect_type
  2201 000015F7 F20F104301                      movsd xmm0, qword [rbx + 1]
  2202 000015FC F20F104901                      movsd xmm1, qword [rcx + 1]
  2203 00001601 F20F58C1                        addsd xmm0, xmm1
  2204 00001605 E8AD0A0000                      call make_real
  2205 0000160A C9                              leave
  2206 0000160B C22000                          ret AND_KILL_FRAME(2)
  2207                                  
  2208                                  L_code_ptr_raw_bin_sub_rr:
  2209 0000160E C8000000                        enter 0, 0
  2210 00001612 48837D1802                      cmp COUNT, 2
  2211 00001617 0F85980B0000                    jne L_error_arg_count_2
  2212 0000161D 488B5D20                        mov rbx, PARAM(0)
  2213                                          assert_real(rbx)
    53 00001621 803B13              <1>  cmp byte [%1], %2
    54 00001624 0F852A0C0000        <1>  jne L_error_incorrect_type
  2214 0000162A 488B4D28                        mov rcx, PARAM(1)
  2215                                          assert_real(rcx)
    53 0000162E 803913              <1>  cmp byte [%1], %2
    54 00001631 0F851D0C0000        <1>  jne L_error_incorrect_type
  2216 00001637 F20F104301                      movsd xmm0, qword [rbx + 1]
  2217 0000163C F20F104901                      movsd xmm1, qword [rcx + 1]
  2218 00001641 F20F5CC1                        subsd xmm0, xmm1
  2219 00001645 E86D0A0000                      call make_real
  2220 0000164A C9                              leave
  2221 0000164B C22000                          ret AND_KILL_FRAME(2)
  2222                                  
  2223                                  L_code_ptr_raw_bin_mul_rr:
  2224 0000164E C8000000                        enter 0, 0
  2225 00001652 48837D1802                      cmp COUNT, 2
  2226 00001657 0F85580B0000                    jne L_error_arg_count_2
  2227 0000165D 488B5D20                        mov rbx, PARAM(0)
  2228                                          assert_real(rbx)
    53 00001661 803B13              <1>  cmp byte [%1], %2
    54 00001664 0F85EA0B0000        <1>  jne L_error_incorrect_type
  2229 0000166A 488B4D28                        mov rcx, PARAM(1)
  2230                                          assert_real(rcx)
    53 0000166E 803913              <1>  cmp byte [%1], %2
    54 00001671 0F85DD0B0000        <1>  jne L_error_incorrect_type
  2231 00001677 F20F104301                      movsd xmm0, qword [rbx + 1]
  2232 0000167C F20F104901                      movsd xmm1, qword [rcx + 1]
  2233 00001681 F20F59C1                        mulsd xmm0, xmm1
  2234 00001685 E82D0A0000                      call make_real
  2235 0000168A C9                              leave
  2236 0000168B C22000                          ret AND_KILL_FRAME(2)
  2237                                  
  2238                                  L_code_ptr_raw_bin_div_rr:
  2239 0000168E C8000000                        enter 0, 0
  2240 00001692 48837D1802                      cmp COUNT, 2
  2241 00001697 0F85180B0000                    jne L_error_arg_count_2
  2242 0000169D 488B5D20                        mov rbx, PARAM(0)
  2243                                          assert_real(rbx)
    53 000016A1 803B13              <1>  cmp byte [%1], %2
    54 000016A4 0F85AA0B0000        <1>  jne L_error_incorrect_type
  2244 000016AA 488B4D28                        mov rcx, PARAM(1)
  2245                                          assert_real(rcx)
    53 000016AE 803913              <1>  cmp byte [%1], %2
    54 000016B1 0F859D0B0000        <1>  jne L_error_incorrect_type
  2246 000016B7 F20F104301                      movsd xmm0, qword [rbx + 1]
  2247 000016BC F20F104901                      movsd xmm1, qword [rcx + 1]
  2248 000016C1 660FEFD2                        pxor xmm2, xmm2
  2249 000016C5 660F2ECA                        ucomisd xmm1, xmm2
  2250 000016C9 0F84B60B0000                    je L_error_division_by_zero
  2251 000016CF F20F5EC1                        divsd xmm0, xmm1
  2252 000016D3 E8DF090000                      call make_real
  2253 000016D8 C9                              leave
  2254 000016D9 C22000                          ret AND_KILL_FRAME(2)
  2255                                  
  2256                                  L_code_ptr_raw_bin_add_zz:
  2257 000016DC C8000000                	enter 0, 0
  2258 000016E0 48837D1802              	cmp COUNT, 2
  2259 000016E5 0F85CA0A0000            	jne L_error_arg_count_2
  2260 000016EB 4C8B4520                	mov r8, PARAM(0)
  2261                                  	assert_integer(r8)
    53 000016EF 41803811            <1>  cmp byte [%1], %2
    54 000016F3 0F855B0B0000        <1>  jne L_error_incorrect_type
  2262 000016F9 4C8B4D28                	mov r9, PARAM(1)
  2263                                  	assert_integer(r9)
    53 000016FD 41803911            <1>  cmp byte [%1], %2
    54 00001701 0F854D0B0000        <1>  jne L_error_incorrect_type
  2264 00001707 498B7801                	mov rdi, qword [r8 + 1]
  2265 0000170B 49037901                	add rdi, qword [r9 + 1]
  2266 0000170F E8BB090000              	call make_integer
  2267 00001714 C9                      	leave
  2268 00001715 C22000                  	ret AND_KILL_FRAME(2)
  2269                                  
  2270                                  L_code_ptr_raw_bin_add_qq:
  2271 00001718 C8000000                        enter 0, 0
  2272 0000171C 48837D1802                      cmp COUNT, 2
  2273 00001721 0F858E0A0000                    jne L_error_arg_count_2
  2274 00001727 4C8B4520                        mov r8, PARAM(0)
  2275                                          assert_fraction(r8)
    53 0000172B 41803812            <1>  cmp byte [%1], %2
    54 0000172F 0F851F0B0000        <1>  jne L_error_incorrect_type
  2276 00001735 4C8B4D28                        mov r9, PARAM(1)
  2277                                          assert_fraction(r9)
    53 00001739 41803912            <1>  cmp byte [%1], %2
    54 0000173D 0F85110B0000        <1>  jne L_error_incorrect_type
  2278 00001743 498B4001                        mov rax, qword [r8 + 1] ; num1
  2279 00001747 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  2280 0000174B 4899                            cqo
  2281 0000174D 48F7EB                          imul rbx
  2282 00001750 4889C6                          mov rsi, rax
  2283 00001753 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2284 00001757 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  2285 0000175B 4899                            cqo
  2286 0000175D 48F7EB                          imul rbx
  2287 00001760 4801C6                          add rsi, rax
  2288 00001763 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2289 00001767 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  2290 0000176B 4899                            cqo
  2291 0000176D 48F7EB                          imul rbx
  2292 00001770 4889C7                          mov rdi, rax
  2293 00001773 E8DE010000                      call normalize_fraction
  2294 00001778 C9                              leave
  2295 00001779 C22000                          ret AND_KILL_FRAME(2)
  2296                                  
  2297                                  L_code_ptr_raw_bin_sub_zz:
  2298 0000177C C8000000                	enter 0, 0
  2299 00001780 48837D1802              	cmp COUNT, 2
  2300 00001785 0F852A0A0000            	jne L_error_arg_count_2
  2301 0000178B 4C8B4520                	mov r8, PARAM(0)
  2302                                  	assert_integer(r8)
    53 0000178F 41803811            <1>  cmp byte [%1], %2
    54 00001793 0F85BB0A0000        <1>  jne L_error_incorrect_type
  2303 00001799 4C8B4D28                	mov r9, PARAM(1)
  2304                                  	assert_integer(r9)
    53 0000179D 41803911            <1>  cmp byte [%1], %2
    54 000017A1 0F85AD0A0000        <1>  jne L_error_incorrect_type
  2305 000017A7 498B7801                	mov rdi, qword [r8 + 1]
  2306 000017AB 492B7901                	sub rdi, qword [r9 + 1]
  2307 000017AF E81B090000              	call make_integer
  2308 000017B4 C9                      	leave
  2309 000017B5 C22000                  	ret AND_KILL_FRAME(2)
  2310                                  
  2311                                  L_code_ptr_raw_bin_sub_qq:
  2312 000017B8 C8000000                        enter 0, 0
  2313 000017BC 48837D1802                      cmp COUNT, 2
  2314 000017C1 0F85EE090000                    jne L_error_arg_count_2
  2315 000017C7 4C8B4520                        mov r8, PARAM(0)
  2316                                          assert_fraction(r8)
    53 000017CB 41803812            <1>  cmp byte [%1], %2
    54 000017CF 0F857F0A0000        <1>  jne L_error_incorrect_type
  2317 000017D5 4C8B4D28                        mov r9, PARAM(1)
  2318                                          assert_fraction(r9)
    53 000017D9 41803912            <1>  cmp byte [%1], %2
    54 000017DD 0F85710A0000        <1>  jne L_error_incorrect_type
  2319 000017E3 498B4001                        mov rax, qword [r8 + 1] ; num1
  2320 000017E7 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  2321 000017EB 4899                            cqo
  2322 000017ED 48F7EB                          imul rbx
  2323 000017F0 4889C6                          mov rsi, rax
  2324 000017F3 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2325 000017F7 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  2326 000017FB 4899                            cqo
  2327 000017FD 48F7EB                          imul rbx
  2328 00001800 4829C6                          sub rsi, rax
  2329 00001803 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2330 00001807 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  2331 0000180B 4899                            cqo
  2332 0000180D 48F7EB                          imul rbx
  2333 00001810 4889C7                          mov rdi, rax
  2334 00001813 E83E010000                      call normalize_fraction
  2335 00001818 C9                              leave
  2336 00001819 C22000                          ret AND_KILL_FRAME(2)
  2337                                  
  2338                                  L_code_ptr_raw_bin_mul_zz:
  2339 0000181C C8000000                	enter 0, 0
  2340 00001820 48837D1802              	cmp COUNT, 2
  2341 00001825 0F858A090000            	jne L_error_arg_count_2
  2342 0000182B 4C8B4520                	mov r8, PARAM(0)
  2343                                  	assert_integer(r8)
    53 0000182F 41803811            <1>  cmp byte [%1], %2
    54 00001833 0F851B0A0000        <1>  jne L_error_incorrect_type
  2344 00001839 4C8B4D28                	mov r9, PARAM(1)
  2345                                  	assert_integer(r9)
    53 0000183D 41803911            <1>  cmp byte [%1], %2
    54 00001841 0F850D0A0000        <1>  jne L_error_incorrect_type
  2346 00001847 4899                    	cqo
  2347 00001849 498B4001                	mov rax, qword [r8 + 1]
  2348 0000184D 49F76101                	mul qword [r9 + 1]
  2349 00001851 4889C7                  	mov rdi, rax
  2350 00001854 E876080000              	call make_integer
  2351 00001859 C9                      	leave
  2352 0000185A C22000                  	ret AND_KILL_FRAME(2)
  2353                                  
  2354                                  L_code_ptr_raw_bin_mul_qq:
  2355 0000185D C8000000                        enter 0, 0
  2356 00001861 48837D1802                      cmp COUNT, 2
  2357 00001866 0F8549090000                    jne L_error_arg_count_2
  2358 0000186C 4C8B4520                        mov r8, PARAM(0)
  2359                                          assert_fraction(r8)
    53 00001870 41803812            <1>  cmp byte [%1], %2
    54 00001874 0F85DA090000        <1>  jne L_error_incorrect_type
  2360 0000187A 4C8B4D28                        mov r9, PARAM(1)
  2361                                          assert_fraction(r9)
    53 0000187E 41803912            <1>  cmp byte [%1], %2
    54 00001882 0F85CC090000        <1>  jne L_error_incorrect_type
  2362 00001888 498B4001                        mov rax, qword [r8 + 1] ; num1
  2363 0000188C 498B5901                        mov rbx, qword [r9 + 1] ; num2
  2364 00001890 4899                            cqo
  2365 00001892 48F7EB                          imul rbx
  2366 00001895 4889C6                          mov rsi, rax
  2367 00001898 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2368 0000189C 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  2369 000018A0 4899                            cqo
  2370 000018A2 48F7EB                          imul rbx
  2371 000018A5 4889C7                          mov rdi, rax
  2372 000018A8 E8A9000000                      call normalize_fraction
  2373 000018AD C9                              leave
  2374 000018AE C22000                          ret AND_KILL_FRAME(2)
  2375                                          
  2376                                  L_code_ptr_raw_bin_div_zz:
  2377 000018B1 C8000000                	enter 0, 0
  2378 000018B5 48837D1802              	cmp COUNT, 2
  2379 000018BA 0F85F5080000            	jne L_error_arg_count_2
  2380 000018C0 4C8B4520                	mov r8, PARAM(0)
  2381                                  	assert_integer(r8)
    53 000018C4 41803811            <1>  cmp byte [%1], %2
    54 000018C8 0F8586090000        <1>  jne L_error_incorrect_type
  2382 000018CE 4C8B4D28                	mov r9, PARAM(1)
  2383                                  	assert_integer(r9)
    53 000018D2 41803911            <1>  cmp byte [%1], %2
    54 000018D6 0F8578090000        <1>  jne L_error_incorrect_type
  2384 000018DC 498B7901                	mov rdi, qword [r9 + 1]
  2385 000018E0 4883FF00                	cmp rdi, 0
  2386 000018E4 0F849B090000            	je L_error_division_by_zero
  2387 000018EA 498B7001                	mov rsi, qword [r8 + 1]
  2388 000018EE E863000000              	call normalize_fraction
  2389 000018F3 C9                      	leave
  2390 000018F4 C22000                  	ret AND_KILL_FRAME(2)
  2391                                  
  2392                                  L_code_ptr_raw_bin_div_qq:
  2393 000018F7 C8000000                        enter 0, 0
  2394 000018FB 48837D1802                      cmp COUNT, 2
  2395 00001900 0F85AF080000                    jne L_error_arg_count_2
  2396 00001906 4C8B4520                        mov r8, PARAM(0)
  2397                                          assert_fraction(r8)
    53 0000190A 41803812            <1>  cmp byte [%1], %2
    54 0000190E 0F8540090000        <1>  jne L_error_incorrect_type
  2398 00001914 4C8B4D28                        mov r9, PARAM(1)
  2399                                          assert_fraction(r9)
    53 00001918 41803912            <1>  cmp byte [%1], %2
    54 0000191C 0F8532090000        <1>  jne L_error_incorrect_type
  2400 00001922 4983790100                      cmp qword [r9 + 1], 0
  2401 00001927 0F8458090000                    je L_error_division_by_zero
  2402 0000192D 498B4001                        mov rax, qword [r8 + 1] ; num1
  2403 00001931 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  2404 00001935 4899                            cqo
  2405 00001937 48F7EB                          imul rbx
  2406 0000193A 4889C6                          mov rsi, rax
  2407 0000193D 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2408 00001941 498B5901                        mov rbx, qword [r9 + 1] ; num2
  2409 00001945 4899                            cqo
  2410 00001947 48F7EB                          imul rbx
  2411 0000194A 4889C7                          mov rdi, rax
  2412 0000194D E804000000                      call normalize_fraction
  2413 00001952 C9                              leave
  2414 00001953 C22000                          ret AND_KILL_FRAME(2)
  2415                                          
  2416                                  normalize_fraction:
  2417 00001956 56                              push rsi
  2418 00001957 57                              push rdi
  2419 00001958 E859000000                      call gcd
  2420 0000195D 4889C3                          mov rbx, rax
  2421 00001960 58                              pop rax
  2422 00001961 4899                            cqo
  2423 00001963 48F7FB                          idiv rbx
  2424 00001966 4989C0                          mov r8, rax
  2425 00001969 58                              pop rax
  2426 0000196A 4899                            cqo
  2427 0000196C 48F7FB                          idiv rbx
  2428 0000196F 4989C1                          mov r9, rax
  2429 00001972 4983F900                        cmp r9, 0
  2430 00001976 741C                            je .L_zero
  2431 00001978 4983F801                        cmp r8, 1
  2432 0000197C 7421                            je .L_int
  2433 0000197E BF11000000                      mov rdi, (1 + 8 + 8)
  2434 00001983 E83BEBFFFF                      call malloc
  2435 00001988 C60012                          mov byte [rax], T_fraction
  2436 0000198B 4C894801                        mov qword [rax + 1], r9
  2437 0000198F 4C894009                        mov qword [rax + 1 + 8], r8
  2438 00001993 C3                              ret
  2439                                  .L_zero:
  2440 00001994 BF00000000                      mov rdi, 0
  2441 00001999 E831070000                      call make_integer
  2442 0000199E C3                              ret
  2443                                  .L_int:
  2444 0000199F 4C89CF                          mov rdi, r9
  2445 000019A2 E828070000                      call make_integer
  2446 000019A7 C3                              ret
  2447                                  
  2448                                  iabs:
  2449 000019A8 4889F8                          mov rax, rdi
  2450 000019AB 4883F800                        cmp rax, 0
  2451 000019AF 7C01                            jl .Lneg
  2452 000019B1 C3                              ret
  2453                                  .Lneg:
  2454 000019B2 48F7D8                          neg rax
  2455 000019B5 C3                              ret
  2456                                  
  2457                                  gcd:
  2458 000019B6 E8EDFFFFFF                      call iabs
  2459 000019BB 4889C3                          mov rbx, rax
  2460 000019BE 4889F7                          mov rdi, rsi
  2461 000019C1 E8E2FFFFFF                      call iabs
  2462 000019C6 4883F800                        cmp rax, 0
  2463 000019CA 7502                            jne .L0
  2464 000019CC 4893                            xchg rax, rbx
  2465                                  .L0:
  2466 000019CE 4883FB00                        cmp rbx, 0
  2467 000019D2 740C                            je .L1
  2468 000019D4 4899                            cqo
  2469 000019D6 48F7F3                          div rbx
  2470 000019D9 4889D0                          mov rax, rdx
  2471 000019DC 4893                            xchg rax, rbx
  2472 000019DE EBEE                            jmp .L0
  2473                                  .L1:
  2474 000019E0 C3                              ret
  2475                                  
  2476                                  L_code_ptr_error:
  2477 000019E1 C8000000                        enter 0, 0
  2478 000019E5 48837D1802                      cmp COUNT, 2
  2479 000019EA 0F85C5070000                    jne L_error_arg_count_2
  2480 000019F0 488B7520                        mov rsi, PARAM(0)
  2481                                          assert_interned_symbol(rsi)
    53 000019F4 803E41              <1>  cmp byte [%1], %2
    54 000019F7 0F8557080000        <1>  jne L_error_incorrect_type
  2482 000019FD 488B7528                        mov rsi, PARAM(1)
  2483                                          assert_string(rsi)
    53 00001A01 803E03              <1>  cmp byte [%1], %2
    54 00001A04 0F854A080000        <1>  jne L_error_incorrect_type
  2484 00001A0A 48BF-                           mov rdi, fmt_scheme_error_part_1
  2484 00001A0C [2D0A000000000000] 
  2485 00001A14 B800000000                      mov rax, 0
  2486                                          ENTER
    44 00001A19 C8000000            <1>  enter 0, 0
    45 00001A1D 4883E4F0            <1>  and rsp, ~15
  2487 00001A21 E8(00000000)                    call printf
  2488                                          LEAVE
    49 00001A26 C9                  <1>  leave
  2489 00001A27 488B7D20                        mov rdi, PARAM(0)
  2490 00001A2B E814EDFFFF                      call print_sexpr
  2491 00001A30 48BF-                           mov rdi, fmt_scheme_error_part_2
  2491 00001A32 [410A000000000000] 
  2492 00001A3A B800000000                      mov rax, 0
  2493                                          ENTER
    44 00001A3F C8000000            <1>  enter 0, 0
    45 00001A43 4883E4F0            <1>  and rsp, ~15
  2494 00001A47 E8(00000000)                    call printf
  2495                                          LEAVE
    49 00001A4C C9                  <1>  leave
  2496 00001A4D 488B4528                        mov rax, PARAM(1)       ; sob_string
  2497 00001A51 BE01000000                      mov rsi, 1              ; size = 1 byte
  2498 00001A56 488B5001                        mov rdx, qword [rax + 1] ; length
  2499 00001A5A 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
  2500 00001A5E 488B0C25[00000000]              mov rcx, qword [stdout]  ; FILE*
  2501                                  	ENTER
    44 00001A66 C8000000            <1>  enter 0, 0
    45 00001A6A 4883E4F0            <1>  and rsp, ~15
  2502 00001A6E E8(00000000)                    call fwrite
  2503                                  	LEAVE
    49 00001A73 C9                  <1>  leave
  2504 00001A74 48BF-                           mov rdi, fmt_scheme_error_part_3
  2504 00001A76 [830A000000000000] 
  2505 00001A7E B800000000                      mov rax, 0
  2506                                          ENTER
    44 00001A83 C8000000            <1>  enter 0, 0
    45 00001A87 4883E4F0            <1>  and rsp, ~15
  2507 00001A8B E8(00000000)                    call printf
  2508                                          LEAVE
    49 00001A90 C9                  <1>  leave
  2509 00001A91 48C7C0F7FFFFFF                  mov rax, -9
  2510 00001A98 E8(00000000)                    call exit
  2511                                  
  2512                                  L_code_ptr_raw_less_than_rr:
  2513 00001A9D C8000000                        enter 0, 0
  2514 00001AA1 48837D1802                      cmp COUNT, 2
  2515 00001AA6 0F8509070000                    jne L_error_arg_count_2
  2516 00001AAC 488B7520                        mov rsi, PARAM(0)
  2517                                          assert_real(rsi)
    53 00001AB0 803E13              <1>  cmp byte [%1], %2
    54 00001AB3 0F859B070000        <1>  jne L_error_incorrect_type
  2518 00001AB9 488B7D28                        mov rdi, PARAM(1)
  2519                                          assert_real(rdi)
    53 00001ABD 803F13              <1>  cmp byte [%1], %2
    54 00001AC0 0F858E070000        <1>  jne L_error_incorrect_type
  2520 00001AC6 F20F104601                      movsd xmm0, qword [rsi + 1]
  2521 00001ACB F20F104F01                      movsd xmm1, qword [rdi + 1]
  2522 00001AD0 660F2FC1                        comisd xmm0, xmm1
  2523 00001AD4 730C                            jae .L_false
  2524 00001AD6 48B8-                           mov rax, sob_boolean_true
  2524 00001AD8 [0300000000000000] 
  2525 00001AE0 EB0A                            jmp .L_exit
  2526                                  .L_false:
  2527 00001AE2 48B8-                           mov rax, sob_boolean_false
  2527 00001AE4 [0200000000000000] 
  2528                                  .L_exit:
  2529 00001AEC C9                              leave
  2530 00001AED C22000                          ret AND_KILL_FRAME(2)
  2531                                          
  2532                                  L_code_ptr_raw_less_than_zz:
  2533 00001AF0 C8000000                	enter 0, 0
  2534 00001AF4 48837D1802              	cmp COUNT, 2
  2535 00001AF9 0F85B6060000            	jne L_error_arg_count_2
  2536 00001AFF 4C8B4520                	mov r8, PARAM(0)
  2537                                  	assert_integer(r8)
    53 00001B03 41803811            <1>  cmp byte [%1], %2
    54 00001B07 0F8547070000        <1>  jne L_error_incorrect_type
  2538 00001B0D 4C8B4D28                	mov r9, PARAM(1)
  2539                                  	assert_integer(r9)
    53 00001B11 41803911            <1>  cmp byte [%1], %2
    54 00001B15 0F8539070000        <1>  jne L_error_incorrect_type
  2540 00001B1B 498B7801                	mov rdi, qword [r8 + 1]
  2541 00001B1F 493B7901                	cmp rdi, qword [r9 + 1]
  2542 00001B23 7D0C                    	jge .L_false
  2543 00001B25 48B8-                   	mov rax, sob_boolean_true
  2543 00001B27 [0300000000000000] 
  2544 00001B2F EB0A                    	jmp .L_exit
  2545                                  .L_false:
  2546 00001B31 48B8-                   	mov rax, sob_boolean_false
  2546 00001B33 [0200000000000000] 
  2547                                  .L_exit:
  2548 00001B3B C9                      	leave
  2549 00001B3C C22000                  	ret AND_KILL_FRAME(2)
  2550                                  
  2551                                  L_code_ptr_raw_less_than_qq:
  2552 00001B3F C8000000                        enter 0, 0
  2553 00001B43 48837D1802                      cmp COUNT, 2
  2554 00001B48 0F8567060000                    jne L_error_arg_count_2
  2555 00001B4E 488B7520                        mov rsi, PARAM(0)
  2556                                          assert_fraction(rsi)
    53 00001B52 803E12              <1>  cmp byte [%1], %2
    54 00001B55 0F85F9060000        <1>  jne L_error_incorrect_type
  2557 00001B5B 488B7D28                        mov rdi, PARAM(1)
  2558                                          assert_fraction(rdi)
    53 00001B5F 803F12              <1>  cmp byte [%1], %2
    54 00001B62 0F85EC060000        <1>  jne L_error_incorrect_type
  2559 00001B68 488B4601                        mov rax, qword [rsi + 1] ; num1
  2560 00001B6C 4899                            cqo
  2561 00001B6E 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  2562 00001B72 4889C1                          mov rcx, rax
  2563 00001B75 488B4609                        mov rax, qword [rsi + 1 + 8] ; den1
  2564 00001B79 4899                            cqo
  2565 00001B7B 48F76F01                        imul qword [rdi + 1]          ; num2
  2566 00001B7F 4829C1                          sub rcx, rax
  2567 00001B82 7D0C                            jge .L_false
  2568 00001B84 48B8-                           mov rax, sob_boolean_true
  2568 00001B86 [0300000000000000] 
  2569 00001B8E EB0A                            jmp .L_exit
  2570                                  .L_false:
  2571 00001B90 48B8-                           mov rax, sob_boolean_false
  2571 00001B92 [0200000000000000] 
  2572                                  .L_exit:
  2573 00001B9A C9                              leave
  2574 00001B9B C22000                          ret AND_KILL_FRAME(2)
  2575                                  
  2576                                  L_code_ptr_raw_equal_rr:
  2577 00001B9E C8000000                        enter 0, 0
  2578 00001BA2 48837D1802                      cmp COUNT, 2
  2579 00001BA7 0F8508060000                    jne L_error_arg_count_2
  2580 00001BAD 488B7520                        mov rsi, PARAM(0)
  2581                                          assert_real(rsi)
    53 00001BB1 803E13              <1>  cmp byte [%1], %2
    54 00001BB4 0F859A060000        <1>  jne L_error_incorrect_type
  2582 00001BBA 488B7D28                        mov rdi, PARAM(1)
  2583                                          assert_real(rdi)
    53 00001BBE 803F13              <1>  cmp byte [%1], %2
    54 00001BC1 0F858D060000        <1>  jne L_error_incorrect_type
  2584 00001BC7 F20F104601                      movsd xmm0, qword [rsi + 1]
  2585 00001BCC F20F104F01                      movsd xmm1, qword [rdi + 1]
  2586 00001BD1 660F2FC1                        comisd xmm0, xmm1
  2587 00001BD5 750C                            jne .L_false
  2588 00001BD7 48B8-                           mov rax, sob_boolean_true
  2588 00001BD9 [0300000000000000] 
  2589 00001BE1 EB0A                            jmp .L_exit
  2590                                  .L_false:
  2591 00001BE3 48B8-                           mov rax, sob_boolean_false
  2591 00001BE5 [0200000000000000] 
  2592                                  .L_exit:
  2593 00001BED C9                              leave
  2594 00001BEE C22000                          ret AND_KILL_FRAME(2)
  2595                                          
  2596                                  L_code_ptr_raw_equal_zz:
  2597 00001BF1 C8000000                	enter 0, 0
  2598 00001BF5 48837D1802              	cmp COUNT, 2
  2599 00001BFA 0F85B5050000            	jne L_error_arg_count_2
  2600 00001C00 4C8B4520                	mov r8, PARAM(0)
  2601                                  	assert_integer(r8)
    53 00001C04 41803811            <1>  cmp byte [%1], %2
    54 00001C08 0F8546060000        <1>  jne L_error_incorrect_type
  2602 00001C0E 4C8B4D28                	mov r9, PARAM(1)
  2603                                  	assert_integer(r9)
    53 00001C12 41803911            <1>  cmp byte [%1], %2
    54 00001C16 0F8538060000        <1>  jne L_error_incorrect_type
  2604 00001C1C 498B7801                	mov rdi, qword [r8 + 1]
  2605 00001C20 493B7901                	cmp rdi, qword [r9 + 1]
  2606 00001C24 750C                    	jne .L_false
  2607 00001C26 48B8-                   	mov rax, sob_boolean_true
  2607 00001C28 [0300000000000000] 
  2608 00001C30 EB0A                    	jmp .L_exit
  2609                                  .L_false:
  2610 00001C32 48B8-                   	mov rax, sob_boolean_false
  2610 00001C34 [0200000000000000] 
  2611                                  .L_exit:
  2612 00001C3C C9                      	leave
  2613 00001C3D C22000                  	ret AND_KILL_FRAME(2)
  2614                                  
  2615                                  L_code_ptr_raw_equal_qq:
  2616 00001C40 C8000000                        enter 0, 0
  2617 00001C44 48837D1802                      cmp COUNT, 2
  2618 00001C49 0F8566050000                    jne L_error_arg_count_2
  2619 00001C4F 488B7520                        mov rsi, PARAM(0)
  2620                                          assert_fraction(rsi)
    53 00001C53 803E12              <1>  cmp byte [%1], %2
    54 00001C56 0F85F8050000        <1>  jne L_error_incorrect_type
  2621 00001C5C 488B7D28                        mov rdi, PARAM(1)
  2622                                          assert_fraction(rdi)
    53 00001C60 803F12              <1>  cmp byte [%1], %2
    54 00001C63 0F85EB050000        <1>  jne L_error_incorrect_type
  2623 00001C69 488B4601                        mov rax, qword [rsi + 1] ; num1
  2624 00001C6D 4899                            cqo
  2625 00001C6F 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  2626 00001C73 4889C1                          mov rcx, rax
  2627 00001C76 488B4709                        mov rax, qword [rdi + 1 + 8] ; den1
  2628 00001C7A 4899                            cqo
  2629 00001C7C 48F76F01                        imul qword [rdi + 1]          ; num2
  2630 00001C80 4829C1                          sub rcx, rax
  2631 00001C83 750C                            jne .L_false
  2632 00001C85 48B8-                           mov rax, sob_boolean_true
  2632 00001C87 [0300000000000000] 
  2633 00001C8F EB0A                            jmp .L_exit
  2634                                  .L_false:
  2635 00001C91 48B8-                           mov rax, sob_boolean_false
  2635 00001C93 [0200000000000000] 
  2636                                  .L_exit:
  2637 00001C9B C9                              leave
  2638 00001C9C C22000                          ret AND_KILL_FRAME(2)
  2639                                  
  2640                                  L_code_ptr_quotient:
  2641 00001C9F C8000000                        enter 0, 0
  2642 00001CA3 48837D1802                      cmp COUNT, 2
  2643 00001CA8 0F8507050000                    jne L_error_arg_count_2
  2644 00001CAE 488B7520                        mov rsi, PARAM(0)
  2645                                          assert_integer(rsi)
    53 00001CB2 803E11              <1>  cmp byte [%1], %2
    54 00001CB5 0F8599050000        <1>  jne L_error_incorrect_type
  2646 00001CBB 488B7D28                        mov rdi, PARAM(1)
  2647                                          assert_integer(rdi)
    53 00001CBF 803F11              <1>  cmp byte [%1], %2
    54 00001CC2 0F858C050000        <1>  jne L_error_incorrect_type
  2648 00001CC8 488B4601                        mov rax, qword [rsi + 1]
  2649 00001CCC 488B5F01                        mov rbx, qword [rdi + 1]
  2650 00001CD0 4883FB00                        cmp rbx, 0
  2651 00001CD4 0F84AB050000                    je L_error_division_by_zero
  2652 00001CDA 4899                            cqo
  2653 00001CDC 48F7FB                          idiv rbx
  2654 00001CDF 4889C7                          mov rdi, rax
  2655 00001CE2 E8E8030000                      call make_integer
  2656 00001CE7 C9                              leave
  2657 00001CE8 C22000                          ret AND_KILL_FRAME(2)
  2658                                          
  2659                                  L_code_ptr_remainder:
  2660 00001CEB C8000000                        enter 0, 0
  2661 00001CEF 48837D1802                      cmp COUNT, 2
  2662 00001CF4 0F85BB040000                    jne L_error_arg_count_2
  2663 00001CFA 488B7520                        mov rsi, PARAM(0)
  2664                                          assert_integer(rsi)
    53 00001CFE 803E11              <1>  cmp byte [%1], %2
    54 00001D01 0F854D050000        <1>  jne L_error_incorrect_type
  2665 00001D07 488B7D28                        mov rdi, PARAM(1)
  2666                                          assert_integer(rdi)
    53 00001D0B 803F11              <1>  cmp byte [%1], %2
    54 00001D0E 0F8540050000        <1>  jne L_error_incorrect_type
  2667 00001D14 488B4601                        mov rax, qword [rsi + 1]
  2668 00001D18 488B5F01                        mov rbx, qword [rdi + 1]
  2669 00001D1C 4883FB00                        cmp rbx, 0
  2670 00001D20 0F845F050000                    je L_error_division_by_zero
  2671 00001D26 4899                            cqo
  2672 00001D28 48F7FB                          idiv rbx
  2673 00001D2B 4889D7                          mov rdi, rdx
  2674 00001D2E E89C030000                      call make_integer
  2675 00001D33 C9                              leave
  2676 00001D34 C22000                          ret AND_KILL_FRAME(2)
  2677                                  
  2678                                  L_code_ptr_set_car:
  2679 00001D37 C8000000                        enter 0, 0
  2680 00001D3B 48837D1802                      cmp COUNT, 2
  2681 00001D40 0F856F040000                    jne L_error_arg_count_2
  2682 00001D46 488B4520                        mov rax, PARAM(0)
  2683                                          assert_pair(rax)
    53 00001D4A 803821              <1>  cmp byte [%1], %2
    54 00001D4D 0F8501050000        <1>  jne L_error_incorrect_type
  2684 00001D53 488B5D28                        mov rbx, PARAM(1)
  2685 00001D57 48895801                        mov SOB_PAIR_CAR(rax), rbx
  2686 00001D5B 48B8-                           mov rax, sob_void
  2686 00001D5D [0000000000000000] 
  2687 00001D65 C9                              leave
  2688 00001D66 C22000                          ret AND_KILL_FRAME(2)
  2689                                  
  2690                                  L_code_ptr_set_cdr:
  2691 00001D69 C8000000                        enter 0, 0
  2692 00001D6D 48837D1802                      cmp COUNT, 2
  2693 00001D72 0F853D040000                    jne L_error_arg_count_2
  2694 00001D78 488B4520                        mov rax, PARAM(0)
  2695                                          assert_pair(rax)
    53 00001D7C 803821              <1>  cmp byte [%1], %2
    54 00001D7F 0F85CF040000        <1>  jne L_error_incorrect_type
  2696 00001D85 488B5D28                        mov rbx, PARAM(1)
  2697 00001D89 48895809                        mov SOB_PAIR_CDR(rax), rbx
  2698 00001D8D 48B8-                           mov rax, sob_void
  2698 00001D8F [0000000000000000] 
  2699 00001D97 C9                              leave
  2700 00001D98 C22000                          ret AND_KILL_FRAME(2)
  2701                                  
  2702                                  L_code_ptr_string_ref:
  2703 00001D9B C8000000                        enter 0, 0
  2704 00001D9F 48837D1802                      cmp COUNT, 2
  2705 00001DA4 0F850B040000                    jne L_error_arg_count_2
  2706 00001DAA 488B7D20                        mov rdi, PARAM(0)
  2707                                          assert_string(rdi)
    53 00001DAE 803F03              <1>  cmp byte [%1], %2
    54 00001DB1 0F859D040000        <1>  jne L_error_incorrect_type
  2708 00001DB7 488B7528                        mov rsi, PARAM(1)
  2709                                          assert_integer(rsi)
    53 00001DBB 803E11              <1>  cmp byte [%1], %2
    54 00001DBE 0F8590040000        <1>  jne L_error_incorrect_type
  2710 00001DC4 488B5701                        mov rdx, qword [rdi + 1]
  2711 00001DC8 488B4E01                        mov rcx, qword [rsi + 1]
  2712 00001DCC 4839D1                          cmp rcx, rdx
  2713 00001DCF 0F8D14030000                    jge L_error_integer_range
  2714 00001DD5 4883F900                        cmp rcx, 0
  2715 00001DD9 0F8C0A030000                    jl L_error_integer_range
  2716 00001DDF 8A5C3909                        mov bl, byte [rdi + 1 + 8 + 1 * rcx]
  2717 00001DE3 BF02000000                      mov rdi, 2
  2718 00001DE8 E8D6E6FFFF                      call malloc
  2719 00001DED C60002                          mov byte [rax], T_char
  2720 00001DF0 885801                          mov byte [rax + 1], bl
  2721 00001DF3 C9                              leave
  2722 00001DF4 C22000                          ret AND_KILL_FRAME(2)
  2723                                  
  2724                                  L_code_ptr_vector_ref:
  2725 00001DF7 C8000000                        enter 0, 0
  2726 00001DFB 48837D1802                      cmp COUNT, 2
  2727 00001E00 0F85AF030000                    jne L_error_arg_count_2
  2728 00001E06 488B7D20                        mov rdi, PARAM(0)
  2729                                          assert_vector(rdi)
    53 00001E0A 803F22              <1>  cmp byte [%1], %2
    54 00001E0D 0F8541040000        <1>  jne L_error_incorrect_type
  2730 00001E13 488B7528                        mov rsi, PARAM(1)
  2731                                          assert_integer(rsi)
    53 00001E17 803E11              <1>  cmp byte [%1], %2
    54 00001E1A 0F8534040000        <1>  jne L_error_incorrect_type
  2732 00001E20 488B5701                        mov rdx, qword [rdi + 1]
  2733 00001E24 488B4E01                        mov rcx, qword [rsi + 1]
  2734 00001E28 4839D1                          cmp rcx, rdx
  2735 00001E2B 0F8DB8020000                    jge L_error_integer_range
  2736 00001E31 4883F900                        cmp rcx, 0
  2737 00001E35 0F8CAE020000                    jl L_error_integer_range
  2738 00001E3B 488B44CF09                      mov rax, [rdi + 1 + 8 + 8 * rcx]
  2739 00001E40 C9                              leave
  2740 00001E41 C22000                          ret AND_KILL_FRAME(2)
  2741                                  
  2742                                  L_code_ptr_vector_set:
  2743 00001E44 C8000000                        enter 0, 0
  2744 00001E48 48837D1803                      cmp COUNT, 3
  2745 00001E4D 0F85CC030000                    jne L_error_arg_count_3
  2746 00001E53 488B7D20                        mov rdi, PARAM(0)
  2747                                          assert_vector(rdi)
    53 00001E57 803F22              <1>  cmp byte [%1], %2
    54 00001E5A 0F85F4030000        <1>  jne L_error_incorrect_type
  2748 00001E60 488B7528                        mov rsi, PARAM(1)
  2749                                          assert_integer(rsi)
    53 00001E64 803E11              <1>  cmp byte [%1], %2
    54 00001E67 0F85E7030000        <1>  jne L_error_incorrect_type
  2750 00001E6D 488B5701                        mov rdx, qword [rdi + 1]
  2751 00001E71 488B4E01                        mov rcx, qword [rsi + 1]
  2752 00001E75 4839D1                          cmp rcx, rdx
  2753 00001E78 0F8D6B020000                    jge L_error_integer_range
  2754 00001E7E 4883F900                        cmp rcx, 0
  2755 00001E82 0F8C61020000                    jl L_error_integer_range
  2756 00001E88 488B4530                        mov rax, PARAM(2)
  2757 00001E8C 488944CF09                      mov qword [rdi + 1 + 8 + 8 * rcx], rax
  2758 00001E91 48B8-                           mov rax, sob_void
  2758 00001E93 [0000000000000000] 
  2759 00001E9B C9                              leave
  2760 00001E9C C22800                          ret AND_KILL_FRAME(3)
  2761                                  
  2762                                  L_code_ptr_string_set:
  2763 00001E9F C8000000                        enter 0, 0
  2764 00001EA3 48837D1803                      cmp COUNT, 3
  2765 00001EA8 0F8571030000                    jne L_error_arg_count_3
  2766 00001EAE 488B7D20                        mov rdi, PARAM(0)
  2767                                          assert_string(rdi)
    53 00001EB2 803F03              <1>  cmp byte [%1], %2
    54 00001EB5 0F8599030000        <1>  jne L_error_incorrect_type
  2768 00001EBB 488B7528                        mov rsi, PARAM(1)
  2769                                          assert_integer(rsi)
    53 00001EBF 803E11              <1>  cmp byte [%1], %2
    54 00001EC2 0F858C030000        <1>  jne L_error_incorrect_type
  2770 00001EC8 488B5701                        mov rdx, qword [rdi + 1]
  2771 00001ECC 488B4E01                        mov rcx, qword [rsi + 1]
  2772 00001ED0 4839D1                          cmp rcx, rdx
  2773 00001ED3 0F8D10020000                    jge L_error_integer_range
  2774 00001ED9 4883F900                        cmp rcx, 0
  2775 00001EDD 0F8C06020000                    jl L_error_integer_range
  2776 00001EE3 488B4530                        mov rax, PARAM(2)
  2777                                          assert_char(rax)
    53 00001EE7 803802              <1>  cmp byte [%1], %2
    54 00001EEA 0F8564030000        <1>  jne L_error_incorrect_type
  2778 00001EF0 8A4001                          mov al, byte [rax + 1]
  2779 00001EF3 88443909                        mov byte [rdi + 1 + 8 + 1 * rcx], al
  2780 00001EF7 48B8-                           mov rax, sob_void
  2780 00001EF9 [0000000000000000] 
  2781 00001F01 C9                              leave
  2782 00001F02 C22800                          ret AND_KILL_FRAME(3)
  2783                                  
  2784                                  L_code_ptr_make_vector:
  2785 00001F05 C8000000                        enter 0, 0
  2786 00001F09 48837D1802                      cmp COUNT, 2
  2787 00001F0E 0F85A1020000                    jne L_error_arg_count_2
  2788 00001F14 488B4D20                        mov rcx, PARAM(0)
  2789                                          assert_integer(rcx)
    53 00001F18 803911              <1>  cmp byte [%1], %2
    54 00001F1B 0F8533030000        <1>  jne L_error_incorrect_type
  2790 00001F21 488B4901                        mov rcx, qword [rcx + 1]
  2791 00001F25 4883F900                        cmp rcx, 0
  2792 00001F29 0F8CBA010000                    jl L_error_integer_range
  2793 00001F2F 488B5528                        mov rdx, PARAM(1)
  2794 00001F33 488D3CCD09000000                lea rdi, [1 + 8 + 8 * rcx]
  2795 00001F3B E883E5FFFF                      call malloc
  2796 00001F40 C60022                          mov byte [rax], T_vector
  2797 00001F43 48894801                        mov qword [rax + 1], rcx
  2798 00001F47 41B800000000                    mov r8, 0
  2799                                  .L0:
  2800 00001F4D 4939C8                          cmp r8, rcx
  2801 00001F50 740A                            je .L1
  2802 00001F52 4A8954C009                      mov qword [rax + 1 + 8 + 8 * r8], rdx
  2803 00001F57 49FFC0                          inc r8
  2804 00001F5A EBF1                            jmp .L0
  2805                                  .L1:
  2806 00001F5C C9                              leave
  2807 00001F5D C22000                          ret AND_KILL_FRAME(2)
  2808                                          
  2809                                  L_code_ptr_make_string:
  2810 00001F60 C8000000                        enter 0, 0
  2811 00001F64 48837D1802                      cmp COUNT, 2
  2812 00001F69 0F8546020000                    jne L_error_arg_count_2
  2813 00001F6F 488B4D20                        mov rcx, PARAM(0)
  2814                                          assert_integer(rcx)
    53 00001F73 803911              <1>  cmp byte [%1], %2
    54 00001F76 0F85D8020000        <1>  jne L_error_incorrect_type
  2815 00001F7C 488B4901                        mov rcx, qword [rcx + 1]
  2816 00001F80 4883F900                        cmp rcx, 0
  2817 00001F84 0F8C5F010000                    jl L_error_integer_range
  2818 00001F8A 488B5528                        mov rdx, PARAM(1)
  2819                                          assert_char(rdx)
    53 00001F8E 803A02              <1>  cmp byte [%1], %2
    54 00001F91 0F85BD020000        <1>  jne L_error_incorrect_type
  2820 00001F97 8A5201                          mov dl, byte [rdx + 1]
  2821 00001F9A 488D7909                        lea rdi, [1 + 8 + 1 * rcx]
  2822 00001F9E E820E5FFFF                      call malloc
  2823 00001FA3 C60003                          mov byte [rax], T_string
  2824 00001FA6 48894801                        mov qword [rax + 1], rcx
  2825 00001FAA 41B800000000                    mov r8, 0
  2826                                  .L0:
  2827 00001FB0 4939C8                          cmp r8, rcx
  2828 00001FB3 740A                            je .L1
  2829 00001FB5 4188540009                      mov byte [rax + 1 + 8 + 1 * r8], dl
  2830 00001FBA 49FFC0                          inc r8
  2831 00001FBD EBF1                            jmp .L0
  2832                                  .L1:
  2833 00001FBF C9                              leave
  2834 00001FC0 C22000                          ret AND_KILL_FRAME(2)
  2835                                  
  2836                                  L_code_ptr_numerator:
  2837 00001FC3 C8000000                        enter 0, 0
  2838 00001FC7 48837D1801                      cmp COUNT, 1
  2839 00001FCC 0F85AE010000                    jne L_error_arg_count_1
  2840 00001FD2 488B4520                        mov rax, PARAM(0)
  2841                                          assert_fraction(rax)
    53 00001FD6 803812              <1>  cmp byte [%1], %2
    54 00001FD9 0F8575020000        <1>  jne L_error_incorrect_type
  2842 00001FDF 488B7801                        mov rdi, qword [rax + 1]
  2843 00001FE3 E8E7000000                      call make_integer
  2844 00001FE8 C9                              leave
  2845 00001FE9 C21800                          ret AND_KILL_FRAME(1)
  2846                                          
  2847                                  L_code_ptr_denominator:
  2848 00001FEC C8000000                        enter 0, 0
  2849 00001FF0 48837D1801                      cmp COUNT, 1
  2850 00001FF5 0F8585010000                    jne L_error_arg_count_1
  2851 00001FFB 488B4520                        mov rax, PARAM(0)
  2852                                          assert_fraction(rax)
    53 00001FFF 803812              <1>  cmp byte [%1], %2
    54 00002002 0F854C020000        <1>  jne L_error_incorrect_type
  2853 00002008 488B7809                        mov rdi, qword [rax + 1 + 8]
  2854 0000200C E8BE000000                      call make_integer
  2855 00002011 C9                              leave
  2856 00002012 C21800                          ret AND_KILL_FRAME(1)
  2857                                  
  2858                                  L_code_ptr_is_eq:
  2859 00002015 C8000000                	enter 0, 0
  2860 00002019 48837D1802              	cmp COUNT, 2
  2861 0000201E 0F8591010000            	jne L_error_arg_count_2
  2862 00002024 488B7D20                	mov rdi, PARAM(0)
  2863 00002028 488B7528                	mov rsi, PARAM(1)
  2864 0000202C 4839F7                  	cmp rdi, rsi
  2865 0000202F 746C                    	je .L_eq_true
  2866 00002031 8A17                    	mov dl, byte [rdi]
  2867 00002033 3A16                    	cmp dl, byte [rsi]
  2868 00002035 7572                    	jne .L_eq_false
  2869 00002037 80FA02                  	cmp dl, T_char
  2870 0000203A 7459                    	je .L_char
  2871 0000203C 80FA41                  	cmp dl, T_interned_symbol
  2872 0000203F 7440                    	je .L_interned_symbol
  2873 00002041 80FA42                          cmp dl, T_uninterned_symbol
  2874 00002044 7443                            je .L_uninterned_symbol
  2875 00002046 80FA13                  	cmp dl, T_real
  2876 00002049 742E                    	je .L_real
  2877 0000204B 80FA12                  	cmp dl, T_fraction
  2878 0000204E 7413                    	je .L_fraction
  2879 00002050 80FA11                          cmp dl, T_integer
  2880 00002053 7402                            je .L_integer
  2881 00002055 EB52                    	jmp .L_eq_false
  2882                                  .L_integer:
  2883 00002057 488B4601                        mov rax, qword [rsi + 1]
  2884 0000205B 483B4701                        cmp rax, qword [rdi + 1]
  2885 0000205F 7548                            jne .L_eq_false
  2886 00002061 EB3A                            jmp .L_eq_true
  2887                                  .L_fraction:
  2888 00002063 488B4601                	mov rax, qword [rsi + 1]
  2889 00002067 483B4701                	cmp rax, qword [rdi + 1]
  2890 0000206B 753C                    	jne .L_eq_false
  2891 0000206D 488B4609                	mov rax, qword [rsi + 1 + 8]
  2892 00002071 483B4709                	cmp rax, qword [rdi + 1 + 8]
  2893 00002075 7532                    	jne .L_eq_false
  2894 00002077 EB24                    	jmp .L_eq_true
  2895                                  .L_real:
  2896 00002079 488B4601                	mov rax, qword [rsi + 1]
  2897 0000207D 483B4701                	cmp rax, qword [rdi + 1]
  2898                                  .L_interned_symbol:
  2899                                  	; never reached, because interned_symbols are static!
  2900                                  	; but I'm keeping it in case, I'll ever change
  2901                                  	; the implementation
  2902 00002081 488B4601                	mov rax, qword [rsi + 1]
  2903 00002085 483B4701                	cmp rax, qword [rdi + 1]
  2904                                  .L_uninterned_symbol:
  2905 00002089 4C8B4701                        mov r8, qword [rdi + 1]
  2906 0000208D 4C3B4601                        cmp r8, qword [rsi + 1]
  2907 00002091 7516                            jne .L_eq_false
  2908 00002093 EB08                            jmp .L_eq_true
  2909                                  .L_char:
  2910 00002095 8A5E01                  	mov bl, byte [rsi + 1]
  2911 00002098 3A5F01                  	cmp bl, byte [rdi + 1]
  2912 0000209B 750C                    	jne .L_eq_false
  2913                                  .L_eq_true:
  2914 0000209D 48B8-                   	mov rax, sob_boolean_true
  2914 0000209F [0300000000000000] 
  2915 000020A7 EB0A                    	jmp .L_eq_exit
  2916                                  .L_eq_false:
  2917 000020A9 48B8-                   	mov rax, sob_boolean_false
  2917 000020AB [0200000000000000] 
  2918                                  .L_eq_exit:
  2919 000020B3 C9                      	leave
  2920 000020B4 C22000                  	ret AND_KILL_FRAME(2)
  2921                                  
  2922                                  make_real:
  2923 000020B7 C8000000                        enter 0, 0
  2924 000020BB BF09000000                      mov rdi, (1 + 8)
  2925 000020C0 E8FEE3FFFF                      call malloc
  2926 000020C5 C60013                          mov byte [rax], T_real
  2927 000020C8 F20F114001                      movsd qword [rax + 1], xmm0
  2928 000020CD C9                              leave 
  2929 000020CE C3                              ret
  2930                                          
  2931                                  make_integer:
  2932 000020CF C8000000                        enter 0, 0
  2933 000020D3 4889FE                          mov rsi, rdi
  2934 000020D6 BF09000000                      mov rdi, (1 + 8)
  2935 000020DB E8E3E3FFFF                      call malloc
  2936 000020E0 C60011                          mov byte [rax], T_integer
  2937 000020E3 48897001                        mov qword [rax + 1], rsi
  2938 000020E7 C9                              leave
  2939 000020E8 C3                              ret
  2940                                          
  2941                                  L_error_integer_range:
  2942 000020E9 488B3C25[00000000]              mov rdi, qword [stderr]
  2943 000020F1 48BE-                           mov rsi, fmt_integer_range
  2943 000020F3 [FA09000000000000] 
  2944 000020FB B800000000                      mov rax, 0
  2945                                          ENTER
    44 00002100 C8000000            <1>  enter 0, 0
    45 00002104 4883E4F0            <1>  and rsp, ~15
  2946 00002108 E8(00000000)                    call fprintf
  2947                                          LEAVE
    49 0000210D C9                  <1>  leave
  2948 0000210E 48C7C0FBFFFFFF                  mov rax, -5
  2949 00002115 E8(00000000)                    call exit
  2950                                  
  2951                                  L_error_arg_negative:
  2952 0000211A 488B3C25[00000000]              mov rdi, qword [stderr]
  2953 00002122 48BE-                           mov rsi, fmt_arg_negative
  2953 00002124 [D208000000000000] 
  2954 0000212C B800000000                      mov rax, 0
  2955                                          ENTER
    44 00002131 C8000000            <1>  enter 0, 0
    45 00002135 4883E4F0            <1>  and rsp, ~15
  2956 00002139 E8(00000000)                    call fprintf
  2957                                          LEAVE
    49 0000213E C9                  <1>  leave
  2958 0000213F 48C7C0FDFFFFFF                  mov rax, -3
  2959 00002146 E8(00000000)                    call exit
  2960                                  
  2961                                  L_error_arg_count_0:
  2962 0000214B 488B3C25[00000000]              mov rdi, qword [stderr]
  2963 00002153 48BE-                           mov rsi, fmt_arg_count_0
  2963 00002155 [F808000000000000] 
  2964 0000215D 488B5518                        mov rdx, COUNT
  2965 00002161 B800000000                      mov rax, 0
  2966                                          ENTER
    44 00002166 C8000000            <1>  enter 0, 0
    45 0000216A 4883E4F0            <1>  and rsp, ~15
  2967 0000216E E8(00000000)                    call fprintf
  2968                                          LEAVE
    49 00002173 C9                  <1>  leave
  2969 00002174 48C7C0FDFFFFFF                  mov rax, -3
  2970 0000217B E8(00000000)                    call exit
  2971                                  
  2972                                  L_error_arg_count_1:
  2973 00002180 488B3C25[00000000]              mov rdi, qword [stderr]
  2974 00002188 48BE-                           mov rsi, fmt_arg_count_1
  2974 0000218A [2009000000000000] 
  2975 00002192 488B5518                        mov rdx, COUNT
  2976 00002196 B800000000                      mov rax, 0
  2977                                          ENTER
    44 0000219B C8000000            <1>  enter 0, 0
    45 0000219F 4883E4F0            <1>  and rsp, ~15
  2978 000021A3 E8(00000000)                    call fprintf
  2979                                          LEAVE
    49 000021A8 C9                  <1>  leave
  2980 000021A9 48C7C0FDFFFFFF                  mov rax, -3
  2981 000021B0 E8(00000000)                    call exit
  2982                                  
  2983                                  L_error_arg_count_2:
  2984 000021B5 488B3C25[00000000]              mov rdi, qword [stderr]
  2985 000021BD 48BE-                           mov rsi, fmt_arg_count_2
  2985 000021BF [8609000000000000] 
  2986 000021C7 488B5518                        mov rdx, COUNT
  2987 000021CB B800000000                      mov rax, 0
  2988                                          ENTER
    44 000021D0 C8000000            <1>  enter 0, 0
    45 000021D4 4883E4F0            <1>  and rsp, ~15
  2989 000021D8 E8(00000000)                    call fprintf
  2990                                          LEAVE
    49 000021DD C9                  <1>  leave
  2991 000021DE 48C7C0FDFFFFFF                  mov rax, -3
  2992 000021E5 E8(00000000)                    call exit
  2993                                  
  2994                                  L_error_arg_count_12:
  2995 000021EA 488B3C25[00000000]              mov rdi, qword [stderr]
  2996 000021F2 48BE-                           mov rsi, fmt_arg_count_12
  2996 000021F4 [4609000000000000] 
  2997 000021FC 488B5518                        mov rdx, COUNT
  2998 00002200 B800000000                      mov rax, 0
  2999                                          ENTER
    44 00002205 C8000000            <1>  enter 0, 0
    45 00002209 4883E4F0            <1>  and rsp, ~15
  3000 0000220D E8(00000000)                    call fprintf
  3001                                          LEAVE
    49 00002212 C9                  <1>  leave
  3002 00002213 48C7C0FDFFFFFF                  mov rax, -3
  3003 0000221A E8(00000000)                    call exit
  3004                                  
  3005                                  L_error_arg_count_3:
  3006 0000221F 488B3C25[00000000]              mov rdi, qword [stderr]
  3007 00002227 48BE-                           mov rsi, fmt_arg_count_3
  3007 00002229 [AD09000000000000] 
  3008 00002231 488B5518                        mov rdx, COUNT
  3009 00002235 B800000000                      mov rax, 0
  3010                                          ENTER
    44 0000223A C8000000            <1>  enter 0, 0
    45 0000223E 4883E4F0            <1>  and rsp, ~15
  3011 00002242 E8(00000000)                    call fprintf
  3012                                          LEAVE
    49 00002247 C9                  <1>  leave
  3013 00002248 48C7C0FDFFFFFF                  mov rax, -3
  3014 0000224F E8(00000000)                    call exit
  3015                                          
  3016                                  L_error_incorrect_type:
  3017 00002254 488B3C25[00000000]              mov rdi, qword [stderr]
  3018 0000225C 48BE-                           mov rsi, fmt_type
  3018 0000225E [D609000000000000] 
  3019 00002266 B800000000                      mov rax, 0
  3020                                          ENTER
    44 0000226B C8000000            <1>  enter 0, 0
    45 0000226F 4883E4F0            <1>  and rsp, ~15
  3021 00002273 E8(00000000)                    call fprintf
  3022                                          LEAVE
    49 00002278 C9                  <1>  leave
  3023 00002279 48C7C0FCFFFFFF                  mov rax, -4
  3024 00002280 E8(00000000)                    call exit
  3025                                  
  3026                                  L_error_division_by_zero:
  3027 00002285 488B3C25[00000000]              mov rdi, qword [stderr]
  3028 0000228D 48BE-                           mov rsi, fmt_division_by_zero
  3028 0000228F [170A000000000000] 
  3029 00002297 B800000000                      mov rax, 0
  3030                                          ENTER
    44 0000229C C8000000            <1>  enter 0, 0
    45 000022A0 4883E4F0            <1>  and rsp, ~15
  3031 000022A4 E8(00000000)                    call fprintf
  3032                                          LEAVE
    49 000022A9 C9                  <1>  leave
  3033 000022AA 48C7C0F8FFFFFF                  mov rax, -8
  3034 000022B1 E8(00000000)                    call exit
  3035                                  
  3036                                  section .data
  3037                                  gensym_count:
  3038 000008C7 0000000000000000                dq 0
  3039                                  fmt_char:
  3040 000008CF 256300                          db `%c\0`
  3041                                  fmt_arg_negative:
  3042 000008D2 212121205468652061-             db `!!! The argument cannot be negative.\n\0`
  3042 000008DB 7267756D656E742063-
  3042 000008E4 616E6E6F7420626520-
  3042 000008ED 6E656761746976652E-
  3042 000008F6 0A00               
  3043                                  fmt_arg_count_0:
  3044 000008F8 212121204578706563-             db `!!! Expecting zero arguments. Found %d\n\0`
  3044 00000901 74696E67207A65726F-
  3044 0000090A 20617267756D656E74-
  3044 00000913 732E20466F756E6420-
  3044 0000091C 25640A00           
  3045                                  fmt_arg_count_1:
  3046 00000920 212121204578706563-             db `!!! Expecting one argument. Found %d\n\0`
  3046 00000929 74696E67206F6E6520-
  3046 00000932 617267756D656E742E-
  3046 0000093B 20466F756E64202564-
  3046 00000944 0A00               
  3047                                  fmt_arg_count_12:
  3048 00000946 212121204578706563-             db `!!! Expecting one required and one optional argument. Found %d\n\0`
  3048 0000094F 74696E67206F6E6520-
  3048 00000958 726571756972656420-
  3048 00000961 616E64206F6E65206F-
  3048 0000096A 7074696F6E616C2061-
  3048 00000973 7267756D656E742E20-
  3048 0000097C 466F756E642025640A-
  3048 00000985 00                 
  3049                                  fmt_arg_count_2:
  3050 00000986 212121204578706563-             db `!!! Expecting two arguments. Found %d\n\0`
  3050 0000098F 74696E672074776F20-
  3050 00000998 617267756D656E7473-
  3050 000009A1 2E20466F756E642025-
  3050 000009AA 640A00             
  3051                                  fmt_arg_count_3:
  3052 000009AD 212121204578706563-             db `!!! Expecting three arguments. Found %d\n\0`
  3052 000009B6 74696E672074687265-
  3052 000009BF 6520617267756D656E-
  3052 000009C8 74732E20466F756E64-
  3052 000009D1 2025640A00         
  3053                                  fmt_type:
  3054 000009D6 2121212046756E6374-             db `!!! Function passed incorrect type\n\0`
  3054 000009DF 696F6E207061737365-
  3054 000009E8 6420696E636F727265-
  3054 000009F1 637420747970650A00 
  3055                                  fmt_integer_range:
  3056 000009FA 21212120496E636F72-             db `!!! Incorrect integer range\n\0`
  3056 00000A03 7265637420696E7465-
  3056 00000A0C 6765722072616E6765-
  3056 00000A15 0A00               
  3057                                  fmt_division_by_zero:
  3058 00000A17 212121204469766973-             db `!!! Division by zero\n\0`
  3058 00000A20 696F6E206279207A65-
  3058 00000A29 726F0A00           
  3059                                  fmt_scheme_error_part_1:
  3060 00000A2D 0A2121212054686520-             db `\n!!! The procedure \0`
  3060 00000A36 70726F636564757265-
  3060 00000A3F 2000               
  3061                                  fmt_scheme_error_part_2:
  3062 00000A41 2061736B656420746F-             db ` asked to terminate the program\n`
  3062 00000A4A 207465726D696E6174-
  3062 00000A53 65207468652070726F-
  3062 00000A5C 6772616D0A         
  3063 00000A61 202020207769746820-             db `    with the following message:\n\n\0`
  3063 00000A6A 74686520666F6C6C6F-
  3063 00000A73 77696E67206D657373-
  3063 00000A7C 6167653A0A0A00     
  3064                                  fmt_scheme_error_part_3:
  3065 00000A83 0A0A476F6F64627965-             db `\n\nGoodbye!\n\n\0`
  3065 00000A8C 210A0A00           
